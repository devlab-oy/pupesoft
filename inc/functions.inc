<?php

# for github syntax highlighting
# -*- mode: php;-*-

if (!function_exists("pupesoft_login")) {
  function pupesoft_login($params) {

    $user      = $params['user'];
    $salasana  = $params['salasana'];
    $salamd5   = $params['salamd5'];
    $mikayhtio = $params['mikayhtio'];
    $uusi1     = $params['uusi1'];
    $uusi2     = $params['uusi2'];
    $yhtio     = $params['yhtio'];
    $browkieli = $params['browkieli'];
    $palvelin  = $params['palvelin'];
    $palvelin2 = $params['palvelin2'];
    $mobile    = $params['mobile'];

    $session = "";
    $usea    = 0;

    $return = array(
      'status'  => false,
      'error'   => '',
      'message' => ''
    );

    srand((double) microtime() * 1000000);

    $query = "SELECT kuka.kuka, kuka.session, kuka.salasana, kuka.yhtio
              FROM kuka
              JOIN oikeu ON oikeu.yhtio=kuka.yhtio and oikeu.kuka=kuka.kuka
              where kuka.kuka   = '{$user}'
              and kuka.extranet = ''
              GROUP BY 1,2,3,4";
    $result = pupe_query($query);
    $krow = mysql_fetch_assoc($result);

    if (isset($salamd5) and $salamd5 != '') $vertaa = $salamd5;
    elseif (isset($salasana) and $salasana == '') $vertaa = $salasana;
    else $vertaa = md5(trim($salasana));

    if (mysql_num_rows($result) > 0 and $vertaa == $krow['salasana']) {

      // jos meill‰ on vaan kaks yhtiot‰ ja ollaan tulossa firman vaihdosta, vaihdetaan suoraan toiseen
      if (mysql_num_rows($result) == 2 and isset($mikayhtio) and $mikayhtio != "") {

        mysql_data_seek($result, 0); // ressu alkuun

        while ($vaihdarow = mysql_fetch_assoc($result)) {

          if ($mikayhtio != $vaihdarow["yhtio"]) {
            $krow  = $vaihdarow;
            $yhtio = $vaihdarow["yhtio"];
            $usea  = 0;
          }
        }
      }

      // Onko monta sopivaa k‰ytt‰j‰tietuetta == samalla henkilˆll‰ monta yrityst‰!
      if (mysql_num_rows($result) > 1) {
        $usea = 1;
      }

      if (isset($uusi1) and strlen(trim($uusi1)) > 0) {
        if (trim($uusi1) != trim($uusi2)) {
          $return['error'] = t("Uudet salasanasi olivat erilaiset")."! ".t("Salasanaasi ei vaihdettu")."!";
          $err = 1;
          $usea = 0;
        }
        elseif (strlen(trim($uusi1)) < 6) {
          $return['error'] = t("Uusi salasanasi on liian lyhyt").". ".t("Salasanan pit‰‰ olla v‰hint‰‰n 6 merkki‰ pitk‰").". ".t("Salasanaasi ei vaihdettu")."! ";
          $err = 1;
          $usea = 0;
        }
        elseif (stristr($uusi1, $krow["kuka"])) {
          $return['error'] = t("Salasanasi ei saa sis‰lt‰‰ k‰ytt‰j‰tunnustasi").". ".t("Salasanaasi ei vaihdettu")."!";
          $err = 1;
          $usea = 0;
        }
        else {
          $uusi1 = md5(trim($uusi1));

          $query = "UPDATE kuka
                    SET salasana = '{$uusi1}'
                    WHERE kuka = '{$user}'";
          $result = pupe_query($query);

          $vertaa = trim($uusi1);
          $salasana = trim($uusi2);

          // K‰ytet‰‰n error-indexi‰ t‰m‰n viestin v‰litt‰miseen
          $return['error'] = t("Salasanasi vaihdettiin onnistuneesti")."!";
        }
      }

      // Kaikki ok!
      if (!isset($err) or $err != 1) {

        // Pit‰‰kˆ viel‰ kysy‰ yrityst‰???
        if ($usea != 1 or (isset($yhtio) and strlen($yhtio) > 0)) {

          for ($i = 0; $i < 25; $i++) {
            $session = $session . chr(rand(65, 90)) ;
          }

          $query = "UPDATE kuka
                    SET session = '{$session}',
                    lastlogin  = now()
                    WHERE kuka = '{$user}'";

          if (isset($yhtio) and strlen($yhtio) > 0) $query .= " and yhtio = '{$yhtio}'";
          else $query .= " and yhtio = '{$krow['yhtio']}'";

          $result = pupe_query($query);

          $bool = setcookie("pupesoft_session", $session, time()+43200, "/"); // 12 tuntia voimassa

          if ($bool === FALSE) {
            $return['error'] = t("Selaimesi ei ilmeisesti tue cookieta", $browkieli).".";
          }
          else {

            // katsotaan onko k‰ytt‰j‰ll‰ oletus_ohjelma.. jos on menn‰‰n suoraan siihen.
            $query = "SELECT oletus_ohjelma
                      FROM kuka
                      WHERE session = '{$session}'";
            $result = pupe_query($query);
            $row = mysql_fetch_assoc($result);

            if ($row["oletus_ohjelma"] != "") {

              $oletus_ohjelman_osat = explode("##", $row["oletus_ohjelma"]);

              $palvelin2 .= "?goso={$oletus_ohjelman_osat[0]}&go={$oletus_ohjelman_osat[1]}";

              if ($oletus_ohjelman_osat[2] != "") {
                $palvelin2 .= "?toim={$oletus_ohjelman_osat[2]}";
              }
            }

            // Jos logataan mobiilista
            if ($mobile) {
              $palvelin2 .= "mobiili/index.php";
            }

            echo "<META HTTP-EQUIV='Refresh'CONTENT='0;URL={$palvelin2}'>";
            exit;
          }
        }
      }
    }
    else {
      $return['error'] = t("K‰ytt‰j‰tunnusta ei lˆydy ja/tai salasana on virheellinen", $browkieli)."!";

      // Kirjataan ep‰onnistunut kirjautuminen virhelokiin...
      error_log("user {$user}: authentication failure for \"/pupesoft/\": Password Mismatch", 0);
    }

    if ($usea == 1) {
      $query = "SELECT yhtio.nimi, yhtio.yhtio, IF(yhtio.jarjestys = 0, 9999, yhtio.jarjestys) jarj
                FROM kuka
                JOIN yhtio ON yhtio.yhtio = kuka.yhtio
                WHERE kuka.kuka   = '{$user}'
                AND kuka.extranet = ''
                ORDER BY jarj, yhtio.nimi";
      $result = pupe_query($query);

      while ($yrow = mysql_fetch_assoc($result)) {
        $return['usea'][$yrow['yhtio']] = $yrow['nimi'];
      }
    }

    $return['usea_yhtio'] = $usea;
    $return['vertaa'] = $vertaa;
    $return['salasana'] = $salasana;

    return $return;
  }
}

if (!function_exists("pupe_query")) {
  function pupe_query($query, $link = NULL) {

    if (isset($GLOBALS["pupe_query_debug"]) and $GLOBALS["pupe_query_debug"] > 0) {
      $timeparts = explode(" ", microtime());
      $starttime = $timeparts[1].substr($timeparts[0], 1);
    }

    if (is_resource($link)) {
      $res = mysql_query($query, $link) or pupe_error($query);
    }
    elseif (isset($GLOBALS["pupe_masterdb"]) and $GLOBALS["pupe_masterdb"] > 0) {
      $res = mysql_query($query, $GLOBALS["masterlink"]) or pupe_error($query);
    }
    elseif (isset($GLOBALS["pupe_slavedb"]) and $GLOBALS["pupe_slavedb"] > 0) {
      $res = mysql_query($query, $GLOBALS["slavelink"]) or pupe_error($query);
    }
    else {
      $res = mysql_query($query) or pupe_error($query);
    }

    if (isset($GLOBALS["pupe_query_debug"]) and $GLOBALS["pupe_query_debug"] > 0) {
      $timeparts = explode(" ", microtime());
      $endtime = $timeparts[1].substr($timeparts[0], 1);
      $aika = round($endtime-$starttime, 4);
      $GLOBALS["aika_debug_array"][] = $aika;
      $GLOBALS["quer_debug_array"][] = $query;
    }

    return $res;
  }
}

// K‰ytet‰‰n slavea jos sellainen on
if (!function_exists("pupeslave_start")) {
  function pupeslave_start() {
    if (isset($GLOBALS["slavelink"]) and is_resource($GLOBALS["slavelink"])) {
      $GLOBALS["pupe_slavedb"]++;
    }
  }
}

// Palataan k‰ytt‰m‰‰n oletustietokantalinkki‰
if (!function_exists("pupeslave_stop")) {
  function pupeslave_stop() {
    $GLOBALS["pupe_slavedb"]--;
  }
}

// K‰ytet‰‰n masteria
if (!function_exists("pupemaster_start")) {
  function pupemaster_start() {
    $GLOBALS["pupe_masterdb"]++;
  }
}

// Palataan k‰ytt‰m‰‰n oletustietokantalinkki‰
if (!function_exists("pupemaster_stop")) {
  function pupemaster_stop() {
    $GLOBALS["pupe_masterdb"]--;
  }
}

// n‰in kuollaan mysql errorista...
if (!function_exists("pupe_error")) {
  // otetaan parametriksi query
  function pupe_error($query) {
    // tarvitaan yhtiˆrowta ja kukarowta
    global $yhtiorow, $kukarow, $toim;

    $_display = ini_get("display_errors");
    $_cli = (php_sapi_name() == 'cli');
    $_pupedebug = (isset($GLOBALS["pupe_query_debug"]) and $GLOBALS["pupe_query_debug"] > 0);

    // trimmataan, tabit, rivinvaihdot ja tuplaspacet pois queryst‰..
    $query = trim($query);
    $query = str_replace("\t", " ", $query);
    $query = str_replace("\n", "", $query);
    $query = str_replace("\r", "", $query);
    $query = preg_replace("/  +/", " ", $query);

    $debuggi = array_reverse(debug_backtrace());

    // tehd‰‰n errorimessage
    $puperror = "SQL-ERROR";
    $puperror .= "\n\n";
    $puperror .= "User:   {$kukarow['nimi']} ";
    $puperror .= "({$kukarow['kuka']}) @ {$yhtiorow['nimi']} ({$yhtiorow['yhtio']})";
    $puperror .= "\n\n";

    $nro = 1;
    foreach ($debuggi as $debuggii) {
      $puperror .= "File {$nro}:   {$debuggii['file']}\n";
      $puperror .= "Line {$nro}:   {$debuggii['line']}\n";
      $nro++;
    }

    $puperror .= "\n";
    $puperror .= "Script: {$_SERVER['PHP_SELF']}\n";
    $puperror .= "Toim:   {$toim}\n\n";
    $puperror .= "Error:  ".mysql_error()."\n\n";
    $puperror .= "$query\n\n";

    // L‰hetet‰‰n virheviesti meilitse adminille, jos debug ei ole p‰‰ll‰
    if ($_pupedebug === false) {
      $parametrit = array(
        "to"      => $yhtiorow['admin_email'],
        "subject" => "{$yhtiorow['nimi']} - SQL Error",
        "body"    => $puperror,
      );

      pupesoft_sahkoposti($parametrit);
    }

    if (ob_get_level() > 1) {
      $fleur = ob_get_contents();
      ob_end_clean();
    }
    else {
      $fleur = "";
    }

    // Onko nagios monitor asennettu?
    if (file_exists("/home/nagios/nagios-pupesoft.sh")) {
      $_msg  = "-----------------------------------------------\n";
      $_msg .= "{$fleur}\n";
      $_msg .= "{$puperror}\n";
      $_msg .= "-----------------------------------------------\n";

      file_put_contents("/home/nagios/nagios-pupesoft.log", $_msg, FILE_APPEND);
    }

    if (!$_cli and isset($yhtiorow['css'])) {

      if ($yhtiorow["kayttoliittyma"] == "U") {
        $css = $yhtiorow['css'];
      }
      else {
        $css = $yhtiorow['css_classic'];
      }

      echo "<style type = 'text/css'>";
      echo $css;
      echo "</style>";

      echo "<font class = 'error'>";

      $puperror = htmlentities($puperror, ENT_IGNORE);
    }

    if ($_display == '1' or $_pupedebug !== false) {
      echo nl2br($puperror);
    }
    else {
      echo "Tietokantayhteydess‰ virhe!"; // ƒl‰ t-funktioi t‰t‰.
    }

    // kuollaan pois
    exit(1);
  }
}

// mysql queryn echotus kauniisti
if (!function_exists("query_dump")) {
  // otetaan parametriksi query
  function query_dump($query) {

    // trimmataan, tabit, rivinvaihdot ja tuplaspacet pois queryst‰..
    $query = str_replace("\t", "", $query);
    $query = preg_replace("/ {2,}/", " ", $query);
    $query = preg_replace("/(\n) */", "$1", $query);
    $query = trim($query);

    echo "<pre>";
    echo htmlentities($query, ENT_IGNORE);
    echo "</pre>";
  }
}

if (!function_exists("paivita_aktiiviset_kayttajat")) {
  function paivita_aktiiviset_kayttajat($selkuka = "", $selyhtio = "") {
    global $kukarow;

    $klisa = "";

    if ($selkuka != "") {
      $klisa = " and kuka.kuka = '{$selkuka}' ";
    }

    $ylisa = " kuka.yhtio = '{$kukarow['yhtio']}' ";

    if ($selyhtio != "") {
      $ylisa = " kuka.yhtio = '{$selyhtio}' ";
    }

    $query = "SELECT group_concat(DISTINCT kuka.tunnus) tunnukset
              FROM kuka
              JOIN oikeu ON (oikeu.yhtio = kuka.yhtio AND oikeu.kuka = kuka.kuka)
              WHERE {$ylisa}
              {$klisa}";
    $aktikukares = pupe_query($query);
    $aktikukarow = mysql_fetch_assoc($aktikukares);

    if ($klisa != "") {
      if ($aktikukarow['tunnukset'] != "") {
        $query = "UPDATE kuka
                  SET aktiivinen = 1
                  WHERE {$ylisa}
                  {$klisa}";
        pupe_query($query);
      }
      else {
        $query = "UPDATE kuka
                  SET aktiivinen = 0
                  WHERE {$ylisa}
                  {$klisa}";
        pupe_query($query);
      }
    }
    elseif ($aktikukarow['tunnukset'] != "") {
      $query = "UPDATE kuka
                SET aktiivinen = 1
                WHERE {$ylisa}
                AND tunnus in ({$aktikukarow['tunnukset']})";
      pupe_query($query);

      $query = "UPDATE kuka
                SET aktiivinen = 0
                WHERE {$ylisa}
                AND tunnus not in ({$aktikukarow['tunnukset']})";
      pupe_query($query);
    }
  }
}

// flock lockfilek‰sittely
if (!function_exists("pupesoft_flock")) {
  // otetaan parametriksi query
  function pupesoft_flock(array $params = array()) {
    global $argv, $flock, $backupflock;

    if (php_sapi_name() == 'cli') {
      $scriptname = $argv[0];
    }
    else {
      $scriptname = $_SERVER["PHP_SELF"];
    }

    $scriptname    = basename($scriptname);
    $lockfile      = isset($params["lockfile"]) ? "/tmp/".basename($params["lockfile"]) : "/tmp/##{$scriptname}-flock.lock";
    $error_message = "VIRHE: {$scriptname} flocklock-jumissa! (".date("Y-m-d H:i:s").")\n";
    $locktime      = isset($params["locktime"]) ? $params["locktime"] : 300;
    $filecontent   = isset($params["filecontent"]) ? $params["filecontent"] : '';
    $flockreturn   = isset($params["return"]) ? $params["return"] : FALSE;

    // katotaan, ettei backuppi oo menossa....
    if (file_exists("/tmp/##pupesoft.sh-flock.lock")) {
      $backupflock = fopen("/tmp/##pupesoft.sh-flock.lock", "c");
    }
    else {
      $backupflock = fopen("/tmp/##pupesoft.sh-flock.lock", "w");
      chmod("/tmp/##pupesoft.sh-flock.lock", 0666);
      @chown($lockfile, 'devlab');
      @chgrp($lockfile, 'apache');
    }

    if (! @flock($backupflock, LOCK_SH | LOCK_NB)) {
      if (mktime() - filemtime("/tmp/##pupesoft.sh-flock.lock") >= 14400) {
        // Onko nagios monitor asennettu?
        if (file_exists("/home/nagios/nagios-pupesoft.sh")) {
          file_put_contents("/home/nagios/nagios-pupesoft.log", "VIRHE: pupesoft.sh flocklock-jumissa! (".date("Y-m-d H:i:s").")\n", FILE_APPEND);
        }
      }

      // Ei saatu lukkoa --> false/exit
      if ($flockreturn) return FALSE;
      else exit;
    }
    else {
      flock($backupflock, LOCK_UN);
    }

    if (file_exists($lockfile)) {
      $GLOBALS["flock_fp"] = $flock = fopen($lockfile, "c");
    }
    else {
      $GLOBALS["flock_fp"] = $flock = fopen($lockfile, "w");
      chmod($lockfile, 0666);
      @chown($lockfile, 'devlab');
      @chgrp($lockfile, 'apache');
    }

    if (! @flock($flock, LOCK_EX | LOCK_NB)) {
      if ($locktime > 0 and time() - filemtime($lockfile) >= $locktime) {
        // Onko nagios monitor asennettu?
        if (file_exists("/home/nagios/nagios-pupesoft.sh")) {
          file_put_contents("/home/nagios/nagios-pupesoft.log", $error_message, FILE_APPEND);
        }

        echo $error_message;
      }

      // Ei saatu lukkoa --> false/exit
      if ($flockreturn) return FALSE;
      else exit;
    }
    else {
      touch($lockfile);

      if ($filecontent != "") {
        ftruncate($flock, 0);
        fwrite($flock, $filecontent);
      }

      if ($flockreturn) {
        return TRUE;
      }
    }
  }
}

// Tehd‰‰n REST-kutsuja
if (!function_exists("pupesoft_rest")) {

  function pupesoft_rest($parameters) {

    if (!isset($parameters["method"]) or !in_array($parameters["method"], array("GET", "POST", "PUT", "DELETE"))) {
      return array(FALSE, "Invalid method");
    }

    if (!isset($parameters["data"]) or !is_array($parameters["data"])) {
      return array(FALSE, "Invalid data");
    }

    if (!isset($parameters["url"]) or parse_url($parameters["url"]) === FALSE) {
      return array(FALSE, "Invalid URL");
    }

    if (!isset($parameters["headers"]) or !is_array($parameters["headers"])) {
      $parameters["headers"] = array(  'Accept: application/json',
        'Content-Type: application/json',
      );
    }

    if (!isset($parameters['timeout'])) $timeout = 10;
    else $timeout = (int) $parameters['timeout'];

    if (!isset($parameters['posttype'])) $parameters['posttype'] = null;

    $handle = curl_init();
    curl_setopt($handle, CURLOPT_URL, $parameters["url"]);
    curl_setopt($handle, CURLOPT_HTTPHEADER, $parameters["headers"]);
    curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($handle, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($handle, CURLOPT_SSL_VERIFYPEER, false);

    if ($parameters['posttype'] == 'xml') {
      curl_setopt($handle, CURLOPT_TIMEOUT, $timeout);
    }

    if (isset($parameters["auth_user"]) and isset($parameters["auth_pass"])) {
      curl_setopt($handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
      curl_setopt($handle, CURLOPT_USERPWD, "{$parameters["auth_user"]}:{$parameters["auth_pass"]}");
    }

    if (isset($parameters["cookie"])) {
      curl_setopt($handle, CURLOPT_COOKIE, $parameters["cookie"]);
    }

    switch ($parameters["posttype"]) {
    case "array":
    case "form":
      $post_data = $parameters["data"];
      break;
    case "xml":
      $post_data = $parameters["data"][0];
      break;
    default:
      $post_data = json_encode($parameters["data"]);
    }

    switch ($parameters["method"]) {
    case "GET":
      curl_setopt($handle, CURLOPT_URL, $parameters["url"]."?".http_build_query($parameters["data"]));
      break;
    case "POST":
      curl_setopt($handle, CURLOPT_POST, true);
      curl_setopt($handle, CURLOPT_POSTFIELDS, $post_data);
      break;
    case "PUT":
      curl_setopt($handle, CURLOPT_CUSTOMREQUEST, 'PUT');
      curl_setopt($handle, CURLOPT_POSTFIELDS, $post_data);
      break;
    case "DELETE":
      curl_setopt($handle, CURLOPT_CUSTOMREQUEST, 'DELETE');
      break;
    }

    $response_json = curl_exec($handle);

    switch ($parameters["posttype"]) {
    case "form":
    case "xml":
      $response = $response_json;
      break;
    default:
      $response = json_decode($response_json, true);
    }

    $code = curl_getinfo($handle, CURLINFO_HTTP_CODE);

    return array($code, $response);
  }

}

if (!function_exists("tv1dateconv")) {
  function tv1dateconv($date, $pitka = "", $lyhyt = "") {
    global $laskurow;

    // jos p‰iv‰m‰‰r‰ on virheellinen, palauettaan sellaisenaan
    if (strtotime($date) === false) {
      return $date;
    }

    //k‰‰nt‰‰ mysqln vvvv-kk-pp muodon muotoon pp.kk.vvvv
    //2007-05-09 12:18:18

    if (strlen($date) > 10 and $pitka != "") {
      $jatko = substr($date, 10, 6);
    }
    else {
      $jatko = "";
    }

    if ($date == "0000-00-00" or $date == "0000-00-00 00:00:00" or $date == "") {
      return "";
    }
    elseif (isset($laskurow["maa"]) and $laskurow["maa"] == "SE") {
      if ($lyhyt == "LYHYT") return substr($date, 2, 2)."-". (int) substr($date, 5, 2)."-". (int) substr($date, 8, 2).$jatko;
      else return substr($date, 0, 4)."-".substr($date, 5, 2)."-".substr($date, 8, 2).$jatko;
    }
    else {
      if ($lyhyt == "LYHYT") return (int) substr($date, 8, 2).".". (int) substr($date, 5, 2).".".substr($date, 2, 2).$jatko;
      else return (int) substr($date, 8, 2).".". (int) substr($date, 5, 2).".".substr($date, 0, 4).$jatko;
    }
  }
}

if (!function_exists("lopetus")) {
  function lopetus($lopetus, $meta = "", $palautavainurli = FALSE) {
    global $kukarow, $palvelin2;

    $lopetukset = explode("/SPLIT/", $lopetus);

    $lask = 0;
    $edlopetus = "";

    foreach ($lopetukset as $lopetus) {
      if ($lopetus != "") {

        // Jotta urlin parametrissa voisi p‰‰ss‰t‰ toisen urlin parametreineen
        $lopetus_clean = $lopetus;

        $lopetus = str_replace('////', '?', $lopetus);

        // Otetaan parametrit ja urlenkoodataan ne
        if (preg_match('/\?(.*)/', $lopetus, $paramit)) {
          foreach (explode("//", $paramit[1]) as $para) {
            list($mnimi, $arvo) = explode("=", $para);

            if ($arvo != "") {
              $lopetus = str_replace("$mnimi=$arvo", "$mnimi=".urlencode($arvo), $lopetus);
            }
          }
        }

        $lopetus = preg_replace('/([^:])\/\/\//', '\\1#', $lopetus);
        $lopetus = preg_replace('/([^:])\/\//', '\\1&',   $lopetus);

        preg_match('/\/NIMILISA=(.*?)\//', $lopetus, $nimilisa);
        $lopetus = preg_replace('/\/NIMILISA=(.*?)\//', '',   $lopetus);

        preg_match("/^([^\?&]*)\??/i", $lopetus, $nimi);
        preg_match("/toim=([^&]*)&?/i", $lopetus, $alanimi);

        $nimet = explode("/", str_replace($palvelin2, "", $nimi[1]));

        if (!isset($alanimi[1])) $alanimi[1] = "";

        if ($meta == "") {
          for ($i=0; $i<count($nimet); $i++) {

            $nimi = "";

            for ($j = $i; $j < count($nimet); $j++) {
              $nimi .= $nimet[$j]."/";
            }

            $nimi = substr($nimi, 0, -1);

            $query = "SELECT nimitys
                      FROM oikeu
                      WHERE yhtio = '$kukarow[yhtio]'
                      and kuka    = ''
                      and nimi    = '$nimi'
                      and alanimi = '$alanimi[1]'
                      LIMIT 1";
            $res = pupe_query($query);

            if (mysql_num_rows($res) > 0) {
              $row = mysql_fetch_assoc($res);
              break;
            }
          }
        }

        if ($edlopetus != "") {
          if (strpos($lopetus, "?") === FALSE) {
            $lopetus .= "?";
          }
          else {
            $lopetus .= "&";
          }

          $lopetus .= "lopetus=$edlopetus";
        }

        if ($lask > 0) {
          if (strrpos($lopetus, "#") !== FALSE) {
            preg_match("/(#.*?)[&\?\/$]/", $lopetus, $ankkurimatchi);

            $lopetus = str_replace($ankkurimatchi[1], "", $lopetus).$ankkurimatchi[1];
          }
        }

        if (isset($nimilisa[1]) and $nimilisa[1] != "") {
          $nlisa = " / ".$nimilisa[1];
        }
        else {
          $nlisa = "";
        }

        $row["nimitys"] = trim(str_ireplace("UUSI", "", $row["nimitys"]));

        if ($meta == "") {
          if ($palautavainurli) return $lopetus;
          elseif ($row["nimitys"] != "") echo "<a href='$lopetus'>&laquo; ".t("Palaa ohjelmaan").": ".t("$row[nimitys]")."$nlisa</a><br>";
          else echo "<a href='$lopetus'>&laquo; ".t("Palaa edelliseen n‰kym‰‰n")."</a><br>";
        }

        if ($edlopetus != "") {
          $edlopetus .= "/SPLIT/";
        }

        $edlopetus .= $lopetus_clean;

        $lask++;
      }
    }

    if ($meta != "") {
      echo "<META HTTP-EQUIV='Refresh'CONTENT='0;URL=$lopetus'>";

      require "inc/footer.inc";
      exit;
    }
  }
}

if (!function_exists("tv2dateconv")) {
  function tv2dateconv($date) {
    //k‰‰nt‰‰ mysqln vvvv-kk-pp muodon muotoon vvvvkkpp
    return substr($date, 0, 4).substr($date, 5, 2).substr($date, 8, 2);
  }
}

if (!function_exists("tv3dateconv")) {
  function tv3dateconv($date, $lyhyt = FALSE) {
    //k‰‰nt‰‰ vvvvkkpp muodon muotoon vvvv-kk-pp

    if ($date == "00000000" or $date == "") {
      return "";
    }

    $loppu = "";
    if (!$lyhyt) $loppu = " 00:00:00";

    return substr($date, 0, 4)."-".substr($date, 4, 2)."-".substr($date, 6, 2).$loppu;
  }
}

if (!function_exists("dateconv")) {
  function dateconv($date) {
    //k‰‰nt‰‰ vvkkmm muodon muotoon vv-kk-mm
    return substr($date, 0, 2). "-" . substr($date, 2, 2) . "-". substr($date, 4, 2);
  }
}

if (!function_exists("date2mysql")) {
  function date2mysql($date) {
    //k‰‰nt‰‰ pp.kk.vvvv muodon mysqk muotoon vvvv-kk-mm
    return substr($date, 6, 4)."-".substr($date, 3, 2) . "-".substr($date, 0, 2);
  }
}

if (!function_exists("avoin_kori")) {
  function avoin_kori() {
    global $kukarow, $yhtiorow;

    // n‰ytt‰‰ ostoskori-linkin verkkokaupassa ja tuoteselaushaussa
    if ($kukarow["kuka"] != "www" and $kukarow["kesken"] > 0) {
      $query = "SELECT *
                FROM lasku
                WHERE yhtio = '$kukarow[yhtio]' and tila = 'N' and tunnus = '$kukarow[kesken]'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {
        $laskurow = mysql_fetch_assoc($result);

        $query_ale_lisa = generoi_alekentta('M');

        $query = "SELECT round(sum(tilausrivi.hinta * if ('$yhtiorow[alv_kasittely]' = '' and tilausrivi.alv<500, (1+tilausrivi.alv/100), 1) * (tilausrivi.kpl+tilausrivi.varattu+tilausrivi.jt) * {$query_ale_lisa}),$yhtiorow[hintapyoristys]) summa
                  FROM tilausrivi
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and otunnus  = '$kukarow[kesken]'
                  and tyyppi  != 'D'";
        $result = pupe_query($query);
        $row = mysql_fetch_assoc($result);

        $linkki = "<a href='#' onclick=\"javascript:sndReq('selain', 'verkkokauppa.php?tee=tilatut&osasto=$osasto&try=$try')\"><strong>".t("Ostoskori: Tilaus %s%s, yhteens‰ %s %s", $kieli, $laskurow["tunnus"], " ".$laskurow["viesti"], number_format($row["summa"], 2, ',', ' '), $laskurow["valkoodi"])."</strong></a><br><br>";


        return "<center>$linkki</center>";
      }
    }
  }
}

if (!function_exists("maa")) {
  function maa($code, $kieli="") {
    global $yhtiorow, $kukarow, $verkkokauppa;

    $query = sprintf("SELECT nimi FROM maat where koodi = '%s' LIMIT 1", mysql_real_escape_string(substr($code, 0 , 2)));
    $res = pupe_query($query);
    $maa = mysql_fetch_assoc($res);

    // otetaan pois maa koodi
    if ($kieli == "" and isset($GLOBALS["kieli"])) {
      $kieli = $GLOBALS["kieli"];
    }

    return ucfirst(strtolower(substr(t($maa['nimi'], $kieli), 5)));
  }
}

if (!function_exists("alias")) {
  function alias($stringi, $taulu, $setti = '') {

    // tarvitaan yhtiˆrowta, kukarowta
    global $yhtiorow, $kukarow;

    $hakustringi = $taulu.".".$stringi;

    $aliasquery  = "SELECT selitetark FROM avainsana WHERE yhtio = '$kukarow[yhtio]' and selitetark_2 = '$setti' and selite = '$hakustringi'";
    $aliasresult = pupe_query($aliasquery);

    if (mysql_num_rows($aliasresult) > 0) {
      $aliasrow = mysql_fetch_assoc($aliasresult);

      $stringi = $aliasrow['selitetark'];
    }

    $stringi = t($stringi);

    return $stringi;
  }
}

if (!function_exists("kuuluukovarastoon")) {
  function kuuluukovarastoon($hyllyalue, $hyllynro, $varasto = '', $yhtio = '') {
    global $kukarow, $yhtiorow;

    $varastolisa = "";

    // voidaan zekata onko varastoalue jossain tietyss‰ varastossa...
    if ($varasto != "") {
      $varastolisa = " and tunnus='$varasto'";
    }

    //Jos yhtiˆ tulee parametrin‰ niin katsotaa, ettei se ole ihan mit‰ sattuu
    if ($yhtio != "") {
      $query  = "SELECT GROUP_CONCAT(distinct yhtio) yhtiot
                 from yhtio
                 where yhtio='$kukarow[yhtio]' or (konserni = '$yhtiorow[konserni]' and konserni != '')";
      $pres = pupe_query($query);
      $prow = mysql_fetch_assoc($pres);

      $yhtiot = explode(",", $prow["yhtiot"]);

      if (in_array($yhtio, $yhtiot)) {
        $yhtiolisa = $yhtio;
      }
      else {
        $yhtiolisa = $kukarow["yhtio"];
      }
    }
    else {
      $yhtiolisa = $kukarow["yhtio"];
    }

    $query = "SELECT tunnus
              FROM varastopaikat
              WHERE
              concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0')) and
              concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0')) and
              yhtio = '$yhtiolisa'
              $varastolisa";
    $varcheckres = pupe_query($query);

    if (mysql_num_rows($varcheckres) == 0) {
      return 0;
    }
    else {
      $varcheckrow = mysql_fetch_assoc($varcheckres);
      return $varcheckrow['tunnus'];
    }
  }
}

if (!function_exists("onkotulostusalueita")) {
  function onkotulostusalueita($hyllyalue, $hyllynro, $varasto, $yhtio = '') {
    global $kukarow, $yhtiorow;
    /*
    $varastolisa = "";

    // voidaan zekata onko varastoalue jossain tietyss‰ varastossa...
    if ($varasto != "") {
      $varastolisa = " and tunnus='$varasto'";
    }*/

    //Jos yhtiˆ tulee parametrin‰ niin katsotaa, ettei se ole ihan mit‰ sattuu
    if ($yhtio != "") {
      $query  = "SELECT GROUP_CONCAT(distinct yhtio) yhtiot
                 from yhtio
                 where yhtio='$kukarow[yhtio]' or (konserni = '$yhtiorow[konserni]' and konserni != '')";
      $pres = pupe_query($query);
      $prow = mysql_fetch_assoc($pres);

      $yhtiot = explode(",", $prow["yhtiot"]);

      if (in_array($yhtio, $yhtiot)) {
        $yhtiolisa = $yhtio;
      }
      else {
        $yhtiolisa = $kukarow["yhtio"];
      }
    }
    else {
      $yhtiolisa = $kukarow["yhtio"];
    }

    $query = "SELECT nimi
              FROM varaston_tulostimet
              WHERE concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0'))
              and  concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0'))
              and  yhtio = '$yhtiolisa'
              and varasto ='$varasto'";
    $varcheckres = pupe_query($query);

    if (mysql_num_rows($varcheckres) == 0) {
      return "";
    }
    else {
      $varcheckrow = mysql_fetch_assoc($varcheckres);
      return trim($varcheckrow['nimi']);
    }
  }
}

if (!function_exists("pdf_substr")) {
  function pdf_substr($str, $len, $pdf, $param) {

    for ($s = strlen($str); $s > 0; $s--) {
      if ($pdf->strlen($str, $param) > $len) {
        $str = substr($str, 0, $s);
      }
      else {
        break;
      }
    }

    return $str;
  }
}

if (!function_exists("pdf_fontfit")) {
  function pdf_fontfit($str, $len, $pdf, $param) {

    $ffok = 0;

    if ($pdf->strlen($str, $param) > $len) {

      for ($fkoko = $param["height"]; $fkoko >= 7; $fkoko--) {

        $param["height"] = $fkoko;

        if ($pdf->strlen($str, $param) <= $len) {
          $ffok = 1;
          break;
        }
      }
    }

    if (!$ffok) {
      $str = pdf_substr($str, $len, $pdf, $param);
    }

    return array($str, $param);
  }
}

if (!function_exists("mm_pt")) {
  function mm_pt($millimetreja) {
    $pointseja = round($millimetreja / 0.3527777778, 2);
    return $pointseja;
  }
}

if (!function_exists("pt_mm")) {
  function pt_mm($pointseja) {
    $millimetreja = round($pointseja * 0.3527777778, 2);
    return $millimetreja;
  }
}

if (!function_exists("table_exists")) {
  function table_exists($taulu) {
    global $dbkanta;

    //  Ei kaaduta errorista
    $query = "show tables where tables_in_$dbkanta = '$taulu';";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      return true;
    }
    else {
      return false;
    }
  }
}

if (!function_exists("maventa_invoice_put_file")) {
  function maventa_invoice_put_file($client, $api_keys, $invoice_number, $xmlstring, $kieli, $files_out_resend = array()) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    if (count($files_out_resend) > 0) {
      // T‰ss‰ k‰sitell‰‰n uudelleenl‰hetys
      $files_out = $files_out_resend;
    }
    else {
      $files_out['files']     = array();
      $files_out['filenames'] = array();

      // Finvoice
      $files_out['files'][0]     = base64_encode($xmlstring);
      $files_out['filenames'][0] = "$invoice_number.xml";

      // PDF‰
      $files_out['files'][1]     = base64_encode(tulosta_lasku("LASKU:".$invoice_number, $kieli, "VERKKOLASKU_MAVENTA", "", "", "", ""));
      $files_out['filenames'][1] = "$invoice_number.pdf";
    }

    if ($client === NULL and $api_keys === NULL) {
      // Siirret‰‰n l‰hetysjonoon
      file_put_contents("{$pupe_root_polku}/dataout/maventa_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number-serialized.txt", serialize($files_out));
      return "Lasku siirretty l‰hetysjonoon";
    }
    else {
      // L‰hetet‰‰n lasku
      try {
        $return_value = $client->invoice_put_finvoice($api_keys, $files_out);
        return $return_value->status;
      }
      catch (Exception $exVirhe) {
        // Siirret‰‰n error-kansioon, paitsi jos faili on seill‰ jo ennest‰‰n...
        if (count($files_out_resend) == 0) file_put_contents("{$pupe_root_polku}/dataout/maventa_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number-serialized.txt", serialize($files_out));
        return FALSE;
      }
    }
  }
}

if (!function_exists("ppg_queue")) {
  function ppg_queue($invoice_number, $xmlstring, $kieli) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // Siirret‰‰n l‰hetysjonoon
    file_put_contents("{$pupe_root_polku}/dataout/ppg_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number.xml", $xmlstring);
    return "Lasku siirretty l‰hetysjonoon";
  }
}

if (!function_exists("arvato_queue")) {
  function arvato_queue($invoice_number, $xmlstring, $kieli) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    $arvatotmpfile = tulosta_lasku("LASKU:".$invoice_number, $kieli, "VERKKOLASKU_ARVATO", "", "", "", "");

    // Siirret‰‰n l‰hetysjonoon
    file_put_contents("{$pupe_root_polku}/dataout/arvato_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number.xml", $xmlstring);
    rename($arvatotmpfile, "{$pupe_root_polku}/dataout/arvato_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number.pdf");
    return "Lasku siirretty l‰hetysjonoon";
  }
}

if (!function_exists("talenom_queue")) {
  function talenom_queue($invoice_number, $xmlstring, $kieli) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // Siirret‰‰n l‰hetysjonoon
    file_put_contents("{$pupe_root_polku}/dataout/talenom_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number.xml", $xmlstring);
    return "Lasku siirretty l‰hetysjonoon";
  }
}

if (!function_exists("fitek_queue")) {
  function fitek_queue($fitek_invoice, $fitek_invoicenum, $kieli) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    $fitek_ulos = "";

    // Filenimi
    $fitekzipfile = "laskutus-".$yhtiorow['yhtio']."-invoices-".$fitek_invoicenum."-".md5(uniqid(rand(), true)).".zip";

    // Luodaan temppidirikka jonne tyˆnnet‰‰n t‰n kiekan kaikki fitek-filet
    list($usec, $sec) = explode(' ', microtime());
    mt_srand((float) $sec + ((float) $usec * 100000));
    $fitek_tmpdirnimi = "/tmp/fitek-".md5(uniqid(mt_rand(), true));

    if (mkdir($fitek_tmpdirnimi)) {

      // Kirjoitetaan finvoiceaineisto dirikkaan
      if (!file_put_contents($fitek_tmpdirnimi."/MERCANT.INVOICE.".date("Ymd").".$fitek_invoicenum.xml", $fitek_invoice)) {
        $fitek_ulos .= "Fitek finvoicewrite feilasi!";
      }

      // Luodaan laskupdf:‰
      $fitektmpfile = tulosta_lasku("LASKU:".$fitek_invoicenum, "fi", "VERKKOLASKU_FITEK", "", "", "", "", "");

      // Siirret‰‰n faili fitektemppiin
      if (!rename($fitektmpfile, $fitek_tmpdirnimi."/MERCANT.INVOICE.".date("Ymd").".$fitek_invoicenum.pdf")) {
        $fitek_ulos .= "FITEK tmpmove MERCANT.INVOICE_$fitek_invoicenum.pdf feilas!";
      }

      // Tehd‰‰n fitekzippi
      exec("cd $fitek_tmpdirnimi; zip $fitekzipfile *;");

      // Aineisto l‰hetysjonoon
      exec("cp $fitek_tmpdirnimi/$fitekzipfile {$pupe_root_polku}/dataout/fitek_error/");

      // Poistetaan apix-tmpdir
      #exec("rm -rf $fitek_tmpdirnimi");

      $fitek_ulos .= "Lasku $fitek_invoicenum siirretty l‰hetysjonoon<br>\n";
    }
    else {
      $fitek_ulos .= "FITEK tmpdirrin teko feilas!<br>\n";
    }

    return $fitek_ulos;

      // Kirjoitetaan finvoiceaineisto dirikkaan
    // Siirret‰‰n l‰hetysjonoon
    file_put_contents("{$pupe_root_polku}/dataout/fitek_error/laskutus-$kukarow[yhtio]-".date("Ymd")."-$invoice_number.xml", $xmlstring);
    return "Lasku siirretty l‰hetysjonoon";
  }
}

if (!function_exists("apix_queue")) {
  function apix_queue($apix_finvoice, $apix_invoicenum, $kieli, $liitteet = array()) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    $apix_ulos = "";

    // Filenimi
    $apixzipfile = "Apix_".$yhtiorow['yhtio']."_invoices_".$apix_invoicenum."_".md5(uniqid(rand(), true)).".zip";

    // Luodaan temppidirikka jonne tyˆnnet‰‰n t‰n kiekan kaikki apixfilet
    list($usec, $sec) = explode(' ', microtime());
    mt_srand((float) $sec + ((float) $usec * 100000));
    $apix_tmpdirnimi = "/tmp/apix-".md5(uniqid(mt_rand(), true));

    if (mkdir($apix_tmpdirnimi)) {

      // Kirjoitetaan finvoiceaineisto dirikkaan
      if (!file_put_contents($apix_tmpdirnimi."/Apix_finvoice_$apix_invoicenum.xml", $apix_finvoice)) {
        $apix_ulos .= "APIX finvoicewrite feilasi!";
      }

      // Luodaan laskupdf:‰
      $apixtmpfile = tulosta_lasku("LASKU:".$apix_invoicenum, $kieli, "VERKKOLASKU_APIX", "", "", "", "");

      // Siirret‰‰n faili apixtemppiin
      if (!rename($apixtmpfile, $apix_tmpdirnimi."/Apix_invoice_$apix_invoicenum.pdf")) {
        $apix_ulos .= "APIX tmpmove Apix_invoice_$apix_invoicenum.pdf feilas!";
      }

      if (!empty($liitteet)) {
        $attachment_dir = "{$apix_tmpdirnimi}/attachments";

        mkdir($attachment_dir);

        foreach ($liitteet as $filename => $data) {
          file_put_contents("{$attachment_dir}/{$filename}", $data);
        }

        exec("cd {$apix_tmpdirnimi}; zip Apix_attachments_{$apix_invoicenum}.zip attachments/*;");

        exec("rm -rf {$attachment_dir}");
      }

      // Tehd‰‰n apixzippi
      exec("cd $apix_tmpdirnimi; zip $apixzipfile *;");

      // Aineisto l‰hetysjonoon
      exec("cp $apix_tmpdirnimi/$apixzipfile {$pupe_root_polku}/dataout/apix_error/");

      // Poistetaan apix-tmpdir
      exec("rm -rf $apix_tmpdirnimi");

      $apix_ulos .= "Lasku $apix_invoicenum siirretty l‰hetysjonoon<br>\n";
    }
    else {
      $apix_ulos .= "APIX tmpdirrin teko feilas!<br>\n";
    }

    return $apix_ulos;
  }
}

if (!function_exists("apix_invoice_put_file")) {
  function apix_invoice_put_file($apixzipfile, $apix_invoicenum) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // siirret‰‰n laskutiedosto operaattorille
    //$url           = "https://test-api.apix.fi/invoices";
    $url             = "https://api.apix.fi/invoices";
    $transferkey     = $yhtiorow['apix_avain'];
    $transferid      = $yhtiorow['apix_tunnus'];
    $software        = "Pupesoft";
    $version         = "1.0";

    if ($yhtiorow["finvoice_versio"] == "2") {
      $version       = "1.1";
    }

    $timestamp       = gmdate("YmdHis");
    $apix_ulos       = "";
    $apixerrorreport = "";

    // Filen koko ja pointteri siihen
    $apixfilesize = filesize("{$pupe_root_polku}/dataout/apix_error/$apixzipfile");
    $apix_fh = fopen("{$pupe_root_polku}/dataout/apix_error/$apixzipfile", 'r');

    // Siirret‰‰n aineisto APIXiin
    $digest_src = $software."+".$version."+".$transferid."+".$timestamp."+".$transferkey;
    $dt = substr(hash('sha256', $digest_src), 0, 64);

    $real_url = "$url?soft=$software&ver=$version&TraID=$transferid&t=$timestamp&d=SHA-256:$dt";

    $ch = curl_init($real_url);
    curl_setopt($ch, CURLOPT_PUT, true);
    curl_setopt($ch, CURLOPT_INFILE, $apix_fh);
    curl_setopt($ch, CURLOPT_INFILESIZE, $apixfilesize);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

    $apix_ulos .= "L‰hetet‰‰n aineisto APIX:lle...<br>\n";
    $response = curl_exec($ch);

    curl_close($ch);
    fclose($apix_fh);

    $xml = simplexml_load_string($response);

    if ($xml->Status == "OK") {
      $apix_ulos .= t("APIX-laskun %s l‰hetys onnistui", "", $apix_invoicenum)."!";
    }
    else {
      $apix_ulos .= "Laskun $apix_invoicenum l‰hetys ep‰onnistui:<br>\n";
      $apix_ulos .= "Tila: ".$xml->Status."<br>\n";
      $apix_ulos .= "Tilakoodi: ".$xml->StatusCode."<br>\n";

      // Rakennetaan s‰hkˆpostiin l‰hetett‰v‰ virheviesti
      $apixerrorreport .= t("APIX-laskun %s l‰hetys ep‰onnistui", "", $apix_invoicenum)."!\n";
      $apixerrorreport .= t("L‰hetetyn tiedoston nimi").": $apixzipfile \n\n";
      $apixerrorreport .= utf8_decode($xml->FreeText[1])."\n\n";
      $apixerrorreport .= utf8_decode($xml->Value[0])."\n\n";

      // Laitetaan s‰hkˆposti admin osoitteeseen siin‰ tapauksessa,
      // jos talhal tai alert email osoitteita ei ole kumpaakaan setattu
      $error_email = $yhtiorow["admin_email"];

      if (isset($yhtiorow["talhal_email"]) and $yhtiorow["talhal_email"] != "") {
        $error_email = $yhtiorow["talhal_email"];
      }
      elseif (isset($yhtiorow["alert_email"]) and $yhtiorow["alert_email"] != "") {
        $error_email = $yhtiorow["alert_email"];
      }

      $params = array(
        "to"      => $error_email,
        "subject" => t("APIX-laskun %s l‰hetys ep‰onnistui", "", $apix_invoicenum),
        "ctype"   => "text",
        "body"    => $apixerrorreport,
        "attachements"  => array(0 => array(
            "filename"    => "{$pupe_root_polku}/dataout/apix_error/$apixzipfile",
            "newfilename" => ""))
      );

      pupesoft_sahkoposti($params);

      foreach ($xml->FreeText as $teksti) {
        $apix_ulos .= "Tilaviesti: ".$teksti."<br>\n";
      }
    }

    if (!empty($xml->Status)) {
      // Siirret‰‰n dataout kansioon jos Apixilta on saatu jokin vastaus
      rename("{$pupe_root_polku}/dataout/apix_error/$apixzipfile", "{$pupe_root_polku}/dataout/$apixzipfile");
    }

    return $apix_ulos;
  }
}

if (!function_exists("apix_edi_put_file")) {
  function apix_edi_put_file($apixzipfile, $apix_ordernum) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // siirret‰‰n laskutiedosto operaattorille
    // $url           = "https://test-api.apix.fi/invoices";
    $url             = "https://api.apix.fi/invoices";
    $transferkey     = $yhtiorow['apix_edi_avain'];
    $transferid      = $yhtiorow['apix_edi_tunnus'];
    $software        = "PupesoftEDI";
    $version         = "1.0";

    $timestamp       = gmdate("YmdHis");
    $apix_ulos       = "";
    $apixerrorreport = "";

    // Filen koko ja pointteri siihen
    $apixfilesize = filesize("{$pupe_root_polku}/dataout/apix_error/$apixzipfile");
    $apix_fh = fopen("{$pupe_root_polku}/dataout/apix_error/$apixzipfile", 'r');

    // Siirret‰‰n aineisto APIXiin
    $digest_src = $software."+".$version."+".$transferid."+".$timestamp."+".$transferkey;
    $dt = substr(hash('sha256', $digest_src), 0, 64);

    $real_url = "$url?soft=$software&ver=$version&TraID=$transferid&t=$timestamp&d=SHA-256:$dt";

    $ch = curl_init($real_url);
    curl_setopt($ch, CURLOPT_PUT, true);
    curl_setopt($ch, CURLOPT_INFILE, $apix_fh);
    curl_setopt($ch, CURLOPT_INFILESIZE, $apixfilesize);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

    $apix_ulos .= "L‰hetet‰‰n aineisto APIX:lle...<br>\n";
    $response = curl_exec($ch);

    curl_close($ch);
    fclose($apix_fh);

    $xml = simplexml_load_string($response);

    if ($xml->Status == "OK") {
      $apix_ulos .= t("APIX-EDI %s l‰hetys onnistui", "", $apix_ordernum)."!";
    }
    else {
      $apix_ulos .= "EDI $apix_ordernum l‰hetys ep‰onnistui:<br>\n";
      $apix_ulos .= "Tila: ".$xml->Status."<br>\n";
      $apix_ulos .= "Tilakoodi: ".$xml->StatusCode."<br>\n";

      // Rakennetaan s‰hkˆpostiin l‰hetett‰v‰ virheviesti
      $apixerrorreport .= t("APIX-EDI %s l‰hetys ep‰onnistui", "", $apix_ordernum)."!\n";
      $apixerrorreport .= t("L‰hetetyn tiedoston nimi").": $apixzipfile \n\n";
      $apixerrorreport .= utf8_decode($xml->FreeText[1])."\n\n";
      $apixerrorreport .= utf8_decode($xml->Value[0])."\n\n";

      // Laitetaan s‰hkˆposti admin osoitteeseen siin‰ tapauksessa,
      // jos talhal tai alert email osoitteita ei ole kumpaakaan setattu
      $error_email = $yhtiorow["admin_email"];

      if (isset($yhtiorow["talhal_email"]) and $yhtiorow["talhal_email"] != "") {
        $error_email = $yhtiorow["talhal_email"];
      }
      elseif (isset($yhtiorow["alert_email"]) and $yhtiorow["alert_email"] != "") {
        $error_email = $yhtiorow["alert_email"];
      }

      $params = array(
        "to"      => $error_email,
        "subject" => t("APIX-EDI %s l‰hetys ep‰onnistui", "", $apix_ordernum),
        "ctype"   => "text",
        "body"    => $apixerrorreport,
        "attachements"  => array(0 => array(
            "filename"    => "{$pupe_root_polku}/dataout/apix_error/$apixzipfile",
            "newfilename" => ""))
      );

      pupesoft_sahkoposti($params);

      foreach ($xml->FreeText as $teksti) {
        $apix_ulos .= "Tilaviesti: ".$teksti."<br>\n";
      }
    }

    if (!empty($xml->Status)) {
      // Siirret‰‰n dataout kansioon jos Apixilta on saatu jokin vastaus
      rename("{$pupe_root_polku}/dataout/apix_error/$apixzipfile", "{$pupe_root_polku}/dataout/$apixzipfile");
    }

    return $apix_ulos;
  }
}

if (!function_exists("hae_liitteet_verkkolaskuun")) {
  function hae_liitteet_verkkolaskuun($verkkolaskuoperaattori, $tilausnumerot) {
    global $kukarow;

    $liitetiedostotyypit_result = t_avainsana("TIL-LITETY", "", "AND selitetark_2 LIKE '%{$verkkolaskuoperaattori}%'");

    $kayttotarkoitukset = array();

    while ($liitetiedostotyyppi = mysql_fetch_assoc($liitetiedostotyypit_result)) {
      $kayttotarkoitukset[] = "'{$liitetiedostotyyppi["selite"]}'";
    }

    if (empty($kayttotarkoitukset)) return array();

    $kayttotarkoitukset = implode(",", $kayttotarkoitukset);

    $query = "SELECT filename, data
              FROM liitetiedostot
              WHERE yhtio         = '{$kukarow["yhtio"]}'
              AND liitos          = 'lasku'
              AND liitostunnus    IN ({$tilausnumerot})
              AND kayttotarkoitus IN ({$kayttotarkoitukset})";

    $result = pupe_query($query);

    $liitetiedostot = array();

    while ($liitetiedosto = mysql_fetch_assoc($result)) {
      $filename    = $liitetiedosto["filename"];
      $filename    = explode(".", $filename);
      $filename[0] = "{$filename[0]}-" . md5(uniqid(rand(), true));
      $filename    = implode(".", $filename);

      $liitetiedostot[$filename] = $liitetiedosto["data"];
    }

    return $liitetiedostot;
  }
}

if (!function_exists("vapauta_sarjanumerot")) {
  function vapauta_sarjanumerot($toim, $tilausnumero, $lisa="") {
    global $kukarow, $yhtiorow;

    $query = "SELECT tilausrivi.tyyppi,
              tilausrivi.tunnus,
              (tilausrivi.varattu+tilausrivi.jt) varattu,
              tilausrivi.tuoteno,
              tuote.sarjanumeroseuranta,
              tilausrivin_lisatiedot.tilausrivilinkki
              FROM tilausrivi use index (yhtio_otunnus)
              JOIN tuote ON tuote.yhtio=tilausrivi.yhtio and tuote.tuoteno=tilausrivi.tuoteno and tuote.sarjanumeroseuranta!=''
              LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
              WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
              and tilausrivi.otunnus = '$tilausnumero'
              $lisa ";
    $sres = pupe_query($query);

    while ($srow = mysql_fetch_assoc($sres)) {

      if ($toim == "SIIRTOLISTA" or $toim == "SIIRTOTYOMAARAYS") {
        // merktaan siirtolistatunnus nollaks
        $query = "UPDATE sarjanumeroseuranta set siirtorivitunnus = 0 WHERE yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and siirtorivitunnus='$srow[tunnus]'";
        pupe_query($query);
      }
      elseif ($srow["varattu"] < 0) {
        // dellataan koko rivi jos sit‰ ei ole viel‰ myyty
        $query = "DELETE from sarjanumeroseuranta where yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and ostorivitunnus='$srow[tunnus]' and myyntirivitunnus=0";
        pupe_query($query);

        if (mysql_affected_rows() == 0) {
          // merkataan osorivitunnus nollaksi
          $query = "UPDATE sarjanumeroseuranta set ostorivitunnus=0 WHERE yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and ostorivitunnus='$srow[tunnus]'";
          pupe_query($query);
        }
      }
      else {
        if ($srow["tyyppi"] == "W") {
          // Poistetaan valmistusrivin sarjanumero poiston yhteydess‰
          $query = "DELETE FROM sarjanumeroseuranta
                    WHERE yhtio          = '$kukarow[yhtio]'
                    AND tuoteno          = '$srow[tuoteno]'
                    AND ostorivitunnus   = '$srow[tunnus]'
                    AND myyntirivitunnus = 0";
          pupe_query($query);
        }
        else {
          // merkataan myyntirivitunnus nollaks
          if ($srow["sarjanumeroseuranta"] == "E" or $srow["sarjanumeroseuranta"] == "F" or $srow["sarjanumeroseuranta"] == "G") {
            $query = "DELETE FROM sarjanumeroseuranta
                      WHERE yhtio          = '$kukarow[yhtio]'
                      and tuoteno          = '$srow[tuoteno]'
                      and myyntirivitunnus = '$srow[tunnus]'";
            pupe_query($query);
          }
          else {
            $query = "UPDATE sarjanumeroseuranta
                      SET myyntirivitunnus = 0
                      WHERE yhtio          = '$kukarow[yhtio]'
                      and tuoteno          = '$srow[tuoteno]'
                      and myyntirivitunnus = '$srow[tunnus]'";
            pupe_query($query);
          }
        }
      }
    }
  }
}

if (!function_exists("viikonpaiva")) {
  function viikonpaiva($day="", $now="") {

    $now = $now ? $now : "now";
    $day = $day ? $day : "now";

    $rel = date("N", strtotime($day)) - date("N");

    $time = strtotime("$rel days", strtotime($now));

    return date("Y-m-d", $time);

  }
}

if (!function_exists("tuoteperhe_myytavissa")) {
  function tuoteperhe_myytavissa($tuoteno, $summaus, $tyyppi = '', $varasto = 0, $yhtio = '', $hyllyalue = '', $hyllynro = '', $hyllyvali = '', $hyllytaso = '', $maa = '', $pvm = '', $era = '') {
    global $kukarow, $yhtiorow;

    if ($yhtio == "") {
      $yhtio = $kukarow["yhtio"];
    }

    if (is_array($varasto) and count($varasto) > 0) {
      $varasto = implode(",", $varasto);
    }
    else {
      $varasto = (int) $varasto;

      if ($kukarow["extranet"] != "" and $varasto == 0 and (int) $kukarow["varasto"] > 0) {
        $varasto = $kukarow['varasto'];
      }
    }

    $valinta1 = ""; // varaston tyyppi
    $valinta2 = ""; // varaston tunnukset
    $valinta3 = "";

    // katotaan ollaanko annettu parametriksi joku tietty varastotyyppi
    if ($tyyppi == "E") {
      $valinta1 = " and varastopaikat.tyyppi = 'E' ";
      $valinta3 = " HAVING varastopaikat.tyyppi is not null ";
    }
    elseif ($tyyppi == "V") {
      $valinta1 = " and varastopaikat.tyyppi = 'V' ";
      $valinta3 = " HAVING varastopaikat.tyyppi is not null ";
    }
    elseif ($tyyppi == "KAIKKI") {
      $valinta1 = "";
      $valinta3 = "";
    }
    elseif ($tyyppi == "ORVOT") {
      $valinta1 = "";
      $valinta3 = " HAVING varastopaikat.tyyppi is null ";
    }
    else {
      $valinta1 = " and varastopaikat.tyyppi = '' ";
      $valinta3 = " HAVING varastopaikat.tyyppi is not null ";
    }

    // Katotaan halutaanko saldo vaan jostain tietyst‰ varastosta (varastopaikat.tunnus), silloin unohdetaan edell‰ annettu tyyppi kokonaan
    if ($varasto != 0) {
      $valinta2 = " and tuotepaikat.varasto in ($varasto) ";
      $valinta3 = " HAVING varastopaikat.tyyppi is not null ";
    }

    $query = "SELECT *
              from tuote
              where tuote.yhtio = '$yhtio'
              and tuote.tuoteno = '$tuoteno'";
    $asires = pupe_query($query);
    $asirow = mysql_fetch_assoc($asires);

    if (!function_exists("tuoteperhe_myytavissa_reku")) {
      function tuoteperhe_myytavissa_reku($yhtio, $tuoteno, $tuotteet, $tuotteet_str, $isat_array, $kaikki_array, $kerroin_array) {
        if (!in_array($tuoteno, $isat_array)) {
          $isat_array[] = $tuoteno;

          $query = "SELECT distinct tuote.tuoteno, tuoteperhe.kerroin, tuote.ei_saldoa
                    from tuoteperhe
                    join tuote on tuoteperhe.yhtio = tuote.yhtio and tuoteperhe.tuoteno = tuote.tuoteno
                    where tuoteperhe.yhtio = '$yhtio'
                    and isatuoteno         = '$tuoteno'
                    and tyyppi             in ('','P')";
          $isiresult = pupe_query($query);

          while ($isirow = mysql_fetch_assoc($isiresult)) {

            $kaikki_array[]  = $isirow["tuoteno"];
            $kerroin_array[] = $tuoteno."#!°!#".$isirow["kerroin"];

            $mikaisa = $isirow["tuoteno"];
            $tmp_kaikki_array = $kaikki_array;
            $tmp_kerroin_array = $kerroin_array;

            krsort($tmp_kaikki_array);
            krsort($tmp_kerroin_array);

            $isirow["kerroin"] = 1;

            // Lasketaan kerroin rekursiivisesti taaksep‰in
            foreach ($tmp_kerroin_array as $ke_ind => $ke_kerr) {
              list($ker_isa, $ke_ker) = explode("#!°!#", $ke_kerr);

              if ($ke_ker <= 0) {
                $ke_ker = 1;
              }

              if ($mikaisa == $tmp_kaikki_array[$ke_ind]) {
                $mikaisa = $ker_isa;
                $isirow["kerroin"] *= $ke_ker;
              }
            }

            if ($isirow["ei_saldoa"] == "") {
              $tuotteet[$isirow["tuoteno"]] = $isirow["kerroin"];
              $tuotteet_str          .= "'".$isirow["tuoteno"]."',";
            }
          }
        }

        return array($isat_array, $kaikki_array, $tuotteet, $tuotteet_str, $kerroin_array);
      }
    }

    $tuotteet = array();

    if ($asirow["ei_saldoa"] == "") {
      $tuotteet[$tuoteno] = 1;
      $tuotteet_str     = "'".$tuoteno."',";
    }
    else {
      $tuotteet_str     = "'',";
    }

    $riikoko     = 1;
    $isat_array   = array();
    $kaikki_array   = array($tuoteno);
    $kerroin_array   = array($tuoteno."#!°!#1");

    for ($isa=0; $isa < $riikoko; $isa++) {
      list($isat_array, $kaikki_array, $tuotteet, $tuotteet_str, $kerroin_array) = tuoteperhe_myytavissa_reku($yhtio, $kaikki_array[$isa], $tuotteet, $tuotteet_str, $isat_array, $kaikki_array, $kerroin_array);

      if ($yhtiorow["rekursiiviset_tuoteperheet"] == "Y") {
        $riikoko = count($kaikki_array);
      }
    }

    $tuotteet_str = substr($tuotteet_str, 0, -1);

    $query = "SELECT distinct varastopaikat.tunnus, varastopaikat.nimitys, varastopaikat.tyyppi, tuotepaikat.oletus
              FROM tuote
              JOIN tuotepaikat ON (tuotepaikat.yhtio = tuote.yhtio
                AND tuotepaikat.tuoteno   = tuote.tuoteno
                $valinta2)
              JOIN varastopaikat ON (varastopaikat.yhtio = tuotepaikat.yhtio
                AND varastopaikat.tunnus  = tuotepaikat.varasto
                $valinta1)
              WHERE tuote.yhtio           = '$yhtio'
              and tuote.tuoteno           IN ($tuotteet_str)
              and tuote.tuoteno          != ''
              $valinta3
              ORDER BY tuotepaikat.oletus DESC, varastopaikat.nimitys";
    $varresult = pupe_query($query);

    $varasto_myytavissa = array();

    if ($summaus == "KAIKKI") {
      $perhe_myytavissa = array();
    }

    while ($saldorow = mysql_fetch_assoc($varresult)) {

      if ($summaus != "KAIKKI") {
        $perhe_myytavissa = array();
      }

      foreach ($tuotteet as $tuoteno => $kerroin) {

        list(, , $myytavissa) = saldo_myytavissa($tuoteno, $tyyppi, $saldorow["tunnus"], $yhtio, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $maa, $pvm, $era);

        if (!isset($perhe_myytavissa[$tuoteno])) {
          $perhe_myytavissa[$tuoteno] = 0;
        }

        $perhe_myytavissa[$tuoteno] += round($myytavissa/$kerroin, 2);
      }

      if ($summaus != "KAIKKI") {
        arsort($perhe_myytavissa);
        $varasto_myytavissa[$saldorow["nimitys"]] = array_pop($perhe_myytavissa);
      }
    }

    if ($summaus == "KAIKKI") {
      arsort($perhe_myytavissa);
      $varasto_myytavissa["KAIKKI"] = array_pop($perhe_myytavissa);
    }

    return $varasto_myytavissa;
  }
}

if (!function_exists("var_kaannos")) {
  function var_kaannos($var) {

    switch ($var) {
    case "J":
      return t("J‰lkitoim");
    case "H":
      return t("Hyv‰ksy");
    case "P":
      return t("Puute");
    default:
      return "";
    }
  }
}

if (!function_exists("saldo_myytavissa")) {
  function saldo_myytavissa($tuoteno, $tyyppi = '', $varasto = 0, $yhtio = '', $hyllyalue = '', $hyllynro = '', $hyllyvali = '', $hyllytaso = '', $maa = '', $pvm = '', $era = '', $tulevaisuuteen = TRUE) {

    // T‰m‰ funktio palauttaa myyt‰viss‰ olevan saldon sallituista varastoista (tyyppi='')
    // Laskuttamattomia hyvityksi‰ ei katsota myyt‰viksi vaan ne pit‰‰ laskuttaa ennenkuin n‰kyv‰t t‰‰ll‰ (varattu > 0)
    global $kukarow, $yhtiorow;

    // Myyt‰viss‰m‰‰r‰ lasketaan ker‰yspvm:n mukaan niin, ett‰ tulevat tapahtumat vaikuttavat t‰m‰n hetken myyt‰viss‰m‰‰r‰‰n
    if ($yhtiorow["saldo_kasittely"] == "U" and $tulevaisuuteen) {

      if (empty($pvm)) {
        $pvm = date("Y-m-d");
      }

      list($saldo, $hyllyssa, $myytavissa) = saldo_myytavissa($tuoteno, $tyyppi, $varasto, $yhtio, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $maa, $pvm, $era, FALSE);

      $query  = "SELECT distinct tuoteno, kerayspvm
                 FROM tilausrivi use index (yhtio_tyyppi_tuoteno_kerayspvm)
                 WHERE tilausrivi.yhtio    = '{$kukarow["yhtio"]}'
                 and tilausrivi.tyyppi     in ('L','E','G','V','W','M','O')
                 and tilausrivi.varattu + tilausrivi.jt != 0
                 and tilausrivi.tuoteno    = '$tuoteno'
                 and tilausrivi.kerayspvm  > '$pvm'
                 and tilausrivi.var       != 'P'
                 ORDER BY kerayspvm";
      $kerres = pupe_query($query);

      while ($kerrow = mysql_fetch_assoc($kerres)) {
        list( , , $myyta) = saldo_myytavissa($tuoteno, $tyyppi, $varasto, $yhtio, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $maa, $kerrow['kerayspvm'], $era, FALSE);

        if ($myyta < $myytavissa) {
          $myytavissa = $myyta;
        }
      }

      return array($saldo, $hyllyssa, $myytavissa, TRUE);
    }

    $varaako_jt_saldoa = "";

    if ($tyyppi == "JTSPEC" and $yhtiorow["varaako_jt_saldoa"] != "") {
      // JT-rivit varaavat saldoa, mutta nyt ei haluta huomioida niit‰
      $varaako_jt_saldoa = " and tilausrivi.var != 'J' ";
      $tyyppi = "";
    }
    elseif ($tyyppi == "JTSPEC2" and $yhtiorow["varaako_jt_saldoa"] != "") {
      // JT-rivit varaavat saldoa, mutta nyt halutaan huomioida VAIN tulevaisuudessa toimitettavat JT-rivit
      $varaako_jt_saldoa = " and (tilausrivi.var != 'J' or (tilausrivi.var = 'J' and tilausrivi.kerayspvm > CURDATE())) ";
      $tyyppi = "";
    }

    if (is_array($varasto) and count($varasto) > 0) {
      $varasto = implode(",", $varasto);
    }
    elseif (!is_array($varasto) and strpos($varasto, "##") !== FALSE) {
      list($varasto, $keraysvyohyke) = explode("##", $varasto);

      $varasto      = (int) $varasto;
      $keraysvyohyke = (int) $keraysvyohyke;
    }
    else {
      $varasto = (int) $varasto;

      if ($kukarow["extranet"] != "" and $varasto == 0 and (int) $kukarow["varasto"] > 0) {
        $varasto = $kukarow['varasto'];
      }
    }

    $query  = "SELECT *
               FROM tuote
               WHERE yhtio = '$kukarow[yhtio]'
               AND tuoteno = '$tuoteno'";
    $result = pupe_query($query);
    $tuote  = mysql_fetch_assoc($result);

    if (mysql_num_rows($result) == 0) {
      $saldo      = FALSE;
      $hyllyssa    = FALSE;
      $myytavissa    = FALSE;
    }
    elseif ($tuote["ei_saldoa"] != "") {
      $saldo      = 0;
      $hyllyssa    = 0;
      $myytavissa    = 0;
    }
    else {
      if ($yhtio != "" and $yhtio != $kukarow["yhtio"]) {
        // Jos yhtiˆ tulee parametrin‰ niin katsotaan, ettei se ole ihan mit‰ sattuu ja lasketaan sen yhtiˆn saldo
        $query  = "SELECT yhtio
                   FROM yhtio
                   WHERE konserni  = '$yhtiorow[konserni]'
                   AND konserni   != ''
                   AND yhtio       = '$yhtio'";
        $result = pupe_query($query);

        if (mysql_num_rows($result) == 1) {
          $yhtiolisa = $yhtio;
        }
        else {
          $yhtiolisa = $kukarow["yhtio"];
        }
      }
      else {
        $yhtiolisa = $kukarow["yhtio"];
      }

      $valinta1 = ""; // varaston tyyppi
      $valinta2 = ""; // tietty varastopaikka special case
      $valinta3 = ""; // p‰‰tet‰‰n joinin stricteys
      $kvjoini  = ""; // joinataanko ker‰ysvyˆhyke

      // katotaan ollaanko annettu parametriksi joku tietty varastotyyppi
      if ($tyyppi == "E") {
        $valinta1 = " varastopaikat.tyyppi = 'E' and ";
        $valinta2 = "";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }
      elseif ($tyyppi == "V") {
        $valinta1 = " varastopaikat.tyyppi = 'V' and ";
        $valinta2 = "";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }
      elseif ($tyyppi == "KAIKKI") {
        $valinta1 = "";
        $valinta2 = "";
        $valinta3 = "";
      }
      elseif ($tyyppi == "ORVOT") {
        $valinta1 = "";
        $valinta2 = "";
        $valinta3 = " varastopaikat.tyyppi is null ";
      }
      elseif ($tyyppi == "NORMI") {
        $valinta1 = " varastopaikat.tyyppi = '' and ";
        $valinta2 = "";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }
      else {
        $valinta1 = " (varastopaikat.tyyppi = '' or (varastopaikat.tyyppi = 'E' and varastopaikat.erikoistoimitus_alarajasumma > 0 and '$tuote[myyntihinta]' >= varastopaikat.erikoistoimitus_alarajasumma)) and ";
        $valinta2 = "";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }

      // Katotaan halutaanko saldo vaan jostain tietyst‰ varastosta (varastopaikat.tunnus), silloin unohdetaan edell‰ annettu tyyppi kokonaan
      if ((is_numeric($varasto) and $varasto > 0) or (!is_numeric($varasto) and $varasto != "")) {

        if (isset($keraysvyohyke) and $keraysvyohyke > 0) {
          $kvjoini = " JOIN varaston_hyllypaikat AS vh ON (
                  vh.yhtio = tuotepaikat.yhtio
                  AND vh.hyllyalue = tuotepaikat.hyllyalue
                  AND vh.hyllynro = tuotepaikat.hyllynro
                  AND vh.hyllytaso = tuotepaikat.hyllytaso
                  AND vh.hyllyvali = tuotepaikat.hyllyvali
                  AND vh.keraysvyohyke = '$keraysvyohyke') ";
        }

        $valinta1 = "";
        $valinta2 = " and tuotepaikat.varasto in ($varasto) ";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }

      // Katotaan halutaanko saldo vaan joltain tietylt‰ varasopaikalta, silloinkin unohdetaan edell‰ annettu tyyppi kokonaan
      if ($hyllyalue != "") {
        $valinta1 = "";
        $valinta2 = "   and tuotepaikat.hyllyalue = '$hyllyalue'
                and tuotepaikat.hyllynro  = '$hyllynro'
                and tuotepaikat.hyllyvali = '$hyllyvali'
                and tuotepaikat.hyllytaso = '$hyllytaso' ";
        $valinta3 = " varastopaikat.tyyppi is not null ";
      }

      if ($maa != "") {
        $valinta1 .= " (varastopaikat.sallitut_maat like '%$maa%' or varastopaikat.sallitut_maat = '') and ";
      }

      $kerayslisa = "";

      if ($pvm != '') {
        $kerayslisa = " and tilausrivi.kerayspvm <= '$pvm' ";
      }

      // Saldo varastoista
      if (($tuote["sarjanumeroseuranta"] == "E" or $tuote["sarjanumeroseuranta"] == "F" or $tuote["sarjanumeroseuranta"] == "G") and $era != '') {
        if ($valinta3 != '') {
          $valinta3 = "HAVING {$valinta3}";
        }

        $query = "SELECT sum(sarjanumeroseuranta.era_kpl) saldo, tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
                  FROM tuotepaikat
                  {$kvjoini}
                  LEFT JOIN varastopaikat on (varastopaikat.yhtio = tuotepaikat.yhtio
                    and $valinta1
                    varastopaikat.tunnus                    = tuotepaikat.varasto)
                  JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero)  ON sarjanumeroseuranta.yhtio = tuotepaikat.yhtio
                  and sarjanumeroseuranta.tuoteno           = tuotepaikat.tuoteno
                  and sarjanumeroseuranta.hyllyalue         = tuotepaikat.hyllyalue
                  and sarjanumeroseuranta.hyllynro          = tuotepaikat.hyllynro
                  and sarjanumeroseuranta.hyllyvali         = tuotepaikat.hyllyvali
                  and sarjanumeroseuranta.hyllytaso         = tuotepaikat.hyllytaso
                  and sarjanumeroseuranta.sarjanumero       = '$era'
                  and sarjanumeroseuranta.myyntirivitunnus  = 0
                  and sarjanumeroseuranta.era_kpl          != 0
                  JOIN tilausrivi tilausrivi_osto use index (PRIMARY) ON tilausrivi_osto.yhtio=sarjanumeroseuranta.yhtio and tilausrivi_osto.tunnus=sarjanumeroseuranta.ostorivitunnus and tilausrivi_osto.laskutettuaika != '0000-00-00'
                  WHERE tuotepaikat.yhtio                   = '$yhtiolisa'
                  and tuotepaikat.tuoteno                   = '$tuoteno'
                  $valinta2
                  GROUP BY tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
                  $valinta3";
      }
      else {
        if ($valinta3 != '') {
          $valinta3 = "AND {$valinta3}";
        }

        $query = "SELECT tuotepaikat.saldo, tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
                  FROM tuotepaikat
                  {$kvjoini}
                  LEFT JOIN varastopaikat on (varastopaikat.yhtio = tuotepaikat.yhtio
                    and $valinta1
                    varastopaikat.tunnus  = tuotepaikat.varasto)
                  WHERE tuotepaikat.yhtio = '$yhtiolisa'
                  and tuotepaikat.tuoteno = '$tuoteno'
                  $valinta2
                  $valinta3";
      }
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 0) {
        // tuotteella ei ole yht‰‰n paikkaa..
        return array(FALSE, FALSE, FALSE, FALSE);
      }
      else {
        $saldo      = 0;
        $hyllyssa    = 0;
        $myytavissa    = 0;
        $ennakkopois   = 0;

        while ($row = mysql_fetch_assoc($result)) {

          // Saldot
          $saldo += $row["saldo"];

          // Myyntirivien, varastosiirtojen ja valmistusten ennakkopoistot ja ker‰tyt rivit (Hyllytetyt reklamaatiot n‰kyv‰t myˆs myyt‰viss‰/hyllyss‰)
          if (($tuote["sarjanumeroseuranta"] == "E" or $tuote["sarjanumeroseuranta"] == "F" or $tuote["sarjanumeroseuranta"] == "G") and $era != '') {
            $query = "SELECT
                      ifnull(sum(if(tilausrivi.keratty!='', tilausrivi.varattu, 0)), 0) keratty,
                      ifnull(sum(if((tilausrivi.keratty!='' and lasku.tilaustyyppi = 'R') or lasku.tilaustyyppi != 'R', tilausrivi.varattu, 0)), 0) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio AND lasku.tunnus = tilausrivi.otunnus)
                      JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
                      and sarjanumeroseuranta.tuoteno          = tilausrivi.tuoteno
                      and sarjanumeroseuranta.hyllyalue        = tilausrivi.hyllyalue
                      and sarjanumeroseuranta.hyllynro         = tilausrivi.hyllynro
                      and sarjanumeroseuranta.hyllyvali        = tilausrivi.hyllyvali
                      and sarjanumeroseuranta.hyllytaso        = tilausrivi.hyllytaso
                      and sarjanumeroseuranta.myyntirivitunnus = tilausrivi.tunnus
                      and sarjanumeroseuranta.sarjanumero      = '$era'
                      WHERE tilausrivi.yhtio                   = '$yhtiolisa'
                      and tilausrivi.tyyppi                    in ('L','G','V')
                      and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                      and tilausrivi.tuoteno                   = '$tuoteno'
                      and (tilausrivi.varattu > 0 or (tilausrivi.varattu < 0 and lasku.tilaustyyppi = 'R'))
                      $varaako_jt_saldoa
                      and tilausrivi.hyllyalue                 = '$row[hyllyalue]'
                      and tilausrivi.hyllynro                  = '$row[hyllynro]'
                      and tilausrivi.hyllyvali                 = '$row[hyllyvali]'
                      and tilausrivi.hyllytaso                 = '$row[hyllytaso]'
                      $kerayslisa";
          }
          else {
            $query = "SELECT
                      ifnull(sum(if(tilausrivi.keratty!='', tilausrivi.varattu, 0)), 0) keratty,
                      ifnull(sum(if((tilausrivi.keratty!='' and lasku.tilaustyyppi = 'R') or lasku.tilaustyyppi != 'R', tilausrivi.varattu, 0)), 0) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio AND lasku.tunnus = tilausrivi.otunnus)
                      WHERE tilausrivi.yhtio   = '$yhtiolisa'
                      and tilausrivi.tyyppi    in ('L','G','V')
                      and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                      and tilausrivi.tuoteno   = '$tuoteno'
                      and (tilausrivi.varattu > 0 or (tilausrivi.varattu < 0 and lasku.tilaustyyppi = 'R'))
                      $varaako_jt_saldoa
                      and tilausrivi.hyllyalue = '$row[hyllyalue]'
                      and tilausrivi.hyllynro  = '$row[hyllynro]'
                      and tilausrivi.hyllyvali = '$row[hyllyvali]'
                      and tilausrivi.hyllytaso = '$row[hyllytaso]'
                      $kerayslisa";
          }

          $ennresult = pupe_query($query);
          $ennrow = mysql_fetch_assoc($ennresult);

          $myytavissa += $row["saldo"] - $ennrow["varattu"] - $row["saldo_varattu"];
          $hyllyssa   += $row["saldo"] - $ennrow["keratty"];

          if ($pvm != '') {
            // jos lasketaan tulevaisuuteen niin otetaan tietenkin huomioon jo ker‰tyt rivit
            if (($tuote["sarjanumeroseuranta"] == "E" or $tuote["sarjanumeroseuranta"] == "F" or $tuote["sarjanumeroseuranta"] == "G") and $era != '') {
              $query = "SELECT
                        ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty
                        FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                        JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
                        JOIN lasku on (tilausrivi.yhtio=lasku.yhtio and tilausrivi.otunnus=lasku.tunnus and lasku.valmistuksen_tila='')
                        and sarjanumeroseuranta.tuoteno          = tilausrivi.tuoteno
                        and sarjanumeroseuranta.hyllyalue        = tilausrivi.hyllyalue
                        and sarjanumeroseuranta.hyllynro         = tilausrivi.hyllynro
                        and sarjanumeroseuranta.hyllyvali        = tilausrivi.hyllyvali
                        and sarjanumeroseuranta.hyllytaso        = tilausrivi.hyllytaso
                        and sarjanumeroseuranta.myyntirivitunnus = tilausrivi.tunnus
                        and sarjanumeroseuranta.sarjanumero      = '$era'
                        WHERE tilausrivi.yhtio                   = '$yhtiolisa'
                        and tilausrivi.tyyppi                    in ('L','G','V')
                        and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                        and tilausrivi.tuoteno                   = '$tuoteno'
                        and tilausrivi.varattu                   > 0
                        and tilausrivi.hyllyalue                 = '$row[hyllyalue]'
                        and tilausrivi.hyllynro                  = '$row[hyllynro]'
                        and tilausrivi.hyllyvali                 = '$row[hyllyvali]'
                        and tilausrivi.hyllytaso                 = '$row[hyllytaso]'
                        and tilausrivi.kerayspvm                 > '$pvm'";
            }
            else {
              $query = "SELECT
                        ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty
                        FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                        JOIN lasku on (tilausrivi.yhtio=lasku.yhtio and tilausrivi.otunnus=lasku.tunnus and lasku.valmistuksen_tila='')
                        WHERE tilausrivi.yhtio   = '$yhtiolisa'
                        and tilausrivi.tyyppi    in ('L','G','V')
                        and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                        and tilausrivi.tuoteno   = '$tuoteno'
                        and tilausrivi.varattu   > 0
                        and tilausrivi.hyllyalue = '$row[hyllyalue]'
                        and tilausrivi.hyllynro  = '$row[hyllynro]'
                        and tilausrivi.hyllyvali = '$row[hyllyvali]'
                        and tilausrivi.hyllytaso = '$row[hyllytaso]'
                        and tilausrivi.kerayspvm > '$pvm'";
            }

            $keraresult = pupe_query($query);
            $kerarow = mysql_fetch_assoc($keraresult);

            $myytavissa -= $kerarow["keratty"];
            $hyllyssa -= $kerarow["keratty"];

            // jos lasketaan tulevaisuuteen niin otetaan varastoonvalmistukset huomioon (asiakkaallevalmistuksten valmisteet eiv‰t lis‰‰ myyt‰viss‰olevaa m‰‰r‰‰ ku tuoteet on samantien varattu asiakkaalle jolle ne valmistetaan)
            if (($tuote["sarjanumeroseuranta"] == "E" or $tuote["sarjanumeroseuranta"] == "F" or $tuote["sarjanumeroseuranta"] == "G") and $era != '') {
              $query = "SELECT
                        ifnull(sum(if(lasku.tilaustyyppi='V' and tilausrivi.tyyppi = 'W', 0, tilausrivi.varattu)),0) varattu
                        FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                        JOIN lasku use index (primary) ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus and lasku.tilaustyyppi in ('W','V')
                        JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
                        and sarjanumeroseuranta.tuoteno          = tilausrivi.tuoteno
                        and sarjanumeroseuranta.hyllyalue        = tilausrivi.hyllyalue
                        and sarjanumeroseuranta.hyllynro         = tilausrivi.hyllynro
                        and sarjanumeroseuranta.hyllyvali        = tilausrivi.hyllyvali
                        and sarjanumeroseuranta.hyllytaso        = tilausrivi.hyllytaso
                        and sarjanumeroseuranta.myyntirivitunnus = tilausrivi.tunnus
                        and sarjanumeroseuranta.sarjanumero      = '$era'
                        WHERE tilausrivi.yhtio                   = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
                        and tilausrivi.yhtio                     = '$yhtiolisa'
                        and tilausrivi.tyyppi                    in ('W','M')
                        and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                        and tilausrivi.tuoteno                   = '$tuoteno'
                        and tilausrivi.varattu                   > 0
                        and tilausrivi.hyllyalue                 = '$row[hyllyalue]'
                        and tilausrivi.hyllynro                  = '$row[hyllynro]'
                        and tilausrivi.hyllyvali                 = '$row[hyllyvali]'
                        and tilausrivi.hyllytaso                 = '$row[hyllytaso]'
                        and tilausrivi.kerayspvm                 <= '$pvm'";
            }
            else {
              $query = "SELECT
                        ifnull(sum(if(lasku.tilaustyyppi='V' and tilausrivi.tyyppi = 'W', 0, tilausrivi.varattu)),0) varattu
                        FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                        JOIN lasku use index (primary) ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus and lasku.tilaustyyppi in ('W','V')
                        WHERE tilausrivi.yhtio   = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
                        and tilausrivi.yhtio     = '$yhtiolisa'
                        and tilausrivi.tyyppi    in ('W','M')
                        and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                        and tilausrivi.tuoteno   = '$tuoteno'
                        and tilausrivi.varattu   > 0
                        and tilausrivi.hyllyalue = '$row[hyllyalue]'
                        and tilausrivi.hyllynro  = '$row[hyllynro]'
                        and tilausrivi.hyllyvali = '$row[hyllyvali]'
                        and tilausrivi.hyllytaso = '$row[hyllytaso]'
                        and tilausrivi.kerayspvm <= '$pvm'";
            }
            $valmresult = pupe_query($query);
            $valmrow = mysql_fetch_assoc($valmresult);

            $myytavissa += $valmrow["varattu"];
          }
        }


        // jos lasketaan tulevaisuuteen niin otetaan ostorivit huomioon
        if ($pvm != '') {
          if (($tuote["sarjanumeroseuranta"] == "E" or $tuote["sarjanumeroseuranta"] == "F" or $tuote["sarjanumeroseuranta"] == "G") and $era != '') {
            $query = "SELECT
                      ifnull(sum(tilausrivi.varattu),0) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
                      and sarjanumeroseuranta.tuoteno          = tilausrivi.tuoteno
                      and sarjanumeroseuranta.hyllyalue        = tilausrivi.hyllyalue
                      and sarjanumeroseuranta.hyllynro         = tilausrivi.hyllynro
                      and sarjanumeroseuranta.hyllyvali        = tilausrivi.hyllyvali
                      and sarjanumeroseuranta.hyllytaso        = tilausrivi.hyllytaso
                      and sarjanumeroseuranta.myyntirivitunnus = tilausrivi.tunnus
                      and sarjanumeroseuranta.sarjanumero      = '$era'
                      WHERE tilausrivi.yhtio                   = '$yhtiolisa'
                      and tilausrivi.tyyppi                    = 'O'
                      and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                      and tilausrivi.tuoteno                   = '$tuoteno'
                      and tilausrivi.varattu                   > 0
                      and tilausrivi.toimaika                  <= '$pvm'";
          }
          else {
            // lˆytyykˆ ostorivej‰?
            $query = "SELECT
                      ifnull(sum(tilausrivi.varattu),0) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      WHERE tilausrivi.yhtio  = '$yhtiolisa'
                      and tilausrivi.tyyppi   = 'O'
                      and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                      and tilausrivi.tuoteno  = '$tuoteno'
                      and tilausrivi.varattu  > 0
                      and tilausrivi.toimaika <= '$pvm'";
            $osttarkres = pupe_query($query);
            $osttarkrow = mysql_fetch_assoc($osttarkres);

            if ($osttarkrow['varattu'] != 0 and $hyllyalue != '') {
              // jos lˆytyy, niin onko ne t‰lle paikalle tulossa
              $query = "SELECT
                        ifnull(sum(tilausrivi.varattu),0) varattu
                        FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                        WHERE tilausrivi.yhtio   = '$yhtiolisa'
                        and tilausrivi.tyyppi    = 'O'
                        and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                        and tilausrivi.tuoteno   = '$tuoteno'
                        and tilausrivi.varattu   > 0
                        and tilausrivi.hyllyalue = '$hyllyalue'
                        and tilausrivi.hyllynro  = '$hyllynro'
                        and tilausrivi.hyllyvali = '$hyllyvali'
                        and tilausrivi.hyllytaso = '$hyllytaso'
                        and tilausrivi.toimaika  <= '$pvm'";
              $osttarkres = pupe_query($query);
              $osttarkrow = mysql_fetch_assoc($osttarkres);

              if ($osttarkrow['varattu'] == 0) {
                // jos ei ole, niin onko paikka olemassa jonne ne on tulossa
                $tarkquery = "SELECT
                              ifnull(sum(tilausrivi.varattu),0) varattu
                              FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                              JOIN tuotepaikat ON tilausrivi.yhtio = tuotepaikat.yhtio and tilausrivi.tuoteno = tuotepaikat.tuoteno and tilausrivi.hyllyalue = tuotepaikat.hyllyalue and tilausrivi.hyllynro = tuotepaikat.hyllynro and tilausrivi.hyllyvali = tuotepaikat.hyllyvali and tilausrivi.hyllytaso = tuotepaikat.hyllytaso
                              WHERE tilausrivi.yhtio  = '$yhtiolisa'
                              and tilausrivi.tyyppi   = 'O'
                              and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                              and tilausrivi.tuoteno  = '$tuoteno'
                              and tilausrivi.varattu  > 0
                              and tilausrivi.toimaika <= '$pvm'";
                $osttarkres = pupe_query($tarkquery);
                $osttarkrow = mysql_fetch_assoc($osttarkres);

                if ($osttarkrow['varattu'] == 0) {
                  // eli on joutumassa ns. orvolle paikalle, niin leikit‰‰ ett‰ ne tulee oletuspaikalle
                  $query = "SELECT
                            ifnull(sum(tilausrivi.varattu),0) varattu
                            FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                            JOIN tuotepaikat ON tilausrivi.yhtio = tuotepaikat.yhtio and tilausrivi.tuoteno = tuotepaikat.tuoteno
                            and tuotepaikat.hyllyalue  = '$hyllyalue'
                            and tuotepaikat.hyllynro   = '$hyllynro'
                            and tuotepaikat.hyllyvali  = '$hyllyvali'
                            and tuotepaikat.hyllytaso  = '$hyllytaso'
                            and tuotepaikat.oletus    != ''
                            WHERE tilausrivi.yhtio     = '$yhtiolisa'
                            and tilausrivi.tyyppi      = 'O'
                            and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
                            and tilausrivi.tuoteno     = '$tuoteno'
                            and tilausrivi.varattu     > 0
                            and tilausrivi.toimaika    <= '$pvm'";
                  $osttarkres = pupe_query($query);
                  $osttarkrow = mysql_fetch_assoc($osttarkres);
                }
              }
            }
          }

          $ostresult = pupe_query($query);
          $ostrow = mysql_fetch_assoc($ostresult);

          $myytavissa += $ostrow["varattu"];
        }

        // katsotaan lˆytyykˆ tuotetta varattuna joltain muulta paikalta, jota ei ole en‰‰ olemassa tuotepaikoissa
        // ekaks haetaan ihan kaikki nykyiset paikat suoraan mysql muotoon
        $query = "SELECT group_concat(\"'\",rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'),lpad(upper(hyllyvali), 5, '0'),lpad(upper(hyllytaso), 5, '0'),\"'\") paikat
                  FROM tuotepaikat
                  WHERE yhtio='$yhtiolisa' and tuoteno='$tuoteno'";
        $ennresult = pupe_query($query);
        $ennrow = mysql_fetch_assoc($ennresult);

        if (is_numeric($varasto) and $varasto == 0 and $hyllyalue == "" and $hyllynro == "") {

          $orposaldomyytavissa = 0;

          // jos paikkoja lˆytyi
          if ($ennrow["paikat"] != "") {

            if ($tyyppi != "KAIKKI" and $tyyppi != "ORVOT") {
              $query = "SELECT sum(saldo) saldo, varastopaikat.tyyppi
                        FROM tuotepaikat
                        LEFT JOIN varastopaikat on (varastopaikat.yhtio = tuotepaikat.yhtio
                          AND varastopaikat.tunnus = tuotepaikat.varasto)
                        WHERE tuotepaikat.yhtio    = '$yhtiolisa'
                        and tuotepaikat.tuoteno    = '$tuoteno'
                        GROUP BY varastopaikat.tyyppi
                        HAVING varastopaikat.tyyppi is null";
              $ennsaldoresult = pupe_query($query);

              $ennsaldorow = mysql_fetch_assoc($ennsaldoresult);
              $orposaldomyytavissa = $ennsaldorow["saldo"];
            }

            // etsit‰‰n varatut kaikilta paikoilla jolla on joku muu varastopaikka (NOT IN)
            $query = "SELECT sum(varattu) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      WHERE tilausrivi.yhtio = '$yhtiolisa' and
                      tilausrivi.tyyppi      in ('L','G','V') and
                      tilausrivi.tuoteno     = '$tuoteno' and
                      tilausrivi.varattu     > 0 and
                      concat(rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'),lpad(upper(hyllyvali), 5, '0'),lpad(upper(hyllytaso), 5, '0')) NOT IN ($ennrow[paikat])
                      $kerayslisa ";
            $ennresult = pupe_query($query);
            $ennrow = mysql_fetch_assoc($ennresult);

            $orposaldomyytavissa -= $ennrow["varattu"];
          }
          else {
            // tuotteella ei ole yht‰‰n paikkaa.. katotaan silti varatut
            // etsit‰‰n varatut kaikilta paikoilta joilla on joku muu varastopaikka (NOT IN)
            $query = "SELECT sum(varattu) varattu
                      FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
                      WHERE tilausrivi.yhtio = '$yhtiolisa' and
                      tilausrivi.tyyppi      in ('L','G','V') and
                      tilausrivi.tuoteno     = '$tuoteno' and
                      tilausrivi.varattu     > 0
                      $varaako_jt_saldoa
                      $kerayslisa ";
            $ennresult = pupe_query($query);
            $ennrow = mysql_fetch_assoc($ennresult);

            $orposaldomyytavissa -= $ennrow["varattu"];
          }

          $myytavissa += $orposaldomyytavissa;

        }
      }
    }
    return array($saldo, $hyllyssa, $myytavissa, TRUE);
  }
}

if (!function_exists("lpr")) {
  function lpr($str, $prn, $prnkomento = "") {

    global $kukarow;

    if ($prnkomento != "") {
      $query = "SELECT *
                FROM kirjoittimet
                WHERE yhtio = '{$kukarow["yhtio"]}'
                AND komento = '".mysql_real_escape_string($prnkomento)."'";
    }
    else {
      $query = "SELECT *
                FROM kirjoittimet
                WHERE yhtio = '{$kukarow["yhtio"]}'
                AND tunnus  = '{$prn}'";
    }

    $kirre = pupe_query($query);

    if (mysql_num_rows($kirre) != 1) {
      echo "printer not found";
      return;
    }

    $kirjoitin = mysql_fetch_assoc($kirre);

    $pipe = popen($kirjoitin["komento"], 'w');

    if (!$pipe) {
      echo "pipe failed";
      return;
    }

    // sallitut merkit listattu, kaikki muut menee spaceks, paitsi jos kyseess‰ on kuittitulostin...
    if ($kirjoitin['mediatyyppi'] != "kuittitulostin") {
      $str = ereg_replace("[^A-Za-z0-9÷ˆ≈Âƒ‰ .,-/!|+()%#\n\r]", " ", $str);
    }

    // merkistˆkonversio
    $from = array('‰', 'Â', 'ˆ', 'ƒ', '≈', '÷', '|');

    if ($kirjoitin["merkisto"] == 1) {
      $to  = array('{', '}', '|', '[', ']', '\\', chr(179));                      // 7 bittiset
      $str = str_replace($from, $to, $str);
    }
    elseif ($kirjoitin["merkisto"] == 2) {
      $to  = array(chr(132), chr(134), chr(148), chr(142), chr(143), chr(153), chr(179));      // DOS charset
      $str = str_replace($from, $to, $str);
    }
    elseif ($kirjoitin["merkisto"] == 3) {
      $to  = array(chr(228), chr(229), chr(246), chr(196), chr(197), chr(214), chr(124));      // ANSI charset
      $str = str_replace($from, $to, $str);
    }
    elseif ($kirjoitin["merkisto"] == 4) {
      $str = utf8_encode($str);                                // UTF8 charset k‰‰nnˆs suoraan yhell‰ rivill‰
    }
    elseif ($kirjoitin["merkisto"] == 5) {
      $to  = array('a', 'a', 'o', 'A', 'A', 'O', ' ');                        // ƒ‰kkˆset kokonaan pois
      $str = str_replace($from, $to, $str);
    }

    fputs($pipe, $str);
    pclose($pipe);
  }
}

// tehd‰‰n vertailukelponen stringi varastopaikasta
if (!function_exists("varastopaikka")) {
  function varastopaikka($str) {
    $str = strtoupper(trim($str));

    if (is_numeric($str)) {
      $str = sprintf("%5.5s", $str); // numerot lpaddataan 5 merkki‰
    }
    else {
      $str = sprintf("%-5.5s", $str); // stringit rpaddataan 5 merkki‰
    }

    return $str;
  }
}

// Tehd‰‰n valuuttamuunnos laskun valuutasta yhtiˆn valuuttaan.
if (!function_exists("yhtioval")) {
  function yhtioval($summa, $kurssi) {
    if ($kurssi <= 0 or !is_numeric($kurssi)) {
      $kurssi = 1;
    }

    $sum = $summa*$kurssi;
    return $sum;
  }
}

// Tehd‰‰n valuuttamuunnos yhtiˆn valuutasta laskun valuuttaan.
if (!function_exists("laskuval")) {
  function laskuval($summa, $kurssi) {
    if ($kurssi <= 0 or !is_numeric($kurssi)) {
      $kurssi = 1;
    }

    $sum = $summa/$kurssi;
    return $sum;
  }
}

if (!function_exists("pankkipvm")) {
  function pankkipvm($pvm) {
    return substr($pvm, 4, 2).".".substr($pvm, 2, 2).".20".substr($pvm, 0, 2);
  }
}

// Tehd‰‰n valuuttamuunnos yhtiˆn valuutasta laskun valuuttaan.
if (!function_exists("kehahin")) {
  function kehahin($tuoteno) {

    global $kukarow, $yhtiorow;

    $query = "SELECT round(if (epakurantti100pvm='0000-00-00', if (epakurantti75pvm='0000-00-00', if (epakurantti50pvm='0000-00-00', if (epakurantti25pvm='0000-00-00', kehahin, kehahin*0.75), kehahin*0.5), kehahin*0.25), 0),6) kehahin
              FROM tuote
              WHERE yhtio = '$kukarow[yhtio]' and tuoteno = '$tuoteno'";
    $result = pupe_query($query);
    if (mysql_num_rows($result) > 0) {
      $row = mysql_fetch_assoc($result);
      return $row["kehahin"];
    }
    else {
      return 0;
    }
  }
}

if (!function_exists("desim")) {
  function desim($summa) {
    global $kukarow, $yhtiorow;

    $monta = '';

    //echo "1 JOTAIN... $summa | $monta<br>";

    $summa =  str_replace(',', '.', $summa);

    //echo "2 JOTAIN... $summa | $monta<br>";

    if ($yhtiorow['hintapyoristys'] > '2') {

      if (strpos($summa, '.')) {

        list($koko, $desi) = explode(".", trim($summa));

        // echo "3 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";

        if (strlen($desi) > 2 and substr($desi, -1) == '0') {

          while (strlen($desi) > 2 and substr($desi, -1) == '0') {
            $desi = substr($desi, 0, -1);
          }

          $monta = strlen($desi);

          //echo "4 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
        }
        elseif (strlen($desi) > 2) {
          $monta = strlen($desi);
        }
      }
    }

    if ($monta == '') {
      $monta = '2';
    }
    elseif ($monta > '4') {
      $monta = '4';
    }

    //echo "5 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";

    return $monta;
  }
}

if (!function_exists("desis")) {
  function desis($summa) {
    global $kukarow, $yhtiorow;

    $monta = '';

    //echo "1 JOTAIN... $summa | $monta<br>";

    $summa =  str_replace(',', '.', $summa);

    //echo "2 JOTAIN... $summa | $monta<br>";

    if ($yhtiorow['hintapyoristys'] > '2') {

      if (strpos($summa, '.')) {

        list($koko, $desi) = explode(".", trim($summa));

        //echo "3 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";

        if (strlen($desi) > 2 and substr($desi, -1) == '0') {

          while (strlen($desi) > 2 and substr($desi, -1) == '0') {
            $desi = substr($desi, 0, -1);
          }

          $monta = strlen($desi);

          //echo "4 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
        }
        elseif (strlen($desi) > 2) {
          $monta = strlen($desi);
        }
      }
    }

    if ($monta == '') {
      $monta = '2';
    }
    elseif ($monta > '4') {
      $monta = '4';
    }

    $summa = sprintf("%.".$monta."f", $summa);

    //echo "5 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";

    return $summa;
  }
}

// Tehd‰‰n l‰hetteen ja laskun sorttauskent‰t
if (!function_exists("generoi_sorttauskentta")) {

  function generoi_sorttauskentta($jarjestys = "", $toimittaja = 0) {

    global $kukarow, $yhtiorow;

    if ($jarjestys == "") {
      $jarjestys = $yhtiorow["lahetteen_jarjestys"];
    }

    $sorttauskentta = "";

    // varastopaikkaj‰rjestys, tuoteperheet pidet‰‰n yhdess‰, erikoistuotteet loppuun
    if ($jarjestys == "0") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
                  if (tilausrivi.perheid > 0, ifnull((select concat(rpad(upper(t2.hyllyalue), 5, '0'),lpad(upper(t2.hyllynro), 5, '0'),lpad(upper(t2.hyllyvali), 5, '0'),lpad(upper(t2.hyllytaso), 5, '0'), t2.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus AND t2.tyyppi != 'D'), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))),
                       if (tilausrivi.perheid2 > 0, ifnull((select concat(rpad(upper(t3.hyllyalue), 5, '0'),lpad(upper(t3.hyllynro), 5, '0'),lpad(upper(t3.hyllyvali), 5, '0'),lpad(upper(t3.hyllytaso), 5, '0'), t3.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus AND t3.tyyppi != 'D'), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))),
                      tilausrivi.tuoteno))) as sorttauskentta";
    }

    // varastopaikkaj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
    elseif ($jarjestys == "1") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno),
                  if (tilausrivi.perheid > 0, ifnull((select concat(rpad(upper(t2.hyllyalue), 5, '0'),lpad(upper(t2.hyllynro), 5, '0'),lpad(upper(t2.hyllyvali), 5, '0'),lpad(upper(t2.hyllytaso), 5, '0'), t2.tuoteno, rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus AND t2.tyyppi != 'D'), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
                       if (tilausrivi.perheid2 > 0, ifnull((select concat(rpad(upper(t3.hyllyalue), 5, '0'),lpad(upper(t3.hyllynro), 5, '0'),lpad(upper(t3.hyllyvali), 5, '0'),lpad(upper(t3.hyllytaso), 5, '0'), t3.tuoteno, rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus AND t3.tyyppi != 'D'), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
                      tilausrivi.tuoteno))) as sorttauskentta";
    }

    // varastopaikkaj‰rjestys, erikoistuotteet loppuun
    elseif ($jarjestys == "2") {
      $sorttauskentta = "if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno),
                  concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)) as sorttauskentta";
    }

    // varastopaikkaj‰rjestys
    elseif ($jarjestys == "3") {
      $sorttauskentta = "concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) as sorttauskentta";
    }

    // tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰, erikoistuotteet loppuun
    elseif ($jarjestys == "4") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), tilausrivi.tuoteno),
                  if (tilausrivi.perheid > 0, ifnull((select concat(t2.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), tilausrivi.tuoteno)) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus AND t2.tyyppi != 'D'), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), tilausrivi.tuoteno)),
                    if (tilausrivi.perheid2 > 0, ifnull((select concat(t3.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), tilausrivi.tuoteno)) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus AND t3.tyyppi != 'D'), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno), tilausrivi.tuoteno)),
                      tilausrivi.tuoteno))) as sorttauskentta";
    }

    // tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
    elseif ($jarjestys == "5") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, tilausrivi.tuoteno,
                  if (tilausrivi.perheid > 0, ifnull((select concat(t2.tuoteno, tilausrivi.tuoteno) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus AND t2.tyyppi != 'D'), tilausrivi.tuoteno),
                    if (tilausrivi.perheid2 > 0, ifnull((select concat(t3.tuoteno, tilausrivi.tuoteno) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus AND t3.tyyppi != 'D'), tilausrivi.tuoteno),
                      tilausrivi.tuoteno))) as sorttauskentta";
    }

    // tuotenumeroj‰rjestys, erikoistuotteet loppuun
    elseif ($jarjestys == "6") {
      $sorttauskentta = "if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷', tilausrivi.tuoteno),
                  tilausrivi.tuoteno) as sorttauskentta";
    }

    // tuotenumeroj‰rjestys
    elseif ($jarjestys == "7") {
      $sorttauskentta = "tilausrivi.tuoteno as sorttauskentta";
    }

    // tilausj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
    elseif ($jarjestys == "8") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, tilausrivi.tunnus,
                  if (tilausrivi.perheid > 0, tilausrivi.perheid,
                    if (tilausrivi.perheid2 > 0, tilausrivi.perheid2,
                      tilausrivi.tunnus))) as sorttauskentta";
    }

    // tilausj‰rjestys
    elseif ($jarjestys == "9") {
      $sorttauskentta = "tilausrivi.tunnus as sorttauskentta";
    }

    // toimittajan tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
    elseif ($jarjestys == "10") {
      $sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno),
                  if (tilausrivi.perheid > 0, ifnull((select concat(if (tt2.toim_tuoteno!='', concat(tt2.toim_tuoteno,tilausrivi.perheid), concat(t2.tuoteno,tilausrivi.perheid)), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)) from tilausrivi as t2 JOIN tuotteen_toimittajat tt2 ON t2.yhtio = tt2.yhtio and t2.tuoteno = tt2.tuoteno and tt2.liitostunnus = '$toimittaja' where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus AND t2.tyyppi != 'D'), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)),
                    if (tilausrivi.perheid2 > 0, ifnull((select concat(if (tt3.toim_tuoteno!='', concat(tt3.toim_tuoteno,tilausrivi.perheid2), concat(t3.tuoteno,tilausrivi.perheid2)), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)) from tilausrivi as t3 JOIN tuotteen_toimittajat tt3 ON t3.yhtio = tt3.yhtio and t3.tuoteno = tt3.tuoteno and tt3.liitostunnus = '$toimittaja' where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus AND t3.tyyppi != 'D'), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)),
                      if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)))) as sorttauskentta";
    }
    elseif ($jarjestys == "M") {
      $sorttauskentta = " if ((tilausrivi.perheid=0 or tilausrivi.perheid=tilausrivi.tunnus),
                  ifnull((SELECT tlt2.jarjestys FROM tilausrivin_lisatiedot tlt2 WHERE tlt2.yhtio=tilausrivi.yhtio and tlt2.tilausrivitunnus=tilausrivi.tunnus LIMIT 1), tilausrivi.tunnus),
                  if (tilausrivi.perheid >0 ,
                    ifnull((SELECT tlt3.jarjestys FROM tilausrivin_lisatiedot tlt3 WHERE tlt3.yhtio=tilausrivi.yhtio and tlt3.tilausrivitunnus=tilausrivi.perheid LIMIT 1), tilausrivi.perheid),
                    tilausrivi.tunnus
                    )
                  ) as sorttauskentta";
    }

    // joku default
    else {
      $sorttauskentta = "tilausrivi.tunnus as sorttauskentta";
    }

    return $sorttauskentta;
  }
}

if (!function_exists("synclog")) {
  function synclog($yhtio, $table, $viesti, $tunnus) {
    global $yhtiorow, $kukarow;

    if ($kukarow["yhtio"] == $yhtio) {
      $tapa = "MASTER";
    }
    else {
      $tapa = "TARGET";
    }

    $query = "INSERT INTO synclog SET
              yhtio      = '$yhtio',
              taulu      = '$table',
              tauluntunnus= '$tunnus',
              tapa       = '$tapa',
              viesti     = '".addslashes($viesti)."',
              laatija    = '$kukarow[kuka]',
              luontiaika = now()";
    $insres = pupe_query($query);
  }
}

// Konserniyhtiˆiden tietueiden synkronointi
if (!function_exists("synkronoi")) {
  function synkronoi($yhtio, $table, $tunnus, $orig = "", $force = "") {
    global $yhtiorow, $kukarow, $synkronoi_kiellot, $synkronoi_ainoastaan;

    //  Onko mahdollista synkronoida?
    if (stripos($yhtiorow["synkronoi"], $table) === false) {
      return false;
    }

    $muutokset = array();
    $avainsanalajilisa = "";
    $lajit = "";

    if ($table == "avainsana") {
      $abulisa = preg_match("/(^|,)(avainsana\|*([\|a-zA-Z_\-]*))($|,)/i", $yhtiorow["synkronoi"], $regs);

      $avainsanalajilisa = "|".$regs[3];
      $lajit = explode("|", strtolower($regs[3]));
    }

    $synclog = "\nAktivoidaan synkronointi konserniyrityksiin\n";

    if (!is_numeric($tunnus)) {
      $synclog .= "VIRHE: Syˆtetty tunnus ei kelpaa!\n";

      synclog($yhtio, $table, $synclog, $tunnus);
      return false;
    }

    if (synkronoi_tarkista_pakolliset($table) === false) {
      $synclog .= "VIRHE: synkronoi_ainoastaan virheellinen. Pakolliset kent‰t on pakko synkronoida!";

      synclog($yhtio, $table, $synclog, $tunnus);
      return false;
    }

    // Haetaan master
    $query = "SELECT *
              FROM $table
              WHERE yhtio = '$yhtio'
              and tunnus  = $tunnus";
    $masterres = pupe_query($query);

    if (mysql_num_rows($masterres) == 1) {
      $masterrow = mysql_fetch_array($masterres) or pupe_error($query);

      //  N‰ill‰ tarttetaan v‰h‰n lis‰tietoo, saadaanko juuri t‰t‰ lajia synkronoida?
      if ($table == "avainsana" and !in_array(strtolower($masterrow["laji"]), $lajit)) {
        return false;
      }

      //  N‰ill‰ tarttetaan v‰h‰n lis‰tietoo
      if ($table == "asiakasalennus" and $masterrow["alennus"] < 0) {
        synclog($yhtio, $table, "Negatiivisia alennuksia ei synkata!", $tunnus);
        return false;
      }

      $synclog .= "Masteri on tunnus ($tunnus)\n";

      //  Tarkastetaan ett‰ originaali on varmasti samasta taulusta!
      if (is_array($orig) and count($orig) > 0) {

        $diff = array_diff_key($orig, $masterrow);

        if (count($diff) == 0) {

          //  Tarkastetaan oliko muutoksia?
          $diff = array_diff_assoc($orig, $masterrow);

          if (count($diff) > 0) {

            foreach ($diff as $key => $value) {
              // ohitetaan aina vakiokent‰t
              if (in_array($key, array("tunnus", "muuttaja", "muutospvm", "laatija", "luontiaika"))) {
                continue;
              }

              // Ohitetaan t‰m‰ koska se on synkronoi kielloissa
              if (isset($synkronoi_kiellot[$table]) and in_array($key, $synkronoi_kiellot[$table])) {
                continue;
              }

              // Ohitetaan jos meill‰ on asetettuna synkronoi_ainoastaan array, ja kentt‰ ei lˆydy sielt‰
              if (!empty($synkronoi_ainoastaan) and !in_array($key, $synkronoi_ainoastaan[$table])) {
                continue;
              }

              $muutokset[$key] .= $value;
            }
          }

          //  Jos mit‰‰n ei muuteta mit‰‰n ei kanssa tehd‰!
          if (count($muutokset) > 0 or $force == "F") {
            $muutos = "Tapahtuneet muutokset mastertaulussa:\n";

            foreach ($muutokset as $key => $value) {
              $muutos .= "$key: ".$value." => ".$masterrow[$key]."\n";
            }
            $synclog .= $muutos."\n";
          }
          else {
            $synclog .= "Mit‰‰n ei muutettu, synkronointia ei suoritettu!\n";

            synclog($yhtio, $table, $synclog, $tunnus);
            return true;
          }
        }
        else {
          $synclog .= "\nVIRHE: Originaali ei t‰sm‰‰ masteriin!!!\n";

          synclog($yhtio, $table, $synclog, $tunnus);
          return false;
        }
      }
    }
    elseif (!is_array($orig)) {
      $synclog .= "Master tietuetta tai originaalia ei lˆytynyt yhtiˆst‰ tunnuksella ($tunnus)\n";

      synclog($yhtio, $table, $synclog, $tunnus);
      return false;
    }
    else {
      $synclog .= "Master tietue ($tunnus) on poistettu, koitetaan poistaa tietue myˆs konserniyrityksilt‰..\n\n";
      unset($masterrow);
    }

    require_once "inc/pakolliset_sarakkeet.inc";

    list($pakolliset, $kielletyt, $wherelliset, $eiyhtiota, $joinattavat, $saakopoistaa, $oletukset, $eisaaollatyhja) = pakolliset_sarakkeet($table);

    if (count($wherelliset) == 0 and count($pakolliset) == 0) {
      $synclog.= "VIRHE: Pyydetty‰ taulua $table ei voida synkronoida, sit‰ ei ole m‰‰ritelty!\n";

      synclog($yhtio, $table, $synclog, $tunnus);
      return false;
    }
    else {
      //  Tehd‰‰n kysely
      $where = "";

      if (is_array($wherelliset)) {
        $indeksi = array_merge($wherelliset, $pakolliset);
        $indeksi = array_unique($indeksi);
      }
      else {
        $indeksi = &$pakolliset;
      }

      foreach ($indeksi as $pakollinen) {
        //  Jos meill‰ on viel‰ se originaali tallessa vertailu sit‰ vastaan
        if (is_array($orig) and count($orig) > 0) {
          $where.=" and ".strtolower($pakollinen)."='".$orig[strtolower($pakollinen)]."'";
        }
        else {
          $where.=" and ".strtolower($pakollinen)."='".$masterrow[strtolower($pakollinen)]."'";
        }
      }
    }

    /*
      Aloitetaan itse synkronointii
    */

    // haetaan konserniyhtiˆt joita voidaan synkronoida
    $query = "SELECT yhtio.yhtio
              from yhtio
              JOIN yhtion_parametrit ON yhtion_parametrit.yhtio=yhtio.yhtio
              where yhtio.konserni  = '$yhtiorow[konserni]'
              and (yhtion_parametrit.synkronoi = '$table$avainsanalajilisa' or yhtion_parametrit.synkronoi like '$table$avainsanalajilisa,%' or yhtion_parametrit.synkronoi like '%,$table$avainsanalajilisa,%' or yhtion_parametrit.synkronoi like '%,$table$avainsanalajilisa')
              and yhtio.yhtio      != '$yhtio'";
    $kohderes = pupe_query($query);

    if (mysql_num_rows($kohderes) > 0) {
      while ($kohderow = mysql_fetch_assoc($kohderes)) {

        $vanhatunnus = $utunnus="";
        $override = array();

        //  Jos master on poistettu haetaan tiedot siit‰ vanhasta!
        if (!isset($masterrow)) {
          $abuhaku = $orig;
        }
        else {
          $abuhaku = $masterrow;
        }

        //  Osa tauluista vaatii v‰h‰n k‰pistely‰!
        if ($table == "yhteyshenkilo") {
          if ($abuhaku["tyyppi"] == "A") {
            $query = "SELECT * from asiakas where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
            $abures = pupe_query($query);
            $aburow = mysql_fetch_assoc($abures);

            //  Etsit‰‰n oikea asiakas, jotta saadaan oikea liitostunnus
            $tarkquery = "SELECT tunnus from asiakas where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]' and toim_ovttunnus='$aburow[toim_ovttunnus]'";
          }
          else {
            $query = "SELECT * from toimi where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
            $abures = pupe_query($query);
            $aburow = mysql_fetch_assoc($abures);

            //  Etsit‰‰n oikea toimittaja, jotta saadaan oikea liitostunnus
            $tarkquery = "SELECT tunnus from toimi where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]'";
          }
          $tarkres = pupe_query($tarkquery);

          if (mysql_num_rows($tarkres)==1) {
            //  Ylikirjoitetaan liitostunnus
            $tarkrow = mysql_fetch_assoc($tarkres);
            $override["liitostunnus"] = $tarkrow["tunnus"];

            //  Meid‰n pit‰‰korvata se vanha liitostunnus myˆs where haarasta..
            $where = str_replace(" and liitostunnus='$abuhaku[liitostunnus]'", " and liitostunnus='$override[liitostunnus]'", $where);
          }
          else {
            $synclog .= "Yhtiˆlle '$kohderow[yhtio]' ei lˆydy asiakasta/toimittajaa $masterrow[ytunnus] joten yhteyshenkilˆ‰ ei voida synkronoida!\n";
            $ok=0;
          }
        }
        elseif ($table == "tuotteen_toimittajat") {
          $query = "SELECT * from tuote where yhtio='$yhtio' and tuoteno='$abuhaku[tuoteno]'";
          $abures = pupe_query($query);

          if (mysql_num_rows($abures) == 1) {

            $query = "SELECT * from toimi where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
            $abures = pupe_query($query);
            $aburow = mysql_fetch_assoc($abures);

            //  Etsit‰‰n oikea toimittaja jotta saadaan oikea liitostunnus
            $tarkquery = "SELECT tunnus from toimi where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]'";
            $tarkres = pupe_query($tarkquery);

            if (mysql_num_rows($tarkres) == 1) {
              //  Ylikirjoitetaan liitostunnus
              $tarkrow = mysql_fetch_assoc($tarkres);
              $override["liitostunnus"] = $tarkrow["tunnus"];

              //  Meid‰n pit‰‰korvata se vanha liitostunnus myˆs where haarasta..
              $where = str_replace(" and liitostunnus='$abuhaku[liitostunnus]'", " and liitostunnus='$override[liitostunnus]'", $where);

            }
            else {
              $synclog .= "Yhtiˆlle '$kohderow[yhtio]' ei lˆydy toimittajaa $masterrow[toimittaja] joten tuotteen toimittajaa ei voida sycronisoida\n";
              $ok=0;
            }
          }
          else {
            $synclog .= "Yhtiˆlle '$kohderow[yhtio]' ei lˆydy tuotetta $masterrow[tuoteno] joten tuotteen toimittajaa ei voida sycronisoida\n";
            $ok=0;
          }
        }

        // Poistetaan tietue jos masteria ei lˆydetty mutta originaali on tallessa.. olisiko t‰ss‰ selvempi tapa?
        if (!isset($masterrow) and is_array($orig) and count($orig) > 0) {

          //  Tarkastetaan ettei t‰ll‰ kriteerill‰ lˆydy useita poistettavia..
          $query = "SELECT tunnus
                    FROM $table
                    WHERE yhtio = '$kohderow[yhtio]'
                    $where";
          $abures = pupe_query($query);

          if (mysql_num_rows($abures) == 1) {
            $aburow = mysql_fetch_assoc($abures);
            $vanhatunnus = $aburow["tunnus"];

            $query = "DELETE
                      FROM $table
                      WHERE yhtio = '$kohderow[yhtio]'
                      and tunnus  = $vanhatunnus";
            $delres = pupe_query($query);

            $synclog .= "Yhtiˆlt‰ '$kohderow[yhtio]' poistettiin tietue ($vanhatunnus)\n";
            synclog($kohderow["yhtio"], $table, "Poistettiin $table ($vanhatunnus)", $vanhatunnus);
          }
          elseif (mysql_num_rows($abures)>0) {
            $synclog .= "Yhtiˆll‰ '$kohderow[yhtio]' oli liian monta tietuetta haussa, tietuetta ei voitu poistaa.\n";
            synclog($kohderow["yhtio"], $table, "Koitettiin poistaa $table, mutta haulla lˆytyi enemm‰n kuin yski tietue, mit‰‰n ei poistettu!", $utunnus);
          }
          else {
            $synclog .= "Yhtiˆll‰ '$kohderow[yhtio]' ei ollut poistettaavaa tietuetta.\n";
          }
        }
        else {

          //  P‰ivitet‰‰n vai tehd‰‰n uutta?
          $query = "SELECT *
                    FROM {$table}
                    WHERE yhtio ='{$kohderow['yhtio']}'
                    {$where}";
          $abures = pupe_query($query);
          $aburow = mysql_fetch_assoc($abures);

          $update_insert = "";

          if (mysql_num_rows($abures) == 0) {
            $syncquery = "INSERT into $table
                          SET yhtio = '$kohderow[yhtio]',
                          laatija = '$yhtio',
                          luontiaika = now(),
                          muuttaja = '$yhtio',
                          muutospvm = now() ";
            $syncquery2 = "";
            $update_insert = "INSERT";
          }
          elseif (mysql_num_rows($abures) == 1) {
            $vanhatunnus = $aburow["tunnus"];

            $syncquery = "UPDATE $table
                          SET yhtio = '$kohderow[yhtio]',
                          muuttaja = '$yhtio',
                          muutospvm = now() ";
            $syncquery2 = " WHERE yhtio='$kohderow[yhtio]' and tunnus=$vanhatunnus";
            $update_insert = "UPDATE";
          }

          if (!empty($update_insert)) {
            if ($table == "toimi") {
              //  Hyv‰ksyji‰, kustannuspaikkoja ja tili‰ ei synkata
              foreach (array("oletus_hyvak1", "oletus_hyvak2", "oletus_hyvak3", "oletus_hyvak4", "oletus_hyvak5", "tilino", "kustp", "kohde", "projekti") as $value) {
                $override[$value] = "";
              }
            }
            elseif ($table == "tuote") {
              //  Oletetaan, ett‰ meill‰ on avainsanat sycronoituna (osasto/try)
              foreach (array("myyjanro", "ostajanro", "tuotepaallikko", "tilino", "tilino_eu", "tilino_ei_eu", "kustp", "kohde", "projekti", "kehahin", "vihahin", "vihapvm", "epakurantti25pvm", "epakurantti50pvm", "epakurantti75pvm", "epakurantti100pvm") as $value) {
                $override[$value] = "";
              }

              // Tarkastetaan ett‰ hintojen verot ja valuutat menev‰t oikein
              $kohde_yhtiorow = hae_yhtion_parametrit($kohderow['yhtio']);

              $override["myyntihinta"]  = $masterrow["myyntihinta"];
              $override["nettohinta"]   = $masterrow["nettohinta"];
              $override["myymalahinta"] = $masterrow["myymalahinta"];

              if ($yhtiorow["valkoodi"] != $kohde_yhtiorow["valkoodi"]) {
                $query  = " SELECT kurssi
                            FROM valuu
                            WHERE nimi = '{$kohde_yhtiorow["valkoodi"]}'
                            AND yhtio = '$kukarow[yhtio]'";
                $valres = pupe_query($query);

                if ($valrow = mysql_fetch_assoc($valres)) {
                  $override["myyntihinta"]  = $override["myyntihinta"] / $valrow['kurssi'];
                  $override["nettohinta"]   = $override["nettohinta"] / $valrow['kurssi'];
                  $override["myymalahinta"] = $override["myymalahinta"] / $valrow['kurssi'];
                }
              }

              if ($yhtiorow["alv_kasittely"] != $kohde_yhtiorow["alv_kasittely"] and $masterrow["alv"] > 0) {
                // yhtiolla on verolliset hinnat kohteella verottomat
                if ($yhtiorow["alv_kasittely"] == "") {
                  $override["myyntihinta"]  = $override["myyntihinta"] * (1+$masterrow["alv"]/100);
                  $override["nettohinta"]   = $override["nettohinta"] * (1+$masterrow["alv"]/100);
                  $override["myymalahinta"] = $override["myymalahinta"] * (1+$masterrow["alv"]/100);
                }
                else {
                  $override["myyntihinta"]  = $override["myyntihinta"] / (1+$masterrow["alv"]/100);
                  $override["nettohinta"]   = $override["nettohinta"] / (1+$masterrow["alv"]/100);
                  $override["myymalahinta"] = $override["myymalahinta"] / (1+$masterrow["alv"]/100);
                }
              }

              if ($override["myyntihinta"] != $masterrow["myyntihinta"]) {
                $override["myyntihinta"]  = round($override["myyntihinta"], $kohde_yhtiorow['hintapyoristys']);
                $override["nettohinta"]   = round($override["nettohinta"],  $kohde_yhtiorow['hintapyoristys']);
                $override["myymalahinta"] = round($override["myymalahinta"],  $kohde_yhtiorow['hintapyoristys']);
              }

              // Jos tuotteen verokanta on eri kuin kohdeyhtiˆn oletus, niin laitetaan oletus.
              $query = "SELECT selite
                        FROM avainsana
                        WHERE yhtio = '{$kohderow['yhtio']}'
                        and laji = 'ALV'
                        and selitetark != ''";
              $alvres = pupe_query($query);
              $alvrow = mysql_fetch_assoc($alvres);

              if ($masterrow["alv"] != $alvrow['selite']) {
                $override["alv"] = $alvrow['selite'];
              }

              // Ei p‰ivitet‰ n‰it‰ kentti‰ kun tehd‰‰n p‰ivitys
              if ($update_insert == "UPDATE") {
                $override["sarjanumeroseuranta"] = "";
                $override["tuotetyyppi"] = "";
                $override["ei_saldoa"] = "";
              }
            }
            elseif ($table == "asiakas") {
              foreach (array("myyjanro", "tilino", "kustp", "kohde", "projekti") as $value) {
                $override[$value] = "";
              }

              //  koitetaan hakea oikean maksuehdon tunnus..
              $query = "SELECT * from maksuehto where yhtio='{$yhtio}' and tunnus='{$masterrow['maksuehto']}'";
              $maksuehtores = pupe_query($query);
              $maksuehtorow = mysql_fetch_assoc($maksuehtores);

              //  Melkein kaikki tiedot pit‰‰ stemmata!
              $query = "SELECT tunnus
                        from maksuehto
                        where yhtio       = '{$kohderow['yhtio']}'
                        and abs_pvm       = '{$maksuehtorow['abs_pvm']}'
                        and erapvmkasin   = '{$maksuehtorow['erapvmkasin']}'
                        and factoring_id  = '{$maksuehtorow['factoring_id']}'
                        and jaksotettu    = '{$maksuehtorow['jaksotettu']}'
                        and jv            = '{$maksuehtorow['jv']}'
                        and kassa_abspvm  = '{$maksuehtorow['kassa_abspvm']}'
                        and kassa_alepros = '{$maksuehtorow['kassa_alepros']}'
                        and kassa_relpvm  = '{$maksuehtorow['kassa_relpvm']}'
                        and kateinen      = '{$maksuehtorow['kateinen']}'
                        and rel_pvm       = '{$maksuehtorow['rel_pvm']}'
                        and sallitut_maat = '{$maksuehtorow['sallitut_maat']}'
                        LIMIT 1";
              $tarkres = pupe_query($query);

              if (mysql_num_rows($tarkres) == 1) {
                $tarkrow = mysql_fetch_assoc($tarkres);
                $override["maksuehto"] = $tarkrow["tunnus"];
              }
              else {
                $override["maksuehto"] = "";
              }

              //  koitetaan hakea oikean toimitustavan tunnus..
              $query = "SELECT * from toimitustapa where yhtio='{$yhtio}' and tunnus='{$masterrow['toimitustapa']}'";
              $toimitustapares = pupe_query($query);
              $toimitustaparow = mysql_fetch_assoc($toimitustapares);

              //  Melkein kaikki tiedot pit‰‰ stemmata!
              $query = "SELECT tunnus
                        FROM toimitustapa
                        WHERE yhtio       = '{$kohderow['yhtio']}'
                        and selite        = '{$toimitustaparow['selite']}'
                        and jvkulu        = '{$toimitustaparow['jvkulu']}'
                        and lauantai      = '{$toimitustaparow['lauantai']}'
                        and maa_maara     = '{$toimitustaparow['maa_maara']}'
                        and merahti       = '{$toimitustaparow['merahti']}'
                        and nouto         = '{$toimitustaparow['nouto']}'
                        and sallitut_maat = '{$toimitustaparow['sallitut_maat']}'";
              $tarkres=pupe_query($query);

              if (mysql_num_rows($tarkres) == 1) {
                $tarkrow = mysql_fetch_assoc($tarkres);
                $override["toimitustapa"] = $tarkrow["tunnus"];
              }
              else {
                $override["toimitustapa"] = "";
              }
            }

            //  Duunataan itse p‰ivitys/insert kysely!!!
            for ($i = 1; $i < mysql_num_fields($masterres); $i++) {
              $kennimi = mysql_field_name($masterres, $i);

              // N‰m‰ ohitetaan aina
              if (isset($masterrow[$kennimi]) and in_array($kennimi, array("yhtio", "tunnus", "muuttaja", "muutospvm", "laatija", "luontiaika"))) {
                continue;
              }

              // Ohitetaan t‰m‰ koska se on synkronoi kielloissa
              if (isset($synkronoi_kiellot[$table]) and in_array($kennimi, $synkronoi_kiellot[$table])) {
                if ($update_insert == "INSERT") {
                  // Jos kent‰lle on m‰‰ritelty oletusarvo avainsanoihin niin haetaan se
                  $query = "SELECT *
                           FROM avainsana
                           WHERE yhtio = '{$kohderow['yhtio']}'
                           and laji    = 'MYSQLALIAS'
                           and selite  = '{$table}.{$kennimi}'
                           and selitetark_2 = 'Default'
                           and selitetark_4 != ''";
                  $mysqlalias_default_res = pupe_query($query);

                  if (mysql_num_rows($mysqlalias_default_res) === 0) {
                    continue;
                  }
                  else {
                    $mysqlalias_default_row = mysql_fetch_assoc($mysqlalias_default_res);
                    $override[$kennimi] = $mysqlalias_default_row['selitetark_4'];
                  }
                }
                else {
                  continue;
                }
              }

              // Ohitetaan tyhj‰ "override"-muuttuja
              if (isset($override[$kennimi]) and empty($override[$kennimi])) {
                continue;
              }

              // Korvataanko p‰ivitett‰v‰ arvo?
              if (!empty($override[$kennimi])) {
                $updvalue = $override[$kennimi];
              }
              else {
                $updvalue = $masterrow[$kennimi];
              }

              $syncquery .= ", ". $kennimi." = '$updvalue' \n";
            }

            $updres = pupe_query($syncquery." ".$syncquery2);

            if (mysql_affected_rows() > 0) {
              $erot = "";

              if (count($override) > 0) {
                $erot = "\n\nPoikkeukset synkronoinnissa:\n";

                foreach ($override as $key => $value) {
                  $erot .= "$key: ".$masterrow[$key]." => ".$value."\n";
                }
              }

              if ($update_insert == "INSERT") {
                $utunnus = mysql_insert_id($GLOBALS["masterlink"]);
                $synclog .= "Yhtiˆlle '$kohderow[yhtio]' lis‰ttiin tietue ($utunnus)\n";

                synclog($kohderow["yhtio"], $table, "Uusi $table lis‰tty.$erot", $utunnus);
              }
              else {
                synclog($kohderow["yhtio"], $table, "Tietue ($vanhatunnus) p‰ivitetty.".$muutos.$erot, $utunnus);
                $synclog .= "Yhtiˆlle '$kohderow[yhtio]' p‰ivitettiin tietue ($vanhatunnus)\n";
              }
            }
            else {
              $synclog .= "Yhtiˆlle '$kohderow[yhtio]' ei ollut mit‰‰n p‰ivitett‰v‰‰\n";
            }
          }
          else {
            $synclog .= "VIRHE: Yhtiˆn '$kohderow[yhtio]' tietoa ei voitu p‰ivitt‰‰!!!\n";
          }
        }
      }
    }
    else {
      $synclog .= "Yht‰‰n synkronoitavaa yhtiˆt‰ ei lˆytynyt!!!\n";
      synclog($yhtio, $table, $synclog, $tunnus);
      return false;
    }

    $synclog .= "\nsynkronointi valmis!!";
    synclog($yhtio, $table, $synclog, $tunnus);
    return true;
  }
}

if (!function_exists("synkronoi_tarkista_pakolliset")) {
  function synkronoi_tarkista_pakolliset($table) {
    global $synkronoi_ainoastaan;

    // jos synkronoi_ainoastaan on tyhj‰‰, homma ok
    if (empty($synkronoi_ainoastaan)) {
      return true;
    }

    require_once "inc/pakolliset_sarakkeet.inc";

    list($pakolliset, $kielletyt, $wherelliset, $eiyhtiota, $joinattavat, $saakopoistaa, $oletukset, $eisaaollatyhja) = pakolliset_sarakkeet($table);

    // hetaan pakolliset ja wherelliset, merget‰‰n ne arrayt
    // pakollisten kenttien nimet pienill‰ kirjaimilla
    $indeksi = array_merge($wherelliset, $pakolliset);
    $indeksi = array_unique($indeksi);
    $indeksi = array_map('strtolower', $indeksi);

    // synkronoi_ainoastaan, tulee sis‰lt‰‰ ainakin kaikki taulun pakolliset sarakkeet
    foreach ($indeksi as $key) {
      if (!in_array($key, $synkronoi_ainoastaan[$table])) {
        return false;
      }
    }

    return true;
  }
}

if (!function_exists("jalkilaskentafunktiolle_ostohinta")) {
  function jalkilaskentafunktiolle_ostohinta($otunnus, $rivitunnus) {
    global $yhtiorow, $kukarow;

    // haetaan keikan otsikko laskurowhun
    $query  = "SELECT *
               from lasku
               where tunnus = '$otunnus'
               and yhtio    = '$kukarow[yhtio]'
               and ((tila='K' and alatila = 'X') or (tila='U' and alatila = 'X') or (tila='K' and alatila = 'I'))";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $laskurow = mysql_fetch_assoc($result);

      if ($laskurow["tila"] == "U") {
        // Tavara on ostettu sis‰‰n myyntilaskulla
        $query = "SELECT round(tilausrivi.rivihinta/tilausrivi.kpl, 2) ohinta
                  FROM tilausrivi
                  WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
                  and tilausrivi.tunnus        = $rivitunnus";
        $presult = pupe_query($query);
        $tilrivirow = mysql_fetch_assoc($presult);

        return $tilrivirow["ohinta"];
      }
      elseif ($laskurow["tila"] == "K" and $laskurow["alatila"] == "I") {
        // Tavara on ostettu sis‰‰n myyntilaskulla
        $query = "SELECT round(tilausrivi.rivihinta/tilausrivi.kpl, 2) ohinta
                  FROM tilausrivi
                  WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
                  and tilausrivi.tunnus        = $rivitunnus";
        $presult = pupe_query($query);
        $tilrivirow = mysql_fetch_assoc($presult);

        return $tilrivirow["ohinta"];
      }
      else {
        // Tavara on ostettu sis‰‰n keikalla

        // Virallinen laskenta, haetaan ihan kaikki rivit uudestaan (varattu=0) kaikki pit‰‰ olla viety varastoon jo ennen t‰t‰..
        $query = "SELECT tilausrivi.*, tilausrivi.kpl varattu
                  FROM tilausrivi
                  JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio and lasku.tunnus = tilausrivi.uusiotunnus)
                  LEFT JOIN tuotteen_toimittajat ON (tilausrivi.yhtio = tuotteen_toimittajat.yhtio and tilausrivi.tuoteno = tuotteen_toimittajat.tuoteno and tuotteen_toimittajat.liitostunnus = lasku.liitostunnus)
                  WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
                  and tilausrivi.varattu       = 0
                  and tilausrivi.yhtio         = '$kukarow[yhtio]'
                  and  tilausrivi.tyyppi       = 'O'
                  and tilausrivi.tunnus        = $rivitunnus";
        $presult = pupe_query($query);

        // Tsekataan viel‰ laskun valuttakurssi
        if ($laskurow["vienti_kurssi"] == 0) {  //t‰m‰ olisi huonompi juttu, mut ei mik‰‰n stopperi
          $laskurow["vienti_kurssi"] = 1;
        }

        // Tarkastetaan onko taricit k‰ytˆss‰
        $tv_kaytossa = FALSE;

        $query = "SELECT count(*) kpl from taric_veroperusteet";
        $tv_res = pupe_query($query);
        $tv_row = mysql_fetch_array($tv_res);

        if ($tv_row["kpl"] > 0) {
          $tv_kaytossa = TRUE;
        }

        // Jos lasketaan virallista varastonarvoa, otetaan keikan summa huomioon (kululaskujen yhteenlaskettu summa OLETUSVALUUTASSA on laskurow.saldo_maksettu)
        $rahtikulut = $laskurow['saldo_maksettu'] + round($laskurow['rahti_etu'] * $laskurow['vienti_kurssi'], 6);
        $rahtikulut += $round($laskurow['pyoristys_erot'] * $laskurow['vienti_kurssi'], 6);

        while ($tilrivirow = mysql_fetch_assoc($presult)) {

          $query  = "SELECT *
                     from tuote
                     LEFT JOIN tuotteen_toimittajat ON (tuotteen_toimittajat.liitostunnus = '$laskurow[liitostunnus]' and tuote.yhtio = tuotteen_toimittajat.yhtio and tuote.tuoteno = tuotteen_toimittajat.tuoteno)
                     where tuote.yhtio = '$kukarow[yhtio]'
                     and tuote.tuoteno = '$tilrivirow[tuoteno]'";
          $tuores = pupe_query($query);
          $tuorow = mysql_fetch_assoc($tuores);

          if ($tuorow['tuotekerroin'] <= 0) $tuorow['tuotekerroin'] = 1;

          // jos kysess‰ on kotimainen vaihto-omaisuuslasku, pit‰‰ lis‰t‰ tuotteen hintaan alvi
          if ($laskurow['vienti'] == 'C' or $laskurow['vienti'] == 'J') {
            $alvit = 1 + $tuorow["alv"] / 100;
          }
          else {
            $alvit = 1;
          }

          $alennukset = generoi_alekentta_php($tilrivirow, 'O', 'kerto');

          if ($laskurow['summa'] != 0) {
            $osuus   = round($tilrivirow['hinta']*$alvit*abs($tilrivirow['varattu'])*$alennukset*$tuorow['tuotekerroin'], 2)/$laskurow['summa'];  // kuinka paljon t‰m‰ rivi on koko tilauksesta

            $rahtios = $osuus*$rahtikulut;  // lasketaan sama osuus rahtikuluista t‰lle riville
          }
          else {
            $rahtios = 0;
          }

          if ($tilrivirow['varattu'] < 0) {
            $rahtios = $rahtios * -1;
          }

          $ohinta  = round($tilrivirow['hinta']*$alennukset*$tuorow['tuotekerroin']*$laskurow['vienti_kurssi']*$tilrivirow['varattu']+$rahtios, 6); // tuotteen rivihinta rahteineen OLETUSVALUUTASSA

          $tulliprossa = 0;

          if ($tv_kaytossa and $tilrivirow["var"] == "" and $laskurow["maa"] != $yhtiorow["maa"]) {
            // lis‰t‰‰n tulli
            require "tilauskasittely/taric_veroperusteet.inc";

            $ohinta = $ohinta * (1+($tulliprossa/100));
          }

          // lis‰t‰‰n riville extra kulu, jos sellanen oli annettu
          if ($tilrivirow["kate"] != 0) {
            $ohinta = $ohinta + $tilrivirow['kate'];
          }

          $rivihin = round($ohinta, $yhtiorow['hintapyoristys']);  // tilausrivin rivihinta talteen
          $ohinta  = round($ohinta / $tilrivirow['varattu'], 2);   // yhden tuotteen hinta kaikkine kuluineen

          return $ohinta;
        }
      }
    }
    else {
      return FALSE;
    }
  }
}

if (!function_exists("jalkilaskentafunktio")) {
  function jalkilaskentafunktio($tuoteno, $pvm, $uusihinta, $rivitunnus, $tapahtumatunnus=0, $kaantopisteen_saldomuutos=0) {
    global $yhtiorow, $kukarow, $jalkilaskenta_debug_text, $korjattavat_valmistukset, $korjattavat_valmistukset_ind;

    /*
    $tuoteno   = korjattava tuote
    $pvm     = mihin p‰iv‰‰n asti korjataan
    $uusihinta   = mik‰ on tuon pvm:n oikea ostohinta
    $rivitunnus = mik‰ on tapahtuman tehneen rivin tunnus (ostorivitunnus)
    */

    // Taulut lukkoon.
    $qu = "LOCK TABLE asiakas READ,
           avainsana READ,
           lasku WRITE,
           sarjanumeroseuranta READ,
           sarjanumeroseuranta_arvomuutos READ,
           sanakirja WRITE,
           tapahtuma WRITE,
           tilausrivi WRITE,
           tilausrivin_lisatiedot READ,
           tili READ,
           tiliointi WRITE,
           tuote WRITE,
           tuotepaikat READ,
           tuotteen_alv READ,
           yhtio READ,
           yhtion_toimipaikat READ";
    $re = pupe_query($qu);

    require "tilauskasittely/jalkilaskenta.inc";

    $qu = "UNLOCK TABLES";
    $re = pupe_query($qu);

    return $uusikehahin;
  }
}

if (!function_exists("jalkilaske_valmistus")) {
  function jalkilaske_valmistus($valmistettava_tilaus) {
    global $kukarow, $yhtiorow, $korjattavat_valmistukset, $korjattavat_valmistukset_ind, $tullaan_automaattikohdistuksesta;

    $toim        = "KORJAA";
    $from_kaikkikorj = "KORJAAKAIKKI";
    $tee        = "VALMISTA";

    $query = "SELECT lasku.tunnus,
              lasku.alatila,
              sum(if (tilausrivi.tyyppi in ('V','W'), 1, 0)) valmistusriveja,
              GROUP_CONCAT(DISTINCT tilausrivi.tunnus SEPARATOR ',') valmistettavat
              FROM lasku
              JOIN tilausrivi  ON lasku.yhtio = tilausrivi.yhtio and lasku.tunnus = tilausrivi.otunnus and (tilausrivi.toimitettu != '' or tilausrivi.tyyppi = 'D')
              WHERE lasku.yhtio      = '$kukarow[yhtio]'
              and lasku.tila         in ('V','L')
              and lasku.tilaustyyppi in ('V','W','N')
              and lasku.tunnus       = '$valmistettava_tilaus'
              GROUP BY 1,2
              HAVING valmistusriveja > 0";
    $tilre = pupe_query($query);
    $tilrow = mysql_fetch_assoc($tilre);

    $orig_alatila   = $tilrow["alatila"];
    $valmistettavat = $tilrow["valmistettavat"];

    if ($tee == "VALMISTA" and $valmistettavat != "") {
      //Haetaan otsikoiden tiedot
      $query = "SELECT
                GROUP_CONCAT(DISTINCT lasku.tunnus SEPARATOR ', ') 'Tilaus',
                GROUP_CONCAT(DISTINCT lasku.nimi SEPARATOR ', ') 'Asiakas/Nimi',
                GROUP_CONCAT(DISTINCT lasku.ytunnus SEPARATOR ', ') 'Ytunnus',
                GROUP_CONCAT(DISTINCT lasku.tilaustyyppi SEPARATOR ', ') 'Tilaustyyppi'
                FROM tilausrivi, lasku
                WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
                and  tilausrivi.tunnus in ($valmistettavat)
                and lasku.tunnus       = tilausrivi.otunnus
                and lasku.yhtio        = tilausrivi.yhtio";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 0) {
        if (!$tullaan_automaattikohdistuksesta) echo "<font class='error'>".t("Yht‰‰n tilausta ei lˆytynyt")."</font><br>";
        $tee = "";
      }
    }
    else {
      if (!$tullaan_automaattikohdistuksesta) {
        echo "<tr>";
        echo "<th>$valmistettava_tilaus</th>";
        echo "<td colspan='5'><font class='error'>".t("Yht‰‰n valmistusrivi‰ ei lˆytynyt")."!</font></td>";
        echo "</tr>";
      }
    }

    if ($tee == "VALMISTA" and $valmistettavat != "") {
      $row = mysql_fetch_assoc($result);

      //P‰ivitet‰‰n lasku niin, ett‰ se on tilassa korjataan
      $query = "UPDATE lasku
                SET alatila  = 'K'
                WHERE yhtio = '$kukarow[yhtio]'
                and tunnus  in ($row[Tilaus])
                and tila    in ('V','L')";
      $chkresult4 = pupe_query($query);

      $korjataan = " and (tilausrivi.toimitettu != '' or tilausrivi.tyyppi='D') ";

      //Haetaan valmistettavat valmisteet ja k‰ytett‰v‰t raaka-aineet
      $query = "SELECT tilausrivi.nimitys,
                tilausrivi.tuoteno,
                tilkpl tilattu,
                if (tyyppi!='L', varattu, 0) valmistetaan,
                if (tyyppi='L' or tyyppi='D', varattu, 0) valmistettu,
                if (toimitettu!='', if (varattu!=0, varattu, kpl), 0) korjataan,
                if (toimitettu!='', kpl, 0) valmistettu_valmiiksi,
                if (tyyppi!='L', kpl, 0) kaytetty,
                toimaika,
                kerayspvm,
                tilausrivi.tunnus tunnus,
                tilausrivi.perheid,
                tilausrivi.tyyppi,
                tilausrivi.toimitettuaika,
                tilausrivi.otunnus otunnus,
                tilausrivi.uusiotunnus laskutettu,
                tilausrivi.kommentti,
                tuote.ei_saldoa,
                tilausrivi.kommentti,
                tuote.sarjanumeroseuranta,
                tuote.yksikko,
                tilausrivi.varattu,
                tilausrivi.var,
                tilausrivi.hyllyalue,
                tilausrivi.hyllyvali,
                tilausrivi.hyllytaso,
                tilausrivi.hyllynro
                FROM tilausrivi, tuote
                WHERE tilausrivi.otunnus in ($row[Tilaus])
                and tilausrivi.tunnus    in ($valmistettavat)
                and tilausrivi.yhtio     = '$kukarow[yhtio]'
                and tuote.yhtio          = tilausrivi.yhtio
                and tuote.tuoteno        = tilausrivi.tuoteno
                and tyyppi               in ('V','W','M','L','D')
                $korjataan
                ORDER BY perheid desc, tyyppi in ('W','M','L','D','V'), tunnus";
      $presult = pupe_query($query);
      $riveja = mysql_num_rows($presult);

      $rivkpl = mysql_num_rows($presult);
      $voikokorjata = 0;

      $tee       = 'TEEVALMISTUS';
      $valmisteet_chk = array();
      $tuotenumerot   = array();
      $edtilkpllat   = array();
      $tilkpllat     = array();
      $valmkpllat   = array();
      $rekru       = array();
      $virhe       = array();
      $perutamakorj   = array();
      $era_new_paikka = "";
      unset($osatoimitus);

      while ($prow = mysql_fetch_assoc($presult)) {

        if ($prow["tyyppi"] == 'W' or $prow["tyyppi"] == 'M') {
          // N‰m‰ ovat valmisteita
          $valmisteet_chk[$prow["tunnus"]] = $prow["tuoteno"];
          $tuotenumerot[$prow["tunnus"]] = $prow["tuoteno"];
        }
        elseif ($prow["tyyppi"] == 'D') {
          // N‰m‰ ovat jo valmistettu
        }
        else {
          // T‰ss‰ tulevat kaikki raaka-aineet

          // tehd‰‰n salditsekki vain saldollisille raaka-aineille
          if ($prow["ei_saldoa"] == "") {
            $tuotenumerot[$prow["tunnus"]] = $prow["tuoteno"];
          }
        }

        if ($toim == "KORJAA" and  $prow["tyyppi"] == 'V') {
          $edtilkpllat[$prow["tunnus"]] = $prow["korjataan"];
          $tilkpllat[$prow["tunnus"]] = $prow["korjataan"];
        }
        elseif ($toim == "KORJAA" and  $prow["tyyppi"] == 'W') {
          $edtilkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
          $tilkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
        }
        elseif ($prow["toimitettuaika"] == "0000-00-00 00:00:00") {
          $edtilkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
          $tilkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
        }

        if (($prow["tyyppi"] == "W" or $prow["tyyppi"] == "M") and $prow["toimitettuaika"] != "0000-00-00 00:00:00" and $toim == "KORJAA") {

          //tutkitaan kuinka paljon t‰t‰ nyt oli valmistettu
          $query = "SELECT sum(kpl) valmistetut
                    FROM tilausrivi
                    WHERE yhtio        = '$kukarow[yhtio]'
                    and otunnus        = '$prow[otunnus]'
                    and perheid        = '$prow[perheid]'
                    and tuoteno        = '$prow[tuoteno]'
                    and (
                      (tyyppi = 'D' and toimitettuaika = '0000-00-00 00:00:00')
                      OR
                      (tyyppi = 'O')
                    )";
          $sumres = pupe_query($query);
          $sumrow = mysql_fetch_array($sumres);

          $query = "SELECT count(*) laskuja
                    FROM lasku
                    WHERE yhtio = '$kukarow[yhtio]'
                    and tunnus  = '$prow[laskutettu]'
                    and tila    = 'U'
                    and alatila = 'X'";
          $slres = pupe_query($query);
          $slrow = mysql_fetch_array($slres);

          if ($prow["tunnus"] == $prow["perheid"]) {
            if ($sumrow["valmistetut"] != 0 and $slrow["laskuja"] == 0) {

              if ((float) $prow["valmistetaan"] > 0) {
                $valmkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
              }
              else {
                $valmkpllat[$prow["tunnus"]] = $sumrow["valmistetut"];
              }

              $voikokorjata++;
            }
            elseif ($sumrow["valmistetut"] != 0 and $slrow["laskuja"] > 0) {

              if ((float) $prow["valmistetaan"] > 0) {
                $valmkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
              }
              else {
                $valmkpllat[$prow["tunnus"]] = $sumrow["valmistetut"];
              }

              $voikokorjata++;
            }
          }
          else {
            if (($sumrow["valmistetut"] != 0 and $slrow["laskuja"] == 0) or ($sumrow["valmistetut"] != 0 and $slrow["laskuja"] > 0)) {

              if ((float) $prow["valmistetaan"] > 0) {
                $valmkpllat[$prow["tunnus"]] = $prow["valmistetaan"];
              }
              else {
                $valmkpllat[$prow["tunnus"]] = $sumrow["valmistetut"];
              }
            }
          }
        }

        //echo "<tr>";
        //echo "<th>$valmistettava_tilaus</th>";
        //echo "<td>".$valmisteet_chk[$prow["tunnus"]]."</td>";
        //echo "<td>".$tuotenumerot[$prow["tunnus"]]."</td>";
        //echo "<td>".$edtilkpllat[$prow["tunnus"]]."</td>";
        //echo "<td>".$tilkpllat[$prow["tunnus"]]."</td>";
        //echo "<td>".$valmkpllat[$prow["tunnus"]]."</td>";
        //echo "</tr>";
      }

      ob_start();
      require "tilauskasittely/valmista_tilaus.php";
      $retval = ob_get_contents();
      ob_end_clean();

      if (!$tullaan_automaattikohdistuksesta) {
        if (count($virhe) > 0) {
          echo "<tr>";
          echo "<th>$valmistettava_tilaus</th>";
          echo "<td colspan='5'><font class='error'>", var_dump($virhe), "</font></td>";
          echo "</tr>";
        }
        else {
          echo "<tr>";
          echo "<th>$valmistettava_tilaus</th>";
          echo "<td colspan='5'><font class='ok'>$retval</font></td>";
          echo "</tr>";
        }
      }

      $query = "UPDATE lasku
                SET alatila  = '$orig_alatila'
                WHERE yhtio = '$kukarow[yhtio]'
                and tunnus  = '$valmistettava_tilaus'
                and tila    in ('V','L')";
      $chkresult4 = pupe_query($query);
    }
  }
}

if (!function_exists("tuotteen_myyntihinta")) {
  function tuotteen_myyntihinta($laskurow, $trow, $kpl, $naytetaanko_netto = "") {
    global $yhtiorow, $kukarow;

    // palautetaan tuotteen SVH laskun valuutassa
    // t‰m‰ funktion on kopsattu alehinta-funktiosta sopivilta osilta
    $hinta       = 0;
    $netto      = "";
    $valuutta    = "";

    // 5. hinnasto.hinta tuotteen nettohinta hinnastosta laskun valuutassa
    if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

      $query = "SELECT *
                FROM hinnasto
                WHERE yhtio                 = '$kukarow[yhtio]'
                and tuoteno                 = '$trow[tuoteno]'
                and tuoteno                != ''
                and laji                    in ('N', 'E')
                and valkoodi                = '$laskurow[valkoodi]'
                and maa                     in ('$laskurow[maa]','')
                and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
                AND (yhtion_toimipaikka_id IS NULL
                  OR yhtion_toimipaikka_id  = 0
                  OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                ORDER BY yhtion_toimipaikka_id DESC,
                         IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                         maa DESC
                LIMIT 1";
      $hresult = pupe_query($query);

      if (mysql_num_rows($hresult) > 0) {
        $hrow         = mysql_fetch_assoc($hresult);
        $hinta       = $hrow["hinta"];
        $netto      = $hrow["laji"];
        $valuutta    = $hrow["valkoodi"];
      }
    }

    // 6. hinnasto.hinta tuotteen nettohinta hinnastosta yhtiˆn valuutassa
    if ($hinta == 0) {

      $query = "SELECT *
                FROM hinnasto
                WHERE yhtio                 = '$kukarow[yhtio]'
                and tuoteno                 = '$trow[tuoteno]'
                and tuoteno                != ''
                and laji                    in ('N', 'E')
                and valkoodi                in ('$yhtiorow[valkoodi]','')
                and maa                     in ('$laskurow[maa]','')
                and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
                AND (yhtion_toimipaikka_id IS NULL
                  OR yhtion_toimipaikka_id  = 0
                  OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                ORDER BY yhtion_toimipaikka_id DESC,
                         IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                         valkoodi DESC
                LIMIT 1";
      $hresult = pupe_query($query);

      if (mysql_num_rows($hresult) > 0) {
        $hrow         = mysql_fetch_assoc($hresult);
        $hinta       = $hrow["hinta"];
        $netto      = $hrow["laji"];
        $valuutta    = $hrow["valkoodi"];
      }
    }

    // 15. tuote.nettohinta (tuotteen nettohinta)
    if ($hinta == 0 and $trow['nettohinta'] > 0 and $naytetaanko_netto == "") {
      $hinta       = $trow['nettohinta'];
      $netto       = 'N';
      $valuutta    = $yhtiorow["valkoodi"];
    }

    // 16. hinnasto.hinta tuotteen bruttohinta hinnastosta laskun valuutassa
    if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

      $query = "SELECT *
                FROM hinnasto
                WHERE yhtio                 = '$kukarow[yhtio]'
                and tuoteno                 = '$trow[tuoteno]'
                and tuoteno                != ''
                and laji                    = ''
                and valkoodi                = '$laskurow[valkoodi]'
                and maa                     in ('$laskurow[maa]','')
                and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
                AND (yhtion_toimipaikka_id IS NULL
                  OR yhtion_toimipaikka_id  = 0
                  OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                ORDER BY yhtion_toimipaikka_id DESC,
                         IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                         maa DESC
                LIMIT 1";
      $hresult = pupe_query($query);

      if (mysql_num_rows($hresult) > 0) {
        $hrow      = mysql_fetch_assoc($hresult);
        $hinta       = $hrow["hinta"];
        $netto      = $hrow["laji"];
        $valuutta    = $hrow["valkoodi"];
      }
    }

    // 17. hinnasto.hinta tuotteen bruttohinta hinnastosta yhtion valuutassa
    if ($hinta == 0) {

      $query = "SELECT *
                FROM hinnasto
                WHERE yhtio                 = '$kukarow[yhtio]'
                and tuoteno                 = '$trow[tuoteno]'
                and tuoteno                != ''
                and laji                    = ''
                and valkoodi                in ('$yhtiorow[valkoodi]','')
                and maa                     in ('$laskurow[maa]','')
                and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
                AND (yhtion_toimipaikka_id IS NULL
                  OR yhtion_toimipaikka_id  = 0
                  OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                ORDER BY yhtion_toimipaikka_id DESC,
                         IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                         valkoodi DESC
                LIMIT 1";
      $hresult = pupe_query($query);

      if (mysql_num_rows($hresult) > 0) {
        $hrow      = mysql_fetch_assoc($hresult);
        $hinta       = $hrow["hinta"];
        $netto      = $hrow["laji"];
        $valuutta    = $hrow["valkoodi"];
      }
    }

    // 18. tuote.myyntihinta (tuotteen bruttohinta)
    if ($hinta == 0) {

      $hinta    = $trow['myyntihinta'];
      $netto     = '';
      $valuutta  = $yhtiorow["valkoodi"];
    }

    if ($valuutta == "") $valuutta = $yhtiorow["valkoodi"];

    if ($laskurow["valkoodi"] != $valuutta) {
      $hinta = laskuval($hinta, $laskurow["vienti_kurssi"]);
    }

    if ($trow["myyntihinta_maara"] != 0) {
      $hinta = round($hinta / $trow["myyntihinta_maara"], $yhtiorow["hintapyoristys"]);
    }

    return $hinta;

  }
}

if (!function_exists("alv")) {
  function alv($laskurow, $trow, $hinta, $alv, $alehinta_alv) {
    global $yhtiorow, $kukarow;

    ///* Sis‰‰n *///
    // $alv                --> K‰ytt‰j‰n syˆtt‰m‰ ALV
    // $hinta              --> alehinta-funktion laskema hinta
    // $trow[alv]          --> Tuotteen ALV
    // $laskurow[vienti]   --> Laskun tyyppi (kotimaa '', vientieu 'E' , vienti eieu 'K')
    // $laskurow[ytunnus]  --> Laskunsaajan y-tunnus
    // $laskurow[tila]     --> Laskun tila O=osto, muut tilat on myynti‰
    // $laskurow[alv]      --> Laskun otsikolla oleva alv
    // $laskurow[valkoodi] --> Laskun valuutta

    ///* Ulos *///
    // $alv                --> Uusi laskettu ALV
    // $hinta              --> Uusi laskettu kappalehinta

    // jos meill‰ on tuotteelta tuleva poikkeava tuotteen alv, k‰ytet‰‰n sit‰
    if ($alehinta_alv != 0) {
      $trow["alv"]     = $alehinta_alv;

      //yhtiˆn oletusalvi!
      $wquery = "SELECT selite
                 FROM avainsana
                 WHERE yhtio     = '$kukarow[yhtio]'
                 AND laji        = 'alv'
                 AND selitetark != ''";
      $wtres  = pupe_query($wquery);
      $wtrow  = mysql_fetch_assoc($wtres);

      $wtrow["selite"] = $laskurow["alv"]; // otetaan "yhtiˆn oletus" laskulta, koska t‰ss‰ keisiss‰ siell‰ pit‰s olla yhtiˆn oletus aina
    }

    if ($laskurow["tila"] != "O") {
      $asque = "SELECT laji
                FROM asiakas
                WHERE yhtio = '$kukarow[yhtio]'
                AND tunnus  = '$laskurow[liitostunnus]'";
      $asres  = pupe_query($asque);
      $asrow  = mysql_fetch_assoc($asres);
    }

    if ($laskurow["tila"] == "O") {
      // Jos k‰ytt‰j‰ on valinnut drop-downista jonkun nollasta poikkeavan alvin, niin lasketaan sen verran alvia pois hinnasta
      // Oletuksena ostohinnat ovat t‰ll‰ hetkell‰ ilman alvia
      if ($alv != 0) {
        $hinta = round($hinta / (1+$alv/100), $yhtiorow['hintapyoristys']);
      }

      $alv = 0; //ostotilaus --> ei alvia riveille
    }
    elseif ($alv >= 600) {
      //T‰ss‰ keississ‰ on k‰‰nteisen verotuksen alaista myynti‰
      if ($laskurow["vienti"] == ""  and $laskurow["alv"] == 0) {
        // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
        $alv = 600;
      }
      if (($laskurow["vienti"] == "" or $asrow["laji"] == "H") and $laskurow["alv"] != 0) {
        // Otsikolla on valittu verollinen kotimaan myynti
        if ($trow["alv"] >= 600) {
          $alv = $trow["alv"];
        }
        else {
          $alv = $trow["alv"]+600;
        }
      }
      if ($laskurow["vienti"] == "E" and $asrow["laji"] != "H") {
        // EU-vienti yritykselle --> alviton
        $alv = 600;
      }
      if ($laskurow["vienti"] == "K") {
        // Vienti EU:n ulkopuolelle on aina alviton
        $alv = 600;
      }

      $alv = (float) $alv;
    }
    elseif ($alv >= 500) {
      //T‰ss‰ keississ‰ on marginaalimyynti‰
      if ($laskurow["vienti"] == ""  and $laskurow["alv"] == 0) $alv = 500;              // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
      if (($laskurow["vienti"] == "" or $asrow["laji"] == "H") and $laskurow["alv"] != 0) $alv = $trow["alv"]+500; // Otsikolla on valittu verollinen kotimaan myynti
      if ($laskurow["vienti"] == "E" and $asrow["laji"] != "H") $alv = 500;              // EU-vienti yritykselle --> alviton
      if ($laskurow["vienti"] == "K") $alv = 500;              // Vienti EU:n ulkopuolelle on aina alviton

      $alv = (float) $alv;
    }
    elseif ($yhtiorow["alv_kasittely"] != "") {
      //T‰ss‰ keississ‰ kaikki hinnat ovat aina verottomia ja vero lis‰t‰‰n vasta laskutuksessa
      if ($laskurow["vienti"] == ""  and $laskurow["alv"] == 0) $alv = 0;                           // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
      if (($laskurow["vienti"] == "" or $asrow["laji"] == "H") and $laskurow["alv"] != 0 and $alv == "") $alv = $trow["alv"]; // Otsikolla on valittu verollinen kotimaan myynti
      if ($laskurow["vienti"] == "E" and $asrow["laji"] != "H") $alv = 0;                           // EU-vienti yritykselle --> alviton
      if ($laskurow["vienti"] == "K") $alv = 0;                           // Vienti EU:n ulkopuolelle on aina alviton

      $alv = (float) $alv;
    }
    else {
      //T‰ss‰ keississ‰ kaikki hinnat sis‰lt‰v‰t arvonlis‰veron
      if ($laskurow["vienti"] == ""  and $laskurow["alv"] == 0) $alv = 0;                           // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
      if (($laskurow["vienti"] == "" or $asrow["laji"] == "H") and $laskurow["alv"] != 0 and $alv == "") $alv = $trow["alv"]; // Otsikolla on valittu verollinen kotimaan myynti
      if ($laskurow["vienti"] == "E" and $asrow["laji"] != "H") $alv = 0;                           // EU-vienti yritykselle --> alviton
      if ($laskurow["vienti"] == "K") $alv = 0;                           // Vienti EU:n ulkopuolelle on aina alviton

      $alv = (float) $alv;
      $trow['alv'] = (float) $trow['alv'];

      // Jos alvit t‰sm‰‰v‰t, ei tarvitse tehd‰ mit‰‰n. Muuten lasketaan uuden alvin sis‰lt‰v‰ myyntihinta.
      if ($alv != $trow['alv']) {
        if ($laskurow["valkoodi"] != '' and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {
          $hinta = round($hinta / (1+$trow['alv']/100) * (1+$alv/100), 6);
        }
        else {
          $hinta = round($hinta / (1+$trow['alv']/100) * (1+$alv/100), $yhtiorow['hintapyoristys']);
        }
      }
    }

    //echo "$trow[tuoteno], vienti '$laskurow[vienti]', otsikon alv '$laskurow[alv]', annettava alv '$alv', tuotteen alv '$trow[alv]', oikea kappalehinta '$hinta'<br>";

    return array($hinta, $alv);
  }
}

// Funkkari jolla tutkitaan onko joku ale viel‰ settaamatta
if (!function_exists("jatka_ale")) {
  function jatka_ale($ale) {
    global $yhtiorow;

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      if (!isset($ale["ale".$alepostfix])) {
        return TRUE;
      }
    }

    return FALSE;
  }
}

// Funkkari jolla setataan lˆydetyt alennukset
if (!function_exists("settaa_ale")) {
  function settaa_ale($ale, $aleperuste, $aperuste, $hresult, $aleperuste_nro, $aleperuste_teksti) {
    global $yhtiorow;

    if (mysql_num_rows($hresult) > 0) {
      while ($hrow = mysql_fetch_assoc($hresult)) {
        if (isset($hrow['campaign_id'])) {
          $GLOBALS['kampanjahinnoitteluntunnus'] = $hrow['campaign_id'];
          $aperuste .= " Kampanjahinnoittelu. ";
        }
        if (!isset($ale["ale".$hrow["alennuslaji"]])) {
          $aleperuste["ale".$hrow["alennuslaji"]] = $aleperuste_nro;
          $ale["ale".$hrow["alennuslaji"]] = $hrow["alennus"];
          $aperuste .= " $aleperuste_teksti (Aletaso: $hrow[alennuslaji]).";
        }
      }
    }

    return array($ale, $aleperuste, $aperuste);
  }
}

if (!function_exists("etayhtio_hinta")) {
  function etayhtio_hinta($rivi_tuoteno, $kpl_maara, $laskurow) {
    // Tarvitaa: rivin tuoteno, laskurow, kpl-m‰‰r‰, eta_yhtio

    global $yhtiorow, $kukarow;

    $query = "SELECT *
              FROM tuote
              WHERE yhtio = '{$GLOBALS['eta_yhtio']}'
              AND tuoteno = '{$rivi_tuoteno}'";
    $tres_eta = pupe_query($query);
    $trow_eta = mysql_fetch_assoc($tres_eta);

    list($lis_hinta_eta, $lis_netto_eta, $lis_eta_ale_kaikki, $alehinta_alv_eta, $alehinta_val_eta) = alehinta($laskurow, $trow_eta, $kpl_maara, '', '', '', '', $GLOBALS['eta_yhtio']);

    $hintapyoristys_echo = $lis_hinta_eta;

    foreach ($lis_eta_ale_kaikki as $val) {
      $hintapyoristys_echo *= (1 - ($val / 100));
    }

    $etayhtion_rivinarvo =   ($hintapyoristys_echo * $kpl_maara);
    return   $etayhtion_rivinarvo;
  }
}

if (!function_exists("hae_asiakkaan_minkpl")) {
  function hae_asiakkaan_minkpl($asiakastunnus) {
    global $kukarow, $yhtiorow;

    $minkpl = array(1 => 1);
    $segmenttilisa = "";

    // haetaan asiakkaan tiedot
    $query = "SELECT *
              FROM asiakas
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$asiakastunnus}'";
    $alhire = pupe_query($query);

    if (mysql_num_rows($alhire) == 1) {
      $alehi_asrow = mysql_fetch_assoc($alhire);

      // haetaan asiakkaan segmentit
      $query = "SELECT group_concat(parent.tunnus) tunnukset
                FROM puun_alkio
                JOIN dynaaminen_puu AS node ON (puun_alkio.yhtio = node.yhtio and puun_alkio.laji = node.laji and puun_alkio.puun_tunnus = node.tunnus)
                JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft AND parent.lft > 0)
                WHERE puun_alkio.yhtio = '{$kukarow['yhtio']}'
                AND puun_alkio.laji    = 'asiakas'
                AND puun_alkio.liitos  = '{$alehi_asrow['tunnus']}'";
      $almight = pupe_query($query);
      $alehi_assegmenttirow = mysql_fetch_assoc($almight);

      if ($alehi_assegmenttirow["tunnukset"] != "") {
        $segmenttilisa = "
            UNION
            (SELECT DISTINCT minkpl
            FROM asiakashinta use index (yhtio_asiakas_segmentti_tuoteno)
            WHERE yhtio = '{$kukarow['yhtio']}'
              AND asiakas_segmentti in ({$alehi_assegmenttirow['tunnukset']})
            AND asiakas_segmentti != ''
            and minkpl > 1
            and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
            UNION
            (SELECT DISTINCT minkpl
            FROM asiakasalennus use index (yhtio_asiakas_segmentti_tuoteno)
            WHERE yhtio = '$kukarow[yhtio]'
              AND asiakas_segmentti in ({$alehi_assegmenttirow['tunnukset']})
            AND asiakas_segmentti != ''
            and minkpl > 1
            and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))";
      }

      $query = "(SELECT DISTINCT minkpl
                 FROM asiakasalennus use index (yhtio_asiakas_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND asiakas        = '{$alehi_asrow['tunnus']}'
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakashinta use index (yhtio_asiakas_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND asiakas        = '{$alehi_asrow['tunnus']}'
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakasalennus use index (yhtio_ytunnus_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND ytunnus        = '{$alehi_asrow['ytunnus']}'
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakashinta use index (yhtio_ytunnus_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND ytunnus        = '{$alehi_asrow['ytunnus']}'
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakashinta use index (yhtio_asiakasryhma_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 and asiakas_ryhma  = '{$alehi_asrow['ryhma']}'
                 and asiakas_ryhma != ''
                 and minkpl         > 1
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakasalennus use index (yhtio_asiakasryhma_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 and asiakas_ryhma  = '{$alehi_asrow['ryhma']}'
                 and asiakas_ryhma != ''
                 and minkpl         > 1
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakashinta use index (yhtio_piiri_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND piiri          = '{$alehi_asrow['piiri']}'
                 AND piiri         != ''
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 UNION
                 (SELECT DISTINCT minkpl
                 FROM asiakasalennus use index (yhtio_piiri_tuoteno)
                 WHERE yhtio        = '{$kukarow['yhtio']}'
                 AND piiri          = '{$alehi_asrow['piiri']}'
                 AND piiri         != ''
                 AND minkpl         > 1
                 AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                 {$segmenttilisa}";
      $kpl_chk_res = pupe_query($query);

      while ($kpl_chk_row = mysql_fetch_assoc($kpl_chk_res)) {
        $minkpl[$kpl_chk_row['minkpl']] = $kpl_chk_row['minkpl'];
      }
    }

    return $minkpl;
  }
}

if (!function_exists("hae_alehinta_minkpl")) {
  function hae_alehinta_minkpl($minkpl, $laskurow, $trow, $hinnat_per_alennus = false) {
    global $kukarow, $yhtiorow;

    $hinnasto = array();

    $query = "SELECT DISTINCT minkpl
              FROM hinnasto
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tuoteno = '{$trow['tuoteno']}'
              AND minkpl  > 1
              AND ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))";
    $kpl_chk_res = pupe_query($query);

    while ($kpl_chk_row = mysql_fetch_assoc($kpl_chk_res)) {
      $minkpl[$kpl_chk_row['minkpl']] = $kpl_chk_row['minkpl'];
    }

    asort($minkpl);

    foreach ($minkpl as $loop_kpl) {

      list($hinta, $netto, $ale, $alehinta_alv, $alehinta_val) = alehinta($laskurow, $trow, $loop_kpl, '', '', array());

      if ($netto == "") {
        $nettohinta = $hinta;
        for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
          $nettohinta *= (1 - $ale["ale{$alepostfix}"] / 100);
        }
        $nettohinta = round($nettohinta, $yhtiorow['hintapyoristys']);
      }
      else {
        $nettohinta = "";
      }

      $ei_loydy = TRUE;

      foreach ($hinnasto as $_arr) {
        if ($_arr['hinta'] == $hinta and (!$hinnat_per_alennus or $_arr['ale'] === $ale)) {
          $ei_loydy = FALSE;
          break;
        }
      }

      if ($ei_loydy) {
        $hinnasto[$loop_kpl] = array(
          'hinta' => $hinta,
          'netto' => $netto,
          'ale' => $ale,
          'nettohinta' => $nettohinta,
          'alehinta_alv' => $alehinta_alv,
          'alehinta_val' => $alehinta_val,
        );
      }

      unset($hinta, $netto, $ale, $alehinta_alv, $alehinta_val, $nettohinta);
    }

    return $hinnasto;
  }
}

if (!function_exists("alehinta")) {
  function alehinta($laskurow, $trow, $kpl, $netto, $hinta, $ale, $palautus="", $yhtio="", $onlapsi="", $asiakasryhma = '') {
    global $yhtiorow, $kukarow;

    // T‰m‰ rutiini m‰‰rittelee riville hinnan ja alennuksen
    // siihen tarvitaan:
    // $laskurow[] (laskun tiedot)
    // $trow[] (select * from tuote)
    // $kpl tilatava m‰‰r‰
    // $netto = N jos halutaan nettohinta
    // $hinta k‰ytt‰j‰n syˆtt‰m‰ hinta
    // $ale k‰ytt‰j‰n syˆtt‰m‰ ale - array
    // $debug (jos 1 niin n‰ytet‰‰n tulos)
    // if ($yhtiorow["asiakashinta_netto"] == "") jos kentt‰ on tyhj‰ niin asiakashinnat ovat nettohintoja, muuten ovat ei-nettohintoja

    // Tulokset on:
    // $hinta (hinta)
    // $netto onko hinta nettohinta vai ei
    // $ale - array jossa alennuprosentteja (aleprosentti)
    // $aperuste (selkokielinen teksti mihin p‰‰dyttiin)
    // $alehinta_alv jos on joku erikoialv t‰lle hinnaston tuotteelle
    // $alehinta_val hinnan valuutta
    // $hintaperuste hinnan peruste koodina
    // $aleperuste  alennuksen peruste koodina

    /*
    HUOM: tarkista asiakasinfo.php kun muutat alennus ja hintalalaskentaa!
    */

    /*
    HUOM: tarkista saako_myyda_private_label-funkkari ja kaikki n‰m‰ koodit "if ($temptrow["hinnastoon"] == "V" and ($hinnat["hintaperuste"] > 13 or $hinnat["hintaperuste"] === FALSE) and ($hinnat["aleperuste"] > 12 or $hinnat["aleperuste"] === FALSE)) {" kun muutat ale ja hintaperusteita!
    */

    // Varmistetaan, ett‰ m‰‰r‰ on ok
    $kpl = (float) $kpl;
    if ($kpl == 0) $kpl = 1;

    $aperuste     = "";
    $hperuste     = "";
    $alehinta_alv   = 0;
    $hintaperuste  = FALSE;
    $aleperuste    = FALSE;
    $vanha_yhtio  = "";
    $vanha_liitostunnus = 0;
    $hintaan_osunut_kampanja = null;
    $kampanjarajaus = '';

    // Onko kyseessä kampanja, jos on niin kampanjamatch yliajaa päivämäärärajauksen
    if (isset($laskurow['campaign_id'])) {
      $kampanjarajaus = " or campaign_id = {$laskurow['campaign_id']} ";
    }

    // T‰ss‰ katotaan onko ep‰kuranttiutta
    if ($trow["epakurantti100pvm"] != "0000-00-00") {
      $trow["kehahin"] = 0;
    }
    elseif ($trow["epakurantti75pvm"] != "0000-00-00") {
      $trow["kehahin"] = round($trow["kehahin"] * 0.25, 6);
    }
    elseif ($trow["epakurantti50pvm"] != "0000-00-00") {
      $trow["kehahin"] = round($trow["kehahin"] * 0.5, 6);
    }
    elseif ($trow["epakurantti25pvm"] != "0000-00-00") {
      $trow["kehahin"] = round($trow["kehahin"] * 0.75, 6);
    }

    // KAUTTALASKUTUSKIKKARE
    if ($yhtio != '') {
      $vanha_yhtio     = $kukarow['yhtio'];
      $vanha_liitostunnus = $laskurow['liitostunnus'];
      $vanha_ytunnus     = $laskurow['ytunnus'];

      $yhtiorow = hae_yhtion_parametrit($yhtio);
      $kukarow['yhtio'] = $yhtio;

      $query = "SELECT ytunnus, tunnus
                FROM asiakas
                WHERE yhtio         = '{$kukarow['yhtio']}'
                AND laji           != 'P'
                AND ytunnus         = '{$laskurow['ytunnus']}'
                AND toim_ovttunnus  = '{$laskurow['toim_ovttunnus']}'";
      $asiakas_tunnus_res = pupe_query($query);
      $asiakas_tunnus_row = mysql_fetch_assoc($asiakas_tunnus_res);

      $laskurow["ytunnus"]     = $asiakas_tunnus_row["ytunnus"];
      $laskurow["liitostunnus"]   = $asiakas_tunnus_row["tunnus"];
    }

    // oletetaan yhtiˆn valuutta jos sit‰ ei tiedet‰
    if ($laskurow["valkoodi"] == "") $laskurow["valkoodi"] = $yhtiorow["valkoodi"];

    // oletetaan tuotteen alvi ja valuutta
    $alehinta_val = $yhtiorow["valkoodi"];

    // Jos meill‰ on lasku menossa ulkomaille
    // Tietyiss‰ tapauksissa yhtiorow maa voi olla sama kuin laskun maa, mutta vat_numerosta tiedet‰‰n,
    // ett‰ ollaan verovelsollisia t‰h‰ maahan
    if ((isset($yhtiorow["vat_numero"]) and $yhtiorow["vat_numero"] != "") or ($laskurow["maa"] != "" and $laskurow["maa"] != $yhtiorow["maa"])) {

      // tutkitaan ollaanko siell‰ alv-rekisterˆity
      $query = "SELECT * from yhtion_toimipaikat where yhtio='$kukarow[yhtio]' and maa='$laskurow[maa]' and vat_numero != ''";
      $alhire = pupe_query($query);

      // ollaan alv-rekisterˆity, haetaan tuotteelle oikea ALV
      if (mysql_num_rows($alhire) == 1) {
        $query = "SELECT * from tuotteen_alv where yhtio='$kukarow[yhtio]' and maa='$laskurow[maa]' and tuoteno='$trow[tuoteno]' limit 1";
        $alhire = pupe_query($query);

        // ei lˆytynyt alvia, se on pakko lˆyty‰
        if (mysql_num_rows($alhire) == 0) {
          $alehinta_alv = -999.99; // t‰‰ on n‰in ett‰ tiedet‰‰n ett‰ k‰vi huonosti ja ei anneta lis‰t‰ tuotetta
          $alv          = -999.99;
          $netto        = "";
          $hinta        = "0";
        }
        else {
          $alehi_alrow = mysql_fetch_assoc($alhire);
          $alehinta_alv = $alehi_alrow["alv"];
        }
      }
    }

    // jos yhtio ei laske alennuksia lapsituotteille ja kyseess‰ on lapsituote, voidaan hieman oikaista...
    if ($onlapsi !="" and $yhtiorow["ei_alennuksia_lapsituotteille"] != "" ) {
      $hinta = tuotteen_myyntihinta($laskurow, $trow, $kpl);
      return array($hinta, '', array() , $alehinta_alv, $laskurow["valkoodi"]);
    }

    // haetaan asiakkaan tiedot
    $query = "SELECT *
              from asiakas
              where yhtio = '$kukarow[yhtio]'
              and tunnus  = '$laskurow[liitostunnus]'";
    $alhire = pupe_query($query);

    if (mysql_num_rows($alhire) == 1) {
      $alehi_asrow = mysql_fetch_assoc($alhire);
    }
    else {
      $alehi_asrow = array(
        'ryhma' => $asiakasryhma,
        'piiri' => "",
      );
      $aperuste .= t("Asiakasta ei lˆytynyt").". ";
    }

    // haetaan asiakkaan segmentit
    $query = "SELECT group_concat(parent.tunnus) tunnukset
              FROM puun_alkio
              JOIN dynaaminen_puu AS node ON (puun_alkio.yhtio = node.yhtio and puun_alkio.laji = node.laji and puun_alkio.puun_tunnus = node.tunnus)
              JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft AND parent.lft > 0)
              WHERE puun_alkio.yhtio = '$kukarow[yhtio]'
              AND puun_alkio.laji    = 'asiakas'
              AND puun_alkio.liitos  = '$laskurow[liitostunnus]'";
    $almight = pupe_query($query);
    $alehi_assegmenttirow = mysql_fetch_assoc($almight);

    if ($alehi_assegmenttirow["tunnukset"] == "") {
      $alehi_assegmenttirow = array();
    }

    // 1. k‰ytt‰j‰n syˆtt‰m‰ hinta/nettohinta
    if ($hinta != '') {
      $hintaperuste = 1;

      // nettohinta jos netto-kent‰ss‰ tulee N tai E
      if ($netto == 'N' or $netto == 'E') {
        $hperuste .= "K‰ytt‰j‰n antama nettohinta. ";
        for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
          $ale["ale".$alepostfix] = 0;
        }
      }
      else {
        $hperuste .= "K‰ytt‰j‰n antama hinta. ";
      }

      $alehinta_val = $laskurow["valkoodi"];

      if (trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {
        $hinta = round(yhtioval($hinta, $laskurow["vienti_kurssi"]), 6);
        $alehinta_val = $yhtiorow["valkoodi"];
      }
    }
    elseif ($hinta == '') {

      $hinta = 0;

      // 2A. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakashinta ashin1 USE INDEX (yhtio_asiakas_tuoteno)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and asiakas   = '$laskurow[liitostunnus]'
                   and asiakas   > 0
                   and tuoteno   = '$trow[tuoteno]'
                   and tuoteno  != ''
                   and valkoodi  = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakashinta ashin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and ytunnus   = '$laskurow[ytunnus]'
                   and ytunnus  != ''
                   and tuoteno   = '$trow[tuoteno]'
                   and tuoteno  != ''
                   and valkoodi  = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta         = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste     .= "Asiakkaan tuotteen nettohinta laskun valuutassa. ";
          $alehinta_val  = $laskurow["valkoodi"];
          $hintaperuste = 2;
        }
      }

      // 2B. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus, campaign_id
                   FROM asiakashinta ashin1 USE INDEX (yhtio_asiakas_tuoteno)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and asiakas   = '$laskurow[liitostunnus]'
                   and asiakas   > 0
                   and tuoteno   = '$trow[tuoteno]'
                   and tuoteno  != ''
                   and valkoodi  in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus, campaign_id
                   FROM asiakashinta ashin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and ytunnus   = '$laskurow[ytunnus]'
                   and ytunnus  != ''
                   and tuoteno   = '$trow[tuoteno]'
                   and tuoteno  != ''
                   and valkoodi  in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta     = $hrow["hinta"];
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste  .= "Asiakkaan tuotteen nettohinta.".$hrow['laji'];
          $hintaperuste = 2;
        }
      }

      // 3A. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakashinta ashin1 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and asiakas   = '$laskurow[liitostunnus]'
                   and asiakas   > 0
                   and ryhma     = '$trow[aleryhma]'
                   and ryhma    != ''
                   and valkoodi  = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakashinta ashin2 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and ytunnus   = '$laskurow[ytunnus]'
                   and ytunnus  != ''
                   and ryhma     = '$trow[aleryhma]'
                   and ryhma    != ''
                   and valkoodi  = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste    .= "Asiakkaan tuotealeryhm‰n nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 3;
        }
      }

      // 3B. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus, campaign_id
                   FROM asiakashinta ashin1 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and asiakas   = '$laskurow[liitostunnus]'
                   and asiakas   > 0
                   and ryhma     = '$trow[aleryhma]'
                   and ryhma    != ''
                   and valkoodi  in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus, campaign_id
                   FROM asiakashinta ashin2 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio   = '$kukarow[yhtio]'
                   and ytunnus   = '$laskurow[ytunnus]'
                   and ytunnus  != ''
                   and ryhma     = '$trow[aleryhma]'
                   and ryhma    != ''
                   and valkoodi  in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus}))
                   ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta    = $hrow["hinta"];
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste  .= "Asiakkaan tuotealeryhm‰n nettohinta. ";
          $hintaperuste = 3;
        }
      }

      // 4A. asiakas.segmentti tuote.tuoteno nettohinta (asiakassegmentin tuotteen hinta) laskun valuutassa
      if ($hinta == 0 and isset($alehi_assegmenttirow["tunnukset"]) and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakas_segmentti_tuoteno)
                  WHERE yhtio              = '$kukarow[yhtio]'
                    and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti   != ''
                  and tuoteno              = '$trow[tuoteno]'
                  and tuoteno             != ''
                  and ytunnus              = ''
                  and asiakas              = 0
                  and valkoodi             = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste    .= "Asiakassegmentin tuotteen nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 4;
        }
      }

      // 4B. asiakas.segmentti tuote.tuoteno nettohinta (asiakassegmentin tuotteen hinta) yhtiˆn valuutassa
      if ($hinta == 0 and isset($alehi_assegmenttirow["tunnukset"])) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakas_segmentti_tuoteno)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti !=''
                  and tuoteno            = '$trow[tuoteno]'
                  and tuoteno           != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and valkoodi           in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta        = $hrow["hinta"];
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste    .= "Asiakassegmentin tuotteen nettohinta. ";
          $hintaperuste = 4;
        }
      }

      // 5A. asiakas.ryhm‰ tuote.tuoteno nettohinta (asiakasaleryhm‰n tuotteen hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakasryhma_tuoteno)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and tuoteno        = '$trow[tuoteno]'
                  and tuoteno       != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and valkoodi       = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste    .= "Asiakasaleryhm‰n tuotteen nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 5;
        }
      }

      // 5B. asiakas.ryhm‰ tuote.tuoteno nettohinta (asiakasaleryhm‰n tuotteen hinta) yhtiˆn valuutassa
      if ($hinta == 0) {
        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakasryhma_tuoteno)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and tuoteno        = '$trow[tuoteno]'
                  and tuoteno       != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and valkoodi       in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta    = $hrow["hinta"];
          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }
          $hperuste  .= "Asiakasaleryhm‰n tuotteen nettohinta. ";
          $hintaperuste = 5;
        }
      }

      // Tarkistetaan viel‰ luetaanko piiri asiakkaalta vaiko tilaukselta
      $piiricheck = t_avainsana("PIIRI_ALENNUS", "", "and selitetark = 'T'", "", "", "selitetark");

      if ($piiricheck and isset($laskurow['piiri'])) {
        $alehi_asrow['piiri'] = $laskurow['piiri'];
      }

      // 6A. asiakas.piiri tuote.tuoteno nettohinta (asiakaspiirin tuotteen hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_piiri_tuoteno)
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and piiri     = '$alehi_asrow[piiri]'
                  and piiri    != ''
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and ytunnus   = ''
                  and asiakas   = 0
                  and valkoodi  = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $hperuste    .= "Asiakaspiirin tuotteen nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 6;
        }
      }

      // 6B. asiakas.piiri tuote.tuoteno nettohinta (asiakaspiirin tuotteen hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_piiri_tuoteno)
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and piiri     = '$alehi_asrow[piiri]'
                  and piiri    != ''
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and ytunnus   = ''
                  and asiakas   = 0
                  and valkoodi  in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),hinta asc, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = $hrow["hinta"];
          $hperuste    .= "Asiakaspiirin tuotteen nettohinta. ";
          $hintaperuste = 6;
        }
      }

      // 7A. asiakas.segmentti tuote.aleryhma nettohinta (asiakassegmentin tuotealeryhm‰n hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"])) and isset($alehi_assegmenttirow["tunnukset"])) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and ryhma              = '$trow[aleryhma]'
                  and ryhma             != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and valkoodi           = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $hperuste    .= "Asiakassegmentin tuotealeryhm‰n nettohinta laskun valuutassa.";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 7;
        }
      }

      // 7B. asiakas.segmentti tuote.aleryhma nettohinta (asiakassegmentin tuotealeryhm‰n hinta) yhtiˆn valuutassa
      if ($hinta == 0 and isset($alehi_assegmenttirow["tunnukset"])) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and ryhma              = '$trow[aleryhma]'
                  and ryhma             != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and valkoodi           in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = $hrow["hinta"];
          $hperuste    .= "Asiakassegmentin tuotealeryhm‰n nettohinta.";
          $hintaperuste = 7;
        }
      }

      // 8A. asiakas.ryhm‰ tuote.aleryhm‰ nettohinta (asiakasaleryhm‰n tuotealeryhm‰n hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and ryhma          = '$trow[aleryhma]'
                  and ryhma         != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and valkoodi       = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $hperuste    .= "Asiakasaleryhm‰n tuotealeryhm‰n nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 8;
        }
      }

      // 8B. asiakas.ryhm‰ tuote.aleryhm‰ nettohinta (asiakasaleryhm‰n tuotealeryhm‰n hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and ryhma          = '$trow[aleryhma]'
                  and ryhma         != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and valkoodi       in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta    = $hrow["hinta"];
          $hperuste  .= "Asiakasaleryhm‰n tuotealeryhm‰n nettohinta. ";
          $hintaperuste = 9;
        }
      }

      // 9A. asiakas.piiri tuote.aleryhma nettohinta (asiakaspiirin tuotealeryhm‰n hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and piiri     = '$alehi_asrow[piiri]'
                  and piiri    != ''
                  and ryhma     = '$trow[aleryhma]'
                  and ryhma    != ''
                  and ytunnus   = ''
                  and asiakas   = 0
                  and valkoodi  = '$laskurow[valkoodi]'
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          $hinta        = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $hperuste    .= "Asiakaspiirin tuotealeryhm‰n nettohinta laskun valuutassa. ";
          $alehinta_val = $laskurow["valkoodi"];
          $hintaperuste = 9;
        }
      }

      // 9B. asiakas.piiri tuote.aleryhma nettohinta (asiakaspiirin tuotealeryhm‰n hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM asiakashinta USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and piiri     = '$alehi_asrow[piiri]'
                  and piiri    != ''
                  and ryhma     = '$trow[aleryhma]'
                  and ryhma    != ''
                  and ytunnus   = ''
                  and asiakas   = 0
                  and valkoodi  in ('$yhtiorow[valkoodi]','')
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          elseif ($hrow["laji"] == "B") {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }
          else {
            //Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
            if ($yhtiorow["asiakashinta_netto"] == "E") {
              $netto  = 'E';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
            //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
            elseif ($yhtiorow["asiakashinta_netto"] == "B") {
              $netto  = '';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
              }
            }
            //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
            else {
              $netto  = 'N';
              for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
                $ale["ale".$alepostfix] = 0;
              }
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta        = $hrow["hinta"];
          $hperuste    .= "Asiakaspiirin tuotealeryhm‰n nettohinta. ";
          $hintaperuste = 9;
        }
      }

      // 10. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰/tuote.tuoteno negatiivinen-aleprosentti (asiakkaan katemyyntihinta netto)
      if ($hinta == 0) {

        $query = "(SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio        = '$kukarow[yhtio]'
                   and asiakas        = '$laskurow[liitostunnus]'
                   and asiakas        > 0
                   and asiakas_ryhma  = ''
                   and ryhma          = '$trow[aleryhma]'
                   and ryhma         != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and (alennus < 0 or left(alennus,1) = '-'))
                   UNION
                   (SELECT '3' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale2 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio        = '$kukarow[yhtio]'
                   and ytunnus        = '$laskurow[ytunnus]'
                   and ytunnus       != ''
                   and asiakas_ryhma  = ''
                   and ryhma          = '$trow[aleryhma]'
                   and ryhma         != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and (alennus < 0 or left(alennus,1) = '-'))
                   UNION
                   (SELECT '0' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale3 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio        = '$kukarow[yhtio]'
                   and asiakas        = '$laskurow[liitostunnus]'
                   and asiakas        > 0
                   and asiakas_ryhma  = ''
                   and tuoteno        = '$trow[tuoteno]'
                   and tuoteno       != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and (alennus < 0 or left(alennus,1) = '-'))
                   UNION
                   (SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale4 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio        = '$kukarow[yhtio]'
                   and ytunnus        = '$laskurow[ytunnus]'
                   and ytunnus       != ''
                   and asiakas_ryhma  = ''
                   and tuoteno        = '$trow[tuoteno]'
                   and tuoteno       != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and (alennus < 0 or left(alennus,1) = '-'))

                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {

          $hrow = mysql_fetch_assoc($hresult);

          //jos alennus on -999.99 myyd‰‰n kehahinnalla
          if ($hrow["alennus"] == -999.99) {
            $hrow["alennus"] = 0;
          }

          // Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
          if ($trow['kehahin'] <= 0) {
            $hinta     = 0.01;
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
            $netto    = "";
            $hperuste   .= "Katemyyntihinta (kokoep‰kurantti). ";
            $hintaperuste = 10;
          }
          elseif ($trow['kehahin'] > 0) {
            // Lasketaan keskihankintahinnan p‰‰lle haluttu kate
            $hinta = $trow['kehahin'] / (1 - (abs($hrow["alennus"]) / 100));

            // Jos on poikkeava myyntihinta-m‰‰r‰ laitetaan se hintaan mukaan
            if ($trow["myyntihinta_maara"] != 0) {
              $hinta = $hinta * $trow["myyntihinta_maara"];
            }

            // Jos tuotteiden hinnat sis‰lt‰v‰t arvonlis‰veron lis‰t‰‰n vero p‰‰lle
            if ($yhtiorow['alv_kasittely'] == '') {
              $hinta = $hinta * (1 + ($trow['alv'] / 100));
            }

            if (isset($hrow['campaign_id'])) {
              $hperuste .= " Kampanjahinnoittelu. ";

              $hintaan_osunut_kampanja = $hrow['campaign_id'];
            }

            // Pyˆristet‰‰n hinta haluttuun tarkkuuteen
            $hinta = round($hinta, $yhtiorow['hintapyoristys']);

            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
            $netto    = "";
            $hperuste   .= "Katemyyntihinta. ";
            $hintaperuste = 10;
          }
        }
      }

      // 11. asiakas.segmentti tuote.aleryhm‰/tuote.tuoteno negatiivinen-aleprosentti (asiakassegmentin katemyyntihinta netto)
      if ($hinta == 0 and isset($alehi_assegmenttirow["tunnukset"])) {

        $query = "(SELECT '2' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and ryhma              = '$trow[aleryhma]'
                  and ryhma             != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))
                  UNION
                  (SELECT '1' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale2 USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and tuoteno            = '$trow[tuoteno]'
                  and tuoteno           != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))

                  ORDER BY prio, minkpl desc, aika, alennus desc, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {

          $hrow = mysql_fetch_assoc($hresult);

          //jos alennus on -999.99 myyd‰‰n kehahinnalla
          if ($hrow["alennus"] == -999.99) {
            $hrow["alennus"] = 0;
          }

          // Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
          if ($trow['kehahin'] <= 0) {
            $hinta     = 0.01;
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
            $netto    = "";
            $hperuste   .= "Asiakassegmentin Katemyyntihinta (kokoep‰kurantti). ";
            $hintaperuste = 11;
          }
          elseif ($trow['kehahin'] > 0) {
            // Lasketaan keskihankintahinnan p‰‰lle haluttu kate
            $hinta = $trow['kehahin'] / (1 - (abs($hrow["alennus"]) / 100));

            // Jos on poikkeava myyntihinta-m‰‰r‰ laitetaan se hintaan mukaan
            if ($trow["myyntihinta_maara"] != 0) {
              $hinta = $hinta * $trow["myyntihinta_maara"];
            }

            // Jos tuotteiden hinnat sis‰lt‰v‰t arvonlis‰veron lis‰t‰‰n vero p‰‰lle
            if ($yhtiorow['alv_kasittely'] == '') {
              $hinta = $hinta * (1 + ($trow['alv'] / 100));
            }

            if (isset($hrow['campaign_id'])) {
              $hperuste .= " Kampanjahinnoittelu. ";

              $hintaan_osunut_kampanja = $hrow['campaign_id'];
            }

            // Pyˆristet‰‰n hinta haluttuun tarkkuuteen
            $hinta = round($hinta, $yhtiorow['hintapyoristys']);

            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }

            $netto    = "";
            $hperuste   .= "Asiakassegmentin Katemyyntihinta. ";
            $hintaperuste = 11;
          }
        }
      }

      // 12. asiakas.ryhm‰ tuote.aleryhm‰/tuote.tuoteno negatiivinen-aleprosentti (asiakkaan katemyyntihinta netto)
      if ($hinta == 0) {

        $query = "(SELECT '2' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale1 USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and ryhma          = '$trow[aleryhma]'
                  and ryhma         != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))
                  UNION
                  (SELECT '1' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale2 USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and tuoteno        = '$trow[tuoteno]'
                  and tuoteno       != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))

                  ORDER BY prio, minkpl desc, aika, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {

          $hrow = mysql_fetch_assoc($hresult);

          //jos alennus on -999.99 myyd‰‰n kehahinnalla
          if ($hrow["alennus"] == -999.99) {
            $hrow["alennus"] = 0;
          }

          // Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
          if ($trow['kehahin'] <= 0) {
            $hinta     = 0.01;
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
            $netto    = "";
            $hperuste   .= "Asiakasryhm‰ Katemyyntihinta (kokoep‰kurantti). ";
            $hintaperuste = 11;
          }
          elseif ($trow['kehahin'] > 0) {
            // Lasketaan keskihankintahinnan p‰‰lle haluttu kate
            $hinta = $trow['kehahin'] / (1 - (abs($hrow["alennus"]) / 100));

            // Jos on poikkeava myyntihinta-m‰‰r‰ laitetaan se hintaan mukaan
            if ($trow["myyntihinta_maara"] != 0) {
              $hinta = $hinta * $trow["myyntihinta_maara"];
            }

            // Jos tuotteiden hinnat sis‰lt‰v‰t arvonlis‰veron lis‰t‰‰n vero p‰‰lle
            if ($yhtiorow['alv_kasittely'] == '') {
              $hinta = $hinta * (1 + ($trow['alv'] / 100));
            }

            if (isset($hrow['campaign_id'])) {
              $hperuste .= " Kampanjahinnoittelu. ";

              $hintaan_osunut_kampanja = $hrow['campaign_id'];
            }

            // Pyˆristet‰‰n hinta haluttuun tarkkuuteen
            $hinta = round($hinta, $yhtiorow['hintapyoristys']);

            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }

            $netto    = "";
            $hperuste   .= "Asiakasryhm‰ Katemyyntihinta. ";
            $hintaperuste = 12;
          }
        }
      }

      // 13. asiakas.piiri tuote.aleryhm‰/tuote.tuoteno negatiivinen-aleprosentti (asiakaspiirin katemyyntihinta netto)
      if ($hinta == 0) {

        $query = "(SELECT '2' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale1 USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and piiri    = '$alehi_asrow[piiri]'
                  and piiri   != ''
                  and ryhma    = '$trow[aleryhma]'
                  and ryhma   != ''
                  and ytunnus  = ''
                  and asiakas  = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))
                  UNION
                  (SELECT '1' prio, alennus, campaign_id, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                  FROM asiakasalennus asale2 USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and piiri    = '$alehi_asrow[piiri]'
                  and piiri   != ''
                  and tuoteno  = '$trow[tuoteno]'
                  and tuoteno != ''
                  and ytunnus  = ''
                  and asiakas  = 0
                  and (minkpl <= $kpl or minkpl = 0)
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and (alennus < 0 or left(alennus,1) = '-'))

                  ORDER BY prio, minkpl desc, aika, alennus desc, tunnus desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {

          $hrow = mysql_fetch_assoc($hresult);

          //jos alennus on -999.99 myyd‰‰n kehahinnalla
          if ($hrow["alennus"] == -999.99) {
            $hrow["alennus"] = 0;
          }

          // Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
          if ($trow['kehahin'] <= 0) {
            $hinta     = 0.01;
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
            $netto    = "";
            $hperuste   .= "Asiakaspiirin Katemyyntihinta (kokoep‰kurantti). ";
            $hintaperuste = 11;
          }
          elseif ($trow['kehahin'] > 0) {
            // Lasketaan keskihankintahinnan p‰‰lle haluttu kate
            $hinta = $trow['kehahin'] / (1 - (abs($hrow["alennus"]) / 100));

            // Jos on poikkeava myyntihinta-m‰‰r‰ laitetaan se hintaan mukaan
            if ($trow["myyntihinta_maara"] != 0) {
              $hinta = $hinta * $trow["myyntihinta_maara"];
            }

            // Jos tuotteiden hinnat sis‰lt‰v‰t arvonlis‰veron lis‰t‰‰n vero p‰‰lle
            if ($yhtiorow['alv_kasittely'] == '') {
              $hinta = $hinta * (1 + ($trow['alv'] / 100));
            }

            if (isset($hrow['campaign_id'])) {
              $hperuste .= " Kampanjahinnoittelu. ";

              $hintaan_osunut_kampanja = $hrow['campaign_id'];
            }

            // Pyˆristet‰‰n hinta haluttuun tarkkuuteen
            $hinta = round($hinta, $yhtiorow['hintapyoristys']);

            for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }

            $netto    = "";
            $hperuste   .= "Asiakaspiirin Katemyyntihinta. ";
            $hintaperuste = 13;
          }
        }
      }

      // 14. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ aleprosentti == 999.99 (asiakkaan myym‰l‰hinta)
      if ($hinta == 0) {
        $query = "(SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and asiakas  = '$laskurow[liitostunnus]'
                   and asiakas  > 0
                   and ryhma    = '$trow[aleryhma]'
                   and ryhma   != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  = 999.99)
                   UNION
                   (SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale2 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and asiakas  = '$laskurow[liitostunnus]'
                   and asiakas  > 0
                   and ryhma    = '**'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  = 999.99)
                   UNION
                   (SELECT '3' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale3 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and ytunnus  = '$laskurow[ytunnus]'
                   and ytunnus != ''
                   and ryhma    = '$trow[aleryhma]'
                   and ryhma   != ''
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  = 999.99)
                   UNION
                   (SELECT '4' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus, campaign_id
                   FROM asiakasalennus asale4 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and ytunnus  = '$laskurow[ytunnus]'
                   and ytunnus != ''
                   and ryhma    = '**'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  = 999.99)
                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {

          $hrow = mysql_fetch_assoc($hresult);

          //Jos aleprossa  = 999.99 haetaan tuotteen myym‰l‰hinta myyntihinnan tilalle
          $query = "SELECT myymalahinta, alv FROM tuote WHERE yhtio = '$kukarow[yhtio]' and tuoteno = '$trow[tuoteno]'";
          $myymresult = pupe_query($query);
          $myymrow = mysql_fetch_assoc($myymresult);

          if ($alehinta_alv != "") $myymrow["alv"] = $alehinta_alv;

          if ($myymrow["myymalahinta"] > 0) {
            if ($yhtiorow["alv_kasittely"] != '') {
              $hinta = $myymrow["myymalahinta"]/($myymrow["alv"]/100+1);
            }
            else {
              $hinta = $myymrow["myymalahinta"];
            }
          }

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
            $ale["ale".$alepostfix] = 0;
          }

          $netto    = "";
          $hperuste   .= "Myym‰l‰hinta. ";
          $hintaperuste = 14;
        }
      }

      // 15A. hinnasto.hinta tuotteen nettohinta hinnastosta laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM hinnasto
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and laji      in ('N', 'E')
                  and valkoodi  = '$laskurow[valkoodi]'
                  and maa       in ('$laskurow[maa]','')
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and ((minkpl <= $kpl and maxkpl >= $kpl) or (minkpl = 0 and maxkpl = 0))
                  AND (yhtion_toimipaikka_id IS NULL
                    OR yhtion_toimipaikka_id  = 0
                    OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                  ORDER BY yhtion_toimipaikka_id DESC,
                           IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                           maa DESC,
                           tunnus DESC
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow         = mysql_fetch_assoc($hresult);

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta       = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $netto      = $hrow["laji"];
          $hperuste    .= "Tuotteen hinnastohinta laskun valuutassa";
          $alehinta_val  = $laskurow["valkoodi"];
          $hintaperuste   = 15;
        }
      }

      // 15B. hinnasto.hinta tuotteen nettohinta hinnastosta yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM hinnasto
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and laji      in ('N', 'E')
                  and valkoodi  in ('$yhtiorow[valkoodi]','')
                  and maa       in ('$laskurow[maa]','')
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and ((minkpl <= $kpl and maxkpl >= $kpl) or (minkpl = 0 and maxkpl = 0))
                  AND (yhtion_toimipaikka_id IS NULL
                    OR yhtion_toimipaikka_id  = 0
                    OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                  ORDER BY yhtion_toimipaikka_id DESC,
                           IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                           valkoodi DESC,
                           tunnus DESC
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow         = mysql_fetch_assoc($hresult);

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta       = $hrow["hinta"];
          $netto      = $hrow["laji"];
          $hperuste    .= "Tuotteen hinnastohinta yhtiˆn valuutassa";
          $hintaperuste = 15;
        }
      }

      // 16. tuote.nettohinta (tuotteen nettohinta)
      if ($hinta == 0 and $netto != 'E' and $trow['nettohinta'] > 0) {

        $hinta       = $trow['nettohinta'];
        $hperuste     .= "Tuotteen nettohinta. ";
        $netto       = 'N';
        for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
          $ale["ale".$alepostfix] = 0;
        }
        $hintaperuste = 16;
      }

      // 17A. hinnasto.hinta tuotteen bruttohinta hinnastosta laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM hinnasto
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and laji      = ''
                  and valkoodi  = '$laskurow[valkoodi]'
                  and maa       in ('$laskurow[maa]','')
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and ((minkpl <= $kpl and maxkpl >= $kpl) or (minkpl = 0 and maxkpl = 0))
                  AND (yhtion_toimipaikka_id IS NULL
                    OR yhtion_toimipaikka_id  = 0
                    OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                  ORDER BY yhtion_toimipaikka_id DESC,
                           IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                           maa DESC,
                           tunnus DESC
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow      = mysql_fetch_assoc($hresult);

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta      = round(yhtioval($hrow["hinta"], $laskurow["vienti_kurssi"]), 6);
          $netto      = $hrow["laji"];
          $hperuste    .= "Tuotteen hinnastohinta laskun valuutassa";
          $alehinta_val   = $laskurow["valkoodi"];
          $hintaperuste = 17;
        }
      }

      // 17B. hinnasto.hinta tuotteen bruttohinta hinnastosta yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "SELECT hinta, laji, campaign_id
                  FROM hinnasto
                  WHERE yhtio   = '$kukarow[yhtio]'
                  and tuoteno   = '$trow[tuoteno]'
                  and tuoteno  != ''
                  and laji      = ''
                  and valkoodi  in ('$yhtiorow[valkoodi]','')
                  and maa       in ('$laskurow[maa]','')
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and ((minkpl <= $kpl and maxkpl >= $kpl) or (minkpl = 0 and maxkpl = 0))
                  AND (yhtion_toimipaikka_id IS NULL
                    OR yhtion_toimipaikka_id  = 0
                    OR yhtion_toimipaikka_id  = '{$laskurow["yhtio_toimipaikka"]}')
                  ORDER BY yhtion_toimipaikka_id DESC,
                           IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),
                           valkoodi DESC,
                           tunnus DESC
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow      = mysql_fetch_assoc($hresult);

          if (isset($hrow['campaign_id'])) {
            $hperuste .= " Kampanjahinnoittelu. ";
            $hintaan_osunut_kampanja = $hrow['campaign_id'];
          }

          $hinta       = $hrow["hinta"];
          $netto      = $hrow["laji"];
          $hperuste    .= "Tuotteen hinnastohinta yhtiˆn valuutassa";
          $hintaperuste = 17;
        }
      }

      // 18. tuote.myyntihinta (tuotteen bruttohinta) yhtiˆn valuutassa
      if ($hinta == 0) {
        $hinta     = $trow['myyntihinta'];
        $hperuste  .= "Tuotteen myyntihinta. ";
        $hintaperuste = 18;
      }
    }

    // K‰yd‰‰n l‰pi k‰sin syˆtetyt alennukset jos niit‰ on
    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      if (isset($ale["ale".$alepostfix]) and is_numeric($ale["ale".$alepostfix]) and $ale["ale".$alepostfix] > 0) {
        // 1. k‰ytt‰j‰n syˆtt‰m‰ alennus
        $aleperuste["ale".$alepostfix] = 3;

        $aperuste .= " K‰ytt‰j‰n syˆtt‰m‰ ale (Aletaso: $alepostfix)";
      }
      elseif (isset($ale["ale".$alepostfix]) and is_numeric($ale["ale".$alepostfix]) and $ale["ale".$alepostfix] == 0) {
        // 2. k‰ytt‰j‰n syˆtt‰m‰ alennus
        $aleperuste["ale".$alepostfix] = 4;

        $aperuste .= " Ei alennusta (Aletaso: $alepostfix)";
      }
      elseif (isset($ale["ale".$alepostfix]) and is_numeric($ale["ale".$alepostfix]) and $ale["ale".$alepostfix] < 0) {
        // 3. k‰ytt‰j‰n syˆtt‰m‰ katejuttu
        // Nolla keskihankintahinta tai kokoep‰kurantti, katemyynti ei onnaa laitetaan sentti-hinnalla
        if ($trow['kehahin'] <= 0) {
          $hinta = 0.01;
        }
        elseif ($trow['kehahin'] > 0) {
          // Lasketaan keskihankintahinnan p‰‰lle haluttu kate
          $hinta = $trow['kehahin'] / (1 - (abs($ale["ale".$alepostfix]) / 100));

          // Jos on poikkeava myyntihinta-m‰‰r‰ laitetaan se hintaan mukaan
          if ($trow["myyntihinta_maara"] != 0) {
            $hinta = $hinta * $trow["myyntihinta_maara"];
          }

          // Jos tuotteiden hinnat sis‰lt‰v‰t arvonlis‰veron lis‰t‰‰n vero p‰‰lle
          if ($yhtiorow['alv_kasittely'] == '') {
            $hinta = $hinta * (1 + ($trow['alv'] / 100));
          }

          // Pyˆristet‰‰n hinta haluttuun tarkkuuteen
          $hinta = round($hinta, $yhtiorow['hintapyoristys']);
        }

        $aleperuste["ale".$alepostfix] = 5;
        $ale["ale".$alepostfix] = 0;
        $netto = "";
        $hintaperuste = 10;
        $aperuste .= "Katemyyntihinta. ";
      }
    }

    // Jos joku aletasoista on tyhj‰ tai kokonaan settaamatta, niin l‰hdet‰‰n etsim‰‰n alennuksia
    $jatka = FALSE;

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      if (isset($ale["ale".$alepostfix]) and !is_numeric($ale["ale".$alepostfix])) {
        // Jos ale on tyhj‰ niin unsetataan se
        unset($ale["ale".$alepostfix]);
        $jatka = TRUE;
      }

      if (!isset($ale["ale".$alepostfix])) {
        $jatka = TRUE;
      }
    }

    if ($jatka and $netto != 'N' and $netto != 'E') {

      // 4. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero aleprosentti (asiakkaan tuotteen alennus)
      $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                 FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_tuoteno)
                 WHERE yhtio  = '$kukarow[yhtio]'
                 and asiakas  = '$laskurow[liitostunnus]'
                 and asiakas  > 0
                 and tuoteno  = '$trow[tuoteno]'
                 and tuoteno != ''
                 and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                 and alennus  >= 0
                 and alennus  <= 100)
                 UNION
                 (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                 FROM asiakasalennus asale2 USE INDEX (yhtio_ytunnus_tuoteno)
                 WHERE yhtio  = '$kukarow[yhtio]'
                 and ytunnus  = '$laskurow[ytunnus]'
                 and ytunnus != ''
                 and tuoteno  = '$trow[tuoteno]'
                 and tuoteno != ''
                 and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                 and alennus  >= 0
                 and alennus  <= 100)
                 ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
      $hresult = pupe_query($query);

      list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 5, "Asiakkaan tuotteen alennus");

      // 5. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ aleprosentti (asiakkaan tuotealeryhm‰n alennus)
      if (jatka_ale($ale)) {
        $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                   FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and asiakas  = '$laskurow[liitostunnus]'
                   and asiakas  > 0
                   and ryhma    = '$trow[aleryhma]'
                   and ryhma   != ''
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  >= 0
                   and alennus  <= 100)
                   UNION
                   (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                   FROM asiakasalennus asale2 USE INDEX (yhtio_asiakas_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and asiakas  = '$laskurow[liitostunnus]'
                   and asiakas  > 0
                   and ryhma    = '**'
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  >= 0
                   and alennus  <= 100)
                   UNION
                   (SELECT '3' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                   FROM asiakasalennus asale3 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and ytunnus  = '$laskurow[ytunnus]'
                   and ytunnus != ''
                   and ryhma    = '$trow[aleryhma]'
                   and ryhma   != ''
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  >= 0
                   and alennus  <= 100)
                   UNION
                   (SELECT '4' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                   FROM asiakasalennus asale4 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio  = '$kukarow[yhtio]'
                   and ytunnus  = '$laskurow[ytunnus]'
                   and ytunnus != ''
                   and ryhma    = '**'
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                   and alennus  >= 0
                   and alennus  <= 100)
                   ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 6, "Asiakkaan tuotealeryhm‰n alennus");
      }

      // 6. asiakas.segmentti tuote.tuoteno aleprosentti (asiakassegmentin tuotteen alennus)
      if (jatka_ale($ale) and isset($alehi_assegmenttirow["tunnukset"])) {
        $query = "SELECT alennus, alennuslaji, campaign_id
                  FROM asiakasalennus USE INDEX (yhtio_asiakas_segmentti_tuoteno)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and tuoteno            = '$trow[tuoteno]'
                  and tuoteno           != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus            >= 0
                  and alennus            <= 100
                  ORDER BY alennuslaji, minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 7, "Asiakassegmentin tuotteen alennus");
      }

      // 7. asiakas.ryhm‰ tuote.tuoteno aleprosentti (asiakasryhm‰n tuotteen alennus)
      if (jatka_ale($ale)) {
        $query = "SELECT alennus, alennuslaji, campaign_id
                  FROM asiakasalennus USE INDEX (yhtio_asiakasryhma_tuoteno)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and tuoteno        = '$trow[tuoteno]'
                  and tuoteno       != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus        >= 0
                  and alennus        <= 100
                  ORDER BY alennuslaji, minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 8, "Asiakasryhm‰n tuotteen alennus");
      }

      // 8. asiakas.piiri tuote.tuoteno aleprosentti (asiakaspiirin tuotteen alennus)
      if (jatka_ale($ale)) {
        $query = "SELECT alennus, alennuslaji, campaign_id
                  FROM asiakasalennus USE INDEX (yhtio_piiri_tuoteno)
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and piiri    = '$alehi_asrow[piiri]'
                  and piiri   != ''
                  and tuoteno  = '$trow[tuoteno]'
                  and tuoteno != ''
                  and ytunnus  = ''
                  and asiakas  = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus  >= 0
                  and alennus  <= 100
                  ORDER BY alennuslaji, minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 9, "Asiakaspiirin tuotteen alennus");
      }

      // 9. asiakas.segmentti tuote.aleryhm‰ aleprosentti (asiakassegmentin tuotealeryhm‰n alennus)
      if (jatka_ale($ale) and isset($alehi_assegmenttirow["tunnukset"])) {
        $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale1 USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and ryhma              = '$trow[aleryhma]'
                  and ryhma             != ''
                  and ytunnus            = ''
                  and asiakas            = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus            >= 0
                  and alennus            <= 100)
                  UNION
                  (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale2 USE INDEX (yhtio_asiakas_segmentti_ryhma)
                  WHERE yhtio            = '$kukarow[yhtio]'
                  and asiakas_segmentti  in ($alehi_assegmenttirow[tunnukset])
                  and asiakas_segmentti != ''
                  and ryhma              = '**'
                  and ytunnus            = ''
                  and asiakas            = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus            >= 0
                  and alennus            <= 100)
                  ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 10, "Asiakassegmentin tuotealeryhm‰n alennus");
      }

      // 10. asiakas.ryhm‰ tuote.aleryhm‰ aleprosentti (asiakasryhm‰n tuotealeryhm‰n alennus)
      if (jatka_ale($ale)) {
        $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale1 USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and ryhma          = '$trow[aleryhma]'
                  and ryhma         != ''
                  and ytunnus        = ''
                  and asiakas        = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus        >= 0
                  and alennus        <= 100)
                  UNION
                  (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale2 USE INDEX (yhtio_asiakasryhma_ryhma)
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and asiakas_ryhma  = '$alehi_asrow[ryhma]'
                  and asiakas_ryhma != ''
                  and ryhma          = '**'
                  and ytunnus        = ''
                  and asiakas        = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus        >= 0
                  and alennus        <= 100)
                  ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 11, "Asiakasryhm‰n tuotealeryhm‰n alennus");
      }

      // 11. asiakas.piiri tuote.aleryhm‰ aleprosentti (asiakaspiirin tuotealeryhm‰n alennus)
      if (jatka_ale($ale)) {
        $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale1 USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and piiri    = '$alehi_asrow[piiri]'
                  and piiri   != ''
                  and ryhma    = '$trow[aleryhma]'
                  and ryhma   != ''
                  and ytunnus  = ''
                  and asiakas  = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus  >= 0
                  and alennus  <= 100)
                  UNION
                  (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus, campaign_id
                  FROM asiakasalennus asale2 USE INDEX (yhtio_piiri_ryhma)
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and piiri    = '$alehi_asrow[piiri]'
                  and piiri   != ''
                  and ryhma    = '**'
                  and ytunnus  = ''
                  and asiakas  = 0
                  and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'){$kampanjarajaus})
                  and alennus  >= 0
                  and alennus  <= 100)
                  ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 12, "Asiakaspiirin tuotealeryhm‰n alennus");
      }

      // 12. tuote.aleryhm‰ aleprosentti (tuotealeryhm‰n perusalennus) (Vain ykkˆstason alennus voidaan tallentaa t‰h‰n)
      if (!isset($ale["ale1"])) {

        $query = "SELECT alennus
                  FROM perusalennus
                  WHERE yhtio  = '$kukarow[yhtio]'
                  and ryhma    = '$trow[aleryhma]'
                  and ryhma   != ''
                  and alennus  >= 0
                  and alennus  <= 100";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $aleperuste["ale1"] = 13;

          $hrow = mysql_fetch_assoc($hresult);

          $ale["ale1"]  = $hrow["alennus"];
          $aperuste .= " Tuotealeryhm‰n perusalennus (Aletaso: 1).";
        }
      }
    }

    $g_ale_peruste        = $aperuste;
    $g_ale_peruste_update = FALSE;

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      if (!isset($ale["ale".$alepostfix])) {
        $ale["ale".$alepostfix] = 0;
      }

      if ($ale["ale".$alepostfix] > 100) {
        $ale["ale".$alepostfix] = 100;
      }

      if ($ale["ale".$alepostfix] < 0) {
        $ale["ale".$alepostfix] = 0;
      }

      if ($ale["ale".$alepostfix] != 0) {
        $g_ale_peruste .= " Ale$alepostfix: ".($ale["ale".$alepostfix]*1)."%. ";
      }

      if (isset($GLOBALS['ale_peruste']) and $GLOBALS['ale_peruste'] != "") {
        preg_match("/Ale$alepostfix: ([0-9\.]*)%/", $GLOBALS['ale_peruste'], $edale_match);

        if (isset($edale_match[1]) and $ale["ale".$alepostfix] != $edale_match[1]) {
          $g_ale_peruste_update = TRUE;
        }
      }
    }

    $g_ale_peruste .= "\n".$hperuste." Hinta: ".sprintf('%.2f', $hinta)." $yhtiorow[valkoodi] M‰‰r‰: $kpl $trow[yksikko]. ";

    if (isset($GLOBALS['ale_peruste']) and $GLOBALS['ale_peruste'] != "") {
      preg_match("/Hinta: ([0-9\.]*) /", $GLOBALS['ale_peruste'], $edale_match);

      if (isset($edale_match[1]) and $hinta != $edale_match[1]) {
        $g_ale_peruste_update = TRUE;
      }
    }

    if (!empty($hintaan_osunut_kampanja)) {
      $GLOBALS['kampanjahinnoitteluntunnus'] = $hintaan_osunut_kampanja;
    }

    if (!isset($GLOBALS['ale_peruste']) or $GLOBALS['ale_peruste'] == "" or $g_ale_peruste_update) {
      $GLOBALS['ale_peruste']  = $g_ale_peruste;
      $GLOBALS['ale_peruste'] .= " XXXHINTAPERUSTE:$hintaperuste ";
      if (is_array($aleperuste)) {
        foreach ($aleperuste as $aile) {
          $GLOBALS['ale_peruste'] .= " XXXALEPERUSTE:$aile ";
        }
      }
    }

    $debug = 0;
    if ($debug == 1) echo t("Tulin tulokseen").": $hperuste $aperuste.  ALE: ", var_dump($ale), "% ".t("Hinta")." $hinta $yhtiorow[valkoodi] M‰‰r‰:$kpl<br><br>";

    if ($yhtio != '') {
      $yhtiorow = hae_yhtion_parametrit($vanha_yhtio);
      $kukarow['yhtio']       = $vanha_yhtio;
      $laskurow['liitostunnus']   = $vanha_liitostunnus;
      $laskurow['ytunnus']     = $vanha_ytunnus;
    }

    if ($trow["myyntihinta_maara"] != 0) {
      $hinta = round($hinta / $trow["myyntihinta_maara"], $yhtiorow["hintapyoristys"]);
    }

    if ($palautus != "") {

      $ret = array();
      $a = explode(",", $palautus);

      if (!is_array($a)) {
        $a = array($palautus);
      }

      foreach ($a as $palauta) {

        $palauta = trim($palauta);

        if (substr($palauta, 0, 3) == 'ale' and is_numeric($palauta{strlen($palauta) - 1})) {
          extract($ale);
        }

        if (isset(${$palauta})) {
          $ret[$palauta] = ${$palauta};
        }
        else {
          echo "<font class='error'>Muuttujaa '$palauta' ei voida palauttaa!</font><br>";
          $ret[$palauta] = FALSE;
        }
      }

      return $ret;
    }
    else {
      return array($hinta, $netto, $ale, $alehinta_alv, $alehinta_val);
    }
  }
}

if (!function_exists("generoi_alekentta_php")) {
  function generoi_alekentta_php($row, $tyyppi, $tapa = '', $ei_erikoisale = '') {
    global $yhtiorow;

    if (isset($row["netto"]) and $row["netto"] == "N") {
      if ($tapa == 'erikseen') {
        $ale = array();
        $ale["ale1"] = 0;
      }
      elseif ($tapa == 'plain') {
        return 0;
      }
      else {
        return 1;
      }
    }

    // Ei erikoisaletta
    if ($ei_erikoisale != "") {
      $row["erikoisale"]         = 0;
      $row["erikoisale_saapuminen"] = 0;
    }

    // Jos tyyppi on eri ku O = osto, niin silloin nollataan aina t‰m‰
    if ($tyyppi != 'O') {
      $row["erikoisale_saapuminen"] = 0;
    }

    if ($tyyppi == 'M') {
      $maara = $yhtiorow['myynnin_alekentat'];
    }
    elseif ($tyyppi == 'O') {
      $maara = $yhtiorow['oston_alekentat'];
    }
    else {
      $maara = 1;
    }

    if ($tapa == 'erikseen') {
      $ale = array();

      for ($alepostfix = 1; $alepostfix <= $maara; $alepostfix++) {
        if ($alepostfix == 1) {
          $ale["ale{$alepostfix}"] = round((1 - (1 - $row["ale{$alepostfix}"] / 100) * (1 - $row["erikoisale"] / 100) * (1 - $row["erikoisale_saapuminen"] / 100)) * 100, 2);
        }
        else {
          $ale["ale{$alepostfix}"] = round($row["ale{$alepostfix}"], 2);
        }
      }
    }
    elseif ($tapa == 'plain') {
      $ale = 1;

      for ($alepostfix = 1; $alepostfix <= $maara; $alepostfix++) {
        $ale *= (1 - $row["ale{$alepostfix}"] / 100);
      }

      $ale *= (1 - $row["erikoisale"] / 100);
      $ale *= (1 - $row["erikoisale_saapuminen"] / 100);

      $ale = round((1 - $ale) * 100, 2);
    }
    elseif ($tapa == 'kerto') {
      $ale = 1;

      for ($alepostfix = 1; $alepostfix <= $maara; $alepostfix++) {
        $ale *= (1 - $row["ale{$alepostfix}"] / 100);
      }

      $ale *= (1 - $row["erikoisale"] / 100);
      $ale *= (1 - $row["erikoisale_saapuminen"] / 100);

      $ale = round($ale, 4);
    }

    return $ale;
  }
}

if (!function_exists("generoi_alekentta_select")) {
  function generoi_alekentta_select($tapa, $tyyppi) {
    global $yhtiorow;

    // lasketaanko kent‰t yhteen vai palautetaanko ne erikseen
    // $tapa = 'yhteen' tai $tapa = 'erikseen'
    // otetaan huomioon aina erikoisale

    if ($tyyppi == 'M') {
      $maara = $yhtiorow['myynnin_alekentat'];
    }
    elseif ($tyyppi == 'O') {
      $maara = $yhtiorow['oston_alekentat'];
    }
    else {
      $maara = 1;
    }

    // jos halutaan k‰ytt‰‰ jotain omaa tilausrivin taulun nime‰
    $prefix = 'tilausrivi';

    if ($tapa == 'erikseen') {

      $return = '';

      for ($i = 1; $i <= $maara; $i++) {
        $return .= " {$prefix}.ale{$i},";
      }

      $return .= " {$prefix}.erikoisale,";
    }
    elseif ($tapa == 'yhteen') {
      $query = '';

      for ($i = 1; $i <= $maara; $i++) {
        $query = "(1-{$prefix}.ale{$i}/100)*";
      }

      $query .= "(1-{$prefix}.erikoisale/100)";

      if ($tyyppi == 'O') {
        $query .= "*(1-{$prefix}.erikoisale_saapuminen/100)";
      }

      $return = "round((1-$query)*100, 2)";
    }

    return $return;
  }
}

if (!function_exists("generoi_alekentta")) {
  function generoi_alekentta($tyyppi, $prefix = '', $ei_erikoisale = '') {
    global $yhtiorow;

    if ($tyyppi == 'M') {
      $maara = $yhtiorow['myynnin_alekentat'];
    }
    elseif ($tyyppi == 'O') {
      $maara = $yhtiorow['oston_alekentat'];
    }
    else {
      $maara = 1;
    }

    $query_1 = $query_2 = '';
    $ale = '';

    // jos halutaan k‰ytt‰‰ jotain omaa tilausrivin taulun nime‰
    $prefix = trim($prefix) != '' ? trim($prefix) : 'tilausrivi';

    for ($alepostfix = 1; $alepostfix <= $maara; $alepostfix++) {
      if ($alepostfix > 1) {
        $ale .= "*";
      }

      $ale .= "(1 - {$prefix}.ale{$alepostfix} / 100)";
    }

    if ($ei_erikoisale == "") {
      $ale .= "* (1 - {$prefix}.erikoisale / 100)";

      if ($tyyppi == 'O') {
        $ale .= "* (1 - {$prefix}.erikoisale_saapuminen / 100)";
      }
    }

    if ($prefix != 'panttitili') {
      $return = "if ({$prefix}.netto='N', 1, {$ale})";
    }
    else {
      $return = $ale;
    }

    return $return;
  }
}

if (!function_exists("alehinta_osto")) {
  function alehinta_osto($laskurow, $trow, $kpl, $netto, $hinta, $ale) {
    global $yhtiorow, $kukarow;

    // T‰m‰ rutiini m‰‰rittelee riville hinnan ja alennuksen
    // siihen tarvitaan:
    // $laskurow[] (laskun tiedot)
    //  -->  $laskurow["liitostunnus"]
    //  -->  $laskurow["valkoodi"]
    //  -->  $laskurow["vienti_kurssi"]
    //  -->  $laskurow["ytunnus"]
    // $trow[] (select tuoteno from tuote)
    // $kpl tilatava m‰‰r‰
    // $netto = N jos halutaan nettohinta
    // $hinta k‰ytt‰j‰n syˆtt‰m‰ hinta
    // $ale k‰ytt‰j‰n syˆtt‰m‰ ale - array
    // $debug (jos 1 niin n‰ytet‰‰n tulos)

    // Tulokset on:
    // $hinta
    // $netto
    // $ale
    // $valuutta

    // Otetaan $trow ja liitet‰‰n tuotteen_toimittaja taulu siihen
    $query = "SELECT tuote.*, tt.toim_tuoteno, tt.osto_era, tt.pakkauskoko, tt.ostohinta, tt.valuutta, tt.osto_alv
              FROM tuote
              JOIN tuotteen_toimittajat as tt on (tt.yhtio = tuote.yhtio and tuote.tuoteno = tt.tuoteno and tt.liitostunnus = '$laskurow[liitostunnus]')
              WHERE tuote.yhtio = '{$kukarow["yhtio"]}'
              AND tuote.tuoteno = '{$trow["tuoteno"]}'";
    $result = pupe_query($query);
    $trow = mysql_fetch_assoc($result);

    // Varmistetaan, ett‰ m‰‰r‰ on ok
    $kpl = (float) $kpl;
    if ($kpl == 0) $kpl = 1;

    $aperuste     = "";
    $hintaperuste  = FALSE;
    $aleperuste    = FALSE;

    // oletetaan yhtiˆn valuutta jos sit‰ ei tiedet‰
    if ($laskurow["valkoodi"] == "") $laskurow["valkoodi"] = $yhtiorow["valkoodi"];

    // oletetaan tuotteen alvi ja valuutta
    $valuutta = $yhtiorow["valkoodi"];

    // haetaan toimittajan tiedot
    $query = "SELECT *
              FROM toimi
              WHERE yhtio = '$kukarow[yhtio]'
              AND tunnus  = '$laskurow[liitostunnus]'";
    $alhire = pupe_query($query);

    if (mysql_num_rows($alhire) == 1) {
      $alehi_torow = mysql_fetch_assoc($alhire);
    }
    else {
      $alehi_torow = array();
      $aperuste .= t("Toimittajaa ei lˆytynyt").". ";
    }

    // 1. k‰ytt‰j‰n syˆtt‰m‰ hinta/nettohinta
    if ($hinta != '') {
      $hintaperuste = 1;

      // nettohinta jos netto-kent‰ss‰ tulee N tai E
      if ($netto == 'N' or $netto == 'E') {
        $aperuste .= "K‰ytt‰j‰n antama nettohinta ";
        for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
          $ale["ale".$alepostfix] = 0;
        }
      }
      else {
        $aperuste .= "K‰ytt‰j‰n antama hinta ";
      }

      $valuutta = $laskurow["valkoodi"];
    }
    elseif ($hinta == '') {

      $hinta = 0;

      // 2A. toimi.toimittaja/toimi.ytunnus tuote.tuotenumero nettohinta (toimittajan tuotteen hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
                   FROM toimittajahinta tohin1 USE INDEX (yhtio_toimittaja_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and toimittaja  = '$laskurow[liitostunnus]'
                   and toimittaja  > 0
                   and tuoteno     = '$trow[tuoteno]'
                   and tuoteno    != ''
                   and valkoodi    = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
                   FROM toimittajahinta tohin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and ytunnus     = '$laskurow[ytunnus]'
                   and ytunnus    != ''
                   and tuoteno     = '$trow[tuoteno]'
                   and tuoteno    != ''
                   and valkoodi    = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          else {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }

          $hinta       = $hrow['hinta'];
          $aperuste       .= "Toimittajan tuotteen nettohinta laskun valuutassa.";
          $valuutta    = $laskurow["valkoodi"];
          $hintaperuste  = 2;
        }
      }

      // 2B. toimi.toimittaja/toimi.ytunnus tuote.tuotenumero nettohinta (toimittajan tuotteen hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
                   FROM toimittajahinta tohin1 USE INDEX (yhtio_toimittaja_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and toimittaja  = '$laskurow[liitostunnus]'
                   and toimittaja  > 0
                   and tuoteno     = '$trow[tuoteno]'
                   and tuoteno    != ''
                   and valkoodi    in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
                   FROM toimittajahinta tohin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and ytunnus     = '$laskurow[ytunnus]'
                   and ytunnus    != ''
                   and tuoteno     = '$trow[tuoteno]'
                   and tuoteno    != ''
                   and valkoodi    in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          else {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }

          $hinta     = $hrow["hinta"];
          $aperuste  .= "Toimittajan tuotteen nettohinta.".$hrow['laji'];
          $hintaperuste = 2;
          $valuutta  = $yhtiorow["valkoodi"];
        }
      }

      // 3A. toimi.tunnus/toimi.ytunnus tuote.aleryhm‰ nettohinta (toimittajan tuotealeryhm‰n hinta) laskun valuutassa
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
                   FROM toimittajahinta tohin1 USE INDEX (yhtio_toimittaja_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and toimittaja  = '$laskurow[liitostunnus]'
                   and toimittaja  > 0
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and valkoodi    = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
                   FROM toimittajahinta tohin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and ytunnus     = '$laskurow[ytunnus]'
                   and ytunnus    != ''
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and valkoodi    = '$laskurow[valkoodi]'
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   ORDER BY prio, minkpl desc, aika, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          else {
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }

          $hinta    = $hrow["hinta"];
          $aperuste  .= "Toimittajan tuotealeryhm‰n nettohinta laskun valuutassa. ";
          $valuutta  = $laskurow["valkoodi"];
          $hintaperuste = 3;
        }
      }

      // 3B. toimi.tunnus/toimi.ytunnus tuote.aleryhm‰ nettohinta (toimittajan tuotealeryhm‰n hinta) yhtiˆn valuutassa
      if ($hinta == 0) {

        $query = "(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
                   FROM toimittajahinta tohin1 USE INDEX (yhtio_toimittaja_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and toimittaja  = '$laskurow[liitostunnus]'
                   and toimittaja  > 0
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and valkoodi    in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   UNION
                   (SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
                   FROM toimittajahinta tohin2 USE INDEX (yhtio_ytunnus_tuoteno)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and ytunnus     = '$laskurow[ytunnus]'
                   and ytunnus    != ''
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and valkoodi    in ('$yhtiorow[valkoodi]','')
                   and (minkpl <= $kpl or minkpl = 0)
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))
                   ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
                   LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);

          if ($hrow["laji"] == "N" or $hrow["laji"] == "E") {
            $netto   = $hrow["laji"];
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              $ale["ale".$alepostfix] = 0;
            }
          }
          else {
            //  ($hrow["laji"] == "B")
            $netto  = '';
            for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
              if (isset($ale["ale".$alepostfix])) unset($ale["ale".$alepostfix]);
            }
          }

          $hinta    = $hrow["hinta"];
          $aperuste  .= "Toimittajan tuotealeryhm‰n nettohinta. ";
          $hintaperuste = 3;
          $valuutta  = $yhtiorow["valkoodi"];
        }
      }

      // 4. laskun valuutalla, omalla tuotenumerolla
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT *
                  FROM hinnasto
                  WHERE hinnasto.yhtio   = '$kukarow[yhtio]'
                  and hinnasto.tuoteno   = '$trow[tuoteno]'
                  and hinnasto.tuoteno  != ''
                  and hinnasto.laji      = 'O'
                  and hinnasto.valkoodi  = '$laskurow[valkoodi]'
                  and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                  and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
                  ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) != 0) {
          $hrow      = mysql_fetch_assoc($hresult);
          $hinta       = $hrow["hinta"];
          $netto      = $hrow["laji"];
          $aperuste      .= "Laskun valuutalla, omalla tuotenumerolla ";
          $valuutta    = $hrow["valkoodi"];
          $hintaperuste   = 4;
        }
      }

      // 5. yhtiˆn valuutalla, omalla tuotenumerolla
      if ($hinta == 0 and trim(strtoupper($laskurow["valkoodi"])) == trim(strtoupper($yhtiorow["valkoodi"]))) {

        $query = "SELECT *
                  FROM hinnasto
                  WHERE hinnasto.yhtio   = '$kukarow[yhtio]'
                  and hinnasto.tuoteno   = '$trow[tuoteno]'
                  and hinnasto.tuoteno  != ''
                  and hinnasto.laji      = 'O'
                  and hinnasto.valkoodi  in ('$yhtiorow[valkoodi]','')
                  and ((hinnasto.alkupvm <= current_date and if (hinnasto.loppupvm = '0000-00-00','9999-12-31',hinnasto.loppupvm) >= current_date) or (hinnasto.alkupvm='0000-00-00' and hinnasto.loppupvm='0000-00-00'))
                  and ((hinnasto.minkpl <= '$kpl' and hinnasto.maxkpl >= '$kpl') or (hinnasto.minkpl = 0 and hinnasto.maxkpl = 0))
                  ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(hinnasto.alkupvm),9999999999999), hinnasto.valkoodi DESC
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) != 0) {
          $hrow      = mysql_fetch_assoc($hresult);
          $hinta       = $hrow["hinta"];
          $netto      = $hrow["laji"];
          $aperuste      .= "Yhtiˆn valuutalla, omalla tuotenumerolla ";
          $valuutta    = $hrow["valkoodi"];
          $hintaperuste   = 5;
        }
      }

      // 6. tuotteen toimittajan ostohinta
      if ($hinta == 0) {
        $hinta       = $trow["ostohinta"];
        $netto      = "";
        $valuutta    = $trow["valuutta"];
        $aperuste      .= "Tuotteen toimittajan ostohinta ";
        $hintaperuste   = 6;
      }
    }

    // K‰yd‰‰n l‰pi k‰sin syˆtetyt alennukset jos niit‰ on
    for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
      if (isset($ale["ale".$alepostfix]) and is_numeric($ale["ale".$alepostfix]) and $ale["ale".$alepostfix] > 0) {
        // 1. k‰ytt‰j‰n syˆtt‰m‰ alennus
        $aleperuste["ale".$alepostfix] = 3;

        $aperuste .= " K‰ytt‰j‰n syˆtt‰m‰ ale (Aletaso: $alepostfix)";
      }
      elseif (isset($ale["ale".$alepostfix]) and is_numeric($ale["ale".$alepostfix]) and $ale["ale".$alepostfix] == 0) {
        // 2. k‰ytt‰j‰n syˆtt‰m‰ alennus
        $aleperuste["ale".$alepostfix] = 4;

        $aperuste .= " Ei alennusta (Aletaso: $alepostfix)";
      }
    }

    // Jos joku aletasoista on tyhj‰ tai kokonaan settaamatta, niin l‰hdet‰‰n etsim‰‰n alennuksia
    $jatka = FALSE;

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
      if (isset($ale["ale".$alepostfix]) and !is_numeric($ale["ale".$alepostfix])) {
        // Jos ale on tyhj‰ niin unsetataan se
        unset($ale["ale".$alepostfix]);
        $jatka = TRUE;
      }

      if (!isset($ale["ale".$alepostfix])) {
        $jatka = TRUE;
      }
    }

    if ($jatka and $netto != 'N' and $netto != 'E') {

      // 3. toimi.tunnus/toimi.ytunnus tuote.tuotenumero aleprosentti (toimittajan tuotteen alennus)
      $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                 FROM toimittajaalennus asale1 USE INDEX (yhtio_toimittaja_tuoteno)
                 WHERE yhtio     = '$kukarow[yhtio]'
                 and toimittaja  = '$laskurow[liitostunnus]'
                 and toimittaja  > 0
                 and tuoteno     = '$trow[tuoteno]'
                 and tuoteno    != ''
                 and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                 and alennus     >= 0
                 and alennus     <= 100)
                 UNION
                 (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                 FROM toimittajaalennus asale2 USE INDEX (yhtio_ytunnus_tuoteno)
                 WHERE yhtio     = '$kukarow[yhtio]'
                 and ytunnus     = '$laskurow[ytunnus]'
                 and ytunnus    != ''
                 and tuoteno     = '$trow[tuoteno]'
                 and tuoteno    != ''
                 and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                 and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                 and alennus     >= 0
                 and alennus     <= 100)
                 ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
      $hresult = pupe_query($query);

      list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 9, "Toimittajan tuotteen alennus");

      // 4. toimi.tunnus/toimi.ytunnus tuote.aleryhm‰ aleprosentti (toimittajan tuotealeryhm‰n alennus)
      if (jatka_ale($ale)) {
        $query = "(SELECT '1' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                   FROM toimittajaalennus asale1 USE INDEX (yhtio_toimittaja_ryhma)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and toimittaja  = '$laskurow[liitostunnus]'
                   and toimittaja  > 0
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                   and alennus     >= 0
                   and alennus     <= 100)
                   UNION
                   (SELECT '2' prio, alennus, alennuslaji, minkpl, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, tunnus
                   FROM toimittajaalennus asale2 USE INDEX (yhtio_ytunnus_ryhma)
                   WHERE yhtio     = '$kukarow[yhtio]'
                   and ytunnus     = '$laskurow[ytunnus]'
                   and ytunnus    != ''
                   and ryhma       = '$trow[aleryhma]'
                   and ryhma      != ''
                   and (minkpl = 0 or (minkpl <= $kpl and monikerta = '') or (mod($kpl, minkpl) = 0 and monikerta != ''))
                   and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
                   and alennus     >= 0
                   and alennus     <= 100)
                   ORDER BY alennuslaji, prio, minkpl desc, aika, alennus desc, tunnus desc";
        $hresult = pupe_query($query);

        list($ale, $aleperuste, $aperuste) = settaa_ale($ale, $aleperuste, $aperuste, $hresult, 10, "Toimittajan tuotealeryhm‰n alennus");
      }

      // 5. Tuotteen toimittajan oletusalennus (Vain ykkˆstason alennus voidaan tallentaa t‰h‰n)
      if (!isset($ale["ale1"])) {

        $query = "SELECT alennus
                  FROM tuotteen_toimittajat
                  WHERE yhtio      = '$kukarow[yhtio]'
                  and tuoteno      = '$trow[tuoteno]'
                  and liitostunnus = '$laskurow[liitostunnus]'
                  and alennus      > 0
                  LIMIT 1";
        $hresult = pupe_query($query);

        if (mysql_num_rows($hresult) > 0) {
          $hrow = mysql_fetch_assoc($hresult);
          $ale["ale1"]  = $hrow["alennus"];
          $aperuste .= " Tuotteen toimittajan oletusalennus (Aletaso: 1).";
        }
      }
    }

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['oston_alekentat']; $alepostfix++) {
      if (!isset($ale["ale".$alepostfix])) {
        $ale["ale".$alepostfix] = 0;
      }

      if ($ale["ale".$alepostfix] > 100) {
        $ale["ale".$alepostfix] = 100;
      }

      if ($ale["ale".$alepostfix] < 0) {
        $ale["ale".$alepostfix] = 0;
      }
    }

    $debug = 0;
    if ($debug == 1) echo t("Tulin tulokseen").": $aperuste.  ALE: ", var_dump($ale), "% ".t("HINTA")." $hinta $valuutta KPL:$kpl<br><br>";

    if ($laskurow["valkoodi"] != $valuutta) {
      $hinta = laskuval($hinta, $laskurow["vienti_kurssi"]);
    }

    return array($hinta, $netto, $ale, $valuutta);
  }
}

if (!function_exists("kalenteritapahtuma")) {
  function kalenteritapahtuma($tyyppi, $tapa, $viesti, $liitostunnus, $kuittaus="", $henkilo="", $otunnus="", $pvmalku='now()', $pvmloppu='now()', $asentaja='') {
    global $yhtiorow, $kukarow;

    if (trim($asentaja) == '') {
      $query = "SELECT * from asiakas where yhtio='$kukarow[yhtio]' and tunnus='$liitostunnus'";
      $result = pupe_query($query);
      $asrow = mysql_fetch_assoc($result);
    }
    else {
      $asrow['ytunnus'] = '';
    }

    //Tehd‰‰n asiakasmemotapahtuma jos se on tarpeellinen
    $kysely = "INSERT INTO kalenteri
               SET tapa     = '$tapa',
               asiakas      = '$asrow[ytunnus]',
               liitostunnus = '$liitostunnus',
               henkilo      = '$henkilo',
               kuka         = '$kukarow[kuka]',
               yhtio        = '$kukarow[yhtio]',
               tyyppi       = '$tyyppi',
               pvmalku      = $pvmalku,
               otunnus      = '$otunnus',
               kuittaus     = '$kuittaus',
               kentta01     = '$viesti'";

    if (trim($asentaja) != '') {
      $kysely .= ", kentta02 = '$liitostunnus', pvmloppu = $pvmloppu ";
    }
    else {
      $kysely .= ", pvmloppu = date_add($pvmalku, INTERVAL 30 MINUTE)  ";
    }

    $result = pupe_query($kysely);
  }
}

if (!function_exists('js_openPrintDialog')) {
  function js_openPrintDialog($fileurl, $nappiteksti = "Tulosta") {
    return "<script type=\"text/javascript\">
            function printIframePdf(){
              window.frames[\"printf\"].focus();
              try {
                window.frames[\"printf\"].print();
              }
              catch(e){
                window.print();
                console.log(e);
              }
            }

            function printObjectPdf() {
              try{
                document.getElementById('idPdf').print();
              }
              catch(e){
                printIframePdf();
                console.log(e);
              }
            }
    </script>
    <form>
    <input type='button' onClick='printIframePdf()' class='btn' value='".t($nappiteksti)."'/>
    </form><br><br>
    <iframe id='printf' name='printf' src='{$fileurl}' frameborder='0' width='10' height='10' style='width: 10px; height: 10px; display: none;'></iframe>
    <object id='idPdf' width='10' height='10' style='width: 10px; height: 10px; display: none;' type='application/pdf' data='{$fileurl}'>
    </object>";
  }
}

if (!function_exists('js_openUrlNewWindow')) {
  function js_openUrlNewWindow($url, $name, $params = "", $width="", $height="") {
    $width = (!empty($width)) ? $width : 700;
    $height = (!empty($height)) ? $height : 1000;

    return "<a href='#' {$params} onclick=\"window.open('$url', '_blank' ,'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,left=200,top=100,width=$width,height=$height'); return false;\">$name</a>";
  }
}

if (!function_exists('ebid')) {
  function ebid($lasku_tunnus, $url_only = false, $from_liitetiedostot = false) {
    global $kukarow, $yhtiorow, $palvelin2;

    $lasku_tunnus = (int) $lasku_tunnus;

    $query = "SELECT * from lasku where tunnus = {$lasku_tunnus} and yhtio = '{$kukarow['yhtio']}'";
    $res = pupe_query($query);

    if (mysql_num_rows($res) != 1) {
      return;
    }

    $laskurow = mysql_fetch_assoc($res);

    if ($from_liitetiedostot === false and $laskurow['ebid'] != "" and $laskurow['ebid'] != "FINVOICEXML" and $laskurow['ebid'] != "MAVENTAXML" and $laskurow['ebid'] != "TECCOM-INVOICE" and $laskurow['ebid'] != "UNIKKO-INVOICE") {
      $ebid = $laskurow['ebid'];

      $verkkolaskutunnus = $yhtiorow['verkkotunnus_vas'];
      $salasana       = $yhtiorow['verkkosala_vas'];

      $timestamppi = gmdate("YmdHis")."Z";

      $urlhead = "http://www.verkkolasku.net";
      $urlmain = "/view/ebs-2.0/$verkkolaskutunnus/visual?DIGEST-ALG=MD5&DIGEST-KEY-VERSION=1&EBID=$ebid&TIMESTAMP=$timestamppi&VERSION=ebs-2.0";

      $digest   = md5($urlmain . "&" . $salasana);
      $url   = $urlhead.$urlmain."&DIGEST=$digest";

      if ($url_only) {
        return array($url);
      }

      $out = js_openUrlNewWindow($url, t('N‰yt‰ lasku'))." ";

      // Ei n‰ytet‰ INVOIC.D.96A xml-linkki‰
      $query = "SELECT tunnus
                from liitetiedostot
                where liitostunnus   = '$laskurow[tunnus]'
                and liitos           = 'lasku'
                and kayttotarkoitus != 'INVOIC.D.96A'
                and yhtio='$kukarow[yhtio]'";
      $res = pupe_query($query);

      while ($row = mysql_fetch_assoc($res)) {
        $out .= " ".js_openUrlNewWindow("{$palvelin2}view.php?id=$row[tunnus]", t('N‰yt‰ liite'))." ";
      }

      return $out;
    }
    elseif ($laskurow['tila'] == 'U') {

      $out = "";

      if ($laskurow['chn'] == '100') $out = t("Verkkolasku, tulostuspalvelu");
      elseif ($laskurow['chn'] == '010') $out = t("Verkkolasku");
      elseif ($laskurow['chn'] == '020') $out = t("Vienti-Verkkolasku (EU)");
      elseif ($laskurow['chn'] == '030') $out = t("Vienti-Verkkolasku, tulostuspalvelu (EU)");
      elseif ($laskurow['chn'] == '111') $out = t("Itella EDI: EIH-1.4 s‰hkˆinen lasku");
      elseif ($laskurow['chn'] == '112') $out = t("Pupesoft-Finvoice: Verkkolasku Pupesoftista-Pupesoftiin");
      elseif ($laskurow['chn'] == '666') $out = t("S‰hkˆposti")."-".t("lasku");
      elseif ($laskurow['chn'] == '667') $out = t("Paperilasku, tulostetaan manuaalisesti");

      $query = "SELECT tunnus
                from liitetiedostot
                where liitostunnus = '$laskurow[tunnus]'
                and liitos         = 'lasku'
                and yhtio          = '$kukarow[yhtio]'";
      $res = pupe_query($query);

      while ($row = mysql_fetch_assoc($res)) {
        $out .= " ".js_openUrlNewWindow("{$palvelin2}view.php?id=$row[tunnus]", t('N‰yt‰ liite'))." ";
      }

      return $out;
    }
    else {

      $sellisa = $orderlisa = "";

      if ($from_liitetiedostot === true) {
        $sellisa = ", if(filetype = 'application/pdf', 0, 1) as jarj";
        $orderlisa = "order by jarj";
      }

      $query = "SELECT tunnus, filename, selite
                {$sellisa}
                from liitetiedostot
                where liitostunnus = '{$laskurow['tunnus']}'
                and liitos = 'lasku'
                and yhtio = '{$kukarow['yhtio']}'
                {$orderlisa}";
      $res = pupe_query($query);

      if ($url_only) {
        $out = array();
      }
      else {
        $out = '';
      }

      while ($row = mysql_fetch_assoc($res)) {
        if ($url_only) {
          $out[] = $palvelin2."view.php?id=$row[tunnus]";
        }
        else {
          if ($laskurow['tila'] == 'X') {
            $out .= "<div id='div_$row[tunnus]' class='popup'>$row[filename]<br>$row[selite]</div>";
            $out .= js_openUrlNewWindow("{$palvelin2}view.php?id=$row[tunnus]", t('Liite').": $row[filename]", "class='tooltip' id='$row[tunnus]'")."&nbsp;&nbsp;";
          }
          else {
            $out .= "<div id='div_$row[tunnus]' class='popup'>$row[filename]<br>$row[selite]</div>";
            $out .= js_openUrlNewWindow("{$palvelin2}view.php?id=$row[tunnus]", t('N‰yt‰ lasku'), "class='tooltip' id='$row[tunnus]'")."&nbsp;&nbsp;";
          }
        }
      }

      if ($laskurow['ebid'] == "UNIKKO-INVOICE") {
        return t('Unikkolasku');
      }

      if ($out != '') {
        return $out;
      }

      return t('Paperilasku');
    }
  }
}

if (!function_exists("size_readable")) {
  function size_readable($size) {

    $units = array('B', 'kB', 'MB', 'GB', 'TB', 'PB');

    $i = 0;
    while ($size >= 1024) {
      $size /= 1024;
      $i++;
    }

    return round($size, 2).$units[$i];
  }
}

if (!function_exists("seconds_readable")) {
  function seconds_readable($seconds) {

    $parts = array();
    $periods = array('day'    => 86400,
      'hour'   => 3600,
      'minute' => 60,
      'second' => 1);

    foreach ($periods as $name => $duration) {

      $div = floor($seconds / $duration);

      if ($div == 0) {
        continue;
      }
      elseif ($div == 1) {
        $parts[] = "{$div} {$name}";
      }
      else {
        $parts[] = "{$div} {$name}s";
      }

      $seconds = $seconds % $duration;
    }

    return implode(', ', $parts);
  }
}

if (!function_exists("sarjanumeron_ostohinta")) {
  function sarjanumeron_ostohinta($kentta, $arvo, $eikululaskuja="", $pvm="") {
    global $kukarow, $yhtiorow;

    // Funktio laskee yhden kappaleen ostohinnan
    $ostohinta = 0;

    // Tuotteen ostohinta
    $query = "SELECT
              group_concat(distinct tilausrivi.tunnus) tunnukset,
              group_concat(distinct sarjanumeroseuranta.tunnus) sarjatunnukset,
              count(distinct tilausrivi.tunnus) tunnukset_kpl
              FROM sarjanumeroseuranta
              JOIN tilausrivi use index (PRIMARY) ON tilausrivi.yhtio=sarjanumeroseuranta.yhtio and tilausrivi.tunnus=sarjanumeroseuranta.ostorivitunnus
              WHERE sarjanumeroseuranta.yhtio = '$kukarow[yhtio]'
              and sarjanumeroseuranta.$kentta = '$arvo'";
    $otsores = pupe_query($query);
    $ostorow = mysql_fetch_assoc($otsores);

    if ($ostorow["tunnukset"] != '') {

      $query_ale_lisa_m = generoi_alekentta('M');
      $query_ale_lisa_o = generoi_alekentta('O');

      $query = "SELECT
                sum(tilausrivi.rivihinta/tilausrivi.kpl) ostosumma,
                sum(tilausrivi.hinta * if(tilausrivi.tyyppi = 'O', {$query_ale_lisa_o}, {$query_ale_lisa_m})) ostosumma_eiloppulaskettu
                FROM tilausrivi
                WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
                and tilausrivi.tunnus  IN ($ostorow[tunnukset])";
      $sarjares = pupe_query($query);
      $sarjarow = mysql_fetch_assoc($sarjares);

      $ostohinta = (float) $sarjarow["ostosumma"] / $ostorow["tunnukset_kpl"];

      if ($ostohinta == 0 and $sarjarow["ostosumma_eiloppulaskettu"] != 0) {
        $ostohinta = (float) $sarjarow["ostosumma_eiloppulaskettu"] / $ostorow["tunnukset_kpl"];
      }

      if ($eikululaskuja != "EIKULULASKUJA") {

        // Katsotaan onko sarjanumerolle liitetty kulukeikka
        $query  = "SELECT lasku.laskunro
                   FROM sarjanumeroseuranta
                   JOIN lasku ON lasku.yhtio=sarjanumeroseuranta.yhtio and lasku.liitostunnus=sarjanumeroseuranta.tunnus and lasku.ytunnus=sarjanumeroseuranta.tunnus and lasku.tila = 'K' and lasku.alatila = 'S'
                   WHERE sarjanumeroseuranta.yhtio = '$kukarow[yhtio]'
                   and sarjanumeroseuranta.$kentta = '$arvo'";
        $keikkares = pupe_query($query);

        while ($kulukeikkarow = mysql_fetch_assoc($keikkares)) {
          // Haetaan kaikki saapumiseen liitettyjen laskujen summa
          $query = "SELECT sum(arvo*vienti_kurssi) kulusumma
                    FROM lasku
                    WHERE yhtio     = '$kukarow[yhtio]'
                    and tila        IN ('K','X')
                    and laskunro    = '$kulukeikkarow[laskunro]'
                    and vanhatunnus <> 0
                    and vienti      in ('B','E','H')";
          $result = pupe_query($query);
          $kulukulurow = mysql_fetch_assoc($result);

          $ostohinta  += $kulukulurow["kulusumma"];
        }
      }

      $pvmlisa = " now() ";

      if ($pvm != "") {
        $pvmlisa = " '$pvm' ";
      }

      // Onko tuotteen varastonarvoa muutettu k‰sin (ep‰kurantti.php)
      $query = "SELECT sum(arvomuutos) arvomuutos
                FROM sarjanumeroseuranta_arvomuutos
                WHERE yhtio           = '$kukarow[yhtio]'
                and sarjanumerotunnus IN ({$ostorow['sarjatunnukset']})
                and luontiaika        <= $pvmlisa";
      $result = pupe_query($query);
      $epakurrow = mysql_fetch_assoc($result);

      if ($epakurrow['arvomuutos'] != 0) {
        $ostohinta += $epakurrow['arvomuutos'];
      }
    }

    return round($ostohinta, 6);
  }
}

if (!function_exists("liitettyjen_kululaskujen_summa")) {
  function liitettyjen_kululaskujen_summa($otunnus) {
    global $kukarow, $yhtiorow;

    // Katsotaan onko tilaukselle liitetty kulukeikka ja palatetaan laskujen summat yhtiˆn valuutassa
    $query  = "SELECT laskunro
               FROM lasku
               WHERE yhtio      = '$kukarow[yhtio]'
               and liitostunnus = '$otunnus'
               and ytunnus      = '$otunnus'
               and tila         = 'K'
               and alatila      = 'T'";
    $keikkares = pupe_query($query);

    while ($kulukeikkarow = mysql_fetch_assoc($keikkares)) {
      // Haetaan kaikki saapumiseen liitettyjen laskujen summa
      $query = "SELECT sum(arvo*vienti_kurssi) kulusumma
                FROM lasku
                WHERE yhtio     = '$kukarow[yhtio]'
                and tila        IN ('K','X')
                and laskunro    = '$kulukeikkarow[laskunro]'
                and vanhatunnus <> 0";
      $result = pupe_query($query);
      $kulukulurow = mysql_fetch_assoc($result);

      $ostohinta  += $kulukulurow["kulusumma"];
    }

    return round($ostohinta, 6);
  }
}

if (!function_exists("remove_duplicates")) {
  function remove_duplicates($table, $yhtio) {

    $query  = "describe $table";
    $fieldresult = pupe_query($query);

    $group = "";

    while ($fields = mysql_fetch_array($fieldresult)) {
      if ($fields[0] != "tunnus" and
        $fields[0] != "laatija"  and
        $fields[0] != "luontiaika" and
        $fields[0] != "muutospvm" and
        $fields[0] != "muuttaja") {

        $group .= $fields[0].",";
      }
    }

    $group = substr($group, 0, -1);

    $query = "SELECT $group, count(*) countkpltahti, group_concat(tunnus) tunnukset
              FROM $table
              WHERE yhtio = '$yhtio'
              GROUP BY $group
              HAVING countkpltahti > 1";
    $result = pupe_query($query);

    while ($row = mysql_fetch_assoc($result)) {
      $query = "DELETE FROM $table WHERE yhtio = '$yhtio' and tunnus in ($row[tunnukset]) LIMIT ".($row["countkpltahti"]-1);
      $delresult = pupe_query($query);
    }
  }
}

if (!function_exists("ostolaskun_vienti")) {
  function ostolaskun_vienti($vienti) {
    switch ($vienti) {
    case 'A':
      $cVal = t("Kotimaa");
      break;
    case 'B':
      $cVal = t("Kotimaa huolinta/rahti");
      break;
    case 'C':
      $cVal = t("Kotimaa vaihto-omaisuus");
      break;
    case 'J':
      $cVal = t("Kotimaa raaka-aine");
      break;
    case 'D':
      $cVal = t("EU");
      break;
    case 'E':
      $cVal = t("EU huolinta/rahti");
      break;
    case 'F':
      $cVal = t("EU vaihto-omaisuus");
      break;
    case 'K':
      $cVal = t("EU raaka-aine");
      break;
    case 'G':
      $cVal = t("ei-EU");
      break;
    case 'H':
      $cVal = t("ei-EU huolinta/rahti");
      break;
    case 'I':
      $cVal = t("ei-EU vaihto-omaisuus");
      break;
    case 'L':
      $cVal = t("ei-EU raaka-aine");
      break;

    default:
      $cVal = "";
    }

    return $cVal;
  }
}

if (!function_exists("verkkolasku_luo_keikkafile")) {
  function verkkolasku_luo_keikkafile($tunnus, $trow, $rtuoteno, $alv_talteen = "", $rivikohtaiset_rahtikulut = 0, $_yhtion_toimipaikka = 0) {
    global $yhtiorow, $kukarow;

    // Tarvitaan $tunnus jossa on ostoreskontralaskun tunnus
    // Tarvitaan $trow jossa on toimittajan tiedot
    // Tarvitaan $rtuoteno jossa on array kaikista ostoreskontralaskun tuotteista

    require "inc/verkkolasku-in-luo-keikkafile.inc";
  }
}

if (!function_exists("verkkolasku_luo_liitosotsikko")) {
  function verkkolasku_luo_liitosotsikko($laskutunnus, $otunnus, $laskun_kulut = array()) {
    global $yhtiorow, $kukarow;

    // Tarvitaan $laskutunnus jossa on ostoreskontralaskun tunnus
    // Tarvitaan $otunnus jossa on keikan tunnus

    $tee_kululaskut = "liita";
    $silent     = "SILENT";
    $keikanalatila   = "";

    if (count($laskun_kulut) > 0) {
      $osto_kulu = $laskun_kulut['osto_kulu'];
      $osto_kulu_alv = $laskun_kulut['osto_kulu_alv'];
      $osto_rahti = $laskun_kulut['osto_rahti'];
      $osto_rahti_alv = $laskun_kulut['osto_rahti_alv'];
      $osto_rivi_kulu = $laskun_kulut['osto_rivi_kulu'];
      $osto_rivi_kulu_alv = $laskun_kulut['osto_rivi_kulu_alv'];
    }

    require "tilauskasittely/kululaskut.inc";
  }
}

if (!function_exists("paivita_toimitukset")) {
  function paivita_toimitukset($otunnus, $originaali) {
    global $kukarow, $yhtiorow;

    /*
      Functio jolla voidaan syncronoida toimitusten sis‰ltˆj‰
    */

    foreach (array("lasku", "laskun_lisatiedot") as $taulu) {

      if (!is_array($originaali[$taulu]) or (int) $otunnus == 0) {
        //echo "<font class='error'>".t("Toimitusten p‰ivitt‰minen EPƒONNISTUI")."!</font><br>";
        return false;
      }

      if ($taulu == "lasku") {
        $where = " and tunnus = '$otunnus' and tunnusnippu > 0";
      }
      else {
        $where = " and otunnus = '$otunnus'";
      }

      $query = "SELECT *
                FROM $taulu
                WHERE yhtio = '$kukarow[yhtio]' $where";
      $result = pupe_query($query);
      if (mysql_num_rows($result) == 1) {
        $uusirow = mysql_fetch_assoc($result);

        $diffi = array_diff_assoc($uusirow, $originaali[$taulu]);

        if (count($diffi) > 0 and is_array($diffi)) {

          //  Poistetaan numeeriset avaimet
          $diff = array();
          foreach ($diffi as $key => $value) {
            if (!is_numeric($key) and !in_array($key, array("tila", "alatila", "muutospvm"))) {
              $diff[$key] = $value;
            }
          }

          //  Haetaan tunnukset jotka voidaan p‰ivitt‰‰
          if ($taulu == "lasku") {
            $query = "SELECT *
                      FROM lasku
                      WHERE yhtio = '$kukarow[yhtio]' and tunnusnippu = '$uusirow[tunnusnippu]' and tila IN ('L','N') and alatila != 'X' and tunnus != '$otunnus' and tunnusnippu > 0";
          }
          else {
            $query = "SELECT laskun_lisatiedot.*
                      FROM lasku
                      JOIN laskun_lisatiedot ON laskun_lisatiedot.yhtio=lasku.yhtio and laskun_lisatiedot.otunnus=lasku.tunnus
                      WHERE lasku.yhtio = '$kukarow[yhtio]' and tunnusnippu = '$otunnus' and tila IN ('L','N') and alatila != 'X' and tunnusnippu > 0";
          }
          $result = pupe_query($query);

          if (mysql_num_rows($result) > 0) {

            //  Rullataan kaikki toimitukset l‰pi
            while ($row = mysql_fetch_assoc($result)) {

              //  Rullataan kaikki muutokset l‰pi..
              $updquery = "";
              foreach ($diff as $col => $value) {

                //  Luodaan p‰ivitett‰vist‰ sarakkeista kysely..
                if ($row[$col] == $originaali[$taulu][$col]) {
                  if ($updquery != "") {
                    $updquery .=", ";
                  }
                  $updquery .= " $col = '$value'";

                  //  Poikkeus joka vahvistaa s‰‰nnˆn..
                  if (in_array($col, array("kerayspvm", "toimaika")) and $taulu == "lasku") {
                    $query = "UPDATE tilausrivi
                              SET $col = '$value'
                              WHERE yhtio = '$kukarow[yhtio]' and otunnus = '$row[tunnus]' and $col = '".$originaali[$taulu][$col]."'";
                    $res = pupe_query($query);
                  }
                }
              }

              if ($updquery != "") {
                $query = "UPDATE $taulu SET $updquery WHERE yhtio = '$kukarow[yhtio]' and tunnus = '$row[tunnus]'";
                $updres = pupe_query($query);
              }
            }
          }
        }
      }
    }

    return true;
  }
}

if (!function_exists("tallenna_ostotilaus_vahvistus")) {
  function tallenna_ostotilaus_vahvistus($rivitunnus, $paiv_toimiaika, $vahvistus = false) {
    global $yhtiorow, $kukarow;

    if ($vahvistus) {
      $vahvistettu = 'vahvistettu = 1,';
    }

    $query = "INSERT INTO ostorivien_vahvistus SET
              yhtio                = '$kukarow[yhtio]',
              tilausrivin_tunnus   = '$rivitunnus',
              vahvistettuaika      = '$paiv_toimiaika',
              $vahvistettu
              laatija              = '$kukarow[kuka]',
              luontiaika           = now()";
    pupe_query($query);




  }
}
if (!function_exists("tulosta_ytunnus")) {
  function tulosta_ytunnus($ytunnus, $maa = "", $vienti = "", $hetu_tarkenne = false) {
    global $yhtiorow, $kukarow;

    $ytunnus_vai_hetu = tarkistahetu($ytunnus);

    if (strpos($ytunnus_vai_hetu, "XXXX") !== false) {
      return $hetu_tarkenne ? $ytunnus : $ytunnus_vai_hetu;
    }

    if ($maa == "") {
      $maa = $yhtiorow["maa"];
    }

    $ytunnus = trim($ytunnus);

    //jos on suomalainen yritys tehd‰‰n ytunnus n‰tiks (paitsi jos ytunnus on ulkolainen)
    if (strtoupper($maa) == 'FI' and (is_numeric(substr($ytunnus, 0, 2)) or strtoupper(substr($ytunnus, 0, 2)) == "FI")) {

      $ytunnus = preg_replace("/[^0-9]/", "", $ytunnus); // poistetaan kaikki paitsi numerot

      //muutetaan ytunnus takas oikean n‰kˆseks
      $ytunpit = 8-strlen($ytunnus);

      if ($ytunpit > 0) {
        $uytunnus = $ytunnus;

        while ($ytunpit > 0) {
          $uytunnus = "0".$uytunnus;
          $ytunpit--;
        }
      }
      else {
        $uytunnus = $ytunnus;
      }

      if ($vienti == "VATNUMERO") {
        $uytunnus = strtoupper($maa).$uytunnus;
      }
      elseif ($vienti != "") {
        $uytunnus = strtoupper($maa).$uytunnus;
      }
      else {
        $uytunnus = substr($uytunnus, 0, 7)."-".substr($uytunnus, 7, 1);
      }
    }
    elseif (strtoupper($maa) == 'SE' and is_numeric(substr(trim(strtoupper($ytunnus)), 0, 2))) {
      if (substr(trim(strtoupper($ytunnus)), 0, 2) != strtoupper($maa) and trim(strtoupper($maa)) != trim(strtoupper($yhtiorow["maa"])) and trim(strtoupper($maa)) != "") {
        $ytunnus = strtoupper($maa)."-".$ytunnus;
      }

      $uytunnus = $ytunnus;
    }
    else {
      $uytunnus = $ytunnus;
    }

    return $uytunnus;
  }
}

if (!function_exists("enable_ajax")) {
  function enable_ajax() {
    global $palvelin2, $kukarow;

    static $js_enable_ajaxCalled = FALSE;

    // Ekotetaan vain kerran.
    if (!$js_enable_ajaxCalled) {
      $js_enable_ajaxCalled = TRUE;

      if ($kukarow["extranet"] != "") {
        $imgUrl = $palvelin2."loading_blue_small.gif";
      }
      else {
        $imgUrl = $palvelin2."pics/loading_blue_small.gif";
      }

?>

<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">

  var toggled = Array();

  var delay_ms = function() {
      var timer = 0;
      return function(callback, ms) {
          clearTimeout (timer);
          timer = setTimeout(callback, ms);
      }
  }();

  function AJAXInteraction(urli, id, data, href) {

    var http = createRequestObject();
    http.onreadystatechange = handleResponse;

    function createRequestObject() {
      var xmlHttp;
      try {
        // Firefox, Opera 8.0+, Safari
        xmlHttp=new XMLHttpRequest();
      }
      catch (e) {
        // Internet Explorer
        try {
          xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");
        }
        catch (e) {
          try {
            xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
          }
          catch (e) {
            alert("Your browser does not support AJAX!");
            return false;
          }
        }
      }
      return xmlHttp;
    }

    function handleResponse() {
      if (http.readyState == 4) {
        var response = http.responseText;

        document.getElementById(id).innerHTML = response;

        <?php if (stripos($_SERVER['HTTP_USER_AGENT'], "MSIE") === FALSE and stripos($_SERVER['HTTP_USER_AGENT'], "EXPLORER") === FALSE) { ?>
          var container = document.getElementById(id);
          var allNewScripts = container.getElementsByTagName('script');
          c = allNewScripts.length;

          if (c>0) {
            for (x=0;x<=c;x++) {
              if (allNewScripts[x]) {
                eval(allNewScripts[x].innerHTML);
              }
            }
          }
        <?php }  ?>

        //  Jos p‰ivitet‰‰n togglegrouppaus
        if (href) {
          document.getElementById(href).href = 'javascript:toggleGroup("' + id + '");';
          toggled.push(id);
        }

        //  Varmistetaan n‰kyvyys
        document.getElementById(id).style.display = '';

      }
    }

    this.doPost = function() {
      http.open('post', urli + '&ohje=off&no_css=yes&no_head=yes', true);
      http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      http.send(data);
    }

    this.doGet = function() {
      http.open('get', urli + '&' + data + '&ohje=off&no_css=yes&no_head=yes');
      http.send(null);
    }

    this.unToggle = function() {
      unToggle(id);
      document.getElementById(href).href = document.getElementById(href).href+' unToggle("' + id + '");';
    }

    this.showLoader = function() {
      document.getElementById(id).innerHTML = "<div style='filter:alpha(opacity=30); -moz-opacity:0.3; opacity: 0.3; position: absolute; width: 100%; height: 100%; top: 0; left: 0; background-color: #0c0c0c;' z-index: 100><img style='position: absolute; top: 50%; left: 50%;' src='<?php echo $imgUrl; ?>'></div>";
    }

  }

  function sndReq(div, urli, href, load, unToggle, method, data) {

    //  Luodaan uudi instanssi
    var ai = new AJAXInteraction(urli, div, data, href);

    //  N‰ytet‰‰n latausanimaatio
    if (load) {
      ai.showLoader();
    }

    if (unToggle) {
      ai.unToggle();
    }

    //  Otetaan yhteydet
    if (method == 'post') {
      ai.doPost();
    }
    else {
      ai.doGet();
    }

  }

  function unToggle(id) {
    for (x in toggled) {
      if (toggled[x] != id) {
        if (document.getElementById(toggled[x])) {
          document.getElementById(toggled[x]).style.display = 'none';
        }
        delete toggled[x];
      }
    }
  }

  function toggleGroup(id) {

    if (document.getElementById(id).style.display != 'none') {
      document.getElementById(id).style.display = 'none';
    }
    else {
      document.getElementById(id).style.display = '';
    }
  }

  function ajaxPost(formID, urli , minne, href, load, unToggle, method) {

    obj = document.getElementById(formID);
    getstr = "sourceCharset=UTF-8&";

     for (i=0; i<obj.length; i++) {
      if (obj.elements[i].tagName == "INPUT" && obj.elements[i].value != "") {
        if (obj.elements[i].type == "text" || obj.elements[i].type == "hidden") {
          getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
        }
        else if (obj.elements[i].type == "checkbox") {
          if (obj.elements[i].checked) {
            getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
          }
          else {
            getstr += obj.elements[i].name + "=&";
          }
        }
        else if (obj.elements[i].type == "radio") {
          if (obj.elements[i].checked) {
            getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
          }
        }
      }
      else if (obj.elements[i].tagName == "SELECT") {
        var sel = obj.elements[i];
        if (sel.multiple) {
          for (var x = 0; x < sel.options.length; x++) {
            if (sel.options[x].selected) {
              getstr += sel.name + "=" + sel.options[x].value + "&";
            }
          }
        }
        else {
          getstr += sel.name + "=" + sel.options[sel.selectedIndex].value + "&";
        }
      }
      else if (obj.elements[i].tagName == "TEXTAREA") {
        getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
      }
    }

    if (method==undefined) {
      method="post";
    }

    sndReq(minne, urli, href, load, unToggle, method, getstr);
  }

  var keyStrokeIndex=-1;

  function livesearch_blurhandler(id) {
    if ( document.activeElement ) hf = document.activeElement;
    else hf = document.focusNode;

    if (hf.id != id)†{

      var selectOptions = document.getElementsByName('selectOptions'+id);

      for (var iEl = 0; iEl < selectOptions.length; iEl++) {
        if (document.getElementById(selectOptions[iEl].id).className != '') {
          return false;
        }
      }

      document.getElementById('livesearch_'+id).style.visibility = 'hidden';
    }
  }

  function livesearch_keyhandler(event, haku_id, haku_formi, dont_submit_after, vero_field) {

    var selectOptions = document.getElementsByName('selectOptions'+haku_id);

    for (var iEl = 0; iEl < selectOptions.length; iEl++) {
      document.getElementById(selectOptions[iEl].id).className='';
    }

    if (event.keyCode == 40 || event.keyCode == 38) {
      if (event.keyCode  == 40) {
        previousKeyStrokeIndex=keyStrokeIndex;
        keyStrokeIndex++;
      }
      else if (event.keyCode == 38){
        previousKeyStrokeIndex=keyStrokeIndex;
        keyStrokeIndex--;
      }

      if (keyStrokeIndex > selectOptions.length-1) {
        keyStrokeIndex = selectOptions.length-1;
      }
      else if (keyStrokeIndex < 0) {
        keyStrokeIndex = -1;
        selectOptions[previousKeyStrokeIndex].className='';
      }
      else {
        if (previousKeyStrokeIndex < 0) {
          previousKeyStrokeIndex = 0;
        }

        if (previousKeyStrokeIndex != keyStrokeIndex) {
          selectOptions[previousKeyStrokeIndex].className='';
        }

        selectOptions[keyStrokeIndex].className='liveSearchSelectedItem';

        if (selectOptions[keyStrokeIndex].id) document.getElementById(selectOptions[keyStrokeIndex].id).scrollIntoView();
      }
    }
    else if (event.keyCode == 13) {
      if (keyStrokeIndex >= 0 && keyStrokeIndex <= selectOptions.length-1) {
        var selectValues = document.getElementsByName('selectValues'+haku_id);
        document.getElementById(haku_id).value=selectValues[keyStrokeIndex].id;

        if (vero_field) {
          hae_oletusalv(haku_id, vero_field);
        }

        if (dont_submit_after) {
          document.getElementById('livesearch_'+haku_id).style.visibility = 'hidden';
        }
        else {
          document.getElementByName(haku_formi).submit();
        }
        keyStrokeIndex=-1;
      }
      else {
        document.getElementByName(haku_formi).submit();
      }

      return false;
    }
    else if (event.keyCode == 27) {
      selectOptions[keyStrokeIndex].className='';
      KeyStrokeIndex = -1;
    }
    else if (event.keyCode == 9) {
      document.getElementById('livesearch_'+haku_id).style.visibility = 'hidden';
      KeyStrokeIndex = -1;
    }

    if (keyStrokeIndex >= 0 && keyStrokeIndex <= selectOptions.length-1) {
      selectOptions[keyStrokeIndex].className='liveSearchSelectedItem';
    }
  }

  function hae_oletusalv(tilikentta_id, alvkentta) {

    var t = document.getElementById(tilikentta_id);

    $.post( <?php echo "'{$_SERVER['SCRIPT_NAME']}', " ?>
      {
        ajax_toiminto: 'tilin_oletusalv',
        tilino: t.value,
        no_head: 'yes',
        ohje: 'off'
      },
      function(return_value) {
        var data = JSON && JSON.parse(return_value) || $.parseJSON(return_value);

        if (typeof data == 'object' && data.vero && data.vero.length > 0) {
          t = document.getElementsByName(alvkentta);
          if (t.length == 1) {
             t[0].value = data.vero;
          }
        }
      }
    );
  }
</script>

<?php
    }
  }
}

if (!function_exists("js_selectAllCheckboxesByName")) {
  function js_selectAllCheckboxesByName() {
?>
    <SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
      function selectAllCheckboxesByName(suunta, name) {
        list=document.getElementsByTagName("input")
        if (list.length > 0) {

          for(i=0;i<=list.length;i++){
            if (list[i].type == "checkbox") {
              if (list[i].name.substr(0, name.length) == name) {
                list[i].checked=suunta;
              }
            }
          }
        }
      }
    </SCRIPT>
    <?php
  }
}

if (!function_exists("js_openFormInNewWindow")) {
  function js_openFormInNewWindow() {
    static $js_openFormInNewWindowCalled = FALSE;

    // Ekotetaan vain kerran.
    if (!$js_openFormInNewWindowCalled) {
      $js_openFormInNewWindowCalled = TRUE;
?>
    <SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
      function js_openFormInNewWindow(formID, name) {

        if (!name) {
          name='Pupesoft'+Math.floor(Math.random()*1001);
        }

        formi = document.getElementById(formID);

        if (name == "samewindow") {
          formi.target='';

          formi.submit();
        }
        else {
          thistee = formi.elements["tee"].value;
          formi.elements["tee"].value = "NAYTATILAUS";

          leveys = ''

          if (arguments[2] > 0) {
            leveys = ",width="+arguments[2]+",height=800"
          }

          window.open('', name, 'top=100,left=100,resizable=yes'+leveys);

          formi.target=name;

          formi.submit();

          formi.elements["tee"].value = thistee;
        }
      }
    </SCRIPT>
    <?php
    }
  }
}

if (!function_exists("js_open_yllapito")) {
  function js_open_yllapito() {
    global $palvelin2;

?>
    <SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
      function js_open_yllapito(tdid, parametrit){

        var posX, posY;
        var offsetX=30, offsetY=30;

        if (typeof window.screenLeft != "undefined"){ //IE
          posX = window.screenLeft + offsetX;
          posY = window.screenTop + offsetY;
        }
        else if (typeof window.screenX != "undefined"){ //NS/Moz
          posX = window.screenX + offsetX;
          posY = window.screenY + offsetY;
        }
        else { //default - center of screen
          posX = screen.availWidth/2 - w/2;
          posY = screen.availHeight/2 - h/2;
        }

        newwindow=window.open('<?php echo $palvelin2; ?>yllapito.php?'+parametrit+'&js_open_yp='+tdid+'&uusi=1&ohje=off', 'Pupesoft_popup', 'width=800, height=600, top='+posY+', left='+posX+', scrollbars=no, resizable=yes');
      }
    </SCRIPT>
    <?php
  }
}

if (!function_exists("js_alasvetoMaxWidth")) {
  function js_alasvetoMaxWidth($id, $leveys) {
    return "id = \"$id\" style=\"max-width: {$leveys}px; width: expression(if (parseInt(document.getElementById('$id').clientWidth) > $leveys) { {$leveys}px });\" onmousedown=\"var browser = navigator.appName.toUpperCase(); var loytyyko = browser.indexOf('EXPLORER'); if (loytyyko >= 0) {document.getElementById('$id').style.width = 'auto';}\" onblur=\"var browser = navigator.appName.toUpperCase(); var loytyyko = browser.indexOf('EXPLORER'); if (loytyyko >= 0 && $leveys > 0) {cwidth = document.getElementById('$id').clientWidth; if (cwidth > $leveys) { document.getElementById('$id').style.width = '$leveys'+'px';} else {document.getElementById('$id').style.width = 'auto';}}\"";
  }
}

if (!function_exists("js_toimehtoTarkenne")) {
  function js_toimehtoTarkenne() {
?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">

function toimehtoTarkenne(toimehto) {
  tehto=document.getElementById(toimehto);
  tehtoLisa=document.getElementById(toimehto+'Lisa');

  teksti=tehto.options[tehto.selectedIndex].text;
  arvo=tehto.options[tehto.selectedIndex].value;

  i=teksti.indexOf("-");
  if (i>0) {
    tarkenne=teksti.substr((i+2));
    tehtoLisa.value=tarkenne;
  }
  else {
    tehtoLisa.value='';
  }
}

</script>
<?php
  }
}

if (!function_exists("js_popup")) {
  // scripti balloonien tekemiseen
  function js_popup() {

    echo "<script type='text/javascript' language='javascript'>";

    require "popup.js";

    echo "</script>";

  }
}

if (!function_exists("encodeURI")) {
  function encodeURI($string) {
    /*
    PHP URL encoding/decoding functions for Javascript interaction V3.0
    (C) 2006 www.captain.at - all rights reserved
    License: GPL
    */

    //  Apufunktio
    if (!function_exists("encodeURIbycharacter")) {
      function encodeURIbycharacter($char) {
        if ($char == "+") { return "%20"; }
        if ($char == "%21") { return "!"; }
        if ($char == "%23") { return "#"; }
        if ($char == "%24") { return "$"; }
        if ($char == "%26") { return "&"; }
        if ($char == "%27") { return "\""; }
        if ($char == "%28") { return "("; }
        if ($char == "%29") { return ")"; }
        if ($char == "%2A") { return "*"; }
        if ($char == "%2B") { return "+"; }
        if ($char == "%2C") { return ","; }
        if ($char == "%2F") { return "/"; }
        if ($char == "%3A") { return ":"; }
        if ($char == "%3B") { return ";"; }
        if ($char == "%3D") { return "="; }
        if ($char == "%3F") { return "?"; }
        if ($char == "%40") { return "@"; }
        if ($char == "%7E") { return "~"; }
        if ($char == "%80") { return "%E2%82%AC"; }
        if ($char == "%81") { return "%C2%81"; }
        if ($char == "%82") { return "%E2%80%9A"; }
        if ($char == "%83") { return "%C6%92"; }
        if ($char == "%84") { return "%E2%80%9E"; }
        if ($char == "%85") { return "%E2%80%A6"; }
        if ($char == "%86") { return "%E2%80%A0"; }
        if ($char == "%87") { return "%E2%80%A1"; }
        if ($char == "%88") { return "%CB%86"; }
        if ($char == "%89") { return "%E2%80%B0"; }
        if ($char == "%8A") { return "%C5%A0"; }
        if ($char == "%8B") { return "%E2%80%B9"; }
        if ($char == "%8C") { return "%C5%92"; }
        if ($char == "%8D") { return "%C2%8D"; }
        if ($char == "%8E") { return "%C5%BD"; }
        if ($char == "%8F") { return "%C2%8F"; }
        if ($char == "%90") { return "%C2%90"; }
        if ($char == "%91") { return "%E2%80%98"; }
        if ($char == "%92") { return "%E2%80%99"; }
        if ($char == "%93") { return "%E2%80%9C"; }
        if ($char == "%94") { return "%E2%80%9D"; }
        if ($char == "%95") { return "%E2%80%A2"; }
        if ($char == "%96") { return "%E2%80%93"; }
        if ($char == "%97") { return "%E2%80%94"; }
        if ($char == "%98") { return "%CB%9C"; }
        if ($char == "%99") { return "%E2%84%A2"; }
        if ($char == "%9A") { return "%C5%A1"; }
        if ($char == "%9B") { return "%E2%80%BA"; }
        if ($char == "%9C") { return "%C5%93"; }
        if ($char == "%9D") { return "%C2%9D"; }
        if ($char == "%9E") { return "%C5%BE"; }
        if ($char == "%9F") { return "%C5%B8"; }
        if ($char == "%A0") { return "%C2%A0"; }
        if ($char == "%A1") { return "%C2%A1"; }
        if ($char == "%A2") { return "%C2%A2"; }
        if ($char == "%A3") { return "%C2%A3"; }
        if ($char == "%A4") { return "%C2%A4"; }
        if ($char == "%A5") { return "%C2%A5"; }
        if ($char == "%A6") { return "%C2%A6"; }
        if ($char == "%A7") { return "%C2%A7"; }
        if ($char == "%A8") { return "%C2%A8"; }
        if ($char == "%A9") { return "%C2%A9"; }
        if ($char == "%AA") { return "%C2%AA"; }
        if ($char == "%AB") { return "%C2%AB"; }
        if ($char == "%AC") { return "%C2%AC"; }
        if ($char == "%AD") { return "%C2%AD"; }
        if ($char == "%AE") { return "%C2%AE"; }
        if ($char == "%AF") { return "%C2%AF"; }
        if ($char == "%B0") { return "%C2%B0"; }
        if ($char == "%B1") { return "%C2%B1"; }
        if ($char == "%B2") { return "%C2%B2"; }
        if ($char == "%B3") { return "%C2%B3"; }
        if ($char == "%B4") { return "%C2%B4"; }
        if ($char == "%B5") { return "%C2%B5"; }
        if ($char == "%B6") { return "%C2%B6"; }
        if ($char == "%B7") { return "%C2%B7"; }
        if ($char == "%B8") { return "%C2%B8"; }
        if ($char == "%B9") { return "%C2%B9"; }
        if ($char == "%BA") { return "%C2%BA"; }
        if ($char == "%BB") { return "%C2%BB"; }
        if ($char == "%BC") { return "%C2%BC"; }
        if ($char == "%BD") { return "%C2%BD"; }
        if ($char == "%BE") { return "%C2%BE"; }
        if ($char == "%BF") { return "%C2%BF"; }
        if ($char == "%C0") { return "%C3%80"; }
        if ($char == "%C1") { return "%C3%81"; }
        if ($char == "%C2") { return "%C3%82"; }
        if ($char == "%C3") { return "%C3%83"; }
        if ($char == "%C4") { return "%C3%84"; }
        if ($char == "%C5") { return "%C3%85"; }
        if ($char == "%C6") { return "%C3%86"; }
        if ($char == "%C7") { return "%C3%87"; }
        if ($char == "%C8") { return "%C3%88"; }
        if ($char == "%C9") { return "%C3%89"; }
        if ($char == "%CA") { return "%C3%8A"; }
        if ($char == "%CB") { return "%C3%8B"; }
        if ($char == "%CC") { return "%C3%8C"; }
        if ($char == "%CD") { return "%C3%8D"; }
        if ($char == "%CE") { return "%C3%8E"; }
        if ($char == "%CF") { return "%C3%8F"; }
        if ($char == "%D0") { return "%C3%90"; }
        if ($char == "%D1") { return "%C3%91"; }
        if ($char == "%D2") { return "%C3%92"; }
        if ($char == "%D3") { return "%C3%93"; }
        if ($char == "%D4") { return "%C3%94"; }
        if ($char == "%D5") { return "%C3%95"; }
        if ($char == "%D6") { return "%C3%96"; }
        if ($char == "%D7") { return "%C3%97"; }
        if ($char == "%D8") { return "%C3%98"; }
        if ($char == "%D9") { return "%C3%99"; }
        if ($char == "%DA") { return "%C3%9A"; }
        if ($char == "%DB") { return "%C3%9B"; }
        if ($char == "%DC") { return "%C3%9C"; }
        if ($char == "%DD") { return "%C3%9D"; }
        if ($char == "%DE") { return "%C3%9E"; }
        if ($char == "%DF") { return "%C3%9F"; }
        if ($char == "%E0") { return "%C3%A0"; }
        if ($char == "%E1") { return "%C3%A1"; }
        if ($char == "%E2") { return "%C3%A2"; }
        if ($char == "%E3") { return "%C3%A3"; }
        if ($char == "%E4") { return "%C3%A4"; }
        if ($char == "%E5") { return "%C3%A5"; }
        if ($char == "%E6") { return "%C3%A6"; }
        if ($char == "%E7") { return "%C3%A7"; }
        if ($char == "%E8") { return "%C3%A8"; }
        if ($char == "%E9") { return "%C3%A9"; }
        if ($char == "%EA") { return "%C3%AA"; }
        if ($char == "%EB") { return "%C3%AB"; }
        if ($char == "%EC") { return "%C3%AC"; }
        if ($char == "%ED") { return "%C3%AD"; }
        if ($char == "%EE") { return "%C3%AE"; }
        if ($char == "%EF") { return "%C3%AF"; }
        if ($char == "%F0") { return "%C3%B0"; }
        if ($char == "%F1") { return "%C3%B1"; }
        if ($char == "%F2") { return "%C3%B2"; }
        if ($char == "%F3") { return "%C3%B3"; }
        if ($char == "%F4") { return "%C3%B4"; }
        if ($char == "%F5") { return "%C3%B5"; }
        if ($char == "%F6") { return "%C3%B6"; }
        if ($char == "%F7") { return "%C3%B7"; }
        if ($char == "%F8") { return "%C3%B8"; }
        if ($char == "%F9") { return "%C3%B9"; }
        if ($char == "%FA") { return "%C3%BA"; }
        if ($char == "%FB") { return "%C3%BB"; }
        if ($char == "%FC") { return "%C3%BC"; }
        if ($char == "%FD") { return "%C3%BD"; }
        if ($char == "%FE") { return "%C3%BE"; }
        if ($char == "%FF") { return "%C3%BF"; }
        return $char;
      }
    }

    $result = "";
    for ($i = 0; $i < strlen($string); $i++) {
      $result .= encodeURIbycharacter(urlencode($string[$i]));
    }
    return $result;
  }
}

if (!function_exists("decodeURI")) {
  function decodeURI($string) {
    /*
    PHP URL encoding/decoding functions for Javascript interaction V3.0
    (C) 2006 www.captain.at - all rights reserved
    License: GPL
    */

    //  Apufunktio
    if (!function_exists("decodeURIbycharacter")) {
      function decodeURIbycharacter($str) {

        $char = $str;

        if ($char == "%E2%82%AC") { return array("%80", 8); }
        if ($char == "%E2%80%9A") { return array("%82", 8); }
        if ($char == "%E2%80%9E") { return array("%84", 8); }
        if ($char == "%E2%80%A6") { return array("%85", 8); }
        if ($char == "%E2%80%A0") { return array("%86", 8); }
        if ($char == "%E2%80%A1") { return array("%87", 8); }
        if ($char == "%E2%80%B0") { return array("%89", 8); }
        if ($char == "%E2%80%B9") { return array("%8B", 8); }
        if ($char == "%E2%80%98") { return array("%91", 8); }
        if ($char == "%E2%80%99") { return array("%92", 8); }
        if ($char == "%E2%80%9C") { return array("%93", 8); }
        if ($char == "%E2%80%9D") { return array("%94", 8); }
        if ($char == "%E2%80%A2") { return array("%95", 8); }
        if ($char == "%E2%80%93") { return array("%96", 8); }
        if ($char == "%E2%80%94") { return array("%97", 8); }
        if ($char == "%E2%84%A2") { return array("%99", 8); }
        if ($char == "%E2%80%BA") { return array("%9B", 8); }

        $char = substr($str, 0, 6);

        if ($char == "%C2%81") { return array("%81", 5); }
        if ($char == "%C6%92") { return array("%83", 5); }
        if ($char == "%CB%86") { return array("%88", 5); }
        if ($char == "%C5%A0") { return array("%8A", 5); }
        if ($char == "%C5%92") { return array("%8C", 5); }
        if ($char == "%C2%8D") { return array("%8D", 5); }
        if ($char == "%C5%BD") { return array("%8E", 5); }
        if ($char == "%C2%8F") { return array("%8F", 5); }
        if ($char == "%C2%90") { return array("%90", 5); }
        if ($char == "%CB%9C") { return array("%98", 5); }
        if ($char == "%C5%A1") { return array("%9A", 5); }
        if ($char == "%C5%93") { return array("%9C", 5); }
        if ($char == "%C2%9D") { return array("%9D", 5); }
        if ($char == "%C5%BE") { return array("%9E", 5); }
        if ($char == "%C5%B8") { return array("%9F", 5); }
        if ($char == "%C2%A0") { return array("%A0", 5); }
        if ($char == "%C2%A1") { return array("%A1", 5); }
        if ($char == "%C2%A2") { return array("%A2", 5); }
        if ($char == "%C2%A3") { return array("%A3", 5); }
        if ($char == "%C2%A4") { return array("%A4", 5); }
        if ($char == "%C2%A5") { return array("%A5", 5); }
        if ($char == "%C2%A6") { return array("%A6", 5); }
        if ($char == "%C2%A7") { return array("%A7", 5); }
        if ($char == "%C2%A8") { return array("%A8", 5); }
        if ($char == "%C2%A9") { return array("%A9", 5); }
        if ($char == "%C2%AA") { return array("%AA", 5); }
        if ($char == "%C2%AB") { return array("%AB", 5); }
        if ($char == "%C2%AC") { return array("%AC", 5); }
        if ($char == "%C2%AD") { return array("%AD", 5); }
        if ($char == "%C2%AE") { return array("%AE", 5); }
        if ($char == "%C2%AF") { return array("%AF", 5); }
        if ($char == "%C2%B0") { return array("%B0", 5); }
        if ($char == "%C2%B1") { return array("%B1", 5); }
        if ($char == "%C2%B2") { return array("%B2", 5); }
        if ($char == "%C2%B3") { return array("%B3", 5); }
        if ($char == "%C2%B4") { return array("%B4", 5); }
        if ($char == "%C2%B5") { return array("%B5", 5); }
        if ($char == "%C2%B6") { return array("%B6", 5); }
        if ($char == "%C2%B7") { return array("%B7", 5); }
        if ($char == "%C2%B8") { return array("%B8", 5); }
        if ($char == "%C2%B9") { return array("%B9", 5); }
        if ($char == "%C2%BA") { return array("%BA", 5); }
        if ($char == "%C2%BB") { return array("%BB", 5); }
        if ($char == "%C2%BC") { return array("%BC", 5); }
        if ($char == "%C2%BD") { return array("%BD", 5); }
        if ($char == "%C2%BE") { return array("%BE", 5); }
        if ($char == "%C2%BF") { return array("%BF", 5); }
        if ($char == "%C3%80") { return array("%C0", 5); }
        if ($char == "%C3%81") { return array("%C1", 5); }
        if ($char == "%C3%82") { return array("%C2", 5); }
        if ($char == "%C3%83") { return array("%C3", 5); }
        if ($char == "%C3%84") { return array("%C4", 5); }
        if ($char == "%C3%85") { return array("%C5", 5); }
        if ($char == "%C3%86") { return array("%C6", 5); }
        if ($char == "%C3%87") { return array("%C7", 5); }
        if ($char == "%C3%88") { return array("%C8", 5); }
        if ($char == "%C3%89") { return array("%C9", 5); }
        if ($char == "%C3%8A") { return array("%CA", 5); }
        if ($char == "%C3%8B") { return array("%CB", 5); }
        if ($char == "%C3%8C") { return array("%CC", 5); }
        if ($char == "%C3%8D") { return array("%CD", 5); }
        if ($char == "%C3%8E") { return array("%CE", 5); }
        if ($char == "%C3%8F") { return array("%CF", 5); }
        if ($char == "%C3%90") { return array("%D0", 5); }
        if ($char == "%C3%91") { return array("%D1", 5); }
        if ($char == "%C3%92") { return array("%D2", 5); }
        if ($char == "%C3%93") { return array("%D3", 5); }
        if ($char == "%C3%94") { return array("%D4", 5); }
        if ($char == "%C3%95") { return array("%D5", 5); }
        if ($char == "%C3%96") { return array("%D6", 5); }
        if ($char == "%C3%97") { return array("%D7", 5); }
        if ($char == "%C3%98") { return array("%D8", 5); }
        if ($char == "%C3%99") { return array("%D9", 5); }
        if ($char == "%C3%9A") { return array("%DA", 5); }
        if ($char == "%C3%9B") { return array("%DB", 5); }
        if ($char == "%C3%9C") { return array("%DC", 5); }
        if ($char == "%C3%9D") { return array("%DD", 5); }
        if ($char == "%C3%9E") { return array("%DE", 5); }
        if ($char == "%C3%9F") { return array("%DF", 5); }
        if ($char == "%C3%A0") { return array("%E0", 5); }
        if ($char == "%C3%A1") { return array("%E1", 5); }
        if ($char == "%C3%A2") { return array("%E2", 5); }
        if ($char == "%C3%A3") { return array("%E3", 5); }
        if ($char == "%C3%A4") { return array("%E4", 5); }
        if ($char == "%C3%A5") { return array("%E5", 5); }
        if ($char == "%C3%A6") { return array("%E6", 5); }
        if ($char == "%C3%A7") { return array("%E7", 5); }
        if ($char == "%C3%A8") { return array("%E8", 5); }
        if ($char == "%C3%A9") { return array("%E9", 5); }
        if ($char == "%C3%AA") { return array("%EA", 5); }
        if ($char == "%C3%AB") { return array("%EB", 5); }
        if ($char == "%C3%AC") { return array("%EC", 5); }
        if ($char == "%C3%AD") { return array("%ED", 5); }
        if ($char == "%C3%AE") { return array("%EE", 5); }
        if ($char == "%C3%AF") { return array("%EF", 5); }
        if ($char == "%C3%B0") { return array("%F0", 5); }
        if ($char == "%C3%B1") { return array("%F1", 5); }
        if ($char == "%C3%B2") { return array("%F2", 5); }
        if ($char == "%C3%B3") { return array("%F3", 5); }
        if ($char == "%C3%B4") { return array("%F4", 5); }
        if ($char == "%C3%B5") { return array("%F5", 5); }
        if ($char == "%C3%B6") { return array("%F6", 5); }
        if ($char == "%C3%B7") { return array("%F7", 5); }
        if ($char == "%C3%B8") { return array("%F8", 5); }
        if ($char == "%C3%B9") { return array("%F9", 5); }
        if ($char == "%C3%BA") { return array("%FA", 5); }
        if ($char == "%C3%BB") { return array("%FB", 5); }
        if ($char == "%C3%BC") { return array("%FC", 5); }
        if ($char == "%C3%BD") { return array("%FD", 5); }
        if ($char == "%C3%BE") { return array("%FE", 5); }
        if ($char == "%C3%BF") { return array("%FF", 5); }

        $char = substr($str, 0, 3);
        if ($char == "%20") { return array("+", 2); }

        $char = substr($str, 0, 1);

        if ($char == "!") { return array("%21", 0); }
        if ($char == "#") { return array("%23", 0); }
        if ($char == "$") { return array("%24", 0); }
        if ($char == "&") { return array("%26", 0); }
        if ($char == "\"") { return array("%27", 0); }
        if ($char == "(") { return array("%28", 0); }
        if ($char == ")") { return array("%29", 0); }
        if ($char == "*") { return array("%2A", 0); }
        if ($char == "+") { return array("%2B", 0); }
        if ($char == ",") { return array("%2C", 0); }
        if ($char == "/") { return array("%2F", 0); }
        if ($char == ":") { return array("%3A", 0); }
        if ($char == ";") { return array("%3B", 0); }
        if ($char == "=") { return array("%3D", 0); }
        if ($char == "?") { return array("%3F", 0); }
        if ($char == "@") { return array("%40", 0); }
        if ($char == "~") { return array("%7E", 0); }

        if ($char == "%") {
          return array(substr($str, 0, 3), 2);
        } else {
          return array($char, 0);
        }
      }
    }

    $result = "";
    for ($i = 0; $i < strlen($string); $i++) {
      $decstr = "";
      for ($p = 0; $p <= 8; $p++) {
        $decstr .= $string[$i+$p];
      }
      list($decodedstr, $num) = decodeURIbycharacter($decstr);
      $result .= urldecode($decodedstr);
      $i += $num ;
    }
    return $result;
  }
}

if (!function_exists("tallenna_muisti")) {
  function tallenna_muisti($nimitys, $exclude = "", $kuka = "") {
    global $kukarow;

    if ($nimitys == "") {
      return false;
    }

    $data = $_REQUEST;

    if (is_array($exclude)) {
      foreach ($exclude as $kentta) {
        unset($data[$kentta]);
      }
    }

    $nimitys = mysql_real_escape_string($nimitys);
    $data = mysql_real_escape_string(serialize($data));

    $kuka = trim($kuka) != '' ? mysql_real_escape_string($kuka) : $kukarow['kuka'];

    $query = "REPLACE INTO tallennetut_parametrit SET
              yhtio      = '$kukarow[yhtio]',
              kuka       = '$kuka',
              nimitys    = '$nimitys',
              sovellus   = '$_SERVER[SCRIPT_NAME]',
              data       = '$data',
              laatija    = '$kukarow[kuka]',
              luontiaika = now()";
    $result = pupe_query($query, $GLOBALS["masterlink"]);

    return true;
  }
}

if (!function_exists("hae_muisti")) {
  function hae_muisti($nimitys, $kuka = '') {
    global $kukarow;

    if ($kuka == "") {
      $kuka = $kukarow["kuka"];
    }

    $query = "SELECT *
              FROM tallennetut_parametrit
              WHERE yhtio  = '$kukarow[yhtio]'
              and nimitys  = '$nimitys'
              and kuka     = '$kuka'
              and sovellus = '$_SERVER[SCRIPT_NAME]'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $row = mysql_fetch_assoc($result);
      $data = unserialize($row["data"]);

      foreach ($data as $nimi => $arvo) {
        global ${$nimi};
        ${$nimi} = $arvo;
      }
    }
    else {
      return false;
    }
  }
}

if (!function_exists("muistiin")) {
  function muistiin($muisti, $nimi, $muistettava, $exclude = "", $kuvaus = "") {
    global $kukarow;

    if ($muisti == "" or $nimi == "" or !is_array($muistettava)) {
      return false;
    }

    if (!is_array($exclude)) {
      $exclude = array();
    }

    // Poistetaan vanha kysely sek‰ tmpquery
    $query = "DELETE
              FROM muisti
              WHERE yhtio = '$kukarow[yhtio]'
              and haku    = '$muisti'
              and kuka    = '$kukarow[kuka]'
              and nimi    = '$nimi'";
    $result = pupe_query($query, $GLOBALS["masterlink"]);

    foreach ($muistettava as $key => $value) {

      if (!in_array($key, $exclude)) {

        // Katsotaan onko kyseess‰ array
        $array = "";
        if (is_array($value)) {
          $value = serialize($value);
          $array = "X";
        }

        $value = mysql_real_escape_string($value);

        $kuvauslisa = empty($kuvaus) ? "" : "kuvaus = '{$kuvaus}',";

        $query = "INSERT INTO muisti SET
                  yhtio      = '$kukarow[yhtio]',
                  kuka       = '$kukarow[kuka]',
                  haku       = '$muisti',
                  nimi       = '$nimi',
                  {$kuvauslisa}
                  var        = '$key',
                  value      = '$value',
                  array      = '$array',
                  luontiaika = now(),
                  laatija    = '$kukarow[kuka]',
                  muokattu   = now(),
                  muokannut  = '$kukarow[kuka]'";
        $result = pupe_query($query, $GLOBALS["masterlink"]);
      }
    }

    return true;
  }
}

if (!function_exists("muistista")) {
  function muistista($muisti, $nimi, $tarkista_kuka = true, $kuvaus_mukaan = false) {
    global $kukarow;

    $kuka_lisa = $tarkista_kuka ? "AND kuka = '{$kukarow["kuka"]}'" : "";

    $query = "SELECT *
              FROM muisti
              WHERE yhtio = '$kukarow[yhtio]'
              and haku    = '$muisti'
              {$kuka_lisa}
              and nimi    = '$nimi'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      return false;
    }

    $retval = array();

    while ($row = mysql_fetch_assoc($result)) {
      if ($row["array"] != "") {
        $retval[$row["var"]] = unserialize($row["value"]);
      }
      else {
        $retval[$row["var"]] = stripslashes($row["value"]);
      }

      if ($kuvaus_mukaan) {
        $retval["kuvaus"] = $row["kuvaus"];
      }
    }

    return $retval;
  }
}

if (!function_exists("aja_kysely")) {
  function aja_kysely() {
    global $kukarow, $hakukysely, $aja_kysely, $uusi_kysely, $tallenna_muutokset, $poista_kysely, $_POST;

    if (!table_exists("muisti") or $hakukysely == "") {
      return true;
    }

    //  Tallennetaan viimeisin kysely aina muistiin jotta voimme kutsua sit‰ helposti uudestaan
    if ($aja_kysely == "" and $uusi_kysely == "") {
      $tallenna_muutokset = "X";
      $aja_kysely = "tmpquery";
    }

    if ($tallenna_muutokset != "") {
      if ($aja_kysely != "") {
        $uusi_kysely = $aja_kysely;
      }
      else {
        echo "<font class='error'>".t("Valitse kysely jonka muutokset tallennetaan")."</font>";
        return false;
      }
    }

    if ($poista_kysely != "" and $aja_kysely == "") {
      echo "<font class='error'>".t("Valitse kysely jonka haluat poistaa")."</font>";
      return false;
    }

    //  Tallennetaan uusi kysely
    if ($uusi_kysely != "") {
      if (is_array($_POST) and count($_POST)>0) {

        if ($exclude != "") {
          $exclude = implode(",", $exclude);
        }
        else {
          $exclude = array();
        }

        //  Poistetaan vanha kysely sek‰ tmpquery
        $query = "DELETE
                  FROM muisti
                  WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and (nimi = '$uusi_kysely' or nimi = 'tmpquery')";
        $result = pupe_query($query);

        //  T‰ll‰iset arvot skipataan aina
        $exclude[] = "uusi_kysely";
        $exclude[] = "aja_kysely";
        $exclude[] = "hakukysely";
        $exclude[] = "tallenna_muutokset";

        $exclude[] = "ppa";
        $exclude[] = "kka";
        $exclude[] = "vva";
        $exclude[] = "ppl";
        $exclude[] = "kkl";
        $exclude[] = "vvl";

        $exclude[] = "tee";
        $exclude[] = "toim";

        foreach ($_POST as $key => $value) {

          if (!in_array($key, $exclude)) {

            //  Koitetaan arpoa pari speciaalia datatyyppi‰
            $array = "";
            if (is_array($value)) {
              $value = serialize($value);
              $array = "X";
            }

            $query = "INSERT INTO muisti SET
                      yhtio      = '$kukarow[yhtio]',
                      kuka       = '$kukarow[kuka]',
                      haku       = '$hakukysely',
                      nimi       = '$uusi_kysely',
                      var        = '$key',
                      value      = '$value',
                      array      = '$array',
                      luontiaika = now(),
                      laatija    = '$kukarow[kuka]',
                      muokattu   = now(),
                      muokannut  = '$kukarow[kuka]'";
            $result = pupe_query($query);

            //  Tallennetaan viimeisin haku
            if ($aja_kysely != "tmpquery") {
              $query = "INSERT INTO muisti SET
                        yhtio      = '$kukarow[yhtio]',
                        kuka       = '$kukarow[kuka]',
                        haku       = '$hakukysely',
                        nimi       = 'tmpquery',
                        var        = '$key',
                        value      = '$value',
                        array      = '$array',
                        luontiaika = now(),
                        laatija    = '$kukarow[kuka]',
                        muokattu   = now(),
                        muokannut  = '$kukarow[kuka]'";
              $result = pupe_query($query);
            }
          }
        }
      }

      $aja_kysely = $uusi_kysely;

      if ($aja_kysely != "tmpquery") {
        echo "<br><font class='message'>".t("Tallennettiin kysely")." $aja_kysely</font><br>";
      }
      return true;
    }
    //  Poistetaan kysely
    elseif ($poista_kysely != "" and $aja_kysely != "") {
      $query = "DELETE
                FROM muisti
                WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and nimi = '$aja_kysely'";
      $result = pupe_query($query);

      echo "<br><font class='message'>".t("Poistettiin kysely")." $aja_kysely</font><br>";

      return false;
    }
    //  Ajetaan kysely muistista
    elseif ($aja_kysely != "") {
      //  Onko t‰m‰ arvo jo tallennettu?
      $query = "SELECT *
                FROM muisti
                WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and nimi = '$aja_kysely'";
      $result = pupe_query($query);
      if (mysql_num_rows($result)>0) {
        while ($row = mysql_fetch_assoc($result)) {
          global ${$row["var"]};
          if ($row["array"] != "") {
            $row["value"] = unserialize($row["value"]);
          }

          ${$row["var"]} = $row["value"];
          $_POST[$row["var"]] = $row["value"];
        }
      }

      if ($aja_kysely != "tmpquery") {
        echo "<br><font class='message'>".t("Suoritetaan kysely")." $aja_kysely</font><br>";
      }
      return true;
    }

    return false;
  }
}

if (!function_exists("nayta_kyselyt")) {
  function nayta_kyselyt($haku) {
    global $kukarow, $aja_kysely;

    if (!table_exists("muisti") or $haku == "") {
      return false;
    }

    $ulos = "<table>";
    $ulos .= "<tr>
        <th>".t("Tallenna kysely nimell‰")."</th>
        <td><input type='text' name='uusi_kysely' value='' size='30'><input type='hidden' name='hakukysely' value='$haku'></td>
      </tr>
      <tr>
        <th>".t("Aja tallennettu kysely")."</th>
        <td>
          <select name='aja_kysely'>
          <option value=''>".t("Valitse kysely")."</option>";

    $lisa = "";
    $query = "SELECT distinct nimi
              FROM muisti
              WHERE yhtio='$kukarow[yhtio]' and haku = '$haku' and kuka = '$kukarow[kuka]' and nimi != 'tmpquery'";
    $result = pupe_query($query);
    if (mysql_num_rows($result)>0) {
      while ($row = mysql_fetch_assoc($result)) {
        $ulos .= "<option value='$row[nimi]'>$row[nimi]</option>\n";
      }
    }

    $ulos .= "  </select>
        </td>
      </tr>\n";

    $ulos .= "<tr>
        <th>".t("Tallenna kyselyn muutokset")."</th>
         <td><input type='checkbox' name='tallenna_muutokset' value='X'></td>
      </tr>";

    $ulos .= "<tr>
        <th>".t("Poista kysely")."</th>
         <td><input type='checkbox' name='poista_kysely' value='X'></td>
      </tr>";

    $ulos .= "</table>";

    return $ulos;
  }
}

if (!function_exists('muuta_kuvan_koko')) {
  function muuta_kuvan_koko($ykoko, $xkoko, $type, $taulu, $upfile1) {
    global $kukarow, $yhtiorow, $_FILES;

    if ($taulu != "tmp" and $yhtiorow['kuvapankki_polku'] != "") $dirri = $yhtiorow['kuvapankki_polku']."/".$kukarow['yhtio']."/".$taulu."/".$type."/";
    else $dirri = "/tmp/";

    list($usec, $sec) = explode(" ", microtime());

    $nimi      = $usec+$sec; // uniikki nimi
    $upfileall = "";      // palautus
    $identify  = array();

    $alkuperainen_kuva = $_FILES[$upfile1];

    $path_parts = pathinfo($alkuperainen_kuva["name"]);
    $ext = strtolower($path_parts['extension']);

    $image = getimagesize($alkuperainen_kuva["tmp_name"]);  // l‰hetetty kuva
    $leve  = $image[0];
    $kork  = $image[1];

    if ($ykoko > 0 or $xkoko > 0) {
      /* skaaltaanko x:n vai y:n mukaan, jos xkoko tai ykoko == 0, skaalataan != 0 mukaan */
      if ($ykoko > 0 and $kork > $ykoko) {
        $uusi_kuva = strtolower("/tmp/$nimi"."1.".$ext);

        // Haetaan kuvan v‰riprofiili
        exec("nice -n 20 identify -format %[colorspace] \"$alkuperainen_kuva[tmp_name]\"", $identify);

        $colorspace = "sRGB";
        if ($identify[0] != "") $colorspace = $identify[0];

        // skaalataan kuva oikenakokoiseksi y:n mukaan
        exec("nice -n 20 convert -resize x$ykoko -quality 90 -colorspace $colorspace -strip \"$alkuperainen_kuva[tmp_name]\" \"$uusi_kuva\"");
      }
      elseif ($xkoko > 0 and $leve > $xkoko) {
        $uusi_kuva = strtolower("/tmp/$nimi"."1.".$ext);

        // Haetaan kuvan v‰riprofiili
        exec("nice -n 20 identify -format %[colorspace] \"$alkuperainen_kuva[tmp_name]\"", $identify);

        $colorspace = "sRGB";
        if ($identify[0] != "") $colorspace = $identify[0];

        // skaalataan kuva oikenakokoiseksi x:n mukaan
        exec("nice -n 20 convert -resize $xkoko -quality 90 -colorspace $colorspace -strip \"$alkuperainen_kuva[tmp_name]\" \"$uusi_kuva\"");
      }
      else {
        return $upfile1;
      }

      $uusnimi = $dirri.$alkuperainen_kuva["name"];

      if (!rename($uusi_kuva, $uusnimi)) {
        echo "Siirto ep‰onnistui $uusi_kuva -> $uusnimi<br>";
        $upfileall = "";
      }
      else {
        $upfileall = $uusnimi;
      }

      $a = getimagesize($uusnimi);

      $file["name"]     = basename($uusnimi);
      $file["type"]     = $a["mime"];
      $file["tmp_name"]   = $uusnimi;
      $file["error"]     = 0;
      $file["size"]     = filesize($uusnimi);

      $_FILES[$upfile1] = $file;
    }
    else {
      $upfileall = "";
    }

    return $upfileall;
  }
}

if (!function_exists('tallenna_liite')) {
  function tallenna_liite($userfile, $liitos, $liitostunnus, $selite, $kayttotarkoitus="", $tunnus=0, $jarjestys=0, $kieli="") {
    global $kukarow, $yhtiorow, $_FILES;

    $file = array();

    if ($kieli == "") {
      $kieli = $yhtiorow["kieli"];
    }

    if (isset($_FILES[$userfile]) and is_array($_FILES[$userfile])) {
      $file = $_FILES[$userfile];
    }
    elseif (file_exists($userfile)) {
      $file["name"]     = basename($userfile);
      $file["type"]     = mime_content_type($userfile);
      $file["tmp_name"] = $userfile;
      $file["error"]    = 0;
      $file["size"]     = filesize($userfile);

      $_FILES[$userfile] = $file;
    }

    $tark = tarkasta_liite($userfile);

    if ($tark !== true or $file["error"] == 4) {
      return false;
    }

    $data     = mysql_real_escape_string(file_get_contents($file["tmp_name"]));
    $filename   = preg_replace("/[^A-Z0-9\.#_\-%]/i", "", $file["name"]);
    $filetype  = mysql_real_escape_string($file["type"]);
    $filesize  = mysql_real_escape_string($file["size"]);
    $selite    = mysql_real_escape_string($selite);

    //  Tarkastetaan, ett‰ kuvatunnus on oikea..
    if ($tunnus > 0) {
      $query = "  SELECT tunnus FROM liitetiedostot WHERE yhtio = '$kukarow[yhtio]' and tunnus = '$tunnus'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 0) {
        $tunnus = 0;
      }
    }

    //  Onko meill‰ jokin kuvatyyppi?
    if (substr($filetype, 0, 5) == "image") {
      $size = getimagesize($file["tmp_name"], $imageinfo);
      $image_width   = $size[0];
      $image_height   = $size[1];
      $image_bits   = $size["bits"];
      $image_channels  = $size["channels"];

      unset($size);
    }
    else {
      $image_width   = "";
      $image_height   = "";
      $image_bits   = "";
      $image_channels  = "";
    }

    // Jos ei olla saatu filetyyppi‰ niin arvotaan se vaikka filen nimest‰
    if ($filetype == "") {
      if ($filename != "") {
        $path_parts = pathinfo($filename);
        $extensio = strtolower($path_parts['extension']);

        if ($extensio == "jpg" or $extensio == "jpeg") {
          $filetype = "image/jpeg";
        }
        elseif ($extensio == "pdf" ) {
          $filetype = "application/pdf";
        }
        elseif (substr($extensio, 0, 3) == "xls" ) {
          $filetype = "application/vnd.ms-excel";
        }
        elseif (substr($extensio, 0, 3) == "doc" ) {
          $filetype = "application/msword";
        }
        else {
          $filetype = "application/octet-stream";
        }
      }
      else {
        $filetype = "application/octet-stream";
      }
    }

    // lis‰t‰‰n kuva
    if ($tunnus > 0) {
      $query = "UPDATE liitetiedostot SET
                data            = '$data',
                selite          = trim('$selite'),
                filename        = '$filename',
                filesize        = '$filesize',
                filetype        = '$filetype',
                image_width     = '$image_width',
                image_height    = '$image_height',
                image_bits      = '$image_bits',
                image_channels  = '$image_channels',
                kayttotarkoitus = '$kayttotarkoitus',
                jarjestys       = '$jarjestys',
                laatija         = '$kukarow[kuka]',
                luontiaika      = now()
                WHERE yhtio     = '$kukarow[yhtio]' and tunnus = '$tunnus'";
      $result = pupe_query($query);
      $id = $tunnus;
    }
    else {
      if ((int) $jarjestys == 0) {
        $query = "SELECT max(jarjestys) jarjestys
                  FROM liitetiedostot
                  WHERE yhtio      = '$kukarow[yhtio]'
                  and liitos       = '$liitos'
                  and liitostunnus = '$liitostunnus'";
        $result = pupe_query($query);
        $row = mysql_fetch_assoc($result);

        $jarjestys = $row["jarjestys"]+1;
      }

      $query = "INSERT INTO liitetiedostot SET
                yhtio           = '$kukarow[yhtio]',
                liitos          = '$liitos',
                liitostunnus    = '$liitostunnus',
                data            = '$data',
                selite          = trim('$selite'),
                kieli           = '$kieli',
                filename        = '$filename',
                filesize        = '$filesize',
                filetype        = '$filetype',
                image_width     = '$image_width',
                image_height    = '$image_height',
                image_bits      = '$image_bits',
                image_channels  = '$image_channels',
                kayttotarkoitus = '$kayttotarkoitus',
                jarjestys       = '$jarjestys',
                laatija         = '$kukarow[kuka]',
                luontiaika      = now()";
      $result = pupe_query($query);
      $id = mysql_insert_id($GLOBALS["masterlink"]);
    }

    return $id;
  }
}

if (!function_exists('html_error')) {
  function html_error($message) {
    return "<font class='error'>{$message}</font><br><br>";
  }
}

if (!function_exists('tarkasta_liite')) {
  function tarkasta_liite($userfile, $sallitut_tiedostot="") {
    global $kukarow, $yhtiorow, $_FILES, $kieli;

    if (!is_array($_FILES[$userfile])) {
      return false;
    }

    $file = $_FILES[$userfile];

    // otetaan file extensio
    $path_parts = pathinfo($file['name']);
    $ext = isset($path_parts['extension']) ? strtoupper($path_parts['extension']) : '';
    if ($ext == "JPEG") $ext = "jpg";

    //  Sallitut tiedostot on aina upper
    if (is_array($sallitut_tiedostot)) {
      foreach ($sallitut_tiedostot as &$s) {
        $s = strtoupper($s);
      }
    }

    $msg = '';

    //  Ei saatu erroreita. jatketaan..
    if ($file["size"] == 0) {
      $msg = t("VIRHE: Tiedosto on tyhj‰");
    }
    elseif ($file["error"] == 0) {
      //  Paketti riitt‰v‰n pieni mysql:lle
      $query = "SHOW variables like 'max_allowed_packet'";
      $result = pupe_query($query);
      $varirow = mysql_fetch_row($result);

      if ($file["size"] < $varirow[1]) {
        //  T‰m‰ on ainoa haara jossa voimme jatkaa!
        if (!is_array($sallitut_tiedostot) and $sallitut_tiedostot == "") {
          return true;
        }
        elseif (in_array(strtoupper($ext), $sallitut_tiedostot)) {
          return true;
        }
        else {
          if (count($sallitut_tiedostot) > 1) {
            $msg = t("VIRHE: Tiedostomuoto %s ei kelpaa, sallitut tiedostomuodot on %s ja %s", $kieli, $ext, implode(", ", array_slice($sallitut_tiedostot, 0, -1)), end($sallitut_tiedostot));
          }
          else {
            $msg = t("VIRHE: Tiedostomuoto %s ei kelpaa, sallittu tiedostomuoto on %s", $kieli, $ext, $sallitut_tiedostot[0]);
          }
        }
      }
      else {
        $msg = t("VIRHE: Ladattu tiedosto oli liian suuri! Suurin sallittu tiedostokoko on %s", $kieli, size_readable($file["size"]));
      }
    }
    elseif ($file["error"] == 1 or $file["error"] == 2) {
      $msg = t("VIRHE: Tiedosto on liian suuri!");
    }
    elseif ($file["error"] == 3) {
      $msg = t("VIRHE: Tiedoston lataus ep‰onnistui!");
    }
    elseif ($file["error"] == 4) {
      return true;
    }
    elseif ($file["error"] == 7) {
      $msg = t("VIRHE: Palvelinasetuksissa on virhe!");
    }
    else {
      $msg = t("VIRHE: Tapahtui virhe tallennettaessa tiedostoa!");
    }

    if (PHP_SAPI != 'cli') {
      $msg = html_error($msg);
    }

    return $msg;
  }
}

if (!function_exists('hae_liite')) {
  function hae_liite($tunnus, $liitos, $palautus="") {
    global $kukarow, $yhtiorow;

    $query = "select * from liitetiedostot where tunnus='$tunnus' and liitos = '$liitos'";
    $liiteres = pupe_query($query);

    if (mysql_num_rows($liiteres) > 0) {
      $liiterow = mysql_fetch_assoc($liiteres);

      if ($palautus != "") {
        return $liiterow;
      }
      return $liiterow["data"];
    }

    return false;
  }
}

if (!function_exists('tilauksen_liitetiedostot')) {
  function tilauksen_liitetiedostot($liitostunnukset, $kayttotarkoitus = null) {
    global $kukarow, $yhtiorow;

    $tunnukset = array();

    if (empty($liitostunnukset)) {
      return $tunnukset;
    }

    $kayttotarkoitus_lisa = isset($kayttotarkoitus) ? " and kayttotarkoitus = '{$kayttotarkoitus}' " : '';

    $query = "SELECT tunnus
              FROM liitetiedostot
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND liitos = 'lasku'
              AND liitostunnus in ({$liitostunnukset})
              {$kayttotarkoitus_lisa}";
    $result = pupe_query($query);

    while ($row = mysql_fetch_assoc($result)) {
      $tunnukset[] = $row['tunnus'];
    }

    return $tunnukset;
  }
}

if (!function_exists("tarvitaanko_intrastat")) {
  function tarvitaanko_intrastat($maa_lahetys, $maa_maara) {
    global $yhtiorow;

    // otetaan sis‰‰n l‰hetysmaan ja m‰‰r‰maan maakoodi
    // palautetaan:
    // tyhj‰‰ = ei tarvita intrastatata
    // -1 = kuuluu vienti-ilmoitukseen
    // -2 = kuuluu tuonti-ilmoitukseen

    $maa_lahetys   = strtoupper(trim($maa_lahetys));
    $maa_maara     = strtoupper(trim($maa_maara));
    $yhtiorow_maa   = strtoupper($yhtiorow["maa"]);
    $ultilno     = "";

    // kokeillaan arpoa intrastat k‰sittely‰, molemmat maat pit‰‰ olla EU maita
    if ($maa_lahetys != "" and $maa_maara != "") {
      $query = "SELECT DISTINCT koodi FROM maat WHERE koodi in ('$maa_lahetys','$maa_maara') AND eu = 'ON'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 2) {
        if ($maa_lahetys == $yhtiorow_maa and $maa_maara != $yhtiorow_maa) {
          $ultilno = "-1"; // miinus yks tarkoittaa, ett‰ lis‰tiedot pit‰‰ syˆtt‰‰ ja VIENTI-intrastat pit‰‰ l‰hett‰‰
        }
        elseif ($maa_maara == $yhtiorow_maa and $maa_lahetys != $yhtiorow_maa) {
          $ultilno = "-2"; // miinus kaks tarkoittaa, ett‰ lis‰tiedot pit‰‰ syˆtt‰‰ ja TUONTI-intrastat pit‰‰ l‰hett‰‰
        }
      }
    }

    return $ultilno;
  }
}

if (!function_exists("palauta_intrastat_tiedot")) {
  function palauta_intrastat_tiedot($laskurow, $varasto, $teeupdate = FALSE) {
    global $yhtiorow, $kukarow;

    if ($varasto > 0) {
      $query = "SELECT * from varastopaikat where yhtio = '$kukarow[yhtio]' and tunnus = '$varasto'";
      $varaston_res = pupe_query($query);
      $varaston_row = mysql_fetch_assoc($varaston_res);
    }

    if (!isset($varaston_row["maa"]) or $varaston_row["maa"] == "") {
      $varaston_row = array();
      $varaston_row["maa"] = $yhtiorow["maa"];
    }

    $laskurow["ultilno"] = tarvitaanko_intrastat($varaston_row["maa"], $laskurow["toim_maa"]);

    $laskurow["maa_maara"]   = $laskurow["toim_maa"];
    $laskurow["maa_lahetys"] = $varaston_row["maa"];

    if ($laskurow["ultilno"] == '-1') {
      // vienti-ilmoitus
      // katotaan onko jotain oletuksia asiakkaan takaa
      $query  = "SELECT *
                 from asiakas
                 where yhtio = '$kukarow[yhtio]'
                 and tunnus  = '$laskurow[liitostunnus]'";
      $toiresult = pupe_query($query);
      $aputoimirow = mysql_fetch_assoc($toiresult);

      $laskurow["aktiivinen_kuljetus"]         = $laskurow["aktiivinen_kuljetus"] != "" ? $laskurow["aktiivinen_kuljetus"] : $aputoimirow["aktiivinen_kuljetus"];
      $laskurow["aktiivinen_kuljetus_kansallisuus"]  = $laskurow["aktiivinen_kuljetus_kansallisuus"] != "" ? $laskurow["aktiivinen_kuljetus_kansallisuus"] : $aputoimirow["aktiivinen_kuljetus_kansallisuus"];
      $laskurow["bruttopaino"]             = $laskurow["bruttopaino"] != 0 ? $laskurow["bruttopaino"] : $aputoimirow["bruttopaino"];
      $laskurow["kauppatapahtuman_luonne"]       = $laskurow["kauppatapahtuman_luonne"] != 0 ? $laskurow["kauppatapahtuman_luonne"] : $aputoimirow["kauppatapahtuman_luonne"];
      $laskurow["kontti"]                = $laskurow["kontti"] != 0 ? $laskurow["kontti"] : $aputoimirow["kontti"];
      $laskurow["kuljetusmuoto"]            = $laskurow["kuljetusmuoto"] != 0 ? $laskurow["kuljetusmuoto"] : $aputoimirow["kuljetusmuoto"];
      $laskurow["lisattava_era"]             = $laskurow["lisattava_era"] != 0 ? $laskurow["lisattava_era"] : $aputoimirow["lisattava_era"];
      $laskurow["poistumistoimipaikka"]         = $laskurow["poistumistoimipaikka"] != "" ? $laskurow["poistumistoimipaikka"] : $aputoimirow["poistumistoimipaikka"];
      $laskurow["poistumistoimipaikka_koodi"]     = $laskurow["poistumistoimipaikka_koodi"] != "" ? $laskurow["poistumistoimipaikka_koodi"] : $aputoimirow["poistumistoimipaikka_koodi"];
      $laskurow["sisamaan_kuljetus"]          = $laskurow["sisamaan_kuljetus"] != "" ? $laskurow["sisamaan_kuljetus"] : $aputoimirow["sisamaan_kuljetus"];
      $laskurow["sisamaan_kuljetusmuoto"]        = $laskurow["sisamaan_kuljetusmuoto"] != 0 ? $laskurow["sisamaan_kuljetusmuoto"] : $aputoimirow["sisamaan_kuljetusmuoto"];
      $laskurow["sisamaan_kuljetus_kansallisuus"]    = $laskurow["sisamaan_kuljetus_kansallisuus"] != "" ? $laskurow["sisamaan_kuljetus_kansallisuus"] : $aputoimirow["sisamaan_kuljetus_kansallisuus"];
      $laskurow["vahennettava_era"]           = $laskurow["vahennettava_era"] != 0 ? $laskurow["vahennettava_era"] : $aputoimirow["vahennettava_era"];
    }
    elseif ($laskurow["ultilno"] == '-2') {
      // tuonti-ilmoitus
      // katotaan onko jotain oletuksia toimitustavan takana
      $query  = "SELECT *
                 from toimitustapa
                 where yhtio = '$kukarow[yhtio]'
                 and selite  = '$laskurow[toimitustapa]'";
      $toiresult = pupe_query($query);
      $aputoimirow = mysql_fetch_assoc($toiresult);

      $laskurow["aktiivinen_kuljetus"]         = $laskurow["aktiivinen_kuljetus"] != "" ? $laskurow["aktiivinen_kuljetus"] : $aputoimirow["aktiivinen_kuljetus"];
      $laskurow["aktiivinen_kuljetus_kansallisuus"]  = $laskurow["aktiivinen_kuljetus_kansallisuus"] != "" ? $laskurow["aktiivinen_kuljetus_kansallisuus"] : $aputoimirow["aktiivinen_kuljetus_kansallisuus"];
      $laskurow["bruttopaino"]             = $laskurow["bruttopaino"] != 0 ? $laskurow["bruttopaino"] : $aputoimirow["bruttopaino"];
      $laskurow["kauppatapahtuman_luonne"]       = $laskurow["kauppatapahtuman_luonne"] != 0 ? $laskurow["kauppatapahtuman_luonne"] : $aputoimirow["kauppatapahtuman_luonne"];
      $laskurow["kontti"]                = $laskurow["kontti"] != 0 ? $laskurow["kontti"] : $aputoimirow["kontti"];
      $laskurow["kuljetusmuoto"]            = $laskurow["kuljetusmuoto"] != 0 ? $laskurow["kuljetusmuoto"] : $aputoimirow["kuljetusmuoto"];
      $laskurow["lisattava_era"]             = $laskurow["lisattava_era"] != 0 ? $laskurow["lisattava_era"] : $aputoimirow["lisattava_era"];
      $laskurow["poistumistoimipaikka"]         = $laskurow["poistumistoimipaikka"] != "" ? $laskurow["poistumistoimipaikka"] : $aputoimirow["poistumistoimipaikka"];
      $laskurow["poistumistoimipaikka_koodi"]     = $laskurow["poistumistoimipaikka_koodi"] != "" ? $laskurow["poistumistoimipaikka_koodi"] : $aputoimirow["poistumistoimipaikka_koodi"];
      $laskurow["sisamaan_kuljetus"]          = $laskurow["sisamaan_kuljetus"] != "" ? $laskurow["sisamaan_kuljetus"] : $aputoimirow["sisamaan_kuljetus"];
      $laskurow["sisamaan_kuljetusmuoto"]        = $laskurow["sisamaan_kuljetusmuoto"] != 0 ? $laskurow["sisamaan_kuljetusmuoto"] : $aputoimirow["sisamaan_kuljetusmuoto"];
      $laskurow["sisamaan_kuljetus_kansallisuus"]    = $laskurow["sisamaan_kuljetus_kansallisuus"] != "" ? $laskurow["sisamaan_kuljetus_kansallisuus"] : $aputoimirow["sisamaan_kuljetus_kansallisuus"];
      $laskurow["vahennettava_era"]           = $laskurow["vahennettava_era"] != 0 ? $laskurow["vahennettava_era"] : $aputoimirow["vahennettava_era"];
    }
    elseif ($varaston_row["maa"] == $laskurow["toim_maa"] and $laskurow["toim_maa"] != "") {
      // intrastattia ei l‰hetet‰ tulliin kun varasto ja toimitusosoite on samassa maassa
      $laskurow["kauppatapahtuman_luonne"] = '999';
    }

    if ($teeupdate) {
      $query = "UPDATE lasku set
                ultilno                          = '$laskurow[ultilno]',
                aktiivinen_kuljetus              = '$laskurow[aktiivinen_kuljetus]',
                aktiivinen_kuljetus_kansallisuus = '$laskurow[aktiivinen_kuljetus_kansallisuus]',
                bruttopaino                      = '$laskurow[bruttopaino]',
                kauppatapahtuman_luonne          = '$laskurow[kauppatapahtuman_luonne]',
                kontti                           = '$laskurow[kontti]',
                kuljetusmuoto                    = '$laskurow[kuljetusmuoto]',
                lisattava_era                    = '$laskurow[lisattava_era]',
                maa_lahetys                      = '$laskurow[maa_lahetys]',
                maa_maara                        = '$laskurow[maa_maara]',
                poistumistoimipaikka             = '$laskurow[poistumistoimipaikka]',
                poistumistoimipaikka_koodi       = '$laskurow[poistumistoimipaikka_koodi]',
                sisamaan_kuljetus                = '$laskurow[sisamaan_kuljetus]',
                sisamaan_kuljetusmuoto           = '$laskurow[sisamaan_kuljetusmuoto]',
                sisamaan_kuljetus_kansallisuus   = '$laskurow[sisamaan_kuljetus_kansallisuus]',
                vahennettava_era                 = '$laskurow[vahennettava_era]'
                where yhtio                      = '$kukarow[yhtio]'
                and tunnus                       = '$laskurow[tunnus]'";
      $varresult = pupe_query($query);
    }

    return $laskurow;
  }
}

if (!function_exists("livesearch_asiakkaantilausnumero")) {
  function livesearch_asiakkaantilausnumero($toim, $hakukentta = "asiakkaan_tilausnumero") {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (substr($toim, 0, 8) == "KONSERNI") {
      $logistiikka_yhtio = '';
      $logistiikka_yhtiolisa = '';
      $lasku_yhtio_originaali = $kukarow['yhtio'];
      $konserni = "KONSERNIVARASTO";

      if ($yhtiorow['konsernivarasto'] != '' and $konsernivarasto_yhtiot != '') {
        $logistiikka_yhtio = $konsernivarasto_yhtiot;
        $logistiikka_yhtiolisa = "yhtio in ($logistiikka_yhtio)";

        if ($lasku_yhtio != '') {
          $kukarow['yhtio'] = mysql_real_escape_string($lasku_yhtio);
          $yhtiorow = hae_yhtion_parametrit($lasku_yhtio);
        }
      }
      else {
        $logistiikka_yhtiolisa = "yhtio = '$kukarow[yhtio]'";
      }

      $cleantoim = substr($toim, 8);
    }
    else {
      $logistiikka_yhtio = '';
      $logistiikka_yhtiolisa = "yhtio = '$kukarow[yhtio]'";
      $lasku_yhtio_originaali = $kukarow['yhtio'];

      $cleantoim = $toim;
    }

    if (strlen($haku) >= 2) {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        $haku_query .= "and {$hakukentta} like ('%$haku%') ";
      }

      if ($hakukentta != "asiakkaan_tilausnumero") {
        $_index = "";
      }
      else {
        $_index = "use index (yhtio_asiakkaan_tilausnumero)";
      }

      $query = "SELECT tunnus, {$hakukentta}, nimi, luontiaika, tunnus
                FROM lasku $_index
                WHERE tila in ('L','U','N','R','E','D')
                and DATEDIFF(luontiaika,NOW()) <= 365
                $haku_query
                and $logistiikka_yhtiolisa";
      $result = pupe_query($query);

      $limit = 0;

      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='asiakastilausnumero_valinta_$hakuid$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'asiakastilausnumero_valinta_$hakuid' && aEls[iEl].id != 'asiakastilausnumero_valinta_$hakuid$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";

          if ($submit == "") {
            echo "document.$formi.submit();";
            echo "console.log(document.$formi);";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
            echo "console.log(document.$formi);";
          }
          $laadittu = tv1dateconv($row["luontiaika"]);
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[$hakukentta]</font> &raquo; $row[nimi] - $laadittu
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>".t("Haulla lˆytyi")." ".mysql_num_rows($result). " ", t("tilausta"), " ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tilauksia.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
        document.getElementById('livesearch_$hakuid').style.innerHTML = '';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_tilihaku")) {
  function livesearch_tilihaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $vero_field = $_REQUEST["livesearch_vero_field"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2) {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        $haku_query .= " and (tili.tilino like ('%$haku%') or tili.nimi like ('%$haku%')) ";
      }

      $query = "SELECT tili.tilino, tili.nimi, tili.tunnus
                FROM tili
                WHERE tili.yhtio = '$kukarow[yhtio]'
                $haku_query";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='tili_valinta_$hakuid$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'tili_valinta_$hakuid' && aEls[iEl].id != 'tili_valinta_$hakuid$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tilino]';";

          if ($vero_field) {
            echo "hae_oletusalv('$hakuid', '$vero_field'); ";
          }

          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[tilino]</font> &raquo; $row[nimi]
                </span>
              </div><div name='selectValues$hakuid' id='$row[tilino]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>".t("Haulla lˆytyi")." ".mysql_num_rows($result). " ", t("tili‰"), " ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tilej‰.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
        document.getElementById('livesearch_$hakuid').style.innerHTML = '';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_tuotehaku")) {
  function livesearch_tuotehaku() {
    global $yhtiorow, $kukarow, $palvelin2, $verkkokauppa, $laskurow;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (!PUPE_UNICODE and mb_detect_encoding($haku, mb_detect_order(), TRUE) == "UTF-8") {
      $haku = iconv("UTF-8", "latin1//TRANSLIT", $haku);
    }

    if (strlen($haku) >= $yhtiorow['livetuotehaku_minimi'] and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_{$hakuid}').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $tuoteno_haku_query = "";
      $nimitys_haku_query = "";
      $muuta_haku_query = "";
      $ean_haku_query = "";
      $lyhytkuvaus_haku_query = "";
      $tuoteindex = "";
      $nimitindex = "";

      if ($kukarow["extranet"] != ""){
        $yhtiorow['livetuotehaku_hakutapa'] = $yhtiorow['livetuotehaku_hakutapa_extranet'];
      }

      if (in_array($yhtiorow['livetuotehaku_hakutapa'], array('F', 'G'))) {
        $tuoteindex = "USE INDEX (tuoteno)";
        $nimitindex = "USE INDEX (nimitys)";
      }

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);

        if (in_array($yhtiorow['livetuotehaku_hakutapa'], array('H', 'I'))) {
          $tuoteno_haku_query .= " and tuote.tuoteno like ('%{$haku}%') ";
          $nimitys_haku_query .= " and tuote.nimitys like ('%{$haku}%') ";
          $muuta_haku_query .= " and tuote.muuta like ('%{$haku}%') ";
        }
        elseif (in_array($yhtiorow['livetuotehaku_hakutapa'], array('J', 'K'))) {
          $tuoteno_haku_query .= " and tuote.tuoteno like ('%{$haku}%') ";
          $nimitys_haku_query .= " and tuote.nimitys like ('%{$haku}%') ";
          $ean_haku_query .= " and tuote.eankoodi like ('%{$haku}%') ";
        }
        elseif (in_array($yhtiorow['livetuotehaku_hakutapa'], array('L', 'M'))) {
          $tuoteno_haku_query .= " and tuote.tuoteno like ('%{$haku}%') ";
          $nimitys_haku_query .= " and tuote.nimitys like ('%{$haku}%') ";
          $ean_haku_query .= " and tuote.eankoodi like ('%{$haku}%') ";
          $muuta_haku_query .= " and tuote.muuta like ('%{$haku}%') ";
        }
        elseif (in_array($yhtiorow['livetuotehaku_hakutapa'], array('F', 'G'))) {
          $tuoteno_haku_query .= " and match (tuote.tuoteno) against ('{$haku}*' IN BOOLEAN MODE) ";
          $nimitys_haku_query .= " and match (tuote.nimitys) against ('{$haku}*' IN BOOLEAN MODE) ";
        }
        elseif (in_array($yhtiorow['livetuotehaku_hakutapa'], array('O', 'P'))) {
          $tuoteno_haku_query .= " and tuote.tuoteno like ('%{$haku}%') ";
          $nimitys_haku_query .= " and tuote.nimitys like ('%{$haku}%') ";
          $ean_haku_query .= " and tuote.eankoodi like ('%{$haku}%') ";
          $lyhytkuvaus_haku_query .= " and tuote.lyhytkuvaus like ('%{$haku}%') ";
        }
        else {
          $tuoteno_haku_query .= " and tuote.tuoteno like ('%{$haku}%') ";
          $nimitys_haku_query .= " and tuote.nimitys like ('%{$haku}%') ";
        }
      }

      // vientikieltok‰sittely:
      // +maa tarkoittaa ett‰ myynti on kielletty t‰h‰n maahan ja sallittu kaikkiin muihin
      // -maa tarkoittaa ett‰ ainoastaan t‰h‰n maahan saa myyd‰
      // eli n‰ytet‰‰n vaan tuotteet jossa vienti kent‰ss‰ on tyhj‰‰ tai -maa.. ja se ei saa olla +maa
      $kieltolisa = "";
      unset($vierow);

      if ($kukarow["kesken"] > 0) {
        $query  = "SELECT if (toim_maa != '', toim_maa, maa) maa
                   FROM lasku
                   WHERE yhtio = '{$kukarow['yhtio']}'
                   and tunnus  = '{$kukarow['kesken']}'";
        $vieres = pupe_query($query);
        $vierow = mysql_fetch_array($vieres);
      }
      elseif ($verkkokauppa != "") {
        $vierow = array();

        if ($maa != "") {
          $vierow["maa"] = $maa;
        }
        else {
          $vierow["maa"] = $yhtiorow["maa"];
        }
      }

      if (isset($vierow) and $vierow["maa"] != "") {
        $kieltolisa .= " and (tuote.vienti = '' or tuote.vienti like '%-{$vierow['maa']}%' or tuote.vienti like '%+%') and tuote.vienti not like '%+{$vierow['maa']}%' ";
      }

      if ($kukarow["extranet"] != "" or $verkkokauppa != "") {
        if ($verkkokauppa != "") {
          if ($kukarow["kuka"] == "www") {
            $kieltolisa .= " and tuote.hinnastoon = 'W' ";
          }
          else {
            $kieltolisa .= " and tuote.hinnastoon in ('W','V') ";
          }
        }
        else {
          $kieltolisa .= " and tuote.hinnastoon != 'E' ";
        }
      }

      // N‰ytet‰‰n poistuvat tuotteet mutta ei poistettuja
      if ($yhtiorow['livetuotehaku_poistetut'] == 'X' or $yhtiorow['livetuotehaku_poistetut'] == 'Y') {
        $naytetaanko_poistetut = "and (tuote.status != 'P' or (tuote.status = 'P' and (SELECT sum(saldo) FROM tuotepaikat WHERE tuotepaikat.yhtio=tuote.yhtio and tuotepaikat.tuoteno=tuote.tuoteno and tuotepaikat.saldo > 0) > 0))";
      }
      elseif ($yhtiorow['livetuotehaku_poistetut'] == 'P') {
        $naytetaanko_poistetut = '';
      }
      else {
        $naytetaanko_poistetut = "and tuote.status != 'P'";
      }

      $query_select = "tuote.tunnus,
        tuote.tuoteno,
        tuote.nimitys,
        tuote.kuvaus,
        tuote.osasto,
        tuote.try,
        tuote.epakurantti25pvm,
        tuote.epakurantti50pvm,
        tuote.epakurantti75pvm,
        tuote.epakurantti100pvm,
        tuote.lyhytkuvaus,
        if(tuote.tuoteno  = '{$haku}', 1,
        if(tuote.nimitys  = '{$haku}', 2,
        if(tuote.muuta    = '{$haku}', 3,
        if(tuote.eankoodi = '{$haku}', 4,
        if(left(tuote.tuoteno,  length('{$haku}')) = '{$haku}', 5,
        if(left(tuote.nimitys,  length('{$haku}')) = '{$haku}', 6,
        if(left(tuote.muuta,    length('{$haku}')) = '{$haku}', 7,
        if(left(tuote.eankoodi, length('{$haku}')) = '{$haku}', 8,
        9)))))))) as jarjestys";

      $query = "(SELECT {$query_select}
                 FROM tuote {$tuoteindex}
                 WHERE tuote.yhtio = '{$kukarow['yhtio']}'
                 {$naytetaanko_poistetut}
                 {$kieltolisa}
                 {$tuoteno_haku_query})
                 UNION
                 (SELECT {$query_select}
                 FROM tuote {$nimitindex}
                 WHERE tuote.yhtio = '{$kukarow['yhtio']}'
                 {$naytetaanko_poistetut}
                 {$kieltolisa}
                 {$nimitys_haku_query})";

      if (!empty($muuta_haku_query)) {
        $query .= "UNION
                  (SELECT {$query_select}
                  FROM tuote
                  WHERE tuote.yhtio = '{$kukarow['yhtio']}'
                  {$naytetaanko_poistetut}
                  {$kieltolisa}
                  {$muuta_haku_query})";
      }

      if (!empty($ean_haku_query)) {
        $query .= "UNION
                  (SELECT {$query_select}
                  FROM tuote
                  WHERE tuote.yhtio = '{$kukarow['yhtio']}'
                  {$naytetaanko_poistetut}
                  {$kieltolisa}
                  {$ean_haku_query})";
      }

      if (!empty($lyhytkuvaus_haku_query)) {
        $query .= "UNION
                  (SELECT {$query_select}
                  FROM tuote
                  WHERE tuote.yhtio = '{$kukarow['yhtio']}'
                  {$naytetaanko_poistetut}
                  {$kieltolisa}
                  {$lyhytkuvaus_haku_query})";
      }

      $query .= " ORDER BY jarjestys, tuoteno
                 LIMIT 500";
      $result = pupe_query($query);

      $tuote_search_count = mysql_num_rows($result);

      if ($tuote_search_count > 0) {

        $varastot_mista_saa_myyda = array();

        // Katsotaan mist‰ normaalivarastoista k‰ytt‰j‰ saa myyd‰
        if (in_array($yhtiorow['livetuotehaku_hakutapa'], array('E', 'G', 'I', 'K', 'M', 'N', 'P'))) {

          if (!empty($laskurow['varasto'])) {
            $laskun_varasto = (int) $laskurow['varasto'];
            $varastolisa = " AND tunnus = {$laskun_varasto}";
          }
          else {
            $varastolisa = " AND tyyppi  = '' ";
            $varastolisa .= $kukarow['varasto'] != '' ? " AND tunnus IN ({$kukarow['varasto']}) " : "";
          }

          $query = "SELECT GROUP_CONCAT(DISTINCT tunnus) AS varastotunnukset
                    FROM varastopaikat
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    {$varastolisa}";
          $varasto_chk_res = pupe_query($query);
          $varasto_chk_row = mysql_fetch_assoc($varasto_chk_res);

          if ($varasto_chk_row['varastotunnukset'] != '') {
            $varastot_mista_saa_myyda = explode(",", $varasto_chk_row['varastotunnukset']);
          }
        }

        while ($row = mysql_fetch_assoc($result)) {

          if (empty($kukarow["extranet"]) and $yhtiorow['livetuotehaku_poistetut'] == 'Y' and ($row["epakurantti25pvm"] != 0000-00-00 or $row["epakurantti50pvm"] != 0000-00-00 or $row["epakurantti75pvm"] != 0000-00-00 or $row["epakurantti100pvm"] != 0000-00-00) ) {
            $tyyli = "font-weight:bold;color:red;";
            $tyyli2 = "font-weight:normal;color:red;";
          }
          else {
            $tyyli = "font-weight:bold'";
            $tyyli2 = "font-weight:normal'";
          }

          echo "  <div id='tuote_valinta_{$row['tunnus']}'
                name='selectOptions{$hakuid}'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions{$hakuid}');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'tuote_valinta_' && aEls[iEl].id != 'tuote_valinta_{$row['tunnus']}') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('{$hakuid}').value='{$row['tuoteno']}';";
          if ($submit == "") {
            echo "document.{$formi}.submit();";
          }
          else {
            echo "document.getElementById('livesearch_{$hakuid}').style.visibility = 'hidden';";
          }
          echo "\"style='padding:2px;'>
              <span class='livesearch_rivispan_{$hakuid}'>
              <font style='{$tyyli}'>{$row['tuoteno']}</font> &raquo; <font style='{$tyyli2}'>{$row['nimitys']}</font>";

          if (in_array($yhtiorow['livetuotehaku_hakutapa'], array('E', 'G', 'I', 'K', 'M', 'N', 'P')) and count($varastot_mista_saa_myyda) > 0) {

            $saldo_yht = 0;

            foreach ($varastot_mista_saa_myyda as $varaston_tunnus) {
              list(, , $saldo) = saldo_myytavissa($row["tuoteno"], "KAIKKI", $varaston_tunnus);
              $saldo_yht += $saldo;
            }

            if ($yhtiorow['livetuotehaku_hakutapa'] == 'N') {
              if ($saldo_yht > '0') {
                echo " &raquo; <font style='{$tyyli2}'>", t("Varastossa"), "";
              }
              else {
                echo " &raquo; <font style='{$tyyli2}'>", t("Loppu"), "";
              }
            }
            else {
              echo " &raquo; <font style='{$tyyli2}'>", t("Saldo"), " {$saldo_yht}</font>";
            }
          }

          if ($lyhytkuvaus_haku_query) {

            if (strlen($row['lyhytkuvaus']) > 35) {
              $row['lyhytkuvaus'] = substr($row['lyhytkuvaus'],0, 35)."..";
            }

            echo "<br><i><font style='{$tyyli2}'>{$row['lyhytkuvaus']}</font></i>";
          }

          echo "</span></div>";
          echo "<div name='selectValues{$hakuid}' id='{$row['tuoteno']}'></div>";

        }

        $tuote_search_info = t("Haulla lˆytyi")." {$tuote_search_count} ".t("tuotetta");

        if ($tuote_search_count > 500) {
          $tuote_search_info .= ", ".t("n‰ytet‰‰n")." 500 ".t("tarkinta osumaa");
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>{$tuote_search_info}.</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tuotteita.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_{$hakuid}').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists('livesearch_tuotekategoriahaku')) {
  function livesearch_tuotekategoriahaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $query = "SELECT dynaaminen_puu.tunnus,
                dynaaminen_puu.nimi
                FROM dynaaminen_puu
                WHERE dynaaminen_puu.yhtio = '{$kukarow['yhtio']}'
                AND dynaaminen_puu.nimi    LIKE ('%{$haku}%')
                AND dynaaminen_puu.laji    = 'TUOTE'
                ORDER BY dynaaminen_puu.lft ASC, dynaaminen_puu.koodi ASC, dynaaminen_puu.nimi ASC";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          $query = "SELECT group_concat(parent.nimi SEPARATOR ' &raquo; ') polku
                    FROM   dynaaminen_puu
                    JOIN dynaaminen_puu AS parent
                      ON ( parent.yhtio = dynaaminen_puu.yhtio
                      AND parent.laji            = dynaaminen_puu.laji
                      AND parent.lft             <= dynaaminen_puu.lft
                      AND parent.rgt             >= dynaaminen_puu.lft
                      AND parent.lft             > 0
                      AND parent.syvyys         != 0)
                    WHERE  dynaaminen_puu.yhtio  = '{$kukarow['yhtio']}'
                    AND dynaaminen_puu.laji      = 'TUOTE'
                    AND dynaaminen_puu.tunnus    = '{$row['tunnus']}'";
          $polku_result = pupe_query($query);
          $polku = mysql_fetch_assoc($polku_result);
          echo "  <div id='tuotekategoria_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$polku['polku']} &raquo; {$row['nimi']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("tuotekategoriaa"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tuotekategorioita").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists('livesearch_tuoteryhmahaku')) {
  function livesearch_tuoteryhmahaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      if (empty($kukarow['kieli'])) {
        $kieli = $yhtiorow['kieli'];
      }
      else {
        $kieli = $kukarow['kieli'];
      }

      $query = "SELECT selite,
                selitetark
                FROM avainsana
                WHERE yhtio    = '{$kukarow['yhtio']}'
                AND laji       = 'TRY'
                AND kieli      = '{$kieli}'
                AND selitetark LIKE '%{$haku}%'";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='tuoteryhma_valinta_$row[selite]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'tuoteryhma_valinta_' && aEls[iEl].id != 'tuoteryhma_valinta_$row[selite]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[selite]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$row['selite']} - {$row['selitetark']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[selite]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("tuoteryhm‰‰"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tuoteryhmi‰").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists('livesearch_tuotemerkkihaku')) {
  function livesearch_tuotemerkkihaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      if (empty($kukarow['kieli'])) {
        $kieli = $yhtiorow['kieli'];
      }
      else {
        $kieli = $kukarow['kieli'];
      }

      $query = "SELECT selite,
                selitetark
                FROM avainsana
                WHERE yhtio    = '{$kukarow['yhtio']}'
                AND laji       = 'TUOTEMERKKI'
                AND kieli      = '{$kieli}'
                AND selitetark LIKE '%{$haku}%'";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='tuotemerkki_valinta_$row[selite]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'tuotemerkki_valinta_' && aEls[iEl].id != 'tuotemerkki_valinta_$row[selite]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[selite]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$row['selite']} - {$row['selitetark']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[selite]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("tuotemerkki‰"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tuotemerkki‰").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_kayttajahaku")) {
  function livesearch_kayttajahaku($toim = '') {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";
      $haku_join = '';

      if ($toim == 'extranet') {
        $haku_query .= " and kuka.extranet != '' ";
      }
      else {
        $haku_query .= " and kuka.extranet = '' ";
      }

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        if ($toim == 'extranet') {
          $haku_query .= " and (asiakas.asiakasnro like ('%$haku%') or asiakas.ytunnus like ('%$haku%') or kuka.nimi like ('%$haku%') or kuka.kuka like ('%$haku%')) ";
        }
        else {
          $haku_query .= " and (kuka.nimi like ('%$haku%') or kuka.kuka like ('%$haku%')) ";
        }
      }

      if ($toim == 'extranet') {
        $haku_join = " LEFT JOIN asiakas ON (asiakas.yhtio = kuka.yhtio AND asiakas.tunnus = kuka.oletus_asiakas) ";
      }

      $query = "SELECT kuka.tunnus, kuka.nimi, kuka.kuka
                FROM kuka
                $haku_join
                WHERE kuka.yhtio = '$kukarow[yhtio]'
                $haku_query";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='kayttaja_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[nimi]</font> &raquo; ($row[kuka])
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("k‰ytt‰j‰‰"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei k‰ytt‰ji‰.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_asiakashaku")) {
  function livesearch_asiakashaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";
      $haku_join = '';

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        $haku_query .= " and (asiakas.ytunnus like ('%$haku%') or asiakas.asiakasnro like ('%$haku%') ";
        $haku_query .= " or asiakas.ovttunnus like ('%$haku%%') or asiakas.nimi like ('%$haku%') or asiakas.nimitark like ('%$haku%') or asiakas.postitp like ('%$haku%') ";
        $haku_query .= " or asiakas.toim_ovttunnus like ('%$haku%%') or asiakas.toim_nimi like ('%$haku%') or asiakas.toim_nimitark like ('%$haku%') or asiakas.toim_postitp like ('%$haku%') ";
        $haku_query .= " or asiakas.kolm_ovttunnus like ('%$haku%%') or asiakas.kolm_nimi like ('%$haku%') or asiakas.kolm_nimitark like ('%$haku%') or asiakas.kolm_postitp like ('%$haku%') ";
        $haku_query .= " or asiakas.laskutus_nimi like ('%$haku%') or asiakas.laskutus_nimitark like ('%$haku%') or asiakas.laskutus_postitp like ('%$haku%')) ";
      }

      $query = "SELECT *,
                if (toim_nimi != '' and concat(nimi, nimitark) != concat(toim_nimi, toim_nimitark), concat(nimi, ' ', nimitark, ' / ', toim_nimi, ' ', toim_nimitark), concat_ws(' ', nimi, nimitark)) asiakkaan_tieto,
                if (toim_nimi != '', toim_postitp, '') toim_postitp,
                if (asiakas.ytunnus = '$haku', 1, if(left(asiakas.ytunnus, length('$haku')) = '$haku', 2, 3)) jarjestys,
                if (asiakas.asiakasnro = '$haku', 1, if(left(asiakas.asiakasnro, length('$haku')) = '$haku', 2, 3)) jarjestys2,
                if (asiakas.nimi = '$haku', 1, if(left(asiakas.nimi, length('$haku')) = '$haku', 2, 3)) jarjestys3,
                if (asiakas.toim_nimi = '$haku', 1, if(left(asiakas.toim_nimi, length('$haku')) = '$haku', 2, 3)) jarjestys4,
                if (asiakas.laskutus_nimi = '$haku', 1, if(left(asiakas.laskutus_nimi, length('$haku')) = '$haku', 2, 3)) jarjestys5
                FROM asiakas
                WHERE asiakas.yhtio = '$kukarow[yhtio]' and asiakas.laji!='P'
                $haku_query
                ORDER BY jarjestys, jarjestys2, jarjestys3, jarjestys4, jarjestys5, ytunnus, asiakkaan_tieto";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='kayttaja_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[ytunnus] &raquo; $row[asiakkaan_tieto]";

          if (!empty($row['toim_postitp'])) {
            echo " ({$row['toim_postitp']})";
          }

          echo "</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("asiakasta"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei asiakkaita.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists('livesearch_asiakasytunnushaku')) {
  function livesearch_asiakasytunnushaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";
      $haku_join = '';

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        $haku_query .= " and (asiakas.ytunnus like ('%$haku%') or asiakas.asiakasnro like ('%$haku%') ";
        $haku_query .= " or asiakas.ovttunnus like ('%$haku%%') or asiakas.nimi like ('%$haku%') or asiakas.nimitark like ('%$haku%') or asiakas.postitp like ('%$haku%')) ";
        //        $haku_query .= " or asiakas.toim_ovttunnus like ('%$haku%%') or asiakas.toim_nimi like ('%$haku%') or asiakas.toim_nimitark like ('%$haku%') or asiakas.toim_postitp like ('%$haku%') ";
        //        $haku_query .= " or asiakas.kolm_ovttunnus like ('%$haku%%') or asiakas.kolm_nimi like ('%$haku%') or asiakas.kolm_nimitark like ('%$haku%') or asiakas.kolm_postitp like ('%$haku%') ";
        //        $haku_query .= " or asiakas.laskutus_nimi like ('%$haku%') or asiakas.laskutus_nimitark like ('%$haku%') or asiakas.laskutus_postitp like ('%$haku%')) ";
      }

      $query = "SELECT DISTINCT ytunnus,
                nimi
                FROM asiakas
                WHERE asiakas.yhtio = '$kukarow[yhtio]' and asiakas.laji!='P'
                $haku_query
                ORDER BY ytunnus, nimi";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='kayttaja_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[ytunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[ytunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[ytunnus] &raquo; $row[nimi]</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[ytunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("asiakasta"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei asiakkaita.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists('livesearch_asiakaskategoriahaku')) {
  function livesearch_asiakaskategoriahaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $query = "SELECT dynaaminen_puu.tunnus,
                dynaaminen_puu.nimi
                FROM dynaaminen_puu
                WHERE dynaaminen_puu.yhtio = '{$kukarow['yhtio']}'
                AND dynaaminen_puu.nimi    LIKE ('%{$haku}%')
                AND dynaaminen_puu.laji    = 'ASIAKAS'
                ORDER BY dynaaminen_puu.nimi ASC";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          $query = "SELECT group_concat(parent.nimi SEPARATOR ' &raquo; ') polku
                    FROM   dynaaminen_puu
                    JOIN dynaaminen_puu AS parent
                      ON ( parent.yhtio = dynaaminen_puu.yhtio
                      AND parent.laji            = dynaaminen_puu.laji
                      AND parent.lft             <= dynaaminen_puu.lft
                      AND parent.rgt             >= dynaaminen_puu.lft
                      AND parent.lft             > 0
                      AND parent.syvyys         != 0)
                    WHERE  dynaaminen_puu.yhtio  = '{$kukarow['yhtio']}'
                    AND dynaaminen_puu.laji      = 'ASIAKAS'
                    AND dynaaminen_puu.tunnus    = '{$row['tunnus']}'";
          $polku_result = pupe_query($query);
          $polku = mysql_fetch_assoc($polku_result);
          echo "  <div id='tuotekategoria_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$polku['polku']} &raquo; {$row['nimi']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("asiakaskategoriaa"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei asiakaskategorioita").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_varastohaku")) {
  function livesearch_varastohaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $haku_array = explode(" ", $haku);
      $haku_query = "";
      $haku_join = '';

      foreach ($haku_array as $haku) {
        $haku = mysql_real_escape_string($haku);
        $haku_query .= "and concat(hyllyalue, hyllynro, hyllyvali, hyllytaso) like '%$haku%'";
      }

      $query = "SELECT DISTINCT concat(hyllyalue,'-',hyllynro,'-',hyllyvali,'-',hyllytaso) hyllyt, min(tunnus) tunnus
                FROM tuotepaikat
                WHERE tuotepaikat.yhtio = '$kukarow[yhtio]'
                $haku_query
                GROUP BY hyllyt";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='varasto_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,16) == 'varasto_valinta_' && aEls[iEl].id != 'varasto_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onClick=\"document.getElementById('$hakuid').value='$row[hyllyt]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[hyllyt]</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[hyllyt]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("varastoa"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei varastoa.")."</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_toimittajahaku")) {
  function livesearch_toimittajahaku($toim = '') {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $query = "(SELECT *, concat_ws(', ', nimi, if(trim(nimitark)='', NULL, nimitark)) nimi
                 FROM toimi
                 WHERE toimi.yhtio   = '{$kukarow['yhtio']}'
                 AND toimi.nimi      LIKE '%{$haku}%'
                 and tyyppi         != 'P')
                 UNION
                 (SELECT *, concat_ws(', ', nimi, if(trim(nimitark)='', NULL, nimitark)) nimi
                 FROM toimi
                 WHERE toimi.yhtio   = '{$kukarow['yhtio']}'
                 AND toimi.nimitark  LIKE '%{$haku}%'
                 and tyyppi         != 'P')";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='toimittaja_valinta_$row[tunnus]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'toimittaja_valinta_' && aEls[iEl].id != 'toimittaja_valinta_$row[tunnus]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>$row[nimi]</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result). " ", t("toimittajaa"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei toimittajia").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_sarjanumerohaku")) {
  function livesearch_sarjanumerohaku($toim = '') {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $query = "SELECT DISTINCT sarjanumero
                FROM sarjanumeroseuranta
                WHERE yhtio     = '{$kukarow['yhtio']}'
                AND sarjanumero LIKE '%{$haku}%'
                GROUP BY sarjanumero";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='sarjanumero_valinta_$row[sarjanumero]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'sarjanumero_valinta_$row[sarjanumero]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[sarjanumero]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$row['sarjanumero']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[sarjanumero]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result)." ", t("sarjanumeroa"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei sarjanumeroita").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("hae_kayttajan_toimipistetunnukset")) {
  function hae_kayttajan_toimipistetunnukset() {
    global $kukarow;

    $asiakastunnukset = '';
    if (!empty($kukarow['oletus_asiakas'])) {
      $asiakastunnukset = $kukarow['oletus_asiakas'];
    }

    $query = "SELECT group_concat(asiakas.tunnus) toimipistetunnukset
              FROM customers_users
              JOIN asiakas ON (customers_users.customer_id = asiakas.tunnus)
              WHERE user_id = '{$kukarow['tunnus']}'";
    $result = pupe_query($query);
    $row = mysql_fetch_assoc($result);
    if (!empty($row['toimipistetunnukset'])) {
      $asiakastunnukset = empty($asiakastunnukset) ? $row['toimipistetunnukset'] : $asiakastunnukset.",".$row['toimipistetunnukset'];
    }
    return $asiakastunnukset;
  }
}

if (!function_exists("livesearch_laitehaku")) {
  function livesearch_laitehaku($toim = '') {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $toimipistetunnukset = hae_kayttajan_toimipistetunnukset();

      $toimipistelisa = '';
      if (!empty($toimipistetunnukset)) {
        $toimipistelisa = " AND laite.toimipiste IN ({$toimipistetunnukset}) ";
      }

      $query = "SELECT DISTINCT sarjanro
                FROM laite
                WHERE yhtio  = '{$kukarow['yhtio']}'
                {$toimipistelisa}
                AND sarjanro LIKE '%{$haku}%'";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='sarjanumero_valinta_$row[sarjanro]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'sarjanumero_valinta_$row[sarjanro]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[sarjanro]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$row['sarjanro']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[sarjanro]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result)." ", t("laitetta"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei laitteita").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_tullinimikehaku")) {
  function livesearch_tullinimikehaku() {
    global $yhtiorow, $kukarow, $palvelin2;

    pupeslave_start();

    $tee = $_REQUEST["livesearch_tee"];
    $nimi = $_REQUEST["livesearch_nimi"];
    $formi = $_REQUEST["livesearch_form"];
    $hakuid = $_REQUEST["livesearch_hakuid"];
    $submit = $_REQUEST["livesearch_submit"];
    $haku = trim($_REQUEST["livesearch_haku"]);

    if (strlen($haku) > 2 and substr($haku, 0, 1) != "*" and substr($haku, -1) != '*' and substr($haku, 0, 1) != "?" and substr($haku, 0, 1) != "#") {

      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
      </script>";

      $query = "SELECT cn, dm
                FROM tullinimike
                WHERE kieli  = '{$yhtiorow['kieli']}'
                AND cn      != ''";
      $result = pupe_query($query);

      $limit = 0;
      if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
          echo "  <div id='sarjanumero_valinta_$row[cn]'
                name='selectOptions$hakuid'
                onmouseover=\"this.className='liveSearchSelectedItem';
                  keyStrokeIndex = -1;
                  var aEls = document.getElementsByName('selectOptions$hakuid');
                  for (var iEl = 0; iEl < aEls.length; iEl++) {
                    if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'cn_valinta_$row[cn]') {
                      document.getElementById(aEls[iEl].id).className='';
                    }
                  } \"
                onmouseout=\"this.className='';\"
                onclick=\"document.getElementById('$hakuid').value='$row[cn]';";
          if ($submit == "") {
            echo "document.$formi.submit();";
          }
          else {
            echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
          }
          echo "\"
                style='padding:2px;'>
                <span class='livesearch_rivispan_{$hakuid}'>
                <font style='font-weight:bold'>{$row['cn']} {$row['dm']}</font>
                </span>
              </div><div name='selectValues$hakuid' id='$row[cn]'></div>";
          $limit++;

          if ($limit > 49) {
            break;
          }
        }

        echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t("Haulla lˆytyi"), " ".mysql_num_rows($result)." ", t("tullinimikett‰"), ", ".t("n‰ytet‰‰n")." 50 ".t("tarkinta osumaa").".</font></div>";
      }
      else {
        echo "<div style='padding:2px'><font class='message'>".t("Ei tullinimikkeit‰").".</font></div>";
      }

      livesearch_trimmaa_leveys($hakuid);
    }
    else {
      echo "
      <script TYPE='text/javascript' LANGUAGE='JavaScript'>
        document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
      </script>";
    }

    pupeslave_stop();
  }
}

if (!function_exists("livesearch_kentta")) {
  function livesearch_kentta($formi, $tee = 'TUOTEHAKU', $nimi = 'liveseach_hakukentta', $width = '300', $value = '', $submit = '', $vero_field = '', $class = '', $break_all_div = '') {
    global $kukarow, $toim;

    if (stripos($_SERVER['HTTP_USER_AGENT'], "MSIE") !== FALSE or stripos($_SERVER['HTTP_USER_AGENT'], "EXPLORER") !== FALSE) {
      return "<input type='text' id='$hakuID' name='$nimi' autocomplete='off' style='width:".$width."px;' value='$value'>";
    }

    if ($tee == 'TUOTEKATEGORIAHAKU' or $tee == 'ASIAKASKATEGORIAHAKU') {
      $result_width = $width * 3;
    }
    else {
      $result_width = $width * 2;
    }

    $hakuID = "haku".uniqid();

    $return = "<input type='text' id='$hakuID' class='$class' name='$nimi' autocomplete='off' style='width:".$width."px;' value='$value'
          onkeydown=\"return livesearch_keyhandler(event, '$hakuID', '$formi', '$submit', '$vero_field');\"
          onkeyup=\"if ((event.keyCode < 37 || event.keyCode > 40) && event.keyCode != 13) {
              var inputti_value = this.value;
              delay_ms(function() {
                sndReq('livesearch_$hakuID', '$_SERVER[SCRIPT_NAME]?livesearch_tee=$tee&livesearch_form=$formi&livesearch_hakuid=$hakuID&livesearch_nimi=$nimi&livesearch_submit=$submit&livesearch_vero_field=$vero_field&ohje=off&toim=$toim&livesearch_haku='+inputti_value);
              }, 500);
              keyStrokeIndex = -1;";
    if ($vero_field) {
      $return .= "hae_oletusalv('$hakuID', '$vero_field');";
    }
    $return .= "}\"
          onblur=\"setTimeout('livesearch_blurhandler(\'$hakuID\')', 100);\">";
    if (empty($break_all_div)) {
      $return .= "<div style='break:all'></div>";
    }
    $return .= "<div id='livesearch_$hakuID' class='liveSearch' name='livesearch_$hakuID' style='width:{$result_width}px; overflow: auto; max-height: 200px;' onmousedown=\"setTimeout('document.getElementById(\'$hakuID\').focus()',10);\"></div>";
    return $return;
  }
}

if (!function_exists("livesearch_trimmaa_leveys")) {
  function livesearch_trimmaa_leveys($hakuid) {

    echo "
    <script TYPE='text/javascript' LANGUAGE='JavaScript'>

      document.getElementById('livesearch_{$hakuid}').style.width = '1000px';

      var ikkunanleveys = $(window).width();
      var maxleveys = 0;
      var leveys = 0;

      $('.livesearch_rivispan_{$hakuid}').each(function(t) {
        leveys = $(this).width();

        if (leveys > maxleveys) {
          maxleveys = leveys;
        }
      });

      maxleveys = maxleveys + 25;

      //K‰ytet‰‰n korkeintaan puolet ikkunasta
      if (maxleveys > ikkunanleveys/2) {
        maxleveys = Math.round(ikkunanleveys/2);
      }
      if (maxleveys < 200) {
        maxleveys = 200;
      }

      document.getElementById('livesearch_{$hakuid}').style.width = maxleveys+'px';

    </script>";
  }
}

if (!function_exists("sendSMS")) {
  function sendSMS($smsnumero, $smsviesti, $animi = "") {
    global $sms_palvelin, $sms_user, $sms_pass;

    if ($sms_palvelin != "" and $sms_user != "" and $sms_pass != "" and $smsnumero != "" and $smsviesti != "") {
      $smsviesti = urlencode($smsviesti);

      $retval = file_get_contents("$sms_palvelin?user=$sms_user&pass=$sms_pass&numero=$smsnumero&viesti=$smsviesti");
      $smsviesti = urldecode($smsviesti);

      if (trim($retval) == "0") {
        if ($animi != "") {
          $animi = "($animi)";
        }
        echo "<font class='info'>SMS-viesti l‰hetetty numeroon $smsnumero $animi</font><br>";
      }
    }
  }
}

if (!function_exists("on_puhelinnumero")) {
  function on_puhelinnumero($numero) {

    //  Stripataan v‰h‰n turhia merkkej‰
    $checkno = preg_replace("/[\r\n\s\t\(\)\{\}\-]/", "", $numero);

    //  Jos meille j‰i vain numeroita se on varmaan aika oikein
    if (preg_replace("/[+0-9]/", "", $checkno) == "" and strlen($checkno)>0) {
      return $checkno;
    }
    else {
      return false;
    }
  }
}

if (!function_exists("hae_rahtisopimusnumero")) {
  function hae_rahtisopimusnumero($toimitustapa, $ytunnus = "", $asiakastunnus = "", $kaikki = false, $valittusoppari = "") {
    global $kukarow;

    // Pelk‰ll‰ toimitustavalla haettuna palautetaan firman oma sopimusnumero
    if ($ytunnus == "" and $asiakastunnus == "") {
      $query = "SELECT sopimusnro rahtisopimus
                FROM toimitustapa
                WHERE yhtio = '{$kukarow["yhtio"]}'
                AND selite  = '{$toimitustapa}'";
    }
    else {

      $query = "";

      if ($valittusoppari != "") {
        $query .= "( SELECT *, '1' prio
                FROM rahtisopimukset as rahtisopimukset3
                WHERE toimitustapa = '$toimitustapa'
                AND asiakas      = '$asiakastunnus'
                AND asiakas     != ''
                AND rahtisopimus   = '$valittusoppari'
                AND yhtio          = '{$kukarow["yhtio"]}')
                UNION
                (SELECT *, '2' prio
                FROM rahtisopimukset as rahtisopimukset4
                WHERE toimitustapa  = '$toimitustapa'
                AND ytunnus         = '$ytunnus'
                AND ytunnus        != ''
                AND rahtisopimus    = '$valittusoppari'
                AND yhtio           = '{$kukarow["yhtio"]}')
                UNION";
      }


      $query .= "( SELECT *, '3' prio
            FROM rahtisopimukset
            WHERE toimitustapa = '$toimitustapa'
            AND asiakas = '$asiakastunnus'
            AND asiakas != ''
            AND yhtio = '{$kukarow["yhtio"]}')
            UNION
            (SELECT *, '4' prio
            FROM rahtisopimukset as rahtisopimukset2
            WHERE toimitustapa = '$toimitustapa'
            AND ytunnus = '$ytunnus'
            AND ytunnus != ''
            AND yhtio = '{$kukarow["yhtio"]}')
            ORDER BY prio, tunnus desc";
    }
    $rares = pupe_query($query);

    if ($kaikki) return $rares;

    $rarow = mysql_fetch_assoc($rares);

    return $rarow;
  }
}

if (!function_exists("hae_rahtimaksu")) {
  // otetaan sis‰‰n halutut otsikot mysql muodossa (1,2,3,4)
  function hae_rahtimaksu($otsikot) {
    global $kukarow, $yhtiorow;

    $otsikot = mysql_real_escape_string(trim($otsikot));

    if ($otsikot == "" or $yhtiorow["rahti_hinnoittelu"] == 'K') {
      return array(0, 0, 0, 0);
    }

    // haetaan ensimm‰isen otsikon tiedot
    $query = "SELECT *
              FROM lasku
              WHERE yhtio = '$kukarow[yhtio]'
              AND tunnus  IN ($otsikot)
              ORDER BY tunnus
              LIMIT 1";
    $otsre = pupe_query($query);
    $laskurow = mysql_fetch_assoc($otsre);

    $kyht = 0;

    // jos JT-tilaukset annetaan aina rahtivapaasti
    if ($laskurow["clearing"] == "JT-TILAUS" and $yhtiorow["jt_rahti"] == "B") {
      return array(0, 0, 0, 0);
    }

    // jos laskulla on rahtivapaa t‰pp‰ niin annetaan ilmaseks (paitsi jos kyseess‰ on JT ja niille halutaan v‰kisin rahti optiot C tai D)
    if ($laskurow["rahtivapaa"] != "" and ($laskurow["clearing"] != "JT-TILAUS" or $yhtiorow["jt_rahti"] != "C") and ($laskurow["clearing"] != "JT-TILAUS" or $yhtiorow["jt_rahti"] != "D")) {
      return array(0, 0, 0, 0);
    }

    // Jos rahtituoteno tulee toimitustavan takaa, niin tehd‰‰n alennuslaskenta
    $rahtituoteno_toimitustavalta = FALSE;

    // yhtiˆn rahtikulutuotenumero, ilman t‰t‰ ei onnistu
    $query = "SELECT tuote.*
              FROM tuote
              WHERE yhtio  = '$kukarow[yhtio]'
              AND tuoteno  = '$yhtiorow[rahti_tuotenumero]'
              AND tuoteno != ''";
    $rahti_tuoteno_result = pupe_query($query);

    // Ei lˆydetty sopivaa tuotetta
    if (mysql_num_rows($rahti_tuoteno_result) == 0) {
      return array(0, 0, 0, 0);
    }
    else {
      $rahti_tuoteno_row = mysql_fetch_assoc($rahti_tuoteno_result);
    }

    $rahti_tuotenumero_lisa = "'','$yhtiorow[rahti_tuotenumero]'";
    $rahti_tuotenumero_lisa = lisaa_vaihtoehtoinen_rahti_merkkijonoon($rahti_tuotenumero_lisa);

    // katsotaan onko toimitustavan taakse syˆtetty rahtimaksutuoteno
    $query = "SELECT tuote.*
              FROM toimitustapa
              JOIN tuote ON (tuote.yhtio = toimitustapa.yhtio AND tuote.tuoteno = toimitustapa.rahti_tuotenumero)
              WHERE toimitustapa.yhtio           = '$kukarow[yhtio]'
              AND toimitustapa.selite            = '$laskurow[toimitustapa]'
              AND toimitustapa.rahti_tuotenumero not in ({$rahti_tuotenumero_lisa})";
    $rahti_tuoteno_result = pupe_query($query);

    if (mysql_num_rows($rahti_tuoteno_result) == 1) {
      $rahtituoteno_toimitustavalta = TRUE;
      $rahti_tuoteno_row = mysql_fetch_assoc($rahti_tuoteno_result);
    }

    // jos meill‰ on automaattinen tuoteella tallennettuihin painoihin perustuva hinnoittelu
    // rahtimaksujen hinnoitteluun otetaan vain tuotteet joita ei myyd‰ erikoisvarastoista (et‰varastot joista ei myyd‰ automaattisesti eli tyyppi = E). T‰llˆin on t‰p‰tty erikoistoimitus_myynti on 0 eli false.
    // erikoisvarastoista myydyt tuotteet ovat aina rahtivapaita ja l‰hett‰j‰ maksaa rahdin.
    if ($yhtiorow["rahti_hinnoittelu"] == 'P') {
      // Jos hyvitysrivi ja tuotteen paino on nolla niin laitetaan tuotteen painoksi yksi gramma, muuten hyv‰rillekin saattaa tulla rahtia jos kaikkien tuotteiden painot on nolla.
      $query  = "SELECT sum(if((varattu + kpl + jt) < 0 and tuotemassa = 0, 0.001, tuotemassa) * (varattu + kpl + jt)) massa
                 FROM tilausrivi
                 JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
                 JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.ei_saldoa = '')
                 WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
                 AND tilausrivi.tyyppi  in ('L', 'E', 'T')
                 AND tilausrivi.otunnus in ($otsikot)";
      $painoresult = pupe_query($query);
      $painorow = mysql_fetch_assoc($painoresult);
      $kyht = $painorow['massa'];
    }
    // meill‰ on tilauksen hintaan perustuva hinnoittelu
    elseif ($yhtiorow["rahti_hinnoittelu"] == "o") {

      $query_ale_lisa = generoi_alekentta('M');

      // alvittomat hinnat
      if ($yhtiorow["alv_kasittely"] == '') {
        $query = "SELECT round(((tilausrivi.varattu + tilausrivi.kpl + tilausrivi.jt) * tilausrivi.hinta * {$query_ale_lisa}) / (1 + tilausrivi.alv / 100), '$yhtiorow[hintapyoristys]') rivihinta, tilausrivi.netto
                  FROM tilausrivi
                  JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
                  WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
                  AND tilausrivi.tyyppi  in ('L', 'E')
                  AND tilausrivi.otunnus in ($otsikot)";
      }
      else {
        $query = "SELECT round(((tilausrivi.varattu + tilausrivi.kpl + tilausrivi.jt) * tilausrivi.hinta * {$query_ale_lisa}), '$yhtiorow[hintapyoristys]') rivihinta, tilausrivi.netto
                  FROM tilausrivi
                  JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
                  WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
                  AND tilausrivi.tyyppi  in ('L', 'E')
                  AND tilausrivi.otunnus in ($otsikot)";
      }
      $presult = pupe_query($query);

      $nyht = 0;
      $myht = 0;
      $kyht = 0;

      while ($prow = mysql_fetch_assoc($presult)) {
        if ($prow["netto"] != 'N') {
          $myht += $prow["rivihinta"]; // lasketaan tilauksen loppusummaa MUUT RIVIT..
        }
        else {
          $nyht += $prow["rivihinta"]; // lasketaan tilauksen loppusummaa NETTORIVIT..
        }
      }

      //erikoisalennus lasketaan vain riveille joilla EI ole NETTOHINTAA
      if ($laskurow['erikoisale'] != 0) {
        $apu1 = round($laskurow['erikoisale']/100, 2);  // erikoisale prosentti
        $apu2 = round($myht*$apu1, 2);           // erikoisalen m‰‰r‰
        $apu3 = round((1-$apu1)*$myht, 2);        // loppusumma

        //Kaikki yhteens‰
        $kyht = $apu3 + $nyht;
      }
      else {
        //Kaikki yhteens‰
        $kyht = $myht + $nyht;
      }

      // $kyht on KOTIVALUUTASSA, k‰‰nnet‰‰n laskun valuuttaan
      if ($laskurow["valkoodi"] != '' and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {
        $kyht = round(laskuval($kyht, $laskurow["vienti_kurssi"]), 2);
      }
    }
    // meill‰ on rahtikirjan syˆtˆss‰ syˆtettyihin painoihin perustuva hinnoittelu
    else {
      //summataan kaikki rahtikirjojen painot yhteen
      $query = "SELECT sum(kilot) kilot
                FROM rahtikirjat
                WHERE yhtio    = '$kukarow[yhtio]'
                AND otsikkonro in ($otsikot)";
      $pakre = pupe_query($query);
      $pakka = mysql_fetch_assoc($pakre);

      // Jos rahtikirjaa ei olla syˆtetty niin resturnataan nollaa
      if (is_null($pakka["kilot"])) {
        return array(0, 0, 0, 0);
      }
      else {
        $kyht = $pakka["kilot"];
      }
    }

    // haetaan ensimm‰inen (pienimm‰ll‰ postinumerolla) et‰isyys
    $query = "SELECT
              etaisyydet.km, etaisyydet.postino
              FROM etaisyydet
              JOIN varastopaikat ON (varastopaikat.yhtio = etaisyydet.yhtio AND varastopaikat.tunnus = '$laskurow[varasto]' AND varastopaikat.postino = etaisyydet.varasto_postino)
              WHERE etaisyydet.yhtio='$kukarow[yhtio]'
              AND etaisyydet.postino <= '$laskurow[toim_postino]'
              ORDER BY postino DESC
              LIMIT 1";
    $varastoresult = pupe_query($query);

    // jos saadaan joku kilometrim‰‰r‰ niin laitetaan se muuttujaan talteen
    if (mysql_num_rows($varastoresult) == 1) {
      $varastorow = mysql_fetch_assoc($varastoresult);
      $km = $varastorow['km'];
    }
    else {
      $km = 0;
    }

    // haetaan rahtimaksu hinnan/painon ja/tai et‰isyyden mukaan
    $query = "SELECT rahtihinta
              FROM rahtimaksut
              WHERE toimitustapa  = '$laskurow[toimitustapa]'
              AND toimitustapa   != ''
              AND kilotalku       <= '$kyht'
              AND kilotloppu      >= '$kyht'
              AND yhtio           = '$kukarow[yhtio]'
              AND ((kmalku <= '$km' and kmloppu >= '$km') or (kmalku = 0 and kmloppu = 0))
              ORDER BY kmloppu DESC, kmalku DESC
              LIMIT 1";
    $rares = pupe_query($query);

    if (mysql_num_rows($rares) == 1) {
      $hirow = mysql_fetch_assoc($rares);
      $ale_kaikki_array = array();

      // Rahtimaksut ovat yhtion valuutassa, se pit‰‰ muuttaa laskun valuuttaan, koska alehinta funktio k‰sittelee hintoja kuin ne olisi syˆtetty laskun valuutassa
      if ($laskurow["valkoodi"] != '' and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"]))) {
        $hirow['rahtihinta'] = round(laskuval($hirow['rahtihinta'], $laskurow["vienti_kurssi"]), 2);
      }

      if ($rahtituoteno_toimitustavalta) {
        // Etsit‰‰n spessuhintaa/alennuksia jos toimitustavan takana oli oma rahti_tuotenumero
        list($lis_hinta, $lis_netto, $lis_ale_kaikki, $alehinta_alv, $alehinta_val) = alehinta($laskurow, $rahti_tuoteno_row, 1, '', '', '');

        // Ei asiakashintaa, otetaan hinta rahtimatriisista
        if ((float) $lis_hinta == 0) {
          list($lis_hinta, $lis_netto, $lis_ale_kaikki, $alehinta_alv, $alehinta_val) = alehinta($laskurow, $rahti_tuoteno_row, 1, $lis_netto, $hirow['rahtihinta'], $lis_ale_kaikki);
        }
      }
      else {
        // Yhtiˆn oletus rahti_tuotenumero
        list($lis_hinta, $lis_netto, $lis_ale_kaikki, $alehinta_alv, $alehinta_val) = alehinta($laskurow, $rahti_tuoteno_row, 1, 'N', $hirow['rahtihinta'], '');
      }

      // Alvit kuntoon
      list($lis_hinta, $alehinta_alv) = alv($laskurow, $rahti_tuoteno_row, $lis_hinta, '', $alehinta_alv);

      return array($lis_hinta, $lis_ale_kaikki, $alehinta_alv, $lis_netto);
    }
    else {
      return array(0, 0, 0, 0);
    }
  }
}

if (!function_exists("pakkaamo")) {
  function pakkaamo($tilausnumero, $update = '', $ei_pakkaamoa = '') {
    global $kukarow, $yhtiorow, $konsernivarasto_yhtiot;

    // Pupen varaston hierarkia:
    //
    // 1) varastopaikat aka "YRITYKSEN VARASTOT"
    // 2) varaston_tulostimet aka "VARASTON TULOSTUSALUEET" (varastopaikat.tunnus = varaston_tulostimet.varasto)
    // 3) pakkaamo aka "PAKKAAMOLOKEROT" (pakkaamo.nimi = varaston_tulostimet.pakkaamo)
    //
    // tiedot tallennetaan laskulle:
    // lasku.varasto = varasto.tunnus
    // lasku.tulostusalue = varaston_tulostimet.nimi
    // lasku.pakkaamo = pakkaamo.tunnus

    if ($yhtiorow['pakkaamolokerot'] == '') {
      return 0;
    }

    // T‰ss‰ nollataan tilausten pakkaamolokerot
    if ($ei_pakkaamoa != '') {
      $query = "UPDATE lasku SET pakkaamo = 0
                WHERE yhtio = '$kukarow[yhtio]'
                AND ((tila in ('N','L') and alatila = 'A') or (tila = 'L' and alatila = 'C') or (tila = 'G' and alatila in ('J','A','C')))
                AND tunnus  in ($tilausnumero)";
      $ei_pakkaamoa_res = pupe_query($query);
      return 0;
    }

    if ($yhtiorow['konsernivarasto'] != '' and $konsernivarasto_yhtiot != '') {
      $logistiikka_yhtio = $konsernivarasto_yhtiot;
      $logistiikka_yhtiolisa = "yhtio in ($logistiikka_yhtio)";
    }
    else {
      $logistiikka_yhtiolisa = "yhtio = '$kukarow[yhtio]'";
    }

    // T‰ss‰ haetaan ekan tilauksen tiedot
    $query = "SELECT *
              FROM lasku
              WHERE $logistiikka_yhtiolisa
              AND ((tila in ('N', 'L') and alatila = 'A') or (tila = 'L' and alatila = 'C') or (tila = 'G' and alatila in ('J','A','C')))
              AND lasku.tunnus in ($tilausnumero)
              ORDER BY tunnus
              LIMIT 1";
    $varastotark_res = pupe_query($query);
    $varastotark_row = mysql_fetch_assoc($varastotark_res);

    //katsotaan onko jo annettu pakkaamolokero vastaavalle SIIRTOLISTALLE, niit‰ saa/pit‰‰ yhdist‰‰
    $query = "SELECT lasku.pakkaamo
              FROM lasku
              JOIN pakkaamo ON (pakkaamo.yhtio = lasku.yhtio and pakkaamo.tunnus = lasku.pakkaamo)
              WHERE lasku.$logistiikka_yhtiolisa
              AND lasku.ytunnus        = '$varastotark_row[ytunnus]'
              AND lasku.toim_ovttunnus = '$varastotark_row[toim_ovttunnus]'
              AND lasku.toim_nimi      = '$varastotark_row[toim_nimi]'
              AND lasku.toim_nimitark  = '$varastotark_row[toim_nimitark]'
              AND lasku.nimi           = '$varastotark_row[nimi]'
              AND lasku.nimitark       = '$varastotark_row[nimitark]'
              AND lasku.toim_osoite    = '$varastotark_row[toim_osoite]'
              AND lasku.toim_postitp   = '$varastotark_row[toim_postitp]'
              AND lasku.toim_maa       = '$varastotark_row[toim_maa]'
              AND lasku.toimitustapa   = '$varastotark_row[toimitustapa]'
              AND lasku.varasto        = '$varastotark_row[varasto]'
              AND lasku.pakkaamo       > 0
              AND lasku.tila           in ('G')
              AND lasku.alatila        in ('A','C')
              ORDER BY pakkaamo.pakkaamon_prio, pakkaamo.prio
              LIMIT 1";
    $vanhat_res = pupe_query($query);

    if (mysql_num_rows($vanhat_res) > 0) {
      $split_pakkaamo_row = mysql_fetch_assoc($vanhat_res);

      if (isset($update) and $update != '') {
        $query = "UPDATE lasku SET
                  pakkaamo    = '$split_pakkaamo_row[pakkaamo]'
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND tunnus  in ($tilausnumero)";
        $pakkaamo_insert_res = pupe_query($query);
      }

      return $split_pakkaamo_row['pakkaamo'];
    }

    $pakkaamotark_wherelisa = '';

    if ($yhtiorow['pakkaamolokerot'] == 'K') {
      $pakkaamotark_wherelisa = ' AND varaston_tulostimet.pakkaamo = vanha_varaston_tulostimet.pakkaamo ';
    }

    // Katsotaan onko n‰it‰ tilauksia laitettu jo joku osa jonnekin lokeroon samassa pakkaamossa ja valitaan paras lokero
    $query = "SELECT pakkaamo.tunnus
              FROM lasku
              JOIN varaston_tulostimet ON (varaston_tulostimet.yhtio = lasku.yhtio and varaston_tulostimet.nimi = lasku.tulostusalue)
              JOIN lasku vanha_lasku ON (vanha_lasku.yhtio = lasku.yhtio and vanha_lasku.vanhatunnus = lasku.vanhatunnus and vanha_lasku.tunnus not in ($tilausnumero))
              JOIN varaston_tulostimet vanha_varaston_tulostimet ON (vanha_varaston_tulostimet.yhtio = vanha_lasku.yhtio and vanha_varaston_tulostimet.nimi = vanha_lasku.tulostusalue)
              JOIN pakkaamo ON (pakkaamo.yhtio = vanha_lasku.yhtio and pakkaamo.tunnus = vanha_lasku.pakkaamo)
              WHERE lasku.$logistiikka_yhtiolisa
              AND ((lasku.tila in ('N','L') and lasku.alatila = 'A') or (lasku.tila = 'L' and lasku.alatila = 'C') or (lasku.tila = 'G' and lasku.alatila in ('J','A','C')))
              AND lasku.vanhatunnus != 0
              AND lasku.tunnus       in ($tilausnumero)
              $pakkaamotark_wherelisa
              ORDER BY pakkaamo.pakkaamon_prio, pakkaamo.prio
              LIMIT 1";
    $pakkaamotark_res = pupe_query($query);

    if (mysql_num_rows($pakkaamotark_res) == 1) {
      $split_pakkaamo_row = mysql_fetch_assoc($pakkaamotark_res);

      if (isset($update) and $update != '') {
        $query = "UPDATE lasku SET
                  pakkaamo    = '$split_pakkaamo_row[tunnus]'
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND tunnus  in ($tilausnumero)";
        $pakkaamo_insert_res = pupe_query($query);
      }

      return $split_pakkaamo_row['tunnus'];
    }
    else {

      // listataan kaikki pakkaamot tilauksen tulostusalueelta
      $query = "SELECT pakkaamo.lokero, pakkaamo.nimi, group_concat(distinct pakkaamo.tunnus) tunnus, group_concat(distinct pakkaamo.varasto) varasto
                FROM pakkaamo
                JOIN varaston_tulostimet ON (varaston_tulostimet.yhtio = pakkaamo.yhtio and varaston_tulostimet.nimi = '$varastotark_row[tulostusalue]')
                WHERE pakkaamo.$logistiikka_yhtiolisa
                AND pakkaamo.nimi = varaston_tulostimet.pakkaamo
                GROUP BY lokero, nimi
                ORDER BY pakkaamon_prio ASC, prio ASC";
      $etsitaan_pakkaamo_res = pupe_query($query);

      $pienin_maara = 99999;
      $pienin_maara_tunnus = '';

      while ($etsitaan_pakkaamo_row = mysql_fetch_assoc($etsitaan_pakkaamo_res)) {
        $loytyyko_varasto = '';

        foreach (explode(',', $etsitaan_pakkaamo_row['varasto']) as $varasto) {
          // katsotaan lˆytyykˆ tilauksella oleva varasto loopattavista varastoista
          if ($varastotark_row['varasto'] == $varasto) {
            $loytyyko_varasto = 'lˆytyi!';
            break;
          }
        }

        if ($loytyyko_varasto != '') {

          // lasketaan montako tilausta on lokerossa
          $query = "SELECT count(*) kpl
                    FROM lasku
                    WHERE lasku.$logistiikka_yhtiolisa
                    AND ((lasku.tila in ('N','L') and lasku.alatila = 'A') or (lasku.tila = 'L' and lasku.alatila = 'C') or (lasku.tila = 'G' and lasku.alatila in ('J','A','C')))
                    AND lasku.pakkaamo in ($etsitaan_pakkaamo_row[tunnus])";
          $paljon_laskuja_lokerossa_res = pupe_query($query);
          $paljon_laskuja_lokerossa_row = mysql_fetch_assoc($paljon_laskuja_lokerossa_res);

          // otetaan talteen pienin kpl m‰‰r‰ll‰ oleva lokero
          if ($paljon_laskuja_lokerossa_row['kpl'] < $pienin_maara) {
            $pienin_maara = (int) $paljon_laskuja_lokerossa_row['kpl'];
            $pienin_maara_tunnus = $etsitaan_pakkaamo_row['tunnus'];
          }

          // lopetetaan looppi jos lˆydet‰‰n tyhj‰ lokero
          if ($pienin_maara == 0) {
            break;
          }
        }
      }

      if ($pienin_maara < 99999) {

        // katsotaan mik‰ lokerotunnuksista oli k‰ytt‰j‰n yrityksen oma
        $query = "SELECT tunnus
                  FROM pakkaamo
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND tunnus  in ($pienin_maara_tunnus)";
        $pakkaamo_insert_res = pupe_query($query);
        $pakkaamo_insert_row = mysql_fetch_assoc($pakkaamo_insert_res);

        if (isset($update) and $update != '') {
          // p‰ivitet‰‰n pakkaamotunnus tilauksille
          $query = "UPDATE lasku SET
                    pakkaamo    = '$pakkaamo_insert_row[tunnus]'
                    WHERE yhtio = '$kukarow[yhtio]'
                    AND tunnus  in ($tilausnumero)";
          $pakkaamo_insert_res = pupe_query($query);
        }

        return $pakkaamo_insert_row['tunnus'];
      }

      return 0;
    }
  }
}

if (!function_exists("laheta_tilausvahvistus")) {
  function laheta_tilausvahvistus($params) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // Luodaan muuttujat
    foreach ($params as $key => $val) {
      ${$key} = $val;
    }

    // Haetaan asiakkaan tiedot
    $query = "SELECT tilausvahvistus
              FROM asiakas
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$laskurow['liitostunnus']}'";
    $asiakasres = pupe_query($query);
    $asiakasrow = mysql_fetch_assoc($asiakasres);

    // Jos laskulla ei oo tilausvahvistustyyppi‰ niin katotaan asiakkaan oletus
    if (trim($laskurow['tilausvahvistus']) == '') {
      $laskurow['tilausvahvistus'] = trim($asiakasrow['tilausvahvistus']);
    }

    // Jos laskulla eik‰ asiakkaallakaan oo tilausvahvistustyyppi‰ niin katotaan yhtiˆn oletus
    if (trim($laskurow['tilausvahvistus']) == '') {
      $laskurow['tilausvahvistus'] = trim($yhtiorow['tilausvahvistustyyppi']);
    }

    //
    // LƒHETETƒƒN TILAUSVAHVISTUS
    //
    //

    $tuoteperheetyhdessa = FALSE;
    $verollisethinnat = FALSE;

    if ($kukarow['extranet'] != "" and $kukarow['hyvaksyja'] != '') {
      $naytatvale = 2; // jos mell‰ on tilausvahvistuksessa kakkonen, ei haluta n‰h‰ aleja
    }
    elseif (strpos($laskurow['tilausvahvistus'], '14') !== FALSE) {
      $naytatvale = 14; // jos meill‰ on tilausvahvistuksessa 14, halutaan n‰h‰ alet ja jt-rivit mukaan yhteens‰summaan
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '11') !== FALSE) {
      $naytatvale = 11; // jos meill‰ on tilausvahvistuksessa seiska, niin tehd‰‰n N‰ytet‰‰n asiakkaan hinta, viivakoodi ja jt-rivit normaaleina. Ei alennuksia
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '12') !== FALSE) {
      $naytatvale = 12; // jos meill‰ on tilausvahvistuksessa 12, niin n‰ytet‰‰n viivakoodi, ale1, ja ale1:n mukaan laskettu hinta
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '13') !== FALSE) {
      $naytatvale = 13; // jos meill‰ on tilausvahvistuksessa 13, niin n‰ytet‰‰n tilausrivi.hinta ja ei alennuksia
    }
    elseif (strpos($laskurow['tilausvahvistus'], '10') !== FALSE) {
      $naytatvale = 10; // jos meill‰ on tilausvahvistuksessa seiska, niin tehd‰‰n N‰ytet‰‰n asiakkaan hinta, alennus, viivakoodi ja jt-rivit normaaleina
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '8') !== FALSE) {
      $naytatvale = 8; // jos meill‰ on tilausvahvistuksessa kasi, niin tehd‰‰n EAN tilausvahvistus asiakashinnalla ja ei n‰ytet‰ alennuksia
    }
    elseif (strpos($laskurow['tilausvahvistus'], '7') !== FALSE) {
      $naytatvale = 7; // jos meill‰ on tilausvahvistuksessa seiska, niin tehd‰‰n EAN tilausvahvistus
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '6') !== FALSE) {
      $naytatvale = 6; // jos meill‰ on tilausvahvistuksessa kutonen, niin tehd‰‰n customoitu tilausvahvistus
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '5') !== FALSE) {
      $naytatvale = 5; // jos mell‰ on tilausvahvistuksessa vitonen, niin haetaan hinnat toisesta pupesta
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '4') !== FALSE) {
      $naytatvale = 4; // jos mell‰ on tilausvahvistuksessa nelonen, ei haluta n‰hd‰ alennuksia, n‰ytet‰‰n tilausrivin hinta ja rivihinta
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '3') !== FALSE) {
      $naytatvale = 3; // jos mell‰ on tilausvahvistuksessa kolmonen, ei haluta n‰hd‰ hintoja, pelk‰st‰‰n kpl-m‰‰r‰t
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '2') !== FALSE) {
      $naytatvale = 2; // jos mell‰ on tilausvahvistuksessa kakkonen, ei haluta n‰h‰ aleja
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    elseif (strpos($laskurow['tilausvahvistus'], '1') !== FALSE) {
      $naytatvale = 1; // jos mell‰ on tilausvahvistuksessa ykkˆnen, halutaan n‰h‰ alet
      if (strpos($laskurow['tilausvahvistus'], 'Y') !== FALSE) {
        $tuoteperheetyhdessa = TRUE;
      }
    }
    else {
      $naytatvale = 1; // halutaan n‰h‰ alet
    }

    if (strpos($laskurow['tilausvahvistus'], 'V') !== FALSE) {
      $verollisethinnat = TRUE;
    }

    if (strpos($_SERVER['SCRIPT_NAME'], "tulostakopio.php") !== FALSE) {
      if (@include "tilauskasittely/tulosta_tilausvahvistus_pdf.inc");
      else require "tulosta_tilausvahvistus_pdf.inc";
    }
    else {
      if (strpos($laskurow['tilausvahvistus'], 'E') !== FALSE) {
        if (@include "tilauskasittely/tilausvahvistus-edi.inc");
        else require "tilausvahvistus-edi.inc";
      }

      if (strpos($laskurow['tilausvahvistus'], 'S') !== FALSE or strpos($laskurow['tilausvahvistus'], 'O') !== FALSE) {
        if (@include "tilauskasittely/tilausvahvistus-email.inc");
        else require "tilausvahvistus-email.inc";
      }

      if (strpos($laskurow['tilausvahvistus'], 'F') !== FALSE) {
        if (@include "tilauskasittely/tilausvahvistus-fax.inc");
        else require "tilausvahvistus-fax.inc";
      }

      if (strpos($laskurow['tilausvahvistus'], 'U') !== FALSE) {
        if (@include "tilauskasittely/tilausvahvistus-futursoft.inc");
        else require "tilausvahvistus-futursoft.inc";
      }

      if (strpos($laskurow['tilausvahvistus'], 'K') !== FALSE) {
        $query = "SELECT komento
                  FROM kirjoittimet
                  WHERE yhtio = '$kukarow[yhtio]'
                  and tunnus  = '$kukarow[kirjoitin]'";
        $tilvares = pupe_query($query);

        if ($tilvakir = mysql_fetch_assoc($tilvares)) {
          $komento["Tilausvahvistus"] = $tilvakir["komento"];

          $toim_save = $toim;
          if ($toim != "YLLAPITOSOPIMUS") $toim = "TILAUSVAHVISTUS";

          if (@include "tilauskasittely/tulosta_tilausvahvistus_pdf.inc");
          else require "tulosta_tilausvahvistus_pdf.inc";
          $toim = $toim_save;
        }
      }
    }

    if (strpos($_SERVER['SCRIPT_NAME'], "tulostakopio.php") === FALSE and $yhtiorow['tilausvahvistus_tallenna'] == 'K' and isset($tilausvahvistus_tallenna) and $tilausvahvistus_tallenna != '') {

      if (stristr(basename($tilausvahvistus_tallenna), ".pdf")) {
        $liite_tyyppi = "application/pdf";
      }
      else {
        $liite_tyyppi = "text/plain";
      }

      $file["name"]     = basename($tilausvahvistus_tallenna);
      $file["type"]     = $liite_tyyppi;
      $file["tmp_name"]   = $tilausvahvistus_tallenna;
      $file["error"]     = 0;
      $file["size"]     = filesize($tilausvahvistus_tallenna);

      $_FILES['tilvah_liite'] = $file;

      $liitetied_id = tallenna_liite('tilvah_liite', 'lasku', $laskurow['tunnus'], t('Myyntilaskun tilausvahvistus'));

      //poistetaan tmp file samantien kuleksimasta...
      unlink("/tmp/".basename($tilausvahvistus_tallenna));

      $tilausvahvistus_tallenna = "";
    }
  }
}

// T‰m‰ funktio k‰‰nt‰‰ sanoja sanakirjasta
if (!function_exists("t")) {
  function t($stringi, $kieli = "") {
    global $yhtiorow, $kukarow, $verkkokauppa, $kaannetyt_sanat;

    if (trim($kieli) != '') {
      $indeksi = trim(strtolower($kieli));
    }
    elseif (isset($kukarow["kieli"]) and trim($kukarow["kieli"]) != '') {
      $indeksi = trim(strtolower($kukarow["kieli"]));
    }
    else {
      $indeksi = "fi";
    }

    if ($indeksi != 'fi') {

      // Jos meill‰ on HTML:‰‰ strigiss‰, unohdetaan koko juttu ja palautetaan string vaa takas
      if ($stringi != strip_tags($stringi)) {
        return $stringi;
      }

      // Eskeipataan stringi
      $stringi_sql = mysql_real_escape_string($stringi);

      $sanakirjaquery  = "SELECT fi, $indeksi, tunnus FROM sanakirja WHERE fi = BINARY '$stringi_sql'";

      if (isset($GLOBALS["slavelink"]) and is_resource($GLOBALS["slavelink"])) {
        $sanakirjaresult = pupe_query($sanakirjaquery, $GLOBALS["slavelink"]);
      }
      else {
        $sanakirjaresult = pupe_query($sanakirjaquery);
      }

      if (isset($kaannetyt_sanat) and !in_array($stringi, $kaannetyt_sanat)) $kaannetyt_sanat[] = $stringi;

      if (mysql_num_rows($sanakirjaresult) > 0) {
        $sanakirjarow = mysql_fetch_assoc($sanakirjaresult);

        if (isset($sanakirjarow[$indeksi]) and trim($sanakirjarow[$indeksi]) != '') {
          $stringi = $sanakirjarow[$indeksi];
        }
        else {
          if ($indeksi == 'ru') {
            $stringi = t($stringi, "EN");
          }
          else {
            $stringi = $sanakirjarow["fi"];
          }
        }

        // P‰ivitet‰‰n aikaleima
        /*
        if ($verkkokauppa == "") {
          $sanakirjaqueryupd  = "UPDATE sanakirja SET aikaleima=now(), kysytty=kysytty+1 WHERE tunnus='$sanakirjarow[tunnus]'";
          $sanakirjaresultupd = pupe_query($sanakirjaqueryupd, $GLOBALS["masterlink"]);
        }
        */
      }
      elseif ($verkkokauppa == "") {
        $sanakirjaquery  = "INSERT INTO sanakirja SET fi = '$stringi_sql', aikaleima=now(), kysytty=1, laatija='$kukarow[kuka]', luontiaika=now()";
        $sanakirjaresult = pupe_query($sanakirjaquery, $GLOBALS["masterlink"]);
      }
    }
    elseif (isset($kaannetyt_sanat) and !in_array($stringi, $kaannetyt_sanat)) {
      $kaannetyt_sanat[] = $stringi;
    }

    //  Palautetaan muotoiltu stringi!!!
    if (func_num_args() > 2) {
      $arg = func_get_args();

      if (!isset($arg[2])) $arg[2] = "";
      if (!isset($arg[3])) $arg[3] = "";
      if (!isset($arg[4])) $arg[4] = "";
      if (!isset($arg[5])) $arg[5] = "";
      if (!isset($arg[6])) $arg[6] = "";

      return sprintf($stringi, $arg[2], $arg[3], $arg[4], $arg[5], $arg[6]);
    }
    else {
      return $stringi;
    }
  }
}

// T‰m‰ funktio hakee ja k‰‰nt‰‰ avainsanoja
if (!function_exists("t_avainsana")) {
  function t_avainsana($laji, $kieli = '', $where = '', $yhtio = '', $eivielakaytossa = '', $return = "") {
    global $kukarow, $yhtiorow;
    static $kaannetyt = array();

    $laji = mysql_real_escape_string($laji);
    $orderlisa = "";

    if ($kieli == "") {
      $kieli = $kukarow["kieli"];
    }
    else {
      $kieli = mysql_real_escape_string($kieli);
    }

    // Onko sana jo k‰‰nnetty
    $paramshasharray = md5($laji.$kieli.$where.$yhtio.$eivielakaytossa.$return);

    if (isset($kaannetyt[$paramshasharray])) {

      if (is_resource($kaannetyt[$paramshasharray]) and mysql_num_rows($kaannetyt[$paramshasharray]) > 0) {
        mysql_data_seek($kaannetyt[$paramshasharray], 0);
      }

      return $kaannetyt[$paramshasharray];
    }

    if ($where != "") {
      $wherelisa = $where;
    }
    else {
      $wherelisa = "";
    }

    if ($yhtio != "") {
      $yhtiolisa = " avainsana.yhtio in ($yhtio) ";
    }
    else {
      $yhtiolisa = " avainsana.yhtio = '$kukarow[yhtio]' ";
    }

    if ($return != "") {
      $kielilisa = $return;
    }
    else {
      $kielilisa = "selitetark";
    }

    if ($where == "" and stripos($wherelisa, "ORDER BY") === FALSE) {
      $query = "SELECT distinct selite
                FROM avainsana
                WHERE $yhtiolisa
                and laji  = '$laji'
                and kieli = '$yhtiorow[kieli]'";
      $result = pupe_query($query);

      $onko_numero = $onko_alpha = 0;

      while ($row = mysql_fetch_assoc($result)) {
        if (is_numeric($row["selite"])) {
          $onko_numero++;
        }
        else {
          $onko_alpha++;
        }
      }

      if ($onko_numero > $onko_alpha) {
        $orderlisa = " ORDER BY avainsana.jarjestys, avainsana.selite+0 ";
      }
      else {
        $orderlisa = " ORDER BY avainsana.jarjestys, avainsana.selite ";
      }
    }

    if ($orderlisa == "" and stripos($wherelisa, "ORDER BY") === FALSE) {
      $orderlisa = " ORDER BY avainsana.jarjestys, avainsana.selite ";
    }

    $kielisubquery = "";

    // Haetaan vieraskieliset vain jos pyydet‰‰n vieraskielist‰
    if (strtoupper($kieli) != strtoupper($yhtiorow["kieli"])) {
      $kielisubquery = ", IFNULL((SELECT if (avainsana_kieli.$kielilisa = '', NULL, avainsana_kieli.$kielilisa)
                FROM avainsana as avainsana_kieli
                WHERE avainsana_kieli.yhtio = avainsana.yhtio
                and avainsana_kieli.laji = avainsana.laji
                and avainsana_kieli.perhe = avainsana.perhe
                and avainsana_kieli.perhe > 0
                and avainsana_kieli.kieli = '$kieli' LIMIT 1), avainsana.$kielilisa) $kielilisa";
    }

    $query = "SELECT DISTINCT avainsana.* $kielisubquery
              FROM avainsana
              WHERE $yhtiolisa
              and avainsana.laji  = '$laji'
              and avainsana.kieli in ('$yhtiorow[kieli]', '')
              $wherelisa
              $orderlisa";
    $result = pupe_query($query);

    if ($return != "") {
      if (mysql_num_rows($result) > 0) {
        $row = mysql_fetch_assoc($result);

        $kaannetyt[$paramshasharray] = $row[$return];
        return $row[$return];
      }
      else {
        $kaannetyt[$paramshasharray] = "";
        return "";
      }
    }

    $kaannetyt[$paramshasharray] = $result;
    return $result;
  }
}

// T‰m‰ funktio k‰‰nt‰‰ tuotteen_avainsanoja.
if (!function_exists('t_tunnus_avainsanat')) {
  function t_tunnus_avainsanat($row, $laji, $avainsanalaji, $kieli = '') {

    global $kukarow, $yhtiorow;

    $laji = mysql_real_escape_string(trim($laji));
    $kieli = mysql_real_escape_string(trim($kieli));

    if ($kieli == "") $kieli = $kukarow["kieli"];
    if ($kieli == "") $kieli = $yhtiorow["kieli"];

    //  Jos kielet matchaa niin palautetaan suoraan vastaus
    if (strtoupper($kieli) == strtoupper($yhtiorow["kieli"])) {
      if (is_array($row)) {
        return $row[$laji];
      }
      else {
        return $row;
      }
    }

    // Jos tyhj‰‰ niin unohdetaan koko juttu
    if ($laji == "" or (is_array($row) and !isset($row["tunnus"]))) {
      return;
    }

    // Jos tunnusta ei tule niin koklataan oisko t‰m‰ suoraan se k‰‰nnett‰v‰ stringi
    if (!is_array($row)) {
      if ($avainsanalaji == "TOIMTAPAKV") {
        $query = "SELECT *
                  FROM toimitustapa
                  WHERE yhtio = '$kukarow[yhtio]'
                  and selite  = '$row'";
        $sresult = pupe_query($query);

        if (mysql_num_rows($sresult) == 1) {
          $row = mysql_fetch_assoc($sresult);
        }
        else {
          return $row;
        }
      }
    }

    // Tutkitaan onko meill‰ k‰‰nnˆs
    $query = "SELECT *
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]'
              and kieli   = '$kieli'
              and laji    = '$avainsanalaji'
              and selite  = '$row[tunnus]'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $row = mysql_fetch_assoc($result);
      // jos lˆydettiin k‰‰nnˆs palautetaan se
      if ($laji == "pakkauskuvaus") {
        return $row["selitetark_2"];
      }
      else {
        return $row["selitetark"];
      }
    }

    // muuten palautetaan se mit‰ kysyttiin
    return $row[$laji];
  }
}

// T‰m‰ funktio k‰‰nt‰‰ tuotteen_avainsanoja.
if (!function_exists('t_tuotteen_avainsanat')) {
  function t_tuotteen_avainsanat($tuoterow, $laji, $kieli = '') {

    global $kukarow, $yhtiorow;

    $laji = mysql_real_escape_string(trim($laji));
    $kieli = mysql_real_escape_string(trim($kieli));

    // Jos tyhj‰‰ niin unohdetaan koko juttu
    if (!isset($tuoterow["tuoteno"]) or $laji == "") {
      return;
    }

    if ($kieli == "" and isset($kukarow["kieli"])) $kieli = $kukarow["kieli"];
    if ($kieli == "") $kieli = $yhtiorow["kieli"];

    //  Jos kielet matchaa niin palautetaan suoraan vastaus
    if (strtoupper($kieli) == strtoupper($yhtiorow["kieli"]) and isset($tuoterow[$laji])) {
      return $tuoterow[$laji];
    }

    // Tutkitaan onko meill‰ k‰‰nnˆs
    $query = "SELECT *
              FROM tuotteen_avainsanat USE INDEX (yhtio_kieli_laji_tuoteno)
              WHERE yhtio = '$kukarow[yhtio]'
              and kieli   = '$kieli'
              and laji    = '$laji'
              and tuoteno = '$tuoterow[tuoteno]'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $row = mysql_fetch_assoc($result);
      // jos lˆydettiin k‰‰nnˆs palautetaan se
      if ($row["selitetark"] != "") {
        $palautus = "{$row["selite"]} {$row["selitetark"]}";
      }
      else {
        $palautus = $row["selite"];
      }
      return $palautus;
    }

    // muuten palautetaan se mit‰ kysyttiin
    if (isset($tuoterow[$laji])) {
      return $tuoterow[$laji];
    }
    else {
      // palautetaan laji kun mit‰s muutakaan t‰ss‰ tekisi
      return $laji;
    }
  }
}

// T‰m‰ funktio k‰‰nt‰‰ tuotteen avainsanan tai palautta avainsanan yhtiˆn oletuskielell‰ mik‰li k‰‰nnˆst‰ ei lˆydy.
if (!function_exists('t_tuotteen_avainsana')) {
  function t_tuotteen_avainsana($tuoterow, $laji, $kieli = '')
  {
    global $yhtiorow;

    $result = t_tuotteen_avainsanat($tuoterow, $laji, $kieli);

    if ($result == $laji) {
      $result = t_tuotteen_avainsanat($tuoterow, $laji, $yhtiorow['kieli']);

      if ($result == $laji) {
        $result = "";
      }
    }

    return $result;
  }
}

// funktio palauttaa maan nimen tekstimuodossa halutulla kielell‰, tai jos ei lˆydy niin suomeksi
if (!function_exists("t_maanimi")) {
  function t_maanimi($maa, $kieli = 'fi') {
    static $maat = array();

    $maa   = trim(strtoupper($maa));
    $kieli = trim(strtolower($kieli));

    if (!in_array($kieli, array('fi', 'se', 'en', 'ee'))) {
      $kieli = 'fi';
    }
    // onko $maa jo haettu kertaalleen?
    if (isset($maat[$maa])) {
      return $maat[$maa];
    }

    $query = "SELECT {$kieli} AS haettu, fi
              FROM sanakirja
              WHERE fi LIKE BINARY '{$maa} - %'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) > 0) {
      $row = mysql_fetch_assoc($result);

      $maa_txt = $row{"haettu"};

      if ($maa_txt == "") {
        $maa_txt = $row{"fi"};
      }

      $maat[$maa] = substr($maa_txt, 5);
      return $maat[$maa];
    }

    return "";
  }
}

if (!function_exists("jt_toimita")) {
  function jt_toimita($toimittaja, $toimittajaid, $varastosta, $jtrivit, $jtrivit_paikat, $automaaginen, $tee, $automaattinen_poiminta = '', $tuotenumero = '', $huomioi_pvm = '', $mista_tullaan = '') {
    global $yhtiorow, $kukarow, $oikeurow, $myyntitilaus_jaksotettu, $alkuperainen_varasto, $pupe_root_polku, $magento_api_tt_url, $magento_api_tt_usr, $magento_api_tt_pas;

    if (!is_array($jtrivit)) $jtrivit = array();
    if (!is_array($jtrivit_paikat)) $jtrivit_paikat = array();

    if ($automaattinen_poiminta != '') {
      $asiakasno            = $toimittaja;
      $toimittaja           = "";
      $asiakasid            = $toimittajaid;
      $toimittajaid         = "";
      $asiakasmaa           = "";
      $jarj                 = "luontiaika";
      $tilaus               = "";
      $toimi                = "";
      $suoratoimit          = "";
      $tilaus_on_jo         = "KYLLA";
      $suoratoimitus_rivit  = array();
      $suoratoimitus_paikat = array();
      $from_varastoon_inc   = "";
      $jt_huomioi_pvm       = $huomioi_pvm;
    }
    else {
      $asiakasno            = "";
      $asiakasid            = "";
      $asiakasmaa           = "";
      $jarj                 = "luontiaika";
      $tilaus               = "";
      $toimi                = "";
      $suoratoimit          = "";
      $tilaus_on_jo         = "";
      $suoratoimitus_rivit  = $jtrivit;
      $suoratoimitus_paikat = $jtrivit_paikat;
      $from_varastoon_inc   = "varastoon.inc";
      $jt_huomioi_pvm       = $huomioi_pvm;
    }

    if (!@include 'jtselaus.php') {
      require 'tilauskasittely/jtselaus.php';
    }
  }
}

if (!function_exists("hae_kukarow")) {
  function hae_kukarow($kuka, $yhtio) {

    $query = "SELECT *
              FROM yhtio
              WHERE yhtio = '$yhtio'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      echo "K‰ytt‰j‰n yritys ei lˆydy! ($yhtio) ({$_SERVER['SCRIPT_NAME']})\n";
      return;
    }

    $query = "SELECT *
              FROM kuka
              WHERE yhtio = '$yhtio'
              and kuka    = '$kuka'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      echo "K‰ytt‰j‰‰ ei lˆydy! ($yhtio/$kuka)";
      return;
    }

    $kukarow = mysql_fetch_assoc($result);

    return $kukarow;
  }
}

if (!function_exists("hae_yhtion_parametrit")) {
  function hae_yhtion_parametrit($yhtio, $toimipaikka = null) {
    global $kukarow, $konserni_yhtiot, $konsernivarasto_yhtiot;

    // Katsotaan, ett‰ meill‰ on aina toimipaikka parametri setattu
    if (is_null($toimipaikka)) {
      $toimipaikka = isset($kukarow['toimipaikka']) ? (int) $kukarow['toimipaikka'] : 0;
    }
    else {
      $toimipaikka = (int) $toimipaikka;
    }

    $query = "SELECT *
              FROM yhtio
              WHERE yhtio = '$yhtio'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      echo "K‰ytt‰j‰n yritys ei lˆydy! ($yhtio) ({$_SERVER['SCRIPT_NAME']})\n";
      exit;
    }
    $yhtiorow = mysql_fetch_assoc($result);

    $konserni_yhtiot = "";
    $konsernivarasto_yhtiot = "";

    if ($yhtiorow['konserni'] != '') {
      $query = "SELECT distinct yhtio.yhtio, konsernivarasto
                FROM yhtio
                JOIN yhtion_parametrit ON (yhtion_parametrit.yhtio = yhtio.yhtio)
                WHERE (yhtio.konserni = '$yhtiorow[konserni]' and yhtio.konserni != '')
                OR (yhtio.yhtio = '$yhtiorow[yhtio]')";
      $result = pupe_query($query);

      while ($row = mysql_fetch_assoc($result)) {
        $konserni_yhtiot .= " '".$row["yhtio"]."' ,";
        if ($row["konsernivarasto"] != "") {
          $konsernivarasto_yhtiot .= " '".$row["yhtio"]."' ,";
        }
      }
      $konserni_yhtiot = substr($konserni_yhtiot, 0, -1);
      $konsernivarasto_yhtiot = substr($konsernivarasto_yhtiot, 0, -1);
    }
    else {
      $konserni_yhtiot = "'".$yhtio."'";
    }

    $query = "SELECT *
              FROM yhtion_parametrit
              WHERE yhtio='$yhtio'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $yhtion_parametritrow = mysql_fetch_assoc($result);

      if ($yhtion_parametritrow['hintapyoristys'] < 2 or $yhtion_parametritrow['hintapyoristys'] > 6) {
        $yhtion_parametritrow['hintapyoristys'] = 2;
      }

      // lis‰t‰‰n kaikki yhtiorow arrayseen
      foreach ($yhtion_parametritrow as $parametrit_nimi => $parametrit_arvo) {
        $yhtiorow[$parametrit_nimi] = $parametrit_arvo;
      }
    }

    // Jos meill‰ on toimipaikka, ylikirjataan yhtion parametrit toimipaikan parametreill‰
    if ($toimipaikka > 0) {
      $query = "SELECT *, tunnus yhtion_toimipaikat_tunnus
                FROM yhtion_toimipaikat
                WHERE yhtio = '$yhtio'
                and tunnus  = '$toimipaikka'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {
        $yhtion_toimipaikkarow = mysql_fetch_assoc($result);

        unset($yhtion_toimipaikkarow["tunnus"]);

        if (trim($yhtion_toimipaikkarow['postittaja_email']) == '') {
          $yhtion_toimipaikkarow['postittaja_email'] = $yhtion_parametritrow['postittaja_email'];
        }

        // lis‰t‰‰n kaikki yhtiorow arrayseen
        foreach ($yhtion_toimipaikkarow as $parametrit_nimi => $parametrit_arvo) {
          $yhtiorow[$parametrit_nimi] = $parametrit_arvo;
        }

        // Heataan viel‰ toimipaikan paramit
        $query = "SELECT *
                  FROM yhtion_toimipaikat_parametrit
                  WHERE yhtio     = '$yhtio'
                  and toimipaikka = '$toimipaikka'";
        $result = pupe_query($query);

        while ($yhtion_toimipaikka_paramrow = mysql_fetch_assoc($result)) {
          $yhtiorow[$yhtion_toimipaikka_paramrow['parametri']] = $yhtion_toimipaikka_paramrow['arvo'];
        }
      }
    }

    return $yhtiorow;
  }
}

if (!function_exists("liite_popup")) {
  function liite_popup($toiminto, $tuotetunnus = 0, $width=0, $height=0, $litety_id = FALSE) {
    global $kukarow, $yhtiorow, $PHP_SELF, $palvelin2, $pupe_root_polku, $toim;

    if ($toiminto == "JS") {
      echo "<SCRIPT type='text/javascript'>
          <!--
            function liite_popup_js(tuotetunnus, maxwidth, totalheight, litety_id) {
              var myWidth = 0, myHeight = 0;

              if (typeof(window.innerWidth ) == 'number') {
                //Non-IE
                myWidth = window.innerWidth;
                myHeight = window.innerHeight;
              } else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
                //IE 6+ in 'standards compliant mode'
                myWidth = document.documentElement.clientWidth;
                myHeight = document.documentElement.clientHeight;
              } else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
                //IE 4 compatible
                myWidth = document.body.clientWidth;
                myHeight = document.body.clientHeight;
              }

              if (maxwidth == '0' && totalheight == '0') {
                window.open('$PHP_SELF?ohje=off&toim=$toim&liite_popup_toiminto=AK&litety_id='+litety_id+'&tuotetunnus='+tuotetunnus, '_blank' ,'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,left=25,top=25, width='+myWidth+', height='+myHeight);
              }
              else {
                window.open('$PHP_SELF?ohje=off&toim=$toim&liite_popup_toiminto=AK&litety_id='+litety_id+'&tuotetunnus='+tuotetunnus+'&width='+maxwidth, '_blank' ,'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,left=25,top=25, width='+maxwidth+', height='+totalheight);
              }
            }
          //-->
          </SCRIPT>";
    }
    elseif ($toiminto == "AK") {

      if ($width > 0) {
        $maxi = " width='".($width-30)."' ";
      }

      if ($litety_id) {
        $_lisa = " AND liitetiedostot.tunnus = $litety_id";
      }
      else {
        $_lisa = " AND kayttotarkoitus != 'TH'";
      }

      $query = "SELECT
                tunnus,
                selite,
                kieli,
                filename,
                filesize,
                filetype,
                image_width,
                image_height,
                kayttotarkoitus,
                if (kayttotarkoitus='TK', 0, if (kayttotarkoitus='MU', 1, 2)) sorttaus,
                jarjestys
                FROM liitetiedostot
                WHERE yhtio          = '$kukarow[yhtio]'
                AND liitos           = 'tuote'
                AND liitostunnus     = '$tuotetunnus'
                $_lisa
                ORDER BY sorttaus, jarjestys, filename";
      $kuvares = pupe_query($query);

      echo "<table $maxi>";

      while ($kuvarow = mysql_fetch_assoc($kuvares)) {
        echo "<tr><th style='text-align: center;'>$kuvarow[selite]</th></tr>";
        echo "<tr><td align='center'>";

        if (in_array($kuvarow["kayttotarkoitus"], array("TK", "TH")) and in_array($kuvarow["filetype"], array("image/jpeg", "image/jpg", "image/gif", "image/png", "image/bmp"))) {

          echo "<img $maxi src='".$palvelin2."view.php?id=$kuvarow[tunnus]'>";

          if ($width > 0 and $width < $kuvarow["image_width"]) {
            echo "<br><a href='".$palvelin2."view.php?id=$kuvarow[tunnus]' target='$kuvarow[tunnus]'>".t("N‰yt‰ t‰ysikokoinen kuva")."</a>";
          }
        }
        else {
          list($liitedata1, $liitedata2) = explode("/", $kuvarow["filetype"]);

          $path_parts = pathinfo($kuvarow["filename"]);
          $ext = $path_parts['extension'];

          if (file_exists($pupe_root_polku."/pics/tiedostotyyppiikonit/".strtoupper($liitedata2).".ico")) {
            echo "<a href='".$palvelin2."view.php?id=$kuvarow[tunnus]' target='$kuvarow[tunnus]'><img src='".$palvelin2."pics/tiedostotyyppiikonit/".strtoupper($liitedata2).".ico' height='80px'></a>";
          }
          elseif (file_exists("pics/tiedostotyyppiikonit/".strtoupper($ext).".ico")) {
            echo "<a href='".$palvelin2."view.php?id=$kuvarow[tunnus]' target='$kuvarow[tunnus]'><img src='".$palvelin2."pics/tiedostotyyppiikonit/".strtoupper($ext).".ico' height='80px'></a>";
          }
          echo "<br><a href='".$palvelin2."view.php?id=$kuvarow[tunnus]' target='$kuvarow[tunnus]'>".t("Avaa tiedosto")."</a>";
        }

        if ($kuvarow["kieli"] != "" and strtoupper($kuvarow["kieli"]) != strtoupper($yhtiorow["kieli"])) {
          echo "<br><font class='info'>".t("Kieli").": ".strtoupper($kuvarow["kieli"])."</font>";
        }

        echo "</td></tr>";
      }
      echo "</table>";

      echo "<br><center><input type='button' value='".t("Sulje ikkuna")."' onClick=\"javascript:window.close();\"></center>";

      require "inc/footer.inc";
      exit;
    }
    elseif ($toiminto == "TN") {

      unset($images_exist);
      unset($pdf_exist);
      unset($filetype);

      if ($litety_id) {
        $_lisa = " AND liitetiedostot.tunnus = $litety_id";
      }
      else {
        $_lisa = " AND kayttotarkoitus != 'TH'";
      }

      $filetype_query = "SELECT
                         yhtio,
                         selite,
                         kieli,
                         filename,
                         filesize,
                         filetype,
                         image_width,
                         image_height,
                         kayttotarkoitus,
                         if (kayttotarkoitus='TK', 0, if (kayttotarkoitus='MU', 1, 2)) sorttaus,
                         jarjestys
                         FROM liitetiedostot
                         WHERE yhtio          = '$kukarow[yhtio]'
                         and liitos           = 'tuote'
                         and liitostunnus     = '$tuotetunnus'
                         $_lisa
                         ORDER BY sorttaus, jarjestys, filename";
      $filetype_result = pupe_query($filetype_query);

      if (mysql_num_rows($filetype_result) > 0) {

        $filetype_row = mysql_fetch_assoc($filetype_result);

        if (in_array($filetype_row["filetype"], array("image/jpeg", "image/jpg", "image/gif", "image/png", "image/bmp"))) {

          $maxwidth = $filetype_row["image_width"];
          $totalheight = $filetype_row["image_height"];

          if ($maxwidth > 640) {

            $kerroin = 640/$maxwidth;

            $maxwidth = $kerroin*$maxwidth;
            $totalheight = $kerroin*$totalheight;
          }

          $maxwidth += 30;
          $totalheight += 100;

          $images_exist = 1;
        }
        elseif ($filetype_row["filetype"] == "application/pdf") {
          $maxwidth     = 0;
          $totalheight   = 0;
          $pdf_exist     = 1;
        }
      }

      if (isset($images_exist) or isset($pdf_exist)) {

        $liitteet = "<input type='button' value='";

        if (isset($pdf_exist)) {
          $liitteet .= t("Pdf");
        }
        else {
          $liitteet .= t("Kuva");
        }

        $liitteet .= "' onClick=\"javascript:liite_popup_js($tuotetunnus, $maxwidth, $totalheight, $litety_id)\">";

        return $liitteet;
      }
    }
    elseif ($toiminto == "TH") {

      unset($images_exist);
      unset($pdf_exist);
      unset($filetype);

      if ($litety_id) {
        $_lisa = " AND liitetiedostot.tunnus = $litety_id";
      }
      else {
        $_lisa = " AND kayttotarkoitus != 'TH'";
      }

      $filetype_query = "SELECT
                         yhtio,
                         selite,
                         kieli,
                         filename,
                         filesize,
                         filetype,
                         image_width,
                         image_height,
                         kayttotarkoitus,
                         if (kayttotarkoitus='TK', 0, if (kayttotarkoitus='MU', 1, 2)) sorttaus,
                         jarjestys,
                         liitostunnus
                         FROM liitetiedostot
                         WHERE yhtio          = '$kukarow[yhtio]'
                         and liitos           = 'tuote'
                         and liitostunnus     = '$tuotetunnus'
                         AND kayttotarkoitus != 'TH'
                         ORDER BY sorttaus, jarjestys, filename
                         LIMIT 1";
      $filetype_result = pupe_query($filetype_query);

      if (mysql_num_rows($filetype_result) > 0) {

        $filetype_row = mysql_fetch_assoc($filetype_result);

        if (in_array($filetype_row["filetype"], array("image/jpeg", "image/jpg", "image/gif", "image/png", "image/bmp"))) {

          $maxwidth = $filetype_row["image_width"];
          $totalheight = $filetype_row["image_height"];

          if ($maxwidth > 640) {

            $kerroin = 640/$maxwidth;

            $maxwidth = $kerroin*$maxwidth;
            $totalheight = $kerroin*$totalheight;
          }

          $maxwidth += 30;
          $totalheight += 100;

          $images_exist = 1;
        }
        elseif ($filetype_row["filetype"] == "application/pdf") {
          $maxwidth     = 0;
          $totalheight   = 0;
          $pdf_exist     = 1;
        }
      }

      if (isset($images_exist) or isset($pdf_exist)) {

        $filetype_peukalo_query = "SELECT tunnus peukalokuva, image_width, image_height
                                   FROM liitetiedostot
                                   USE INDEX (yhtio_liitos_liitostunnus)
                                   WHERE yhtio         = '$kukarow[yhtio]'
                                   AND liitos          = 'tuote'
                                   AND liitostunnus    = '$filetype_row[liitostunnus]'
                                   AND kayttotarkoitus = 'TH'
                                   AND filename        = '$filetype_row[filename]'
                                   ORDER BY tunnus DESC
                                   LIMIT 1";
        $filetype_result = pupe_query($filetype_peukalo_query);
        $filetype_peukalo_row = mysql_fetch_assoc($filetype_result);

        if ($filetype_peukalo_row["peukalokuva"] > 0) {
          $liitteet  = "<img src='".$palvelin2."view.php?id=$filetype_peukalo_row[peukalokuva]' onClick=\"javascript:liite_popup_js($tuotetunnus, $maxwidth, $totalheight)\"";

          if (!isset($thumb_size_x) or !isset($thumb_size_y)) {

            $uusi_h = 100;
            $uusi_w = 100;

            if ($filetype_peukalo_row['image_width'] > $filetype_peukalo_row['image_height']) {
              $uusi_h = ($filetype_peukalo_row['image_height'] / $filetype_peukalo_row['image_width']) * 100;
            }
            elseif ($filetype_peukalo_row['image_height'] > $filetype_peukalo_row['image_width']) {
              $uusi_w = ($filetype_peukalo_row['image_width'] / $filetype_peukalo_row['image_height']) * 100;
            }

            $liitteet .= " width='$uusi_w' ";
            $liitteet .= " height='$uusi_h' ";
          }

          $liitteet .= ">";
        }
        else {
          $liitteet = "<input type='button' value='";

          if ($pdf_exist) {
            $liitteet .= t("Pdf");
          }
          else {
            $liitteet .= t("Kuva");
          }
          $liitteet .= "' onClick=\"javascript:liite_popup_js($tuotetunnus, $maxwidth, $totalheight)\">";
        }

        return $liitteet;
      }
    }
  }
}

if (!function_exists("lue_kurssit")) {
  function lue_kurssit($file, $handle, $tyyppi = '') {
    global $yhtiorow, $kukarow;

    ini_set("auto_detect_line_endings", 1);

    // luetaan koko file arrayhyn
    $rivit = file($file);

    if ($tyyppi == 2) {
      // eka rivi pois
      array_shift($rivit);
    }
    else {
      // 2 ekaa rivi‰ pois
      array_shift($rivit);
      array_shift($rivit);
    }

    $valuutat = array();

    foreach ($rivit as $rivi) {

      if ($tyyppi == 2) {
        $valuutta      = substr($rivi, 25, 3);                                // valuutan nimi
        $vastavaluutta = substr($rivi, 28, 3);                                // vastavaluutta
        $kurssipvm_vv  = substr($rivi, 7, 4);
        $kurssipvm_kk  = substr($rivi, 11, 2);
        $kurssipvm_pp  = substr($rivi, 13, 2);
        $kurssipvm     = "$kurssipvm_vv-$kurssipvm_kk-$kurssipvm_pp";
        $kurssi        = (float) substr($rivi, 31, 13) / 10000000;                      // kurssi
      }
      else {
        $valuutta      = substr($rivi, 0, 3);                                // valuutan nimi
        $vastavaluutta = "EUR";                                        // vastavaluutta
        $kurssipvm_vv  = substr($rivi, 86, 4);
        $kurssipvm_kk  = substr($rivi, 83, 2);
        $kurssipvm_pp  = substr($rivi, 80, 2);
        $kurssipvm     = "$kurssipvm_vv-$kurssipvm_kk-$kurssipvm_pp";
        $kurssi        = (float) str_replace(array(',', ' '), array('.', ''), trim(substr($rivi, 5, 20)));  // kurssi
      }

      // ei p‰ivitet‰ jos ollaan jo p‰ivitetty tai v‰‰r‰ vastavaluutta
      if (in_array($valuutta, $valuutat) or $vastavaluutta != $yhtiorow["valkoodi"]) {
        continue;
      }

      $query = "UPDATE valuu SET
                kurssi      = round(1 / $kurssi, 9),
                muutospvm   = now(),
                muuttaja    = '{$kukarow['kuka']}'
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND nimi    = '$valuutta'";
      $result = pupe_query($query);

      // t‰m‰ valuutta on nyt p‰ivitetty!
      $valuutat[] = $valuutta;

      if (mysql_affected_rows() != 0) {
        echo "<font class='message'>P‰ivitettiin kurssi valuutalle $valuutta: ".round(1/$kurssi, 9)."</font><br>";
      }

      $query = "INSERT INTO valuu_historia (kotivaluutta, valuutta, kurssi, kurssipvm)
                VALUES ('$vastavaluutta', '$valuutta', round(1 / $kurssi, 9), '$kurssipvm')
                  ON DUPLICATE KEY UPDATE kurssi = round(1 / $kurssi, 9)";
      $result = pupe_query($query);

    }
  }
}

// textmode progress palkki
if (!function_exists("progress_bar")) {
  function progress_bar($current_item, $total_items, $bar_length = 60) {

    static $microtime_start = NULL;
    static $microtime_current = 0;
    static $microtime_current_last = 0;
    static $microtime_total = 0;
    static $microtime_remaining = 0;

    // Nollalla voi resettaa barin
    if ($current_item == 0 and $total_items == 0) {
      $microtime_start = NULL;
      $microtime_current = 0;
      $microtime_current_last = 0;
      $microtime_total = 0;
      $microtime_remaining = 0;
      return;
    }

    if ($microtime_start === NULL) {
      $timeparts = explode(" ", microtime());
      $microtime_start = $timeparts[1].substr($timeparts[0], 1);
    }

    $timeparts = explode(" ", microtime());
    $microtime_stop = $timeparts[1].substr($timeparts[0], 1);
    $current_item = ($current_item == 0) ? 1 : $current_item;

    $microtime_current = round($microtime_stop - $microtime_start, 0);
    $microtime_total = round($microtime_current / $current_item * $total_items, 0);

    // Printataan vaan sekunnin v‰lein, tai jos ollaan vikassa
    if ($microtime_current != $microtime_current_last or $current_item >= $total_items) {
      $hash = sprintf("%'#".round($current_item / $total_items * $bar_length)."s", '');

      $bar_string  = "|%-{$bar_length}s| [$current_item/$total_items]\n\n";
      $bar_string .= "  elapsed: %-{$bar_length}s\n";
      $bar_string .= "remaining: %-{$bar_length}s\n";
      $bar_string .= "    total: %-{$bar_length}s\r";
      $bar_string .= chr(27)."[4A";

      $elapsed = seconds_readable($microtime_current);
      $remaining = seconds_readable($microtime_total - $microtime_current);
      $total = seconds_readable($microtime_total);

      printf($bar_string, $hash, $elapsed, $remaining, $total);
    }

    $microtime_current_last = $microtime_current;
  }
}

if (!function_exists("pupesoft_csvstring")) {
  function pupesoft_csvstring($string) {
    // Muutetaan X -merkiksi kaikki non-printable characterit
    // Sallitaan merkit ja numerot: a-z A-Z 0-9
    // Sallitaan v‰lilyˆnti sek‰ merkit: ‰ˆÂƒ÷≈#%&,:<>@=!-^$.,|?*+()[]{}/
    return preg_replace("/([^a-zA-Z0-9 ‰ˆÂƒ÷≈#%&,:<>@=!\-\^\$\.\,\|\?\*\+\(\)\[\]\{\}\/])/", " ", $string);
  }
}

if (!function_exists("pupesoft_invoicestring")) {
  function pupesoft_invoicestring($string, $extrachars="") {
    // Muutetaan X -merkiksi kaikki non-printable characterit
    // Sallitaan merkit ja numerot: a-z A-Z 0-9 ja ÷ˆƒ‰≈Â‹¸’ı
    // Sallitaan v‰lilyˆnti sek‰ merkit: !#$%()*+,-./:;=?@_|ß

    return preg_replace("/[^A-Za-z0-9÷ˆƒ‰≈Â‹¸’ı ".preg_quote("!#$%()*+,-./:;=?@_|ß", "/")."{$extrachars}]/", " ", $string);
  }
}

if (!function_exists("pupesoft_cleanstring")) {
  function pupesoft_cleanstring($string, array $exclude = array()) {

    if (!is_numeric($string) and !is_string($string)) return "";

    $src = array("\"", "'", "<", ">", "\\", ";");

    if (!PUPE_UNICODE) {
      $rpl = array("" , "", "" , "", "", "");
    }
    else {
      $rpl = array("{DOULEPRIME}" , "{PRIME}", "" , "", "", "");
    }

    if (count($exclude) > 0) {
      foreach ($exclude as $ex) {
        $key = array_search($ex, $src);

        if ($key !== FALSE) {
          unset($src[$key]);
          unset($rpl[$key]);
        }
      }
    }

    return mysql_real_escape_string(trim(str_replace($src, $rpl, $string)));
  }
}

if (!function_exists("pupesoft_cleannumber")) {
  function pupesoft_cleannumber($string) {
    $string = str_replace(",", ".", trim($string));
    $string = preg_replace("/[^0-9\.\-]/", "", $string);

    return (float) $string;
  }
}

if (!function_exists("viivakoodi")) {
  function viivakoodi($viivakoodi, $encoding = "ean", $leveys = 180, $korkeus = 40, $teksti = "") {

    if (trim($viivakoodi) == '') return FALSE;

    $leveys = (int) $leveys;
    $korkeus = (int) $korkeus;

    if ($leveys <= 0 or $korkeus <= 0) {
      return FALSE;
    }

    $encoding = trim(strtolower($encoding));

    switch ($encoding) {
    case "ean":
    case "ean13":
    case "ean-13":
    case "ean8":
    case "ean-8":
    case "upc":
    case "upc-a":
    case "upc-e":
    case "isbn":
    case "39":
    case "code39":
    case "128c":
    case "code128c":
    case "128b":
    case "code128b":
    case "128":
    case "code128":
    case "128raw":
    case "i25":
    case "interleaved 2 of 5":
    case "cbr":
    case "codabar":
    case "msi":
    case "pls":
    case "plessey":
    case "code93":
    case "93":
      break;
    default:
      return FALSE;
    }

    $lisa = $teksti != "" ? "" : "-n";

    // Tehd‰‰n tempfilet viivakoodille ja kuvalle
    $postscript = tempnam("/tmp", "barcode-");
    $image = tempnam("/tmp", "image-");

    // Tehd‰‰n viivakoodi PostScript
    shell_exec("barcode -b \"$viivakoodi\" -e \"$encoding\" -u mm -g \"{$leveys}x{$korkeus}\" -E $lisa -o \"$postscript\" -c");

    // Ghostscript konversioon yksikkˆ kuntoon
    $leveys = round($leveys * 3.03);
    $korkeus = round($korkeus * 4.8);

    // K‰‰nnet‰‰n PostScript JPG:ksi
    shell_exec("gs -dSAFER -dBATCH -dNOPAUSE -r72x72 -g{$leveys}x{$korkeus} -sDEVICE=jpeg -sOutputFile=\"$image\" \"$postscript\"");
    // Otetaan data muuttujaan
    $data = file_get_contents($image);

    // Dellataan temp-filet
    unlink($postscript);
    unlink($image);

    return $data;
  }
}

if (!function_exists("pdf_viivakoodi")) {
  function pdf_viivakoodi($viivakoodi, $encoding = "ean", $leveys = 180, $korkeus = 40, $teksti = "") {

    if (trim($viivakoodi) == '') return FALSE;

    $leveys = (int) $leveys;
    $korkeus = (int) $korkeus;

    if ($leveys <= 0 or $korkeus <= 0) {
      return FALSE;
    }

    $encoding = trim(strtolower($encoding));

    switch ($encoding) {
    case "ean":
    case "ean13":
    case "ean-13":
    case "ean8":
    case "ean-8":
    case "upc":
    case "upc-a":
    case "upc-e":
    case "isbn":
    case "39":
    case "code39":
    case "128c":
    case "code128c":
    case "128b":
    case "code128b":
    case "128":
    case "code128":
    case "128raw":
    case "i25":
    case "interleaved 2 of 5":
    case "cbr":
    case "codabar":
    case "msi":
    case "pls":
    case "plessey":
    case "code93":
    case "93":
      break;
    default:
      return FALSE;
    }

    $lisa = $teksti != "" ? "" : "-n";

    // Tehd‰‰n tempfilet viivakoodille ja kuvalle
    $postscript = tempnam("/tmp", "barcode-");
    $image = tempnam("/tmp", "image-");

    // Tehd‰‰n viivakoodi PostScript
    shell_exec("barcode -b \"$viivakoodi\" -e \"$encoding\" -u mm -g \"{$leveys}x{$korkeus}\" -E $lisa -o \"$postscript\" -c");

    // Ghostscript konversioon yksikkˆ kuntoon
    $leveys = round($leveys * 3.03);
    $korkeus = round($korkeus * 4.8);

    // K‰‰nnet‰‰n PostScript PDF:ksi
    shell_exec("gs -dSAFER -dBATCH -dNOPAUSE -r72x72 -g629x304 -sDEVICE=pdfwrite -sOutputFile=\"$image\".pdf \"$postscript\"");

    // Dellataan temp-filet
    unlink($postscript);
    unlink($image);

    return $image.".pdf";
  }
}

if (!function_exists("tarkista_ean13")) {
  function tarkista_ean13($eankoodi) {
    // Ensiksi eankoodi muutetaan Stringiksi
    $eankoodi =(string)$eankoodi;

    $tarkistusmerkki = $eankoodi[12];

    // 1. Add the values of the digits in the even-numbered positions: 2, 4, 6, etc.
    $even_sum = substr($eankoodi, 1, 1) + substr($eankoodi, 3, 1) + substr($eankoodi, 5, 1) + substr($eankoodi, 7, 1) + substr($eankoodi, 9, 1) + substr($eankoodi, 11, 1);
    // 2. Multiply this result by 3.
    $even_sum_three = $even_sum * 3;
    // 3. Add the values of the digits in the odd-numbered positions: 1, 3, 5, etc.
    $odd_sum = substr($eankoodi, 0, 1) + substr($eankoodi, 2, 1) + substr($eankoodi, 4, 1) + substr($eankoodi, 6, 1) + substr($eankoodi, 8, 1) + substr($eankoodi, 10, 1);
    // 4. Sum the results of steps 2 and 3.
    $total_sum = $even_sum_three + $odd_sum;
    // 5. The check character is the smallest number which, when added to the result in step 4,  produces a multiple of 10.
    $next_ten = (ceil($total_sum/10))*10;
    $check_digit = $next_ten - $total_sum;

    if ($check_digit == $tarkistusmerkki) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

// T‰m‰ funktio tekee alv-popupin, jossa on yhtiˆn maan mukaiset alv%tit
if (!function_exists("alv_popup")) {
  function alv_popup($nimi, $oletus) {

    // tarvitaan yhtiˆrowta ja kukarowta
    global $yhtiorow, $kukarow;

    $ulos = "";

    $laji = "'alv'";
    $lisa = "";

    // tutkitaan ollaanko jossain alv-rekisterˆity
    $query = "SELECT group_concat(concat(\"'\",maa,\"'\") SEPARATOR ',') maat
              FROM yhtion_toimipaikat
              WHERE yhtio     = '$kukarow[yhtio]'
              and maa        != ''
              and vat_numero != ''";
    $alhire = pupe_query($query);

    // ollaan alv-rekisterˆity, haetaan oikea ALV-kanta
    if (mysql_num_rows($alhire) == 1) {
      $vrow = mysql_fetch_array($alhire);

      if ($vrow["maat"] != NULL) {
        $laji = "'alvulk', 'alv'";
        $lisa = "and ((selitetark_2 in ($vrow[maat]) and laji = 'alvulk') or laji = 'alv') ";
      }
    }

    $query = "SELECT distinct selite
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]' and laji in ($laji) $lisa
              ORDER BY selite+0, laji, jarjestys, selite";
    $vresult = pupe_query($query);

    if (mysql_num_rows($vresult) == 0) {
      echo "<font class = 'error'>".t("Yrityksen ALV%tit puuttuu!")."'$kukarow[yhtio]'</font>";
    }
    else {
      $ulos = "<select name='$nimi'>";

      while ($vrow = mysql_fetch_array($vresult)) {
        $sel = "";

        if ($oletus == $vrow['selite']) {
          $sel = "selected";
        }

        if ($vrow["selite"] >= 600) {
          $selite = "K.V.";
        }
        else {
          $selite = "$vrow[selite] %";
        }

        $ulos .= "<option value = '$vrow[selite]' $sel>$selite</option>";
      }
      $ulos .= "</select>";
    }

    return $ulos;
  }
}

if (!function_exists("alv_popup_oletus")) {
  function alv_popup_oletus($nimi, $oletus, $maa = '', $tapa = '') {

    // tarvitaan yhtiˆrowta ja kukarowta
    global $yhtiorow, $kukarow;

    $ulos = "";

    $laji = "alv";
    $lisa = "";

    // syˆtettiin maa
    if ($maa != "" and $maa != $yhtiorow["maa"]) {

      //  Otetaan pelkk‰ ulkomaan-alv lista, k‰ytet‰‰n mm. matkalaskuilla
      if ($tapa == "lista") {
        $laji = "alvulk";
        $lisa = "and selitetark_2 = '$maa'";
      }
      else {
        // tutkitaan ollaanko siell‰ alv-rekisterˆity
        $query = "SELECT *
                  FROM yhtion_toimipaikat
                  WHERE yhtio     = '$kukarow[yhtio]'
                  AND maa         = '$maa'
                  AND vat_numero != ''";
        $alhire = pupe_query($query);

        // ollaan alv-rekisterˆity, haetaan oikea ALV-kanta
        if (mysql_num_rows($alhire) == 1) {
          $laji = "alvulk";
          $lisa = "and selitetark_2 = '$maa'";
        }
      }
    }

    $query = "SELECT selite
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]' and laji = '$laji' $lisa
              ORDER BY selite+0, jarjestys, selite";
    $vresult = pupe_query($query);

    if (mysql_num_rows($vresult) == 0) {
      if ($tapa == "lista") {
        echo "<font class = 'error'>".t("Kohdemaan ALV ei m‰‰ritelty!")." '$maa'</font>";
      }
      else {
        echo "<font class = 'error'>".t("Yrityksen ALV%tit puuttuu!")." '$kukarow[yhtio]'</font>";
      }

    }
    else {

      $ulos = "<select name='$nimi'>";
      $sel = '';
      if ($oletus == '') {
        $sel = "selected";
      }
      $ulos .= "<option value = '' $sel>".t("Oletus")."</option>";

      while ($vrow = mysql_fetch_array($vresult)) {
        $sel = "";
        if ($oletus == $vrow['selite']) {
          $sel = "selected";
        }

        if ($vrow["selite"] >= 600) {
          $selite = "K.V.";
        }
        else {
          $selite = "$vrow[selite] %";
        }

        $ulos .= "<option value = '$vrow[selite]' $sel>$selite</option>";
      }
      $ulos .= "</select>";
    }
    return $ulos;
  }
}

if (!function_exists("hae_kaikki_alvit")) {
  function hae_kaikki_alvit() {
    global $kukarow;

    $query = "SELECT selite,
              selitetark,
              selitetark_2
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]' and laji = 'alv'
              ORDER BY selitetark DESC, jarjestys, selite";
    $vresult = pupe_query($query);

    $alvit = array();
    while ($alv = mysql_fetch_assoc($vresult)) {
      $alvit[] = $alv;
    }

    return $alvit;
  }
}

if (!function_exists("alv_oletus")) {
  function alv_oletus($tili = '') {
    global $kukarow;
    $ulos = 0;

    if ($tili !='') {
      $query = "SELECT oletus_alv
                FROM tili
                WHERE yhtio = '$kukarow[yhtio]' and tilino = '$tili' and oletus_alv IS NOT NULL";
      $vresult = pupe_query($query);

      if (mysql_num_rows($vresult) == 1) {
        $vrow = mysql_fetch_array($vresult);
        return $vrow['oletus_alv'];
      }
    }

    $query = "SELECT selite
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]' and laji = 'alv' and selitetark != ''";
    $vresult = pupe_query($query);

    if (mysql_num_rows($vresult) != 1) {
      echo "<font class = 'error'>".t("Yrityksen oletusALV%tit puuttuu tai niit‰ on monta!")."</font>";
    }
    else {
      $vrow = mysql_fetch_array($vresult);
      $ulos = $vrow['selite'];
    }
    return $ulos;
  }
}

if (!function_exists("tulosta_logo_pdf")) {
  function tulosta_logo_pdf($pdf, $thispage, $laskurow, $lasku_logo_positio_y=0, $lasku_logo_positio_x=0, $lasku_logo_koko_y=0, $lasku_logo_koko_x=0) {
    global $kukarow, $yhtiorow;

    $apu_yhtiorow = array();
    $apu_yhtiorow["nimi"] = $yhtiorow["nimi"];

    // varmistetaan, ett‰ kopiossakin tulee oikean toimipaikan logo
    if (isset($laskurow["eta_yhtio"]) and $laskurow["eta_yhtio"] != "") {
      $query = "SELECT *
                FROM yhtion_parametrit
                WHERE yhtio = '$laskurow[eta_yhtio]'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {
        $yhtion_parametritrow = mysql_fetch_array($result);
        $apu_yhtiorow["lasku_logo"] = $yhtion_parametritrow["lasku_logo"];
      }
    }
    elseif ((int) $laskurow["yhtio_toimipaikka"] > 0) {
      $query = "SELECT *
                FROM yhtion_toimipaikat
                WHERE yhtio     = '$kukarow[yhtio]'
                and tunnus      = '$laskurow[yhtio_toimipaikka]'
                and lasku_logo != ''";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {
        $yhtion_toimipaikkarow = mysql_fetch_array($result);
        $apu_yhtiorow["lasku_logo"] = $yhtion_toimipaikkarow["lasku_logo"];
        $apu_yhtiorow["nimi"] = $yhtion_toimipaikkarow["nimi"];
      }
    }
    elseif ($laskurow["yhtio"] != "") {
      $query = "SELECT *
                FROM yhtion_parametrit
                WHERE yhtio = '$laskurow[yhtio]'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {
        $yhtion_parametritrow = mysql_fetch_array($result);

        // Ostotilauksille aina logo k‰ytt‰j‰n toimipaikan takaa
        if (isset($kukarow["toimipaikka"]) and $kukarow["toimipaikka"] != 0 and ($laskurow["tila"] == "O" or $laskurow["tila"] == "K")) {
          $query = "SELECT lasku_logo, nimi
                    FROM yhtion_toimipaikat
                    WHERE yhtio='$laskurow[yhtio]' and tunnus='$kukarow[toimipaikka]'";
          $result = pupe_query($query);

          if (mysql_num_rows($result) == 1) {
            $yhtion_toimipaikkarow = mysql_fetch_assoc($result);

            $apu_yhtiorow["lasku_logo"] = $yhtion_toimipaikkarow["lasku_logo"];
            $apu_yhtiorow["nimi"] = $yhtion_toimipaikkarow["nimi"];
          }
        }
        else {
          $apu_yhtiorow["lasku_logo"] = $yhtion_parametritrow["lasku_logo"];
        }
      }
    }
    else {
      $apu_yhtiorow["lasku_logo"] = $yhtiorow["lasku_logo"];
    }

    unset($data);

    if (isset($apu_yhtiorow["lasku_logo"]) and (int) $apu_yhtiorow["lasku_logo"] > 0) {
      $liite = hae_liite($apu_yhtiorow["lasku_logo"], "Yllapito", "array");
      $data = $liite["data"];
      $isizelogo[0] = $liite["image_width"];
      $isizelogo[1] = $liite["image_height"];
      unset($liite);
    }
    elseif (isset($apu_yhtiorow["lasku_logo"]) and $apu_yhtiorow["lasku_logo"] != "" and file_exists($apu_yhtiorow["lasku_logo"])) {
      $filename = $apu_yhtiorow["lasku_logo"];

      $fh = fopen($filename, "r");
      $data = fread($fh, filesize($filename));
      fclose($fh);

      $isizelogo = getimagesize($apu_yhtiorow["lasku_logo"]);
    }

    if (isset($data) and $data) {
      $image = $pdf->jfif_embed($data);

      if (!$image) {
        echo t("Logokuvavirhe");
      }
      else {

        $logoparam = array();

        if ($lasku_logo_koko_y == 0 and $lasku_logo_koko_x == 0) {
          $lasku_logo_koko_y = 50;
          $lasku_logo_koko_x = 240;

          if ((int) $yhtiorow["lasku_logo_koko"] > 0) {
            $lasku_logo_koko_y = (int) $yhtiorow["lasku_logo_koko"];
          }
        }

        if ($lasku_logo_positio_y == 0 and $lasku_logo_positio_x == 0) {
          $lasku_logo_positio_y = 830;
          $lasku_logo_positio_x = 20;

          if ($yhtiorow["lasku_logo_positio"] != "") {
            if (strpos($yhtiorow["lasku_logo_positio"], "x") !== FALSE) {
              list($llp_y, $llp_x) = explode("x", trim($yhtiorow["lasku_logo_positio"]));
            }
            else {
              $llp_y = trim($yhtiorow["lasku_logo_positio"]);
              $llp_x = 0;
            }

            if ((int) $llp_y > 0) $lasku_logo_positio_y = (int) $llp_y;
            if ((int) $llp_x > 0) $lasku_logo_positio_x = (int) $llp_x;
          }
        }

        if ($isizelogo[0] > $isizelogo[1] and $isizelogo[1] * ($lasku_logo_koko_x / $isizelogo[0]) <= $lasku_logo_koko_y) {
          $logoparam['scale'] = $lasku_logo_koko_x / $isizelogo[0];
        }
        else {
          $logoparam['scale'] = $lasku_logo_koko_y  / $isizelogo[1];
        }

        # Keskelle
        if ((int) $lasku_logo_positio_x < 0) {
          $keskikohta = $lasku_logo_positio_x / 2 * -1;
          $kuvanleveys = $logoparam['scale']*$isizelogo[0];
          $lasku_logo_positio_x = round($keskikohta - ($kuvanleveys / 2));
        }

        $placement = $pdf->image_place($image, $lasku_logo_positio_y-($logoparam['scale']*$isizelogo[1]), $lasku_logo_positio_x, $thispage, $logoparam);
        return $lasku_logo_positio_y-($logoparam['scale']*$isizelogo[1]);
      }
    }
    else {

      $iso["height"] = 14;
      $iso["font"]   = "Helvetica-Bold";

      if ($laskurow["yhtio_nimi"] != "") $yhtionimi = $laskurow["yhtio_nimi"];
      elseif ($apu_yhtiorow["nimi"] != "") $yhtionimi = $apu_yhtiorow["nimi"];
      else $yhtionimi = $yhtiorow["nimi"];

      list($ff_string, $ff_font) = pdf_fontfit($yhtionimi, 270, $pdf, $iso);

      if ($lasku_logo_positio_y == 0 and $lasku_logo_positio_x == 0) {
        $lasku_logo_positio_y = 815;
        $lasku_logo_positio_x = 30;
      }

      $pdf->draw_text($lasku_logo_positio_x, $lasku_logo_positio_y, $ff_string, $thispage, $ff_font);
      return $lasku_logo_positio_y;
    }
  }
}

if (!function_exists("listdir")) {
  function listdir($start_dir = '.') {

    $files = array();

    if (is_dir($start_dir)) {

      $fh = opendir($start_dir);

      while (($file = readdir($fh)) !== false) {
        if (strcmp($file, '.') == 0 or strcmp($file, '..') == 0 or substr($file, 0, 1) == ".") {
          continue;
        }

        if (substr($start_dir, -1) != "/" and  substr($file, 0, 1) != "/") $filepath = $start_dir."/".$file;
        else $filepath = $start_dir.$file;

        if (is_dir($filepath)) {
          $mergefiles = listdir($filepath);
          if ($mergefiles !== FALSE) $files = array_merge($files, $mergefiles);
        }
        else {
          array_push($files, $filepath);
        }
      }

      closedir($fh);
      sort($files);
    }
    else {
      $files = false;
    }

    return $files;
  }
}

if (!function_exists("laskun_ja_tilauksen_vertailu")) {
  function laskun_ja_tilauksen_vertailu($kukarow, $tunnus) {

    $tunnus = (int) $tunnus;

    // haetaan liitetiedostot
    $query = "SELECT liitetiedostot.filename, liitetiedostot.data, liitetiedostot.kayttotarkoitus, liitetiedostot.liitostunnus
              FROM liitetiedostot
              WHERE liitetiedostot.yhtio         = '$kukarow[yhtio]'
              AND liitetiedostot.liitos          = 'lasku'
              AND liitetiedostot.kayttotarkoitus IN ('EDI', 'FINVOICE')
              AND liitetiedostot.liitostunnus    = '$tunnus'";
    $liite_res = pupe_query($query);

    $purchaseorder_data = $invoice_data = '';
    $noIdentifierlask = 0;

    if (mysql_num_rows($liite_res) == 0) {
      return FALSE;
    }
    elseif (mysql_num_rows($liite_res) == 1) {
      return 'ei_loydy_edia';
    }

    while ($liite_row = mysql_fetch_assoc($liite_res)) {

      // jos k‰yttˆtarkoituksessa lukee FINVOICE tai EDI, otetaan data talteen
      if ($liite_row['kayttotarkoitus'] == 'FINVOICE') {
        $invoice_data = $liite_row['data'];
      }
      elseif ($liite_row['kayttotarkoitus'] == 'EDI') {
        $purchaseorder_data = $liite_row['data'];
      }
    }

    if ($invoice_data != '' and $purchaseorder_data != '') {

      $invoice = $purchaseorder = array();

      if (!$invoice_obj = @simplexml_load_string($invoice_data)) {
        return FALSE;
      }

      $purchaseorder_tuoteno = '';
      $purchaseorder_tilausnumero = '';

      // loopataan EDI
      foreach (explode("\n", $purchaseorder_data) as $tietue) {

        // t‰‰ on futurikeisi
        if (substr($tietue, 0, 1) != '*') {
          if (strpos($tietue, ":") !== FALSE) list($tunnus, $tieto)  = explode(':', $tietue);
        }
        else {
          $tunnus = $tietue;
          $tieto  = "";
        }

        $tunnus = trim($tunnus);
        $tieto  = trim($tieto);

        if (substr($tunnus, 0, 15) == '*RE  OSTOTILRIV') {
          $tunnus='*RE  OSTOTILRIV'; // Poistetaan h‰iritsev‰ nro
        }

        switch ($tunnus) {
        case 'OSTOTILRIV.OTR_TUOTEKOODI':
          $purchaseorder_tuoteno = $tieto;
          break;
        case 'OSTOTILRIV.OTR_NIMI':
          $purchaseorder[$purchaseorder_tuoteno]['nimitys'] = $tieto;
          break;
        case 'OSTOTILRIV.OTR_TILATTUMAARA':
          if (!isset($purchaseorder[$purchaseorder_tuoteno]['tilattumaara'])) {
            $purchaseorder[$purchaseorder_tuoteno]['tilattumaara'] = (float) str_replace(",", ".", $tieto);
          }
          else {
            $purchaseorder[$purchaseorder_tuoteno]['tilattumaara'] += (float) str_replace(",", ".", $tieto);
          }
          break;
        case 'OSTOTILRIV.OTR_RIVISUMMA':
          if (!isset($purchaseorder[$purchaseorder_tuoteno]['nettohinta'])) {
            $purchaseorder[$purchaseorder_tuoteno]['nettohinta'] = (float) str_replace(",", ".", $tieto);
          }
          else {
            $purchaseorder[$purchaseorder_tuoteno]['nettohinta'] += (float) str_replace(",", ".", $tieto);
          }
          break;
        case 'OSTOTIL.OT_NRO':
          $purchaseorder_tilausnumero = $tieto;
          break;
        }
      }

      foreach ($invoice_obj->InvoiceRow as $row) {

        if (trim($row->ArticleIdentifier) != "") {
          $ai_tuoteno = (string) trim($row->ArticleIdentifier);
        }
        else {
          $ai_tuoteno = "Ei_tuotekoodia_".$noIdentifierlask;
          $noIdentifierlask++;
        }

        $invoice[$ai_tuoteno]['nimitys'] = $row->ArticleName;

        if (!isset($invoice[$ai_tuoteno]['tilattumaara'])) {
          $invoice[$ai_tuoteno]['tilattumaara'] = (float) str_replace(",", ".", $row->DeliveredQuantity);
        }
        else {
          $invoice[$ai_tuoteno]['tilattumaara'] += (float) str_replace(",", ".", $row->DeliveredQuantity);
        }

        if (!isset($invoice[$ai_tuoteno]['bruttohinta'])) {
          $invoice[$ai_tuoteno]['bruttohinta'] = (float) str_replace(",", ".", $row->UnitPriceAmount);
        }
        else {
          $invoice[$ai_tuoteno]['bruttohinta'] += (float) str_replace(",", ".", $row->UnitPriceAmount);
        }

        // voi olla monta alennusta
        foreach ($row as $child => $value) {
          if ($child == 'RowDiscountPercent') {
            $invoice[$ai_tuoteno]['ale'][] = (float) str_replace(",", ".", $value);
          }
        }

        if (!isset($invoice[$ai_tuoteno]['ale'])) $invoice[$ai_tuoteno]['ale'] = '';

        if ($row->RowAmount) {
          if (!isset($invoice[$ai_tuoteno]['nettohinta'])) {
            $invoice[$ai_tuoteno]['nettohinta'] = (float) str_replace(",", ".", $row->RowAmount);
          }
          else {
            $invoice[$ai_tuoteno]['nettohinta'] += (float) str_replace(",", ".", $row->RowAmount);
          }
        }
        else {
          $invoice[$ai_tuoteno]['nettohinta'] = 0;
        }
      }

      // mitk‰ rivit ei lˆydy laskulta, mutta lˆytyv‰t tilaukselta
      $invoice_ei_loydy     = array_diff_key($invoice, $purchaseorder);

      // mitk‰ rivit ei lˆydy tilaukselta, mutta lˆytyv‰t laskulta
      $purchaseorder_ei_loydy = array_diff_key($purchaseorder, $invoice);

      // mitk‰ rivit lˆytyv‰t kummastakin
      $loytyy_kummastakin   = array_intersect_key($invoice, $purchaseorder);

      // Ei feilata vaikka rahtiveloitus tai kuljetusvakuutus ei lˆydy tilaukselta
      if (count($invoice_ei_loydy) > 0) {
        foreach ($invoice_ei_loydy as $ei_loydytuoteno => $ei_loydy) {

          if ($ei_loydy['tilattumaara'] == 0 or strtoupper($ei_loydytuoteno) == "A-100" or strtoupper($ei_loydytuoteno) == "A-200") {
            // oletetaan ett‰ t‰m‰ on kuljetusvakuutus tms., joten laitetaan se "lˆytyviin" ett‰ vertailu-check hyv‰ksyy n‰m‰ OK:na
            $loytyy_kummastakin[$ei_loydytuoteno] = $ei_loydy;
            $purchaseorder[$ei_loydytuoteno] = $ei_loydy;

            // poistetaan se ei lˆydetyist‰
            unset($invoice_ei_loydy[$ei_loydytuoteno]);
          }
        }
      }

      return array($invoice, $purchaseorder, $invoice_ei_loydy, $purchaseorder_ei_loydy, $loytyy_kummastakin, $purchaseorder_tilausnumero);
    }
    else {
      return FALSE;
    }
  }
}

if (!function_exists('liita_tilaus_laskun_liitetiedostoksi')) {
  function liita_tilaus_laskun_liitetiedostoksi($kukarow, $yhtiorow, $liitetaanko_tilaus_laskulle_hakemisto, $tunnus, $laskun_asiakkaan_tilausnumero) {

    if (trim($liitetaanko_tilaus_laskulle_hakemisto) != '') {

      // fopen dirikka $liitetaanko_tilaus_laskulle_hakemisto eli purchaseorderit
      $files_editilaus_laskulle = listdir($liitetaanko_tilaus_laskulle_hakemisto);

      // loopataan se l‰pi
      foreach ($files_editilaus_laskulle as $files_editilaus_laskulle_x) {

        $path_parts = pathinfo($files_editilaus_laskulle_x);
        $editilaus_laskulle_polku = substr($liitetaanko_tilaus_laskulle_hakemisto, -1) !== '/' ? $liitetaanko_tilaus_laskulle_hakemisto.'/' : $liitetaanko_tilaus_laskulle_hakemisto;

        if ($editilaus_laskulle_data = file_get_contents($editilaus_laskulle_polku.$path_parts['basename'])) {

          if (strpos($editilaus_laskulle_data, "OSTOTIL.OT_NRO:".$laskun_asiakkaan_tilausnumero) !== FALSE) {

            $data  = mysql_real_escape_string($editilaus_laskulle_data);

            $query = "INSERT INTO liitetiedostot SET
                      yhtio           = '$kukarow[yhtio]',
                      liitos          = 'lasku',
                      liitostunnus    = '$tunnus',
                      data            = '$data',
                      selite          = 'Futursoft-tilaus $laskun_asiakkaan_tilausnumero',
                      kieli           = '$yhtiorow[kieli]',
                      filename        = '$path_parts[basename]',
                      filesize        = length(data),
                      filetype        = 'text',
                      image_width     = '',
                      image_height    = '',
                      image_bits      = '',
                      image_channels  = '',
                      kayttotarkoitus = 'EDI',
                      jarjestys       = '1',
                      laatija         = '$kukarow[kuka]',
                      luontiaika      = now()";
            $editilaus_laskulle_result = pupe_query($query);

            return TRUE;
          }
        }
      }

      return FALSE;

    }
    else {
      echo "<br/><font class='error'>", t("Asetuksissa on virheellinen hakemistopolku"), "!</font><br/>";
      return FALSE;
    }
  }
}

if (!function_exists("luoiban")) {
  function luoiban($tilino) {
    include "inc/pankkitiedot.inc";

    $iban = $tilino . "151800";
    $vali = "";

    for ($ind = 0; $ind < 20; $ind += 7) {
      $vali .= substr($iban, $ind, 7);
      $vali = $vali % 97;
      //echo "iban: $iban, (".substr($iban, $ind, 7).") $vali\n";
    }
    $tarkiste = 98 - $vali;
    $vastaus['iban'] = "FI" . sprintf('%02d', $tarkiste) . $tilino;

    $pankki = pankkitiedot($tilino, '');
    $vastaus['swift'] = $pankki['swift'];

    return $vastaus;
  }
}

if (!function_exists("tarkista_sepa")) {
  function tarkista_sepa($maa, $palauta_maat = '') {

    // SEPA (Single Euro Payments Area) maat ja niiden IBAN tilinumeron pituus
    $sepa_maat  = array("AL" => "28",
      "AD" => "24",
      "AT" => "20",
      "BE" => "16",
      "BA" => "20",
      "BG" => "22",
      "HR" => "21",
      "CY" => "28",
      "CZ" => "24",
      "DK" => "18",
      "EE" => "20",
      "FO" => "18",
      "FI" => "18",
      "FR" => "27",
      "GE" => "22",
      "DE" => "22",
      "GI" => "23",
      "GR" => "27",
      "GL" => "18",
      "HU" => "28",
      "IS" => "26",
      "IE" => "22",
      "IL" => "23",
      "IT" => "27",
      "KZ" => "20",
      "LV" => "21",
      "LB" => "28",
      "LI" => "21",
      "LT" => "20",
      "LU" => "20",
      "MK" => "19",
      "MT" => "31",
      "MU" => "30",
      "MC" => "27",
      "ME" => "22",
      "NL" => "18",
      "NO" => "15",
      "PL" => "28",
      "PT" => "25",
      "RO" => "24",
      "SM" => "27",
      "SA" => "24",
      "RS" => "22",
      "SK" => "24",
      "SI" => "19",
      "ES" => "24",
      "SE" => "24",
      "CH" => "21",
      "TN" => "24",
      "TR" => "26",
      "GB" => "22");

    if ($palauta_maat == 'K') {
      // Palautetaan kaikki SEPA-maat
      return array_keys($sepa_maat);
    }
    // Maa ei ole sepa maa, palautetaan FALSE
    elseif (!isset($sepa_maat[$maa])) {
      return FALSE;
    }
    else {
      // Palautetaan IBAN:in pituus, jos on SEPA maa
      return $sepa_maat[$maa];
    }
  }
}

if (!function_exists("tarkista_iban")) {
  function tarkista_iban($tilino) {
    global $yhtiorow;

    if (strtoupper($yhtiorow["maa"]) != "FI") {
      return $tilino;
    }

    // Calculating and validating IBAN checksums:

    // 1. Check that the total IBAN length is correct as per the country. If not, the IBAN is invalid.
    // 2. Move the four initial characters to the end of the string.
    // 3. Replace each letter in the string with two digits, thereby expanding the string, where A=10, B=11, ..., Z=35.
    // 4. Interpret the string as a decimal integer and compute the remainder of that number on division by 97.

    // The IBAN number can only be valid if the remainder is 1.

    $tilino      = strtoupper(str_replace(" ", "", $tilino));  // Kirjaimet isoksi ja spacet pois
    $maa      = substr($tilino, 0, 2);
    $pituus      = strlen($tilino);
    $oikea_pituus  = tarkista_sepa($maa);

    // Maa ei ole sallittu SEPA maa
    if ($oikea_pituus === FALSE) {
      return "";
    }

    // Tilinumeron pituus on v‰‰r‰
    if ($pituus != $oikea_pituus) {
      return "";
    }

    // Siirret‰‰n nelj‰ ensimm‰ist‰ merkki‰ tilinumeron loppuun
    $chk_tilinumero = substr($tilino, 4).substr($tilino, 0, 4);
    $chk_tilinumeronumeric = "";

    // Muutetaan kirjaimet numeroiksi (A = 10, B = 11, C = 12, jne...)
    for ($i = 0; $i < $pituus; $i++) {
      if (is_numeric($chk_tilinumero{$i})) {
        $chk_tilinumeronumeric .= $chk_tilinumero{$i};
      }
      else {
        $chk_tilinumeronumeric .= ord($chk_tilinumero{$i}) - 55;
      }
    }

    // Poistetaan stringist‰ etunollat
    $chk_tilinumeronumeric = ltrim($chk_tilinumeronumeric, "0");

    // Lasketaan MOD-97
    $mod = 0;
    $pituus = strlen($chk_tilinumeronumeric);

    for ($i = 0; $i < $pituus; $i++) {
      $numero = (int) $chk_tilinumeronumeric{$i};
      $mod = (($mod * 10) + $numero) % 97;
    }

    // Jos tulos ei ole yksi, niin tilinumero on v‰‰rin
    if ($mod != 1) {
      return "";
    }

    // Tilinumero on oikein!
    return $tilino;
  }
}

if (!function_exists("tarkista_oikeus")) {
  function tarkista_oikeus($ohjelma, $alanimi = '', $paivitys = '', $return = '', $toimi_array = "") {
    global $kukarow;

    $alanimet = array();
    $loytyi = false;

    if ($toimi_array) {
      $alias_alanimi = $alanimi;

      if (!empty($toimi_array[1])) {
        $alias_alanimi .= "!!!{$toimi_array[1]}";

        if (!empty($toimi_array[2])) {
          $alias_alanimi .= "!!!{$toimi_array[2]}";
        }
      }

      array_push($alanimet, $alias_alanimi);
    }

    $ohjelma = mysql_real_escape_string(trim($ohjelma));
    $alanimi = mysql_real_escape_string(trim($alanimi));

    array_push($alanimet, $alanimi);

    foreach ($alanimet as $alanimi) {
      $querylisa = "";

      if (strpos($alanimi, "%") !== FALSE) {
        $alanimi = substr($alanimi, 0, -1);

        $querylisa .= " AND (alanimi = '$alanimi' or alanimi like '$alanimi!!!%')";
      }
      elseif ($alanimi != "") {
        // Luetaan alanime‰ vain ekaan &-merkkiin saakka koska joskus kantaan on tallennettu myˆs jotain lis‰tietoja toisessa muuttujassa
        $querylisa = " AND substring(alanimi, 1, if(LOCATE('&', alanimi) > 0, LOCATE('&', alanimi) - 1, CHAR_LENGTH(alanimi))) = '$alanimi'";
      }
      else {
        $querylisa .= " AND alanimi = '' ";
      }

      if ($paivitys != "") {
        $querylisa .= " AND paivitys = '1' ";
      }

      $query = "SELECT *
                FROM oikeu
                WHERE yhtio = '$kukarow[yhtio]'
                AND kuka    = '$kukarow[kuka]'
                AND nimi    LIKE '%$ohjelma'
                $querylisa
                ORDER BY length(alanimi)";
      $res = pupe_query($query);

      if (mysql_num_rows($res) > 0) {
        $loytyi = true;

        break;
      }
    }

    if ($loytyi) {
      if ($return != "") {
        return mysql_fetch_array($res);
      }

      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

if (!function_exists("mod11_tarkiste")) {
  function mod11_tarkiste($numero) {

    $tulos = "";
    $painoarvo = array( 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7 );

    // K‰‰nnet‰‰n stringi takaperin
    $numero_rev = strrev($numero);

    for ($i = 0, $summa = 0; $i < strlen($numero_rev); $i++) {
      // Lasketaan tulo ja kumuloidaan
      $summa += substr($numero_rev, $i, 1 ) * $painoarvo[$i];
    }

    // lasketaan tarkiste ja konkatenoidaan peruslukuun
    $jaannos = $summa % 11;

    switch ($jaannos) {
    case 0:
      $tulos = $numero . 0;
      break;
    case 1:
      $tulos = $numero . 0;
      break;
    default:
      $tulos = $numero . (11 - $jaannos);
      break;
    }

    return $tulos;
  }
}

if (!function_exists("tarkista_viite")) {
  function tarkista_viite($viite) {

    // otetaan sis‰‰n $viite muuttuja
    // palautetaan TRUE jos viite on ok, muutoin FALSE
    // sallitaan viitteess‰ vaan numerot 0-9

    if (!is_numeric($viite)) {
      return FALSE;
    }

    $kerroin = 7;
    $tulo    = 0;

    for ($i = 2; $i <= strlen($viite); $i++) {

      $merkki = substr($viite, -1 * $i, 1);
      $tulo += $kerroin * $merkki;

      switch ($kerroin) {
      case 7:
        $kerroin = 3;
        break;
      case 3:
        $kerroin = 1;
        break;
      case 1:
        $kerroin = 7;
        break;
      }
    }

    $tmerkki = substr($viite, -1);
    $tulo = substr($tulo, -1) + 0;

    if ($tulo != 0) {
      $tulo = 10 - $tulo;
    }

    if ($tulo == $tmerkki) {
      return TRUE;
    }

    return FALSE;
  }
}

if (!function_exists("generoi_rfviite")) {
  function generoi_rfviite($laskunumero) {

    // Tehd‰‰n laskunumerosta ensin vanha suomalainen viite
    $viite   = ltrim(preg_replace("/[^0-9]/", "", $laskunumero), "0");
    $kerroin = 7;
    $tulo    = 0;

    for ($i = 1; $i <= strlen($viite); $i++) {

      $merkki = substr($viite, -1 * $i, 1);
      $tulo += $kerroin * $merkki;

      switch ($kerroin) {
      case 7:
        $kerroin = 3;
        break;
      case 3:
        $kerroin = 1;
        break;
      case 1:
        $kerroin = 7;
        break;
      }
    }

    $tulo = substr($tulo, -1) + 0;

    if ($tulo != 0) {
      $tulo = 10 - $tulo;
    }

    $viite .= $tulo;

    // Generoidaan viitteest‰ RF-viite
    $rf_viite = $viite."271500";

    // Lasketaan MOD-97
    $mod = 0;
    $pituus = strlen($rf_viite);

    for ($i = 0; $i < $pituus; $i++) {
      $numero = (int) $rf_viite{$i};
      $mod = (($mod * 10) + $numero) % 97;
    }

    $tarkiste = 98 - $mod;
    $tarkiste = sprintf('%02d', $tarkiste); // Esitet‰‰n kahdella merkill‰

    return "RF".$tarkiste.$viite;
  }

}

if (!function_exists("tarkista_rfviite")) {
  function tarkista_rfviite($viite) {

    // Poistetaan v‰lilyˆnnit
    $viite  = str_replace(" ", "", $viite);
    $pituus = strlen($viite);

    // Siirret‰‰n nelj‰ ensimm‰ist‰ merkki‰ tilinumeron loppuun
    $chk_viite = substr($viite, 4).substr($viite, 0, 4);
    $chk_viitenumeric = "";

    // Muutetaan kirjaimet numeroiksi (A = 10, B = 11, C = 12, jne...)
    for ($i = 0; $i < $pituus; $i++) {
      if (is_numeric($chk_viite{$i})) {
        $chk_viitenumeric .= $chk_viite{$i};
      }
      else {
        $chk_viitenumeric .= ord($chk_viite{$i}) - 55;
      }
    }

    // Poistetaan stringist‰ etunollat
    $chk_viitenumeric = ltrim($chk_viitenumeric, "0");

    // Lasketaan MOD-97
    $mod = 0;
    $pituus = strlen($chk_viitenumeric);

    for ($i = 0; $i < $pituus; $i++) {
      $numero = (int) $chk_viitenumeric{$i};
      $mod = (($mod * 10) + $numero) % 97;
    }

    // Jos tulos ei ole yksi, niin viite on v‰‰rin
    if ($mod != 1) {
      return FALSE;
    }

    // Viite on oikein!
    return TRUE;
  }
}

if (!function_exists("tarkista_bic")) {
  function tarkista_bic($bic) {
    global $yhtiorow;

    if ($yhtiorow["maa"] != "FI") {
      return TRUE;
    }

    preg_match("/^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$/", $bic, $matches);

    if ($matches[0] == "") {
      // BIC on v‰‰rin!
      return FALSE;
    }

    // BIC on oikein!
    return TRUE;
  }
}

if (!function_exists("tarkista_bban")) {
  function tarkista_bban($bban) {
    global $yhtiorow;

    if ($yhtiorow["maa"] != "FI") {
      return TRUE;
    }

    preg_match("/^[a-zA-Z0-9]{1,30}$/", $bban, $matches);

    if ($matches[0] == "") {
      // BBAN on v‰‰rin!
      return FALSE;
    }

    // BBAN on oikein!
    return TRUE;
  }
}

if (!function_exists("asiakashakuohje")) {
  function asiakashakuohje() {
    global $palvelin2;

    echo "<div id='div_asiakashakuohje' class='popup' style='width: 300px'>
      <table>
      <tr><th>".t("Asiakasta voi etsi‰").":</th></tr>
      <tr><td>".t("Nimell‰")."</td></tr>
      <tr><td>".t("Nimitarkenteella")."</td></tr>
      <tr><td>".t("Toimitusosoitteen nimell‰")."</td></tr>
      <tr><td>".t("Toimitusosoitteen nimitarkenteella")."</td></tr>
      <tr><td>".t("Ytunnuksella")."</td></tr>
      <tr><td>".t("Asiakasnumerolla")."</td></tr>
      <tr><td>".t("OVT-tunnuksella")."</td></tr>
      <tr><td>".t("Toimitusosoitteen OVT-tunnuksella")."</td></tr>
      <tr><td>".t("Kantaasiakastunnuksella")."</td></tr>
      </table>
      </div>";

    // jos eka merkki on # etsit‰‰n toimitusnimen perusteella
    // jos eka merkki on * etsit‰‰n laskuilta asiakastietoja nimell‰
    // jos eka merkki £ etsit‰‰n tilausnumerolla

    echo "<img class='tooltip' id='asiakashakuohje' src='{$palvelin2}pics/lullacons/info.png'>";
  }
}

// Funktio lis‰‰ tuotteenalkion dynaamiseen puuhun.
if (!function_exists("TuotteenAlkiot")) {
  function TuotteenAlkiot($laji, $liitos, $puun_tunnus, $kieli, $mista = '') {
    global $kukarow, $yhtiorow;

    $mista = empty($mista) ? $laji : $mista;

    $kieli = !empty($kieli) ? $kieli : $yhtiorow['kieli'];

    $qu = "INSERT INTO puun_alkio
           SET yhtio  = '$kukarow[yhtio]',
           liitos      = '$liitos',
           laji        = '$laji',
           kutsuja     = '{$mista}',
           puun_tunnus = '$puun_tunnus',
           kieli       = '$kieli',
           laatija     = '$kukarow[kuka]',
           luontiaika  = now()
           ON DUPLICATE KEY UPDATE
           muuttaja    = '$kukarow[kuka]',
           muutospvm   = now()";
    $r = pupe_query($qu);
  }
}

if (!function_exists("LisaaTaso")) {
  function LisaaTaso($laji, $left, $koodi , $nimi) {
    global $kukarow;

    // laji pit‰‰ olla aina pienell‰, muuten Rails modeli ei toimi
    $laji = strtolower($laji);

    // Funktio mahdollistaa lis‰‰m‰‰n tason mihin tahansa v‰liin.
    $qu = "LOCK TABLE dynaaminen_puu WRITE";
    $re = pupe_query($qu);

    // Haetaan valitun tason tiedot
    $q2 = "SELECT @myRight := rgt, @myLeft := lft
           FROM dynaaminen_puu
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND lft     = '$left'";
    $re = pupe_query($q2);

    // P‰vitet‰‰n kaikki nodet, jotka on uuden noden oikealla puolella kaksi pyk‰l‰‰ oikealle (vasen puoli)
    $qu = "UPDATE dynaaminen_puu set
           lft = lft + 2,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND lft     > @myRight
           ORDER BY lft desc";
    $re = pupe_query($qu);

    // P‰vitet‰‰n kaikki nodet joiden oikea laita on uuden noden oikealla puolella kaksi pyk‰l‰‰ oikealle (oikea puoli)
    $qu = "UPDATE dynaaminen_puu set
           rgt = rgt + 2,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND rgt     >= @myRight
           ORDER BY rgt desc";
    $re = pupe_query($qu);

    // P‰ivitet‰‰n valitun tason leftit pyk‰l‰‰ oikealle, jotta uusi taso mahtuu mukaan
    $qu = "UPDATE dynaaminen_puu set
           lft = lft + 1,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND lft     > @myLeft
           AND lft     < @myRight
           ORDER BY lft desc";
    $re = pupe_query($qu);

    // P‰ivitet‰‰n valitun tason rightit pyk‰l‰‰ oikealle, jotta uusi taso mahtuu mukaan
    $qu = "UPDATE dynaaminen_puu set
           rgt = rgt + 1,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND lft     > @myLeft
           AND lft     < @myRight
           ORDER BY rgt desc";
    $re = pupe_query($qu);

    $qu = "INSERT INTO dynaaminen_puu
    (
      yhtio,
      koodi,
      nimi,
      lft,
      rgt,
      laji,
      laatija,
      luontiaika
    )
    values
    (
      '$kukarow[yhtio]',
      '{$koodi}',
      '{$nimi}',
      @myLeft + 1 ,
      @myRight + 1,
      '$laji',
      '$kukarow[kuka]',
      now()
    )";
    $re = pupe_query($qu);

    $qu = "UNLOCK TABLES";
    $re = pupe_query($qu);

  }
}

if (!function_exists("LisaaPaaKat")) {
  function LisaaPaaKat($laji, $nimi) {
    global $kukarow;

    // laji pit‰‰ olla aina pienell‰, muuten Rails modeli ei toimi
    $laji = strtolower($laji);

    $qu = "INSERT INTO dynaaminen_puu
    (
      yhtio,
      nimi,
      lft,
      rgt,
      laji,
      laatija,
      luontiaika
    )
    VALUES
    (
      '$kukarow[yhtio]',
      '$nimi',
      1,
      2,
      '$laji',
      '$kukarow[kuka]',
      now()
    )";
    $re = pupe_query($qu);
  }
}

if (!function_exists("LisaaLapsi")) {
  function LisaaLapsi($laji, $left, $syvyys, $koodi, $nimi, $nimi_en) {
    global $kukarow;

    // laji pit‰‰ olla aina pienell‰, muuten Rails modeli ei toimi
    $laji = strtolower($laji);

    if ($left == 1) {
      // mik‰li is‰ on root, niin lis‰t‰‰n sille alakat
      $apu   = " and rgt >= @myRight";
      $apu2   = " @myRight , @myRight + 1";
      $apu3   = " @myRight := rgt ";
      $apu4   = " and lft > @myRight";
    }
    elseif ($syvyys >= 1) {
      // lis‰t‰‰n alakategorialle lapsi
      $apu   = " and rgt > @myLeft";
      $apu2   = " @myLeft +1 , @myLeft + 2";
      $apu3   = " @myLeft := lft ";
      $apu4   = " and lft > @myLeft";
    }
    else {
      //alakat lapsen lis‰ys
      $apu   = " and rgt > @myRight";
      $apu2   = " @myRight + 1, @myRight + 2";
      $apu3   = " @myRight := rgt ";
      $apu4   = " and lft > @myRight";
    }

    $qu = "LOCK TABLE dynaaminen_puu WRITE";
    $re = pupe_query($qu);

    $qu = "SELECT $apu3
           FROM dynaaminen_puu
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           AND lft     = '$left'";
    $re = pupe_query($qu);

    $qu = "UPDATE dynaaminen_puu SET
           rgt = rgt + 2,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           $apu
           ORDER BY rgt desc";
    $re = pupe_query($qu);

    $qu = "UPDATE dynaaminen_puu SET
           lft = lft + 2,
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '$laji'
           $apu4
           ORDER BY lft desc";
    $re = pupe_query($qu);

    $qu = "INSERT INTO dynaaminen_puu
    (
      yhtio,
      nimi,
      nimi_en,
      koodi,
      lft,
      rgt,
      syvyys,
      laji,
      laatija,
      luontiaika
    )
    VALUES
    (
      '$kukarow[yhtio]',
      '$nimi',
      '$nimi_en',
      '$koodi',
      $apu2,
      $syvyys + 1,
      '$laji',
      '$kukarow[kuka]',
      now()
    )";
    $re = pupe_query($qu);

    $qu = "UNLOCK TABLES";
    $re = pupe_query($qu);

    // palautetaan juuri luodun rivin tiedot
    $qu = "SELECT tunnus, nimi, nimi_en, koodi, lft, rgt FROM dynaaminen_puu WHERE yhtio = '$kukarow[yhtio]' AND laji = '$laji' AND koodi = '$koodi' AND nimi = '$nimi'";
    $re = pupe_query($qu);
    $row = mysql_fetch_assoc($re);
    return $row;
  }
}

if (!function_exists("PoistaLapset")) {
  function PoistaLapset($laji, $left) {
    global $kukarow;

    if ($left == 1) {
      echo "<p><font class='error'>", t('Et Voi poistaa p‰‰kategoriaa'), " !!!</font></p>";
    }
    else {
      $qu = "LOCK TABLE dynaaminen_puu WRITE";
      $re = pupe_query($qu);

      // Haetaan poistettavan noden tiedot
      $qu = "SELECT @myLeft := lft, @myRight := rgt, @myWidth := rgt - lft + 1
             FROM dynaaminen_puu
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             AND lft     = '$left'";
      $re = pupe_query($qu);

      // Poistetaan se
      $qu = "DELETE FROM dynaaminen_puu
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             and lft     = @myLeft";
      $re = pupe_query($qu);

      // P‰ivitet‰‰n poistettavan noden lapset pyk‰l‰‰ vasemmalle
      $qu = "UPDATE dynaaminen_puu SET
             rgt = rgt - 1
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             AND lft between @myLeft and @myRight
             ORDER BY rgt";
      $re = pupe_query($qu);

      // P‰ivitet‰‰n poistettavan noden lapset pyk‰l‰‰ vasemmalle
      $qu = "UPDATE dynaaminen_puu SET
             lft = lft - 1,
             muutospvm = now(),
             muuttaja = '$kukarow[kuka]'
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             AND lft between @myLeft and @myRight
             ORDER BY lft";
      $re = pupe_query($qu);

      // P‰ivitet‰‰n poistetun noden oikealta puolelta lˆytyv‰t nodet vasemalle
      $qu = "UPDATE dynaaminen_puu SET
             rgt = rgt - 2,
             muutospvm = now(),
             muuttaja = '$kukarow[kuka]'
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             AND rgt     > @myRight
             ORDER BY rgt";
      $re = pupe_query($qu);

      // P‰ivitet‰‰n poistetun noden oikealta puolelta lˆytyv‰t nodet vasemalle
      $qu = "UPDATE dynaaminen_puu SET
             lft = lft - 2,
             muutospvm = now(),
             muuttaja = '$kukarow[kuka]'
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '$laji'
             AND lft     > @myRight
             ORDER BY lft";
      $re = pupe_query($qu);

      $qu = "UNLOCK TABLES";
      $re = pupe_query($qu);
    }
  }
}

// Funktio joka palauttaa valitun kategorian alakategorioiden lukum‰‰r‰n, k‰ytet‰‰n syvyyden m‰‰rittelyss‰
if (!function_exists("lapset")) {
  function lapset($laji, $left) {
    global $kukarow;

    $qu = "SELECT node.tunnus, (COUNT(parent.tunnus) - (sub_tree.depth + 1)) AS depth
           FROM dynaaminen_puu AS node
           JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft)
           JOIN (  SELECT node.tunnus AS tunnus, (COUNT(parent.tunnus) - 1) AS depth
               FROM dynaaminen_puu AS node
               JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft)
               WHERE node.yhtio = '{$kukarow["yhtio"]}'
               AND node.laji    = '$laji'
               AND node.lft     = '$left'
               GROUP BY node.tunnus
               ORDER BY node.lft) AS sub_tree
           JOIN dynaaminen_puu AS sub_parent ON (sub_parent.yhtio = node.yhtio AND sub_parent.laji = node.laji AND sub_parent.tunnus = sub_tree.tunnus AND sub_parent.lft <= node.lft AND sub_parent.rgt >= node.lft)
           WHERE node.yhtio     = '{$kukarow["yhtio"]}'
           AND node.laji        = '$laji'
           GROUP BY node.tunnus
           ORDER BY node.lft";
    $re = pupe_query($qu);

    return mysql_num_rows($re);
  }
}

// Funktio joka p‰ivitt‰‰ valitun kategorian valitulle nimelle
if (!function_exists("paivitakat")) {
  function paivitakat($laji, $koodi, $nimi, $kategoriaid, $nimi_en) {
    global $kukarow;

    $qu = "LOCK TABLE dynaaminen_puu WRITE";
    $re = pupe_query($qu);

    $qu = "UPDATE dynaaminen_puu set
           nimi='{$nimi}',
           nimi_en='{$nimi_en}',
           koodi='{$koodi}',
           muutospvm = now(),
           muuttaja = '$kukarow[kuka]'
           where yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '{$laji}'
           AND tunnus  = '{$kategoriaid}'";
    $re = pupe_query($qu);

    $qu = "UNLOCK TABLES";
    $re = pupe_query($qu);
  }
}

// muuttaa left/right arvoja muutos -muuttujan verran $kohdevas -muuttujasta ylospain
if (!function_exists("muutaOksienRL")) {
  function muutaOksienRL($laji, $kohdevas, $muutos) {
    global $kukarow;

    $qu = "UPDATE dynaaminen_puu SET
           lft = lft+{$muutos}
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '{$laji}' and lft >= '{$kohdevas}'";
    $re = pupe_query($qu);

    $qu = "UPDATE dynaaminen_puu SET
           rgt = rgt+{$muutos}
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '{$laji}'
           and rgt     >= '{$kohdevas}'";
    $re = pupe_query($qu);
  }
}

// muuttaa left/right arvoja muutos -muuttujan verran $src[lft]:n ja $src[rgt]:n valilla
if (!function_exists("muutaOksavalinRL")) {
  function muutaOksavalinRL($laji, $src, $muutos) {
    global $kukarow;

    $qu = "UPDATE dynaaminen_puu SET
           lft = lft+{$muutos}
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '{$laji}'
           AND lft     >= {$src['lft']}
           AND lft     <= {$src['rgt']}";
    $re = pupe_query($qu);

    $qu = "UPDATE dynaaminen_puu SET
           rgt = rgt+{$muutos}
           WHERE yhtio = '{$kukarow["yhtio"]}'
           AND laji    = '{$laji}'
           AND rgt     >= {$src['lft']}
           AND rgt     <= {$src['rgt']}";
    $re = pupe_query($qu);
  }
}

// siirretaan puun oksaa, $src:ssa tulee lahteen lft/rgt ja $kohde on kohde-noden lft -arvo
if (!function_exists("siirraOksa")) {
  function siirraOksa($laji, $src, $kohde) {
    global $kukarow;

    // lasketaan siirrettavan haaran koko
    $haarakoko = $src['rgt']-$src['lft']+1;

    // tehdaan kohteeseen tilaa ja lisataan kohteen l-arvon oik. puolelle lahdehaaran koon verran
    muutaOksienRL($laji, $kohde, $haarakoko);

    // jos lahdetta on siirretty niin tehdaan sama muutos muuttujiin
    if ($src['lft'] >= $kohde) {
      $src['lft'] += $haarakoko;
      $src['rgt'] += $haarakoko;
    }

    // siirretaan lahdehaara kohteen tilalle
    muutaOksavalinRL($laji, $src, $kohde-$src['lft']);

    // korjataan siirrosta aiheutunut loppupuun venyminen
    muutaOksienRL($laji, $src['rgt']+1, -$haarakoko);
  }
}

// Siirr‰ puun haaraa j‰rjestyksess‰ ylˆs tai alasp‰in
if (!function_exists("SiirraTaso")) {
  function SiirraTaso($laji, $src, $suunta) {
    global $kukarow;

    if ($suunta == 'ylos') {

      $qu = "SELECT lft, rgt
             FROM dynaaminen_puu
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '{$laji}'
             AND rgt     = {$src['lft']} - 1";
      $re = pupe_query($qu);
      $kohde = mysql_fetch_array($re);

      if ($kohde['lft'] == '' or $kohde['rgt'] == '') return "fail";
      siirraOksa($laji, $src, $kohde['lft']);
    }
    if ($suunta == 'alas') {

      $qu = "SELECT lft, rgt
             FROM dynaaminen_puu
             WHERE yhtio = '{$kukarow["yhtio"]}'
             AND laji    = '{$laji}'
             AND lft     = {$src['rgt']} + 1";
      $re = pupe_query($qu);
      $kohde = mysql_fetch_array($re);

      if ($kohde['lft'] == '' or $kohde['rgt'] == '') return "fail";
      siirraOksa($laji, $src, $kohde['rgt']+1);
    }

    return $kohde;

  }
}

// Tarkistaa onko dynaamisen puun syvyys oikein ja paivittaa tarvittaessa
if (!function_exists("paivitapuunsyvyys")) {
  function paivitapuunsyvyys($laji) {
    global $kukarow;

    $qu = "SELECT
           node.lft AS lft,
           node.rgt AS rgt,
           node.syvyys AS node_syvyys,
           min(node.tunnus) AS node_tunnus,
           (COUNT(node.tunnus) - 1) AS syvyys
           FROM dynaaminen_puu AS node
           JOIN dynaaminen_puu AS parent ON (node.yhtio = parent.yhtio
            AND node.laji = parent.laji
            AND node.lft BETWEEN parent.lft AND parent.rgt)
           WHERE node.yhtio = '{$kukarow["yhtio"]}'
           AND node.laji = '{$laji}'
           GROUP BY lft, rgt, node_syvyys
           ORDER BY lft";
    $re = pupe_query($qu);

    while ($row = mysql_fetch_assoc($re)) {
      if ($row["node_syvyys"] != $row["syvyys"]) {
        $updqu = "UPDATE dynaaminen_puu SET
                  syvyys = {$row["syvyys"]}
                  WHERE yhtio = '{$kukarow["yhtio"]}'
                  AND laji    = '{$laji}'
                  AND tunnus  = {$row["node_tunnus"]}";
        $updateres = pupe_query($updqu);
      }

      $params = array(
        'laji'   => $laji,
        'lft'    => $row['lft'],
        'rgt'    => $row['rgt'],
        'tunnus' => $row['node_tunnus'],
      );

      paivita_puun_parent($params);
    }

    return;
  }
}

if (!function_exists("paivita_puun_parent")) {
  function paivita_puun_parent($params) {
    global $yhtiorow, $kukarow;

    $node_laji   = $params['laji'];
    $node_left   = $params['lft'];
    $node_right  = $params['rgt'];
    $node_tunnus = $params['tunnus'];

    if (empty($node_laji) or empty($node_left) or empty($node_right) or empty($node_tunnus)) {
      die("invalid params");
    }

    // haetaan noden parentin id
    $query = "SELECT dynaaminen_puu.tunnus AS parent_id
              FROM dynaaminen_puu
              WHERE dynaaminen_puu.yhtio = '{$kukarow['yhtio']}'
              AND dynaaminen_puu.laji = '{$node_laji}'
              AND dynaaminen_puu.lft < {$node_left}
              AND dynaaminen_puu.rgt > {$node_right}
              AND dynaaminen_puu.tunnus != {$node_tunnus}
              ORDER BY dynaaminen_puu.lft DESC
              LIMIT 1";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $row = mysql_fetch_assoc($result);
      $parent_id = $row['parent_id'];
    }
    else {
      $parent_id = 'NULL';
    }

    $query = "UPDATE dynaaminen_puu SET
              parent_id = {$parent_id}
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus = {$node_tunnus}";
    pupe_query($query);
  }
}

if (!function_exists("laskutuspaiva")) {
  function laskutuspaiva($mika, $arki = FALSE, $seuraava_kk = 0) {

    $seuraavalaskutus = date('Y-m-d');

    if ($mika == 'eka') {
      // Eka
      $ekapaiva = date('N', mktime(0, 0, 0, (date('m')+$seuraava_kk), 1, date('Y')));

      if ($arki and $ekapaiva > 5) {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+$seuraava_kk), (1+(8-$ekapaiva)), date('Y')));
      }
      else {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+$seuraava_kk), 1, date('Y')));
      }
    }
    elseif ($mika == 'keski') {
      // Keskimm‰inen
      $keskipaiva = date('N', mktime(0, 0, 0, (date('m')+$seuraava_kk), round(date('t')/2), date('Y')));

      if ($arki and $keskipaiva > 5) {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+$seuraava_kk), round(date('t')/2)+(8-$keskipaiva), date('Y')));
      }
      else {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+$seuraava_kk), round(date('t')/2), date('Y')));
      }
    }
    elseif ($mika == 'vika') {
      // Vika
      $vikapaiva = date('N', mktime(0, 0, 0, (date('m')+1), 0, date('Y')));

      if ($arki and $vikapaiva == 7) {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+1), -2, date('Y')));
      }
      elseif ($arki and $vikapaiva == 6) {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+1), -1, date('Y')));
      }
      else {
        $seuraavalaskutus = date('Y-m-d', mktime(0, 0, 0, (date('m')+1), 0, date('Y')));
      }
    }

    return $seuraavalaskutus;
  }
}

if (!function_exists("pupe_DataTablesEchoSort")) {
  function pupe_DataTablesEchoSort($string) {
    return "<span class='dataTablesSpecial'><!--".sprintf("%015s", $string)."--></span>";
  }
}

if (!function_exists("pupe_DataTables")) {
  function pupe_DataTables($parametrit) {
    global $yhtiorow;

    preg_match("/.*?\/\*(.*?(OK_COLOR))\*\//", $yhtiorow['active_css'], $varitmatch);
    preg_match("/(#[a-f0-9]{3,6});/i", $varitmatch[0], $varirgb);

    $json_pass = array();

    // Luetaan taulujen parametrit ja vied‰‰n ne javascriptille...
    foreach ($parametrit as $param) {

      $taulu      = $param[0];
      $sarakkeetVis  = $param[1];
      $sarakkeetTot  = $param[2];
      $paginate     = isset($param[3]) ? $param[3] : "false";
      $info       = isset($param[4]) ? $param[4] : "false";
      $sorting     = isset($param[5]) ? $param[5] : "true";
      $aoColumns     = "";
      $tyojonostatushakukentta = $param[6];
      $paginationtype = $paginate !== false ? "full_numbers" : "two_button";

      $json_pass[$taulu] = array($sarakkeetVis, $sarakkeetTot, $paginate, $paginationtype, $info, $sorting, $tyojonostatushakukentta);
    }

    preg_match("/.*?\/\*(.*?(OK_COLOR))\*\//", $yhtiorow['active_css'], $varitmatch);
    preg_match("/(#[a-f0-9]{3,6});/i", $varitmatch[0], $varirgb);

    echo "<script type=\"text/javascript\" charset=\"utf-8\">

      $(document).ready(function() {

        $('input[id^=\"massaesiin_\"]').live('click', function() {
          var keijo = $(this).attr('id').substring(11);
            $('#massalisa_'+keijo).toggle();
          });

        $('input[name^=\"rivi_valitut_tunnukset\"]').each(function() {
          $(this).attr('disabled', false);
        });

        var datatablesit = [];
        var parametrit    = ".json_encode($json_pass).";
        var spessusortit = [];

        // Loopataan l‰pi kaikki datatablesit
        $('.dataTable').each(function(t) {

          var tableid = $(this).attr(\"id\");
          var sarake  = 0;

          // K‰yd‰‰n l‰pi ne sarakkeet jossa on kutsuttu pupe_DataTablesEchoSort-funkkaria
          $('#'+tableid+' > tbody > tr:first-child > td').each(function() {
            if ($(this).children('span.dataTablesSpecial').length > 0)†{
              spessusortit[sarake] = true;
            }
            else {
              spessusortit[sarake] = false;
            }
            sarake++;
          });

          var aoColumns = [];

          for (var i = 1; i <= parametrit[tableid][0]; i++) {
            // Keikalla eka sarake on kohdistusnappula....
            if (i == 1 && tableid == \"keikka\") {
              aoColumns[i-1] = {\"bSortable\": true, \"bSearchable\": false, \"sWidth\": \"20px\"};
            }
            else if (spessusortit[i-1]) {
              aoColumns[i-1] = {\"bSortable\": true, \"bSearchable\": true, \"sType\": \"string\"};
            }
            else {
              aoColumns[i-1] = {\"bSortable\": true, \"bSearchable\": true};
            }
          }

          for (var i = parametrit[tableid][0]+1; i <= parametrit[tableid][1]; i++) {
            aoColumns[i-1] = {\"bSortable\": false, \"bSearchable\": false};
          }

          datatablesit[t] = $(this).dataTable( {
            \"bSortCellsTop\": true,
            \"bDestroy\" : true,
            \"bPaginate\" : parametrit[tableid][2],
            \"sPaginationType\": parametrit[tableid][3],
            \"aLengthMenu\": [[10, 25, 50, 100, 250, 500, -1], [10, 25, 50, 100, 250, 500, \"".t("Kaikki")."\"]],
            \"bInfo\" : parametrit[tableid][4],
            \"bStateSave\" : true,
            \"iDisplayLength\" : 25,
            \"oLanguage\": {
              \"sSearch\" : \"".t("Etsi taulukosta").":\",
              \"sZeroRecords\": \"".t("Ei hakuosumia")."\",
              \"sLengthMenu\": \"", t("N‰yt‰"), " _MENU_ ", t("rivi‰"), "\",
              \"sInfo\": \"", t("N‰ytet‰‰n"), " _START_ - _END_ / _TOTAL_ ", t("rivist‰"), "\",
              \"sInfoFiltered\": \"(", t("suodatettu kaikista"), " _MAX_ ", t("rivist‰"), ")\",
              \"oPaginate\": {
                \"sFirst\": \"&laquo;&laquo;\",
                \"sPrevious\": \"&laquo;\",
                \"sNext\": \"&raquo;\",
                \"sLast\": \"&raquo;&raquo;\"
              }
            },
            \"bSort\" : parametrit[tableid][5],
            \"aaSorting\": [],
            \"aoColumns\": aoColumns,
            \"fnFooterCallback\": function( nRow, aaData, iStart, iEnd, aiDisplay ) {

              if (tableid == \"tyojono1\")†{
                var tunnit1 = 0;
                var minsat1 = 0;
                var tunnit2 = 0;
                var minsat2 = 0;

                for (var i=iStart; i<iEnd; i++) {
                  puperegexp = new RegExp(\"<span class=\\\"yhteensa\\\">(.*)<\\/span>\");

                  var pupematch1 = puperegexp.exec(aaData[aiDisplay[i]][1]);
                  var pupematch2 = puperegexp.exec(aaData[aiDisplay[i]][2]);

                  if (pupematch1 !== null) {
                    osat = pupematch1[1].split(\":\");

                    tunnit1 += osat[0]*1;
                    minsat1 += osat[1]*1;
                  }

                  if (pupematch2 !== null) {
                    osat = pupematch2[1].split(\":\");

                    tunnit2 += osat[0]*1;
                    minsat2 += osat[1]*1;
                  }
                }

                // Muutetaan sekunneiks
                tunnit1 = tunnit1*3600+minsat1*60;
                tunnit2 = tunnit2*3600+minsat2*60;

                // Ja takas tunneiks ja minuuteiks
                var tun1 = Math.round(tunnit1 / 3600);
                var min1 = Math.round((tunnit1 / 60) % 60);

                var tun2 = Math.round(tunnit2 / 3600);
                var min2 = Math.round((tunnit2 / 60) % 60);

                $('#tyom_yhteensa1').html(tun1+\":\"+min1+\"&nbsp;\");
                $('#tyom_yhteensa2').html(tun2+\":\"+min2+\"&nbsp;\");
              }

              if (tableid == \"tilauskanta\")†{
                var summa = 0;
                var arvo  = 0;

                // Summataan vain ruudulla n‰kyv‰t luvut
                for (var i=iStart; i<iEnd; i++) {
                  var summat = aaData[aiDisplay[i]][6].split('<br>');

                  arvo += parseFloat(summat[0]);
                  summa += parseFloat(summat[1]);
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[id$=\"_yhteensa\"]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                $('#arvo_yhteensa').html(arvo.toFixed(2));
                $('#summa_yhteensa').html(summa.toFixed(2));
              }

              if (tableid == \"avoimet0\")†{
                var avoimety = new Array();
                var valuutat = new Array();
                var valuutta = '';

                // Summataan vain ruudulla n‰kyv‰t luvut
                for (var i=iStart; i<iEnd; i++) {
                  valuutta = aaData[aiDisplay[i]][10];
                  valuutat[valuutta] = valuutta;

                  if (typeof avoimety[valuutta] == 'undefined') avoimety[valuutta] = 0;
                  avoimety[valuutta] += aaData[aiDisplay[i]][9]*1;
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=avoimet_yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                // Ekotetaan vain ne valuutat jotka lˆytyy
                for (valuutta in valuutat) {
                  if (typeof avoimety[valuutta] == 'undefined') avoimety[valuutta] = 0;
                  $('#avoimet_yhteensa_'+valuutta).html(avoimety[valuutta].toFixed(2));
                }
              }

              if (tableid == \"avoimet1\")†{
                var avoimety = new Array();
                var avoimetsuoriy = new Array();
                var valuutat = new Array();
                var yseroyhteensa = 0;
                var valuutta = '';

                // Summataan vain ruudulla n‰kyv‰t luvut
                for (var i=iStart; i<iEnd; i++) {
                  valuutta = aaData[aiDisplay[i]][10];
                  valuutat[valuutta] = valuutta;

                  if (aaData[aiDisplay[i]][8] == '') {
                    if (typeof avoimetsuoriy[valuutta] == 'undefined') avoimetsuoriy[valuutta] = 0;
                    avoimetsuoriy[valuutta] += aaData[aiDisplay[i]][9]*1;
                  }
                  else {
                    if (typeof avoimety[valuutta] == 'undefined') avoimety[valuutta] = 0;
                    avoimety[valuutta] += aaData[aiDisplay[i]][9]*1;
                  }
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=avoimet_yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                // Ekotetaan vain ne valuutat jotka lˆytyy
                for (valuutta in valuutat) {
                  if (typeof avoimetsuoriy[valuutta] == 'undefined') avoimetsuoriy[valuutta] = 0;
                  if (typeof avoimety[valuutta] == 'undefined') avoimety[valuutta] = 0;

                  $('#avoimet_yhteensa_'+valuutta).html(avoimety[valuutta].toFixed(2));
                  $('#avoimet_suoriyhteensa_'+valuutta).html(avoimetsuoriy[valuutta].toFixed(2));

                  yseroyhteensa = avoimety[valuutta] + avoimetsuoriy[valuutta];
                  $('#avoimet_yseroyhteensa_'+valuutta).html(yseroyhteensa.toFixed(2));
                }
              }

              if (tableid == \"laskuhaku\")†{
                var summat = new Array();
                var valuutat = new Array();
                var valuutta = '';

                for (var i=iStart; i<iEnd; i++) {
                  valuutta = aaData[aiDisplay[i]][3];
                  valuutat[valuutta] = valuutta;

                  if (typeof summat[valuutta] == 'undefined') summat[valuutta] = 0;
                  summat[valuutta] += aaData[aiDisplay[i]][2]*1;
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                // Ekotetaan vain ne valuutat jotka lˆytyy
                for (valuutta in valuutat) {
                  if (typeof summat[valuutta] == 'undefined') summat[valuutta] = 0;
                  $('#yhteensa_'+valuutta).html(summat[valuutta].toFixed(2));
                }
              }

              if (tableid == \"myyrespaakirja\")†{
                var summa = 0;

                for (var i=iStart; i<iEnd; i++) {
                  summa += aaData[aiDisplay[i]][6]*1;
                }

                $('#yhteensa').html(summa.toFixed(2));
              }

              if (tableid == \"toimittajahaku\")†{
                var summat = new Array();
                var valuutat = new Array();
                var valuutta = '';

                for (var i=iStart; i<iEnd; i++) {
                  valuutta = aaData[aiDisplay[i]][2];
                  valuutat[valuutta] = valuutta;

                  if (typeof summat[valuutta] == 'undefined') summat[valuutta] = 0;
                  summat[valuutta] += aaData[aiDisplay[i]][1]*1;
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                // Ekotetaan vain ne valuutat jotka lˆytyy
                for (valuutta in valuutat) {
                  if (typeof summat[valuutta] == 'undefined') summat[valuutta] = 0;
                  $('#yhteensa_'+valuutta).html(summat[valuutta].toFixed(2));
                }
              }

              if (tableid == \"saatanat_taulu\")†{
                var saatavaty = new Array();
                var sarakemaara = parametrit[tableid][0]-1;

                // Summataan vain ruudulla n‰kyv‰t luvut
                for (var i=iStart; i<iEnd; i++) {

                  for (var j=1; j<=sarakemaara; j++) {
                    if (typeof saatavaty[j] == 'undefined') saatavaty[j] = 0;
                    saatavaty[j] += aaData[aiDisplay[i]][j]*1;
                  }
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=saatavat_yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                for (var j=1; j<=sarakemaara; j++) {
                  $('#saatavat_yhteensa_'+j).html(saatavaty[j].toFixed(2));
                }
              }

              if (tableid == \"raportti_valmistuksista\")†{
                var saatavaty = new Array();
                var sarakemaara = parametrit[tableid][0]-4;

                // Summataan vain ruudulla n‰kyv‰t luvut
                for (var i=iStart; i<iEnd; i++) {

                  for (var j=4; j<=sarakemaara; j++) {
                    if (typeof saatavaty[j] == 'undefined') saatavaty[j] = 0;
                    saatavaty[j] += aaData[aiDisplay[i]][j]*1;
                  }
                }

                // Tyhjennet‰‰n kaikki summat
                $('td[name=yhteensa]').each(
                  function() {
                    $( this ).html('');
                  }
                );

                for (var j=4; j<=sarakemaara; j++) {
                  $('#yhteensa_'+j).html(saatavaty[j].toFixed(2));
                }
              }
            }
          } );
        } );

        // KEIKKA.PHPN OMAT JQUERY-TOIMINNALLISUUDET
        if (datatablesit[0].attr(\"id\") == 'keikka') {

          $(window).keypress(function(e) {
              if(e.keyCode == 13) {
                  $('#submit_tallenna').trigger('click');
              }
          });

          check_arrival_validity = function(otunnus) {
            var state = false;

            $.ajax({
              async: false,
              dataType: 'JSON',
              type: 'POST',
              data: {
                otunnus: otunnus,
                ajax_toiminto: 'tarkista_saapuminen',
                no_head: 'yes',
                ohje: 'off'
              },
              url: '{$_SERVER['SCRIPT_NAME']}'
            }).done(function(data) {

              if (data == 'error') {
                alert('", t("VIRHE: Saapumisen tunnus on 0"), "!');
              }
              else if (data == 'suljettu') {
                alert('", t("Saapuminen on suljettu"), "!');
              }
              else {
                state = true;
              }
            }).fail(function(data) {
              alert('", t("VIRHE: Tietokantayhteydess‰ ongelma"), "!');
            });

            return state;
          };

          // JOS RUKSATAAN/RUKSATAAN POIS JOKIN RIVI
          $('input[name^=\"rivi_valitut_tunnukset\"]').live('click', function(){
            rivi_ja_otsikko = this.value.split(\"###\", 2);
            var otunnus   = $('input[name=\"otunnus\"]').val();
            var toimittajaid = $('input[name=\"toimittajaid\"]').val();

            if (check_arrival_validity(otunnus)) {
              if ($(this).is(':checked')) {

                var suuntalavan_tunnus = $('#suuntalava_'+rivi_ja_otsikko[0]+' option:selected').val();
                var suoratoimitusrivi  = $('#suoratoimitus_'+rivi_ja_otsikko[0]).val() == 'X' ? 'X' : '';

                $.post('{$_SERVER['SCRIPT_NAME']}',
                  {   keikan_otunnus: otunnus,
                    otunnus: otunnus,
                    ajax_toiminto: 'kohdista_rivi',
                    valittu: this.value,
                    suuntalavan_tunnus: suuntalavan_tunnus,
                    suoratoimitusrivi: suoratoimitusrivi,
                    toimittajaid: toimittajaid,
                    no_head: 'yes',
                    ohje: 'off' },
                  function(return_value) {
                    $('.'+rivi_ja_otsikko[0]+' td').addClass('tumma');

                    var data = jQuery.parseJSON(return_value);

                    $('input[name=\"laskunsumma\"]').each(function() {
                      $(this).val(data.laskunsumma);
                    });

                    if (data.suuntalava != null && data.suuntalava > 0) {

                      if ($('#option_'+rivi_ja_otsikko[0]+'_'+data.suuntalava).length > 0) {
                        $('#option_'+rivi_ja_otsikko[0]+'_'+data.suuntalava).attr('selected', 'selected');
                      }
                      else {
                        $('#suuntalava_'+rivi_ja_otsikko[0]+' option:last').after('<option id=\"option_'+rivi_ja_otsikko[0]+'_'+data.suuntalava+'\" value=\"'+data.suuntalava+'\" selected>'+data.suuntalava_sscc+'</option>');
                      }

                    }

                    var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html());
                    var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html());

                    for (var key in data.uudet_hinnat) {
                      summa_kohdistettu = summa_kohdistettu + parseFloat(data.uudet_hinnat[key]['alerivihinta']);
                      summa_jaljella = summa_jaljella - parseFloat(data.uudet_hinnat[key]['alerivihinta']);

                      $('#hinnat_'+key).html(data.uudet_hinnat[key]['rivihinta']+'<br>'+data.uudet_hinnat[key]['alerivihinta']);
                      $('#alerivihintaalkuperainen_'+key).val(data.uudet_hinnat[key]['alerivihinta']);
                    }

                    if (summa_jaljella != 0) {
                      $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                      $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                    }
                    else {
                      $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                      $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                    }

                    $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                    $('#kohdistettu_rivit').html(parseInt($('#kohdistettu_rivit').html()) + 1);
                    $('#kohdistettu_kpl').html(parseFloat($('#kohdistettu_kpl').html()) + parseFloat($('#rivi_kpl_alkuperainen_'+rivi_ja_otsikko[0]).val()));
                    $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                    $('#massalisanappi_'+rivi_ja_otsikko[0]).show();
                  }
                );
              }
              else {
                $.post('{$_SERVER['SCRIPT_NAME']}',
                  {   keikan_otunnus: otunnus,
                    otunnus: 0,
                    ajax_toiminto: 'kohdista_rivi',
                    valittu: this.value,
                    toimittajaid: toimittajaid,
                    no_head: 'yes',
                    ohje: 'off' },
                  function(return_value) {
                    $('.'+rivi_ja_otsikko[0]+' td').removeClass('tumma');

                    var data = jQuery.parseJSON(return_value);

                    $('input[name=\"laskunsumma\"]').each(function() {
                      $(this).val(data.laskunsumma);
                    });

                    $('#suuntalava_'+rivi_ja_otsikko[0]+' option:first').attr('selected', 'selected');
                    //$('#suuntalavan_sscc_'+rivi_ja_otsikko[0]).html('');

                    var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html());
                    var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html());

                    for (var key in data.uudet_hinnat) {
                      summa_kohdistettu = summa_kohdistettu - parseFloat(data.vanhat_hinnat[key]['alerivihinta']);
                      summa_jaljella = summa_jaljella + parseFloat(data.vanhat_hinnat[key]['alerivihinta']);

                      $('#hinnat_'+key).html(data.uudet_hinnat[key]['rivihinta']+'<br>'+data.uudet_hinnat[key]['alerivihinta']);
                      $('#alerivihintaalkuperainen_'+key).val(data.uudet_hinnat[key]['alerivihinta']);
                    }

                    if (summa_jaljella != 0) {
                      $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                      $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                    }
                    else {
                      $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                      $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                    }

                    $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                    $('#kohdistettu_rivit').html(parseInt($('#kohdistettu_rivit').html()) - 1);
                    $('#kohdistettu_kpl').html(parseFloat($('#kohdistettu_kpl').html()) - parseFloat($('#rivi_kpl_alkuperainen_'+rivi_ja_otsikko[0]).val()));
                    $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                    $('#massalisanappi_'+rivi_ja_otsikko[0]).hide();
                    $('#massalisa_'+rivi_ja_otsikko[0]).hide();
                  }
                );
              }
            }
            else {
              $(this).attr('checked', !$(this).is(':checked'));
            }
          });

          // VAIHDETAAN SUUNTALAVAA DROPDOWNISTA
          $('select[id^=\"suuntalava_\"]').live('change', function(){
            var otunnus  = $('input[name=\"otunnus\"]').val();

            if (check_arrival_validity(otunnus)) {
              var tun    = $(this).attr('id').substring(11);
              var sscc   = $('#suuntalava_'+tun+' option:selected').text();

              $.post('{$_SERVER['SCRIPT_NAME']}',
                  {  keikan_otunnus: otunnus,
                    tunnus: tun,
                    ajax_toiminto: 'suuntalava',
                    suuntalava: this.value,
                    no_head: 'yes',
                    ohje: 'off' },
                  function(return_value) {
                    var message = jQuery.parseJSON(return_value);

                    if (message == 'ok') {
                      $('tr[class*=\"'+tun+'\"]').animate({'opacity':0.5},500).animate({'opacity':1},500);
                      //$('#suuntalavan_sscc_'+tun).html(sscc);
                    }
                  }
              );
            }
          });

          $('img[name^=\"use_as_search_\"]').live('click', function(){
            var tun = $(this).attr('name').substring(14);
            var searchbox = $(this).attr('class').substring(14);
            var kohde = 0;

            if (searchbox == 'tuoteno') {
              kohde = 1;
            }

            $('input[name=\"search_'+searchbox+'\"]').val(tun).keyup();
          });

          function splittaus(tun, otunnus, rivi_hinta_value, rivi_kpl_alkuperainen, rivi_hinta_alkup, alerivi_hinta_alkup, kpl, varastoon) {
            var uuden_rivin_tunnus = 0;
            var varastoon = varastoon ? varastoon : 0;
            // JOS HINTA * KPL ON ENEMMƒN KUIN 10,2 DESIMAALIA, NIIN HERJATAAN
            if ((rivi_hinta_value * kpl) > 9999999999.99) {
              var virhe = '".t('VIRHE: liian iso loppusumma')."!';
              alert(virhe);
            }
            else {
              if (rivi_kpl_alkuperainen != kpl) {

                if (kpl == 0) {
                  $('#refresh_screen_ajaxille').val('true');
                }
                if (rivi_kpl_alkuperainen > 1 && rivi_kpl_alkuperainen > kpl && kpl > 0) {
                  var uuden_rivin_kpl = rivi_kpl_alkuperainen - kpl;

                  $.ajax({
                    async: false,
                    type: 'POST',
                    url: '{$_SERVER['SCRIPT_NAME']}',
                    data: {
                      keikan_otunnus: otunnus,
                      varastoon: varastoon,
                      otunnus: otunnus,
                      tunnus: tun,
                      ajax_toiminto: 'rivi_kpl_splittaus',
                      no_head: 'yes',
                      ohje: 'off',
                      uuden_rivin_kpl: uuden_rivin_kpl,
                      vanhan_rivin_kpl: rivi_kpl_alkuperainen
                      }
                    }).done(function(return_value) {

                      var data = jQuery.parseJSON(return_value);

                      var uusi_rivi = $('tr[class*=\"'+tun+'\"]').clone();

                      // MUUTETAAN KLOONATUN RIVIN (<tr>) CLASSI UUDELLE TILAUSRIVIN TUNNUKSELLE
                      $(uusi_rivi).attr('class', $(uusi_rivi).attr('class').replace(tun, data.tunnus));

                      $(uusi_rivi).insertAfter('tr[class*=\"'+tun+'\"]').show(500).animate({'opacity':0.5},200).animate({'opacity':1},200).animate({'opacity':0.5},200).animate({'opacity':1},200,'linear');

                      $('tr[class*=\"'+data.tunnus+'\"]').find('td, div, input, a, span').each(function() {

                        if ($(this).attr('id') != false && $(this).attr('id') != undefined) {
                          $(this).attr('id', $(this).attr('id').replace(tun, data.tunnus));
                        }

                        if ($(this).attr('class') != false && $(this).attr('class') != undefined) {
                          $(this).attr('class', $(this).attr('class').replace(tun, data.tunnus));
                        }

                        if ($(this).attr('name') != false && $(this).attr('name') != undefined) {
                          $(this).attr('name', $(this).attr('name').replace(tun, data.tunnus));
                        }

                        if ($(this).is('input') && $(this).val() != false && $(this).val() != undefined) {
                          $(this).val($(this).val().replace(tun, data.tunnus));
                        }

                        if ($(this).is('a') && $(this).attr('href') != false && $(this).attr('href') != undefined) {
                          $(this).attr('href', $(this).attr('href').replace(new RegExp(tun, 'g'), data.tunnus));
                        }
                      });

                      $('tr[class*=\"'+data.tunnus+'\"]').find('#rivi_kpl_'+data.tunnus).val(uuden_rivin_kpl);
                      $('tr[class*=\"'+data.tunnus+'\"]').find('#ulkkpl_'+data.tunnus).html(uuden_rivin_kpl);
                      $('#hinnat_'+data.tunnus).html(data.rivihinta+'<br>'+data.alerivihinta);
                      $('#rivi_kpl_alkuperainen_'+tun).val(kpl);
                      $('#rivi_kpl_alkuperainen_'+data.tunnus).val(uuden_rivin_kpl);

                      uuden_rivin_tunnus = data.tunnus;
                      $('#refresh_screen_ajaxille').val('true');
                    }
                  );
                }
                else {
                  $('#rivi_kpl_alkuperainen_'+tun).val(kpl);

                  var uuden_rivin_kpl = kpl - rivi_kpl_alkuperainen;

                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   keikan_otunnus: otunnus,
                      otunnus: otunnus,
                      tunnus: tun,
                      ajax_toiminto: 'rivi_kpl_tuoteperhe_lapsi',
                      no_head: 'yes',
                      ohje: 'off',
                      uuden_rivin_kpl: uuden_rivin_kpl},
                    function(return_value) {
                      var data = $.parseJSON(return_value);

                      if (data.paivitetaanko) {
                        $('#refresh_screen_ajaxille').val('true');
                      }
                    }
                  );

                  // P‰ivitet‰‰n 'Kohdistettu Summa'
                  if ($('#rivi_valitut_tunnukset_'+tun).is(':checked')) {
                    // V‰hennet‰‰n summista rivin alkuper‰inen arvo
                    var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html()) - alerivi_hinta_alkup;
                    var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html()) + alerivi_hinta_alkup;

                    // Lis‰t‰‰n uusilla arvoilla
                    summa_kohdistettu = summa_kohdistettu + ((alerivi_hinta_alkup/rivi_kpl_alkuperainen) * kpl);
                    summa_jaljella = summa_jaljella - ((alerivi_hinta_alkup/rivi_kpl_alkuperainen) * kpl);

                    if (summa_jaljella != 0) {
                      $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                      $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                    }
                    else {
                      $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                      $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                    }

                    $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                    $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                  }
                }

                $.ajax({
                  async: false,
                  type: 'POST',
                  url: '{$_SERVER['SCRIPT_NAME']}',
                  data: {
                    keikan_otunnus: otunnus,
                    otunnus: otunnus,
                    tunnus: tun,
                    ajax_toiminto: 'rivi_kpl',
                    kpl: kpl,
                    no_head: 'yes',
                    ohje: 'off'
                    }
                  }).done(function(return_value) {
                    var data = jQuery.parseJSON(return_value);

                    $('#hinnat_'+tun).html(data.rivihinta+'<br>'+data.alerivihinta);
                    $('#ulkkpl_'+tun).html(data.ulkkpl);
                    $('#alerivihintaalkuperainen_'+tun).val(data.alerivihinta);
                  });

              }
            }
            return uuden_rivin_tunnus;
          }

          // JOS PAINETAAN MASSATULOUTUSNAPPIA
          $('input[id^=\"massasubmitti\"]').live('click', function() {
            var otunnus  = $('input[name=\"otunnus\"]').val();

            if (check_arrival_validity(otunnus)) {
              var keijo          = $(this).attr('id').substring(14);
              var rivi_hinta_value     = parseFloat($('#rivi_hinta_'+keijo).val());
              var rivi_kpl_alkuperainen   = parseFloat($('#rivi_kpl_alkuperainen_'+keijo).val());
              var rivi_hinta_alkup    = parseFloat($('#rivihintaalkuperainen_'+keijo).val());
              var alerivi_hinta_alkup    = parseFloat($('#alerivihintaalkuperainen_'+keijo).val());
              var varastoonrivilta    = $('#varastoon_'+keijo).val();
              var kpl   = document.getElementById('rivi_kpl_'+keijo).value.replace(',','.');
              var massatyyppi = $('#tyyppi_'+keijo).val();
              var massakeraysvyohyke = $('#keraysvyohyke_'+keijo).val();
              var massakaytettavyys = $('#kaytettavyys_'+keijo).val();
              var massaterminaalialue = $('#terminaalialue_'+keijo).val();
              var  massajakokplmaara = document.getElementById('massajakokplmaara_'+keijo).value.replace(',','.');

              var kirjoitin = $('#kirjoitin_'+keijo+' option:selected').val();
              var kappalemaara = $('#kappalemaara_'+keijo+' option:selected').val();

              var valid_params = true;
              var suuntalava_ok = false;
              if (massajakokplmaara >= rivi_kpl_alkuperainen || isNaN(massajakokplmaara) || typeof(massajakokplmaara.length) == 'undefined') {
                valid_params = false;
              }
              if (rivi_kpl_alkuperainen / massajakokplmaara > 30) {
                valid_params = false;
              }
              if (massatyyppi.length == 0 || massakeraysvyohyke.length == 0 || massaterminaalialue.length == 0) {
                valid_params = false;
              }
              else {
                suuntalava_ok = true;
              }

              if (valid_params && suuntalava_ok) {
                var ajokerta = rivi_kpl_alkuperainen / massajakokplmaara;
                var loput = rivi_kpl_alkuperainen - (Math.floor(ajokerta) * massajakokplmaara)

                if (loput==0) ajokerta = ajokerta-1;

                var params = {
                  keikan_otunnus: otunnus,
                  otunnus: otunnus,
                  tunnus: 0,
                  ajax_toiminto: 'lisaa_suuntalava',
                  keraysvyohyke: massakeraysvyohyke,
                  kaytettavyys: massakaytettavyys,
                  terminaalialue: massaterminaalialue,
                  tyyppi: massatyyppi,
                  kirjoitin: kirjoitin,
                  kappalemaara: kappalemaara,
                  no_head: 'yes',
                  ohje: 'off'
                };

                (function loopperi(i) {

                  params.tunnus = splittaus(keijo, otunnus, rivi_hinta_value, (massajakokplmaara * 2), rivi_hinta_alkup, alerivi_hinta_alkup, massajakokplmaara, varastoonrivilta);

                  // rivi_kpl_alkuperainen = rivi_kpl_alkuperainen - massajakokplmaara;

                  $.ajax({
                    async: false,
                    type: 'POST',
                    url: '{$_SERVER['SCRIPT_NAME']}',
                    data: params,
                    })
                    .done(function(return_value) {
                      var data = jQuery.parseJSON(return_value);
                      var uusilava = data.suuntalavan_tunnus;

                      if (--i) loopperi(i);
                    }
                  );

                })(Math.floor(ajokerta));

                if (loput != 0) {

                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   keikan_otunnus: otunnus,
                      otunnus: otunnus,
                      tunnus: keijo,
                      ajax_toiminto: 'rivi_kpl',
                      kpl: loput,
                      no_head: 'yes',
                      ohje: 'off'},
                    function(return_value) {
                      var data = jQuery.parseJSON(return_value);

                      $('#hinnat_'+keijo).html(data.rivihinta+'<br>'+data.alerivihinta);
                      $('#ulkkpl_'+keijo).html(data.ulkkpl);
                      $('#alerivihintaalkuperainen_'+keijo).val(data.alerivihinta);
                    }
                  );

                }
                params.tunnus = keijo;

                if ($('#suuntalava_'+keijo+' option:selected').val() == 0) {

                  $.ajax({
                    async: false,
                    type: 'POST',
                    url: '{$_SERVER['SCRIPT_NAME']}',
                    data: params,
                    })
                    .done(function(return_value) {
                      var data = jQuery.parseJSON(return_value);
                      var uusilava = data.suuntalavan_tunnus;
                    }
                  );

                }
              }
              else {
                var slavavirhe = suuntalava_ok ? '' : ' - Suuntalavaa ei voitu luoda';
                alert('Virheelliset parametrit'+ slavavirhe);
              }
            }
          });

          // JOS PAINETAAN 'TALLENNA SIVUN MUUTOKSET'-NAPPIA
          $('#submit_tallenna').live('click', function() {
            var otunnus = $('input[name=\"otunnus\"]').val();

            if (check_arrival_validity(otunnus)) {

              $('input[name^=\"rivi_kpl\"]').each(function(){

                  // OTETAAN TARVITTAVAT TUNNUKSET JA MUUTTUJAT TALTEEN
                  var tun           = $(this).attr('id').substring(9);
                  var rivi_hinta_value     = parseFloat($('#rivi_hinta_'+tun).val());
                  var rivi_kpl_alkuperainen   = parseFloat($('#rivi_kpl_alkuperainen_'+tun).val());
                  var rivi_hinta_alkup    = parseFloat($('#rivihintaalkuperainen_'+tun).val());
                  var alerivi_hinta_alkup    = parseFloat($('#alerivihintaalkuperainen_'+tun).val());
                  var kpl           = parseFloat(this.value.replace(',','.'));

                  splittaus(tun, otunnus, rivi_hinta_value, rivi_kpl_alkuperainen, rivi_hinta_alkup, alerivi_hinta_alkup, kpl);

              }).ajaxComplete(function(){
                  if ($('#refresh_screen_ajaxille').val() == 'true') {
                    $('#refresh_screen_ajaxille').val('false');
                    var t = setTimeout('document.formi1.submit()', 1000);
                  }
              });

              $('input[name^=\"rivi_ale\"]').each(function(){

                var monesko        = $(this).attr('name').substring(8,9);
                var tun         = $(this).attr('id').substring(10);
                var rivi_ale_alkup    = parseFloat($('#rivialealkuperainen'+monesko+'_'+tun).val());
                var alerivi_hinta_alkup  = parseFloat($('#alerivihintaalkuperainen_'+tun).val());
                var ale         = parseFloat(this.value.replace(',','.'));

                if (rivi_ale_alkup != ale) {
                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   keikan_otunnus: otunnus,
                      otunnus: otunnus,
                      tunnus: tun,
                      ajax_toiminto: 'rivi_ale',
                      ale: ale,
                      no_head: 'yes',
                      ohje: 'off',
                      monesko_kentta: monesko},
                    function(return_value) {
                      var data = jQuery.parseJSON(return_value);
                      $('#hinnat_'+tun).html(data.rivihinta+'<br>'+data.alerivihinta);
                      $('#rivialealkuperainen'+monesko+'_'+tun).val(ale);
                      $('#alerivihintaalkuperainen_'+tun).val(data.alerivihinta);

                      // P‰ivitet‰‰n 'Kohdistettu Summa'
                      if ($('#rivi_valitut_tunnukset_'+tun).is(':checked')) {
                        // V‰hennet‰‰n summista rivin alkuper‰inen arvo
                        var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html()) - alerivi_hinta_alkup;
                        var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html()) + alerivi_hinta_alkup;

                        // Lis‰t‰‰n uusilla arvoilla
                        summa_kohdistettu = summa_kohdistettu + data.alerivihinta;
                        summa_jaljella = summa_jaljella - data.alerivihinta;

                        if (summa_jaljella != 0) {
                          $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                          $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                        }
                        else {
                          $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                          $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                        }

                        $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                        $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                      }
                    }
                  );
                }
              });

              $('input[name^=\"rivi_hinta\"]').each(function(){
                var tun         = $(this).attr('id').substring(11);
                var rivi_kpl_value     = parseFloat($('#rivi_kpl_'+tun).val());
                var rivi_hinta_alkup  = parseFloat($('#rivihintaalkuperainen_'+tun).val());
                var alerivi_hinta_alkup  = parseFloat($('#alerivihintaalkuperainen_'+tun).val());
                var hinta         = parseFloat(this.value.replace(',','.'));

                if ((rivi_kpl_value * hinta) > 9999999999.99) {
                  var virhe = '".t('VIRHE: liian iso loppusumma')."!';
                  alert(virhe);
                }
                else if (rivi_hinta_alkup != hinta) {

                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   keikan_otunnus: otunnus,
                      otunnus: otunnus,
                      tunnus: tun,
                      ajax_toiminto: 'rivi_hinta',
                      hinta: hinta,
                      no_head: 'yes',
                      ohje: 'off'},
                    function(return_value) {
                      var data = jQuery.parseJSON(return_value);
                      $('#rivin_hinta_'+tun).html(data.hinta);
                      $('#hinnat_'+tun).html(data.rivihinta+'<br>'+data.alerivihinta);
                      $('#rivihintaalkuperainen_'+tun).val(hinta);
                      $('#alerivihintaalkuperainen_'+tun).val(data.alerivihinta);

                      // P‰ivitet‰‰n 'Kohdistettu Summa'
                      if ($('#rivi_valitut_tunnukset_'+tun).is(':checked')) {
                        // V‰hennet‰‰n summista rivin alkuper‰inen arvo
                        var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html()) - alerivi_hinta_alkup;
                        var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html()) + alerivi_hinta_alkup;

                        // Lis‰t‰‰n uusilla arvoilla
                        summa_kohdistettu = summa_kohdistettu + data.alerivihinta;
                        summa_jaljella = summa_jaljella - data.alerivihinta;

                        if (summa_jaljella != 0) {
                          $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                          $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                        }
                        else {
                          $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                          $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                        }

                        $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                        $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                      }
                    }
                  );
                }

              });

              $('input[name^=\"rivi_myyntihinta\"]').each(function(){
                var tun         = $(this).attr('id').substring(17);
                var myyntihinta_alkup  = parseFloat($('#rivimyyntihintaalkuperainen_'+tun).val());
                var myyntihinta      = parseFloat(this.value.replace(',','.'));

                if (myyntihinta > 9999999999.99) {
                  var virhe = '".t('VIRHE: liian iso loppusumma')."!';
                  alert(virhe);
                }
                else if (myyntihinta_alkup != myyntihinta) {

                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   tunnus: tun,
                      ajax_toiminto: 'myyntihinta',
                      myyntihinta: myyntihinta,
                      no_head: 'yes',
                      ohje: 'off'},
                    function(return_value) {
                      var data = jQuery.parseJSON(return_value);

                      if (data.ok) {
                        $('#refresh_screen_ajaxille').val('true');

                        $('#rivimyyntihintaalkuperainen_'+tun).val(myyntihinta);
                        $('#rivi_myyntihinta_'+tun).val(myyntihinta);
                      }
                    }
                  );
                }

              });

              $('input[name^=\"rivi_toimitettuaika_vv\"]').each(function(){

                var tun         = $(this).attr('id').substring(23);
                var rivi_taika_vv    = parseFloat(this.value);
                var rivi_taika_kk    = parseFloat($('input[name=\"rivi_toimitettuaika_kk_'+tun+'\"]').val());
                var rivi_taika_pp    = parseFloat($('input[name=\"rivi_toimitettuaika_pp_'+tun+'\"]').val());

                if (rivi_taika_vv > 0 && rivi_taika_kk > 0 && rivi_taika_pp > 0) {
                  $.post('{$_SERVER['SCRIPT_NAME']}',
                    {   keikan_otunnus: otunnus,
                      otunnus: otunnus,
                      tunnus: tun,
                      ajax_toiminto: 'rivi_toimitettuaika',
                      rivi_taika_vv: rivi_taika_vv,
                      rivi_taika_kk: rivi_taika_kk,
                      rivi_taika_pp: rivi_taika_pp,
                      no_head: 'yes',
                      ohje: 'off'},
                    function(return_value) {
                      var data = jQuery.parseJSON(return_value);
                    }
                  );
                }
              });
            }

          }).ajaxComplete(function(){
            if ($('#refresh_screen_ajaxille').val() == 'true') {
              $('#refresh_screen_ajaxille').val('false');
              var t = setTimeout('document.formi1.submit()', 1000);
            }
          });

          // KOHDISTETAAN SIVUN KAIKKI RIVIT
          $('#submit_kohd_kaikki').live('click', function(){
            var otunnus = $('input[name=\"otunnus\"]').val();

            if (check_arrival_validity(otunnus)) {
              $('input[name^=\"rivi_valitut_tunnukset\"]').each(function(){
              rivi_ja_otsikko = this.value.split(\"###\", 2);

              if (!$('#rivi_valitut_tunnukset_'+rivi_ja_otsikko[0]).is(':checked')) {
                var suuntalavan_tunnus = $('#suuntalava_'+rivi_ja_otsikko[0]+' option:selected').val();
                var suoratoimitusrivi  = $('#suoratoimitus_'+rivi_ja_otsikko[0]).val() == 'X' ? 'X' : '';

                $.post('{$_SERVER['SCRIPT_NAME']}',
                  {   keikan_otunnus: otunnus,
                    otunnus: otunnus,
                    ajax_toiminto: 'kohdista_rivi',
                    valittu: this.value,
                    suuntalavan_tunnus: suuntalavan_tunnus,
                    suoratoimitusrivi: suoratoimitusrivi,
                    no_head: 'yes',
                    ohje: 'off' },
                  function(return_value) {
                    var data = jQuery.parseJSON(return_value);

                    var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html());
                    var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html());

                    for (var key in data.uudet_hinnat) {
                      summa_kohdistettu = summa_kohdistettu + parseFloat(data.uudet_hinnat[key]['alerivihinta']);
                      summa_jaljella = summa_jaljella - parseFloat(data.uudet_hinnat[key]['alerivihinta']);

                      $('#hinnat_'+key).html(data.uudet_hinnat[key]['rivihinta']+'<br>'+data.uudet_hinnat[key]['alerivihinta']);
                      $('#alerivihintaalkuperainen_'+key).val(data.uudet_hinnat[key]['alerivihinta']);
                      $('#tr_'+key+' td').addClass('tumma');

                      if (data.suuntalava != null && data.suuntalava > 0) {

                        if ($('#option_'+key+'_'+data.suuntalava).length > 0) {
                          $('#option_'+key+'_'+data.suuntalava).attr('selected', true);
                        }
                        else {
                          $('#suuntalava_'+key+' option:last').after('<option id=\"option_'+key+'_'+data.suuntalava+'\" value=\"'+data.suuntalava+'\" selected>'+data.suuntalava_sscc+'</option>');
                        }
                      }
                    }

                    if (summa_jaljella != 0) {
                      $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                      $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                    }
                    else {
                      $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                      $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                    }

                    $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                    $('#kohdistettu_rivit').html(parseInt($('#kohdistettu_rivit').html()) + 1);
                    $('#kohdistettu_kpl').html(parseFloat($('#kohdistettu_kpl').html()) + parseFloat($('#rivi_kpl_alkuperainen_'+rivi_ja_otsikko[0]).val()));
                    $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                  }
                );

                $(this).attr('checked', 'checked');
              }
            });
            }
          });

          // POISTETAAN KAIKKI KOHDISTUKSET
          $('#submit_kohd_eimit').live('click', function(){
            var otunnus = $('input[name=\"otunnus\"]').val();

            if (check_arrival_validity(otunnus)) {
              $('input[name^=\"rivi_valitut_tunnukset\"]').each(function(){
              rivi_ja_otsikko = this.value.split(\"###\", 2);

              if ($('#rivi_valitut_tunnukset_'+rivi_ja_otsikko[0]).is(':checked')) {

                $.post('{$_SERVER['SCRIPT_NAME']}',
                  {   keikan_otunnus: otunnus,
                    otunnus: 0,
                    ajax_toiminto: 'kohdista_rivi',
                    valittu: this.value,
                    no_head: 'yes',
                    ohje: 'off' },
                  function(return_value) {
                    var data = jQuery.parseJSON(return_value);

                    var summa_kohdistettu = parseFloat($('#kohdistettu_summa').html());
                    var summa_jaljella = parseFloat($('#laskunsumma_jaljella').html());

                    for (var key in data.uudet_hinnat) {
                      summa_kohdistettu = summa_kohdistettu - parseFloat(data.vanhat_hinnat[key]['alerivihinta']);
                      summa_jaljella = summa_jaljella + parseFloat(data.vanhat_hinnat[key]['alerivihinta']);

                      $('#hinnat_'+key).html(data.uudet_hinnat[key]['rivihinta']+'<br>'+data.uudet_hinnat[key]['alerivihinta']);
                      $('#alerivihintaalkuperainen_'+key).val(data.uudet_hinnat[key]['alerivihinta']);
                      $('#tr_'+key+' td').removeClass('tumma');

                      $('#suuntalava_'+key+' option:first').attr('selected', true);
                    }

                    if (summa_jaljella != 0) {
                      $('#kohdistettu_summa_td font').css({'color': '#000', 'font-weight': 'normal'});
                      $('#laskunsumma_jaljella_td font').css({'color': '#000', 'font-weight': 'normal'});
                    }
                    else {
                      $('#kohdistettu_summa_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                      $('#laskunsumma_jaljella_td font').css({'color': '{$varirgb[1]}', 'font-weight': 'bold'});
                    }

                    $('#kohdistettu_summa').html(summa_kohdistettu.toFixed(2));
                    $('#kohdistettu_rivit').html(parseInt($('#kohdistettu_rivit').html()) - 1);
                    $('#kohdistettu_kpl').html(parseFloat($('#kohdistettu_kpl').html()) - parseFloat($('#rivi_kpl_alkuperainen_'+rivi_ja_otsikko[0]).val()));
                    $('#laskunsumma_jaljella').html(summa_jaljella.toFixed(2));
                  }
                );

                $(this).removeAttr('checked');
              }
            });
            }
          });
        }

        // Sarakefiltterˆinti, toistaiseksi vain ekalle taululle!
        $(\"thead input\").keyup( function () {
          var arvo = this.value;
          var sarake = $(\"thead input\").index(this);

          // fnFilter toistaiseksi vain ekalle tablelle

          // Onko regular expressioni?
          if (arvo.indexOf(\"|\") > -1) {
            datatablesit[0].fnFilter( arvo, sarake, true, false );
          }
          else {
            datatablesit[0].fnFilter( arvo, sarake, false, true );
          }

          // filtterˆid‰‰n tyˆjono.php:ssa myˆs alempaa taulua, jos ja vain jos alempi taulu on olemassa
          if (datatablesit[0].attr(\"id\") == \"tyojono0\" && datatablesit[1] != undefined) {
            var tyojono = [];

            $(\"span[class=tyom_id]\").each(function(i) {
              tyojono[i] = this.innerHTML;
            });

            var jonosearch = tyojono.join(\"|\");

            if (arvo != \"\" && jonosearch == \"\") {
              // ei n‰ytet‰ mit‰‰n
              jonosearch = \"xyzzypupe\";
            }

            datatablesit[1].fnFilter( jonosearch, 0, true, false, true );
          }
        } );

        // Presorttaus, eli luetaan cookiesta tarvittavat tiedot, toistaiseksi vain ekalle taululle!
        var oSettings = datatablesit[0].fnSettings();

        $(\"thead input\").each(function(u){
          if (oSettings.aoPreSearchCols[u]['sSearch']!=''){
            $(this).val(oSettings.aoPreSearchCols[u]['sSearch']);
          }
        } );

        if (oSettings.oPreviousSearch['sSearch']!=''){
          $('.search_field').val(oSettings.oPreviousSearch['sSearch']);
        }

        // Prioriteetin rajausta dropdownilla
        $('select.prioriteetti_sort').change(function() {
          var prioriteetti = $('select.prioriteetti_sort option:selected');
          var haku_arvo = prioriteetti.val();

          datatablesit[0].fnFilter(haku_arvo, 1);
        } );

        // Tyˆjonon ja tyˆstatuksen rajausta dropdownilla
        $('select.tyojono_sort, select.tyostatus_sort').change(function() {
          var tyojono = $('select.tyojono_sort option:selected');
          var tyostatus = $('select.tyostatus_sort option:selected');

          // Jos tyojono tai tyostatus on tyhja, haetaan vain yhdell‰ ehdolla
          var haku_arvo = tyojono.val() +' '+ tyostatus.val();
          var haku_sarake = parametrit['tyojono0'][6];
          datatablesit[0].fnFilter(haku_arvo, haku_sarake, true, false);
        } );

        // Suuntalavan rajausta dropdownilla
        $('select.suuntalava_sort').change(function() {
          var haku_arvo = $(this, 'option:selected').val();

          datatablesit[0].fnFilter(haku_arvo, 14, true, false);
        } );

      } );
    </script>";
  }
}

if (!function_exists('hae_suuntalava')) {
  function hae_suuntalava($otunnus, $tunnus) {
    global $kukarow;

    $query = "SELECT suuntalavat.tunnus,
              if (suuntalavat.alkuhyllyalue != '', concat(rpad(upper(suuntalavat.alkuhyllyalue),  5, '0'),lpad(upper(suuntalavat.alkuhyllynro),  5, '0'),lpad(upper(suuntalavat.alkuhyllyvali),  5, '0'),lpad(upper(suuntalavat.alkuhyllytaso),  5, '0')), '') alkuhyllypaikka,
              if (suuntalavat.loppuhyllyalue != '', concat(rpad(upper(suuntalavat.loppuhyllyalue),  5, '0'),lpad(upper(suuntalavat.loppuhyllynro),  5, '0'),lpad(upper(suuntalavat.loppuhyllyvali),  5, '0'),lpad(upper(suuntalavat.loppuhyllytaso),  5, '0')), '') loppuhyllypaikka
              FROM tilausrivi
              JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno)
              JOIN suuntalavat ON (suuntalavat.yhtio = tilausrivi.yhtio
                        AND suuntalavat.keraysvyohyke = tuote.keraysvyohyke
                        AND suuntalavat.tila          = ''
                        AND (concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0'),lpad(upper(alkuhyllyvali),  5, '0'),lpad(upper(alkuhyllytaso),  5, '0')) <= concat(rpad(upper(hyllyalue),  5, '0'),lpad(upper(hyllynro),  5, '0'),lpad(upper(hyllyvali),  5, '0'),lpad(upper(hyllytaso),  5, '0')) or alkuhyllyalue = '')
                        AND (concat(rpad(upper(loppuhyllyalue),  5, '0'),lpad(upper(loppuhyllynro),  5, '0'),lpad(upper(loppuhyllyvali),  5, '0'),lpad(upper(loppuhyllytaso),  5, '0')) >= concat(rpad(upper(hyllyalue),  5, '0'),lpad(upper(hyllynro),  5, '0'),lpad(upper(hyllyvali),  5, '0'),lpad(upper(hyllytaso),  5, '0')) or loppuhyllyalue = ''))
              JOIN suuntalavat_saapuminen ON (suuntalavat_saapuminen.yhtio = suuntalavat.yhtio AND suuntalavat_saapuminen.suuntalava = suuntalavat.tunnus AND suuntalavat_saapuminen.saapuminen = '{$otunnus}')
              WHERE tilausrivi.yhtio                  = '{$kukarow['yhtio']}'
              AND tilausrivi.tunnus                   = '{$tunnus}'
              ORDER BY alkuhyllypaikka
              LIMIT 1";
    $result = pupe_query($query);
    $row = mysql_fetch_assoc($result);

    $suuntalava = (trim($row['tunnus']) != '' and trim($row['tunnus']) > 0) ? $row['tunnus'] : 0;

    return $suuntalava;
  }
}

if (!function_exists("seuraavat_lahtoajat")) {
  function seuraavat_lahtoajat($toimitustapa, $asiakasluokka, $varasto, $exclude = 0, $eteenpain = 0) {

    global $yhtiorow, $kukarow;

    $asiakasluokka   = (int) $asiakasluokka;
    $varasto     = (int) $varasto;
    $exclude     = (int) $exclude;

    $excludelisa = $exclude != 0 ? " and tunnus != '{$exclude}'" : "";

    // Haetaan toimitustavan tunnus
    $query = "SELECT tunnus
              FROM toimitustapa
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND selite  = '{$toimitustapa}'";
    $chk_res = pupe_query($query);
    $chk_row = mysql_fetch_assoc($chk_res);

    $toimitustavan_tunnus = $chk_row['tunnus'];

    $pvmlisa = date("Y-m-d", mktime(0, 0, 0, date("m"), (date("d")+$eteenpain), date("Y")));

    // Etsit‰‰n l‰htˆ‰ asiakkaan omalla prioriteetilla
    $query = "SELECT *
              FROM lahdot
              WHERE yhtio       = '{$kukarow['yhtio']}'
              AND liitostunnus  = '{$toimitustavan_tunnus}'
              AND asiakasluokka = '{$asiakasluokka}'
              AND varasto       = '{$varasto}'
              AND aktiivi       IN ('', 'P')
              AND ((viimeinen_tilausaika > curtime() and pvm = '{$pvmlisa}') or (pvm = '{$pvmlisa}' and $eteenpain > 0) or pvm > '{$pvmlisa}')
              {$excludelisa}
              ORDER BY pvm, lahdon_kellonaika";
    $lahdot_res = pupe_query($query);

    if (mysql_num_rows($lahdot_res) == 0) {
      // Etsit‰‰n l‰htˆ‰ kaikilla prioilla, ja valitaan niist‰
      $query = "SELECT *
                FROM lahdot
                WHERE yhtio      = '{$kukarow['yhtio']}'
                AND liitostunnus = '{$toimitustavan_tunnus}'
                AND varasto      = '{$varasto}'
                AND aktiivi      IN ('', 'P')
                AND ((viimeinen_tilausaika > curtime() and pvm = '{$pvmlisa}') or pvm > '{$pvmlisa}')
                {$excludelisa}
                ORDER BY asiakasluokka DESC, pvm, lahdon_kellonaika";
      $lahdot_res = pupe_query($query);
    }

    if (mysql_num_rows($lahdot_res) == 0) {
      return FALSE;
    }
    else {

      $lahdot = array();

      while ($lahdot_row = mysql_fetch_assoc($lahdot_res)) {
        $lahdot[] = $lahdot_row;
      }

      return $lahdot;
    }
  }
}

// K‰sitell‰‰n XML-entiteetit
if (!function_exists("xmlentities")) {
  function xmlentities($string) {
    return preg_replace("/[^\xA\x20-\xFF]/", "", str_replace(array('&', '"', "'", '<', '>', '¥', '`'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;', '&apos;', '&apos;'), trim($string)));
  }
}

if (!function_exists("xml_add")) {
  function xml_add($joukko, $tieto, $handle, $maxpituus = '', $minpituus = '') {
    global $yhtiorow, $lasrow;

    $ulos = "<$joukko>";

    if (strlen($tieto) > 0 or $minpituus != '') {

      if ($maxpituus != "" and is_numeric($maxpituus) and strlen($tieto) > $maxpituus) {
        $tieto = substr($tieto, 0, $maxpituus);
      }

      $tieto = xmlentities($tieto);

      if ($minpituus != "" and is_numeric($minpituus) and strlen($tieto) < $minpituus) {
        if ($yhtiorow["verkkolasku_lah"] == "maventa" and ($joukko == "InvoiceRecipientTownName" or $joukko == "InvoiceRecipientPostCodeIdentifier")) {
          $tieto = str_pad($tieto, $minpituus, '.');
        }
        else {
          $tieto = str_pad($tieto, $minpituus);
        }
      }

      $ulos .= $tieto;
    }

    $pos = strpos($joukko, " ");

    if ($pos === FALSE) {
      $ulos .= "</$joukko>";
    }
    else {
      $ulos .= "</".substr($joukko, 0, $pos).">";
    }

    if ($lasrow["chn"] == "112" or $yhtiorow["verkkolasku_lah"] == "iPost" or $yhtiorow["verkkolasku_lah"] == "finvoice" or $yhtiorow["verkkolasku_lah"] == "apix") {
      //  Jos tehd‰‰n finvoicea rivinvaihto on \r\n
      $ulos .= "\r\n";
    }
    else {
      $ulos .= "\n";
    }

    fputs($handle, $ulos);
  }
}

if (!function_exists("xml_cleanstring")) {
  function xml_cleanstring($value, $maxlength = 0) {

    if (empty($value)) {
      return '';
    }

    if ($maxlength > 0) {
      $value = substr($value, 0, $maxlength);
    }

    $value = xmlentities($value);
    $value = utf8_encode($value);

    return $value;
  }
}

if (!function_exists("alvilmo_kassa_ale_erittely")) {
  function alvilmo_kassa_ale_erittely($alkupvm, $loppupvm, $maalisa, $tiliointilisa, $ryhma, $oletus_verokanta, $yhteenvetolilmo = FALSE) {
    global $yhtiorow, $kukarow;

    $kakerroinlisa  = 1;
    $kerroin     = '';

    if ($ryhma == 'fi313') {
      // Tavaraostot muista EU-maista
      $ryhma = 'fi305';
    }
    elseif ($ryhma == 'fi314') {
      // Palveluostot muista EU-maista
      $ryhma = 'fi306';
    }

    if ($ryhma == 'fi311' or $ryhma == 'fi312' or $ryhma == 'kolmikanta') {
      $kerroin = " * -1 ";
    }

    if ($ryhma == 'fi305' or $ryhma == 'fi306' or $ryhma == 'fi320') {

      $ktrow["tilioinnit"] = "";

      // Hetaan yhteisˆostot/k‰‰nteisen alvin joilla on kassa-aletta
      $query = "SELECT tiliointi.ltunnus, group_concat(tiliointi.tunnus) tilioinnit
                FROM tiliointi
                WHERE tiliointi.yhtio  = '$kukarow[yhtio]'
                AND tiliointi.korjattu = ''
                AND tiliointi.tapvm    >= '$alkupvm'
                AND tiliointi.tapvm    <= '$loppupvm'
                AND tiliointi.tilino   = '$yhtiorow[kassaale]'
                GROUP BY 1";
      $kassaaleres = pupe_query($query);

      if (mysql_num_rows($kassaaleres) > 0) {

        while ($kassaalerow = mysql_fetch_assoc($kassaaleres)) {
          // Katotaan onko sill‰ tositteella, jolla kassaale on, myˆs halutun alv_taso:n kirjaus, silloin kassaale kuuluu t‰h‰n alv_taso:on
          $query = "SELECT lasku.tunnus
                    FROM lasku
                    JOIN tiliointi ON (lasku.yhtio = tiliointi.yhtio AND lasku.tunnus = tiliointi.ltunnus)
                    JOIN tili ON (tili.yhtio = tiliointi.yhtio and tili.tilino = tiliointi.tilino AND tili.alv_taso like '%$ryhma%')
                    WHERE lasku.yhtio = '$kukarow[yhtio]'
                    AND lasku.tunnus  = $kassaalerow[ltunnus]";
          $ktres2 = pupe_query($query);

          if (mysql_num_rows($ktres2) > 0) {
            $ktrow["tilioinnit"] .= "$kassaalerow[tilioinnit],";
          }
        }

        $ktrow["tilioinnit"] = substr($ktrow["tilioinnit"], 0, -1);
      }
    }
    else {
      // Hetaan yhteisˆmyynti, palvelut ja tuotteet erikseen jotta osataan splitata kassa-alennus tavaramyyntiin ja palvelumyyntIin
      $query = "SELECT
                sum(if(lasku.kolmikantakauppa != '', tilausrivi.rivihinta, 0)) kolmikanta,
                sum(if(lasku.kolmikantakauppa =  '' and tuote.tuotetyyppi  = 'K', tilausrivi.rivihinta, 0)) palvelut,
                sum(if(lasku.kolmikantakauppa =  '' and tuote.tuotetyyppi != 'K', tilausrivi.rivihinta, 0)) tavara,
                sum(tilausrivi.rivihinta) yhteensa,
                group_concat(DISTINCT tiliointi.tunnus) tilioinnit
                FROM tiliointi
                JOIN lasku ON (lasku.yhtio = tiliointi.yhtio AND lasku.tunnus = tiliointi.ltunnus and lasku.vienti = 'E')
                JOIN tilausrivi USE INDEX (uusiotunnus_index) ON (tilausrivi.yhtio = lasku.yhtio and tilausrivi.uusiotunnus = lasku.tunnus AND tilausrivi.tyyppi != 'D')
                JOIN tuote USE INDEX (tuoteno_index) ON (tuote.yhtio = tilausrivi.yhtio and tuote.tuoteno = tilausrivi.tuoteno and tuote.tuoteno != '$yhtiorow[ennakkomaksu_tuotenumero]')
                LEFT JOIN tili ON (tili.yhtio = tiliointi.yhtio AND tiliointi.tilino = tili.tilino)
                WHERE tiliointi.yhtio  = '$kukarow[yhtio]'
                AND tiliointi.korjattu = ''
                AND tiliointi.tapvm    >= '$alkupvm'
                AND tiliointi.tapvm    <= '$loppupvm'
                AND tiliointi.tilino   = '$yhtiorow[myynninkassaale]'
                $maalisa
                $tiliointilisa";
      $ktres = pupe_query($query);
      $ktrow = mysql_fetch_assoc($ktres);
    }

    if ($ktrow["tilioinnit"] != "" and ($ryhma == 'fi305' or $ryhma == 'fi306' or $ryhma == 'fi320' or $ktrow["yhteensa"] != 0)) {

      // Palvelut ja tuotteet erikseen
      if ($ryhma == 'fi311') {
        $kakerroinlisa = $ktrow["tavara"]/$ktrow["yhteensa"];
      }
      elseif ($ryhma == 'fi312') {
        $kakerroinlisa = $ktrow["palvelut"]/$ktrow["yhteensa"];
      }
      elseif ($ryhma == 'kolmikanta') {
        $kakerroinlisa = $ktrow["kolmikanta"]/$ktrow["yhteensa"];
      }

      $selec = "  if(lasku.toim_maa!='', lasku.toim_maa, if(lasku.maa != '', lasku.maa, '$yhtiorow[maa]')) maa,
            if(lasku.valkoodi = '', '$yhtiorow[valkoodi]', lasku.valkoodi) valuutta,
            tiliointi.vero vero,
            tiliointi.tilino tilino,
            tili.nimi nimi,";
      $group = "  maa, valuutta, vero, tilino, nimi";

      if ($yhteenvetolilmo) {
        $selec = "  lasku.ytunnus ytunnus,
              if(lasku.toim_maa = '', lasku.maa, lasku.toim_maa) maa,
              max(lasku.nimi) laskunimi, ";
        $group = "  ytunnus, maa";
      }

      $query = "SELECT
                $selec
                sum(round(tiliointi.summa * (1 + ($oletus_verokanta / 100)), 2)) $kerroin bruttosumma,
                sum(round(tiliointi.summa * ($oletus_verokanta / 100), 2)) $kerroin verot,
                sum(round(tiliointi.summa / if(lasku.vienti_kurssi = 0, 1, lasku.vienti_kurssi) * (1 + ($oletus_verokanta / 100)), 2)) $kerroin bruttosumma_valuutassa,
                sum(round(tiliointi.summa / if(lasku.vienti_kurssi = 0, 1, lasku.vienti_kurssi) * ($oletus_verokanta / 100), 2)) $kerroin verot_valuutassa,
                count(*) kpl
                FROM tiliointi
                JOIN lasku ON (lasku.yhtio = tiliointi.yhtio AND lasku.tunnus = tiliointi.ltunnus)
                LEFT JOIN tili ON (tili.yhtio = tiliointi.yhtio AND tiliointi.tilino = tili.tilino)
                WHERE tiliointi.yhtio = '$kukarow[yhtio]'
                AND tiliointi.tunnus  in ($ktrow[tilioinnit])
                GROUP BY $group
                ORDER BY $group";
      $ttres = pupe_query($query);

      return array($kakerroinlisa, $ttres);
    }

    return array(NULL, NULL);
  }
}

if (!function_exists("hintapyoristys")) {
  function hintapyoristys($luku, $desimaalit=0, $loppunollat_pois=FALSE) {
    global $yhtiorow;

    if (!is_numeric($luku) and $luku == 'null') {
      return '';
    }

    $luku = (float) $luku;

    if ((int) $desimaalit > 0) {
      $desit = (int) $desimaalit;
    }
    else {
      $desit = (int) $yhtiorow['hintapyoristys'];
    }

    // k‰‰nnet‰‰n luku desimaaliluvuksi parametrin mukaisesti
    $luku = sprintf("%.{$desit}f", round($luku, $desit));

    if ($yhtiorow["hintapyoristys_loppunollat"] == "P" or (int) $desimaalit > 0 or $loppunollat_pois) {
      // poistetaan nollat lopusta
      $luku = rtrim($luku, "0");

      // katotaan montako desimaalia luvussa on
      $desimaaleja = strlen($luku) - strpos($luku, ".") - 1;

      if ($desimaaleja == 0 and $loppunollat_pois == "NONE") {
        $luku = substr($luku, 0, -1);
      }
      elseif ($desimaaleja < 2) {
        // jos alle kaksi desimaalia, niin n‰ytet‰‰n silti kaksi
        $luku = sprintf("%.02f", $luku);
      }
    }

    return $luku;
  }
}

if (!function_exists('piirra_vak_rivi')) {
  function piirra_vak_rivi($params) {
    global $kukarow;

    extract($params);

    $eramaara = ceil($row["kpl"]/$row["era"]);

    $vaktuotetiedot[] = "$eramaara ".t("pakkausta", $kieli).", ".t("kukin", $kieli)." ".(float) $row['era']." x $row[tilavuus] (".t($row["materiaali"], $kieli).")";

    // Mik‰ on toistaiseksi suurin vakm‰‰r‰
    $ltq_yks = preg_replace("/[^a-z]/", "", strtolower($row["tilavuus"]));

    $ltq_til = (float) preg_replace("/[^0-9,\.]/", "", str_replace(",", ".", $row["tilavuus"]));

    // K‰ytet‰‰n vain millilitroja ja grammoja
    if ($ltq_yks == 'l' or $ltq_yks == 'kg') {
      $ltq_til = $ltq_til*1000;
    }

    if ($ltq_til > $max_ltq_til) $max_ltq_til = $ltq_til;

    $tuotepainot += $row["tuotepaino"];
    $tuotepainot_yht += $row["tuotepaino"];

    $return_params = array(
      'tuotepainot' => $tuotepainot,
      'tuotepainot_yht' => $tuotepainot_yht,
      'vaktuotetiedot' => $vaktuotetiedot,
      'max_ltq_til' => $max_ltq_til,
    );

    return $return_params;
  }
}

if (!function_exists('piirra_vak_rivi_loppu')) {
  function piirra_vak_rivi_loppu($params) {

    extract($params);

    $nimitykset = explode("###", wordwrap($edrow["nimitys"], $wordwrap_mitta, "###"));

    // Limited Quantity jos kaikki pakkaukset ovat riitt‰v‰n pieni‰
    if ($edrow["limited_qty"] != "" and isset($limited_qty[$edrow["limited_qty"]]) and $max_ltq_til > 0 and $max_ltq_til <= $limited_qty[$edrow["limited_qty"]]) {
      $vaktuotetiedot[] = "{$edrow['yk_nro']}, LTD QTY";
    }
    else {
      $vaktuotetiedot[] = $edrow['yk_nro'];
    }

    $vaktuotetiedot[] = $nimitykset[0];

    for ($i = 1; $i < count($nimitykset); $i++) {
      $vaktuotetiedot[] = "$nimitykset[$i]";
    }

    $vakecho = "";

    if ($taulu == 'vak_imdg') {
      if (trim($edrow["luokka"]) != "") $vakecho .= t("Luokka", $kieli)." $edrow[luokka]";
    }
    else {
      if (trim($edrow["lipukkeet"]) != "") $vakecho .= t("Luokka", $kieli)." $edrow[lipukkeet]";
    }

    if (trim($edrow["pakkausryhma"]) != "") $vakecho .= ", ".t("Pakkausryhm‰", $kieli)." $edrow[pakkausryhma]";
    if (trim($edrow["leimahduspiste"]) != "" and $taulu == 'vak_imdg') $vaktuotetiedot[] = t("Leimahduspiste", $kieli)." {$edrow['leimahduspiste']}";

    if ($taulu == 'vak_imdg' and trim($edrow["meria_saastuttava"]) != "") {
      $vaktuotetiedot[] = t("Meri‰ saastuttava", $kieli);
    }

    if ($tyyppi == "DGD" and $tuotepainot > 0) {
      $vakecho .= "###".$tuotepainot;
    }

    $max_ltq_til = 0;

    if ($vakecho != "") {
      $vaktuotetiedot[] = "$vakecho";
    }

    $vaktuotetiedot[] = "";
    $tuotepainot = 0;

    return array(
      'vaktuotetiedot' => $vaktuotetiedot,
      'tuotepainot' => $tuotepainot,
      'max_ltq_til' => $max_ltq_til,
    );
  }
}

if (!function_exists('palauta_tuotteen_vak_koodi')) {
  function palauta_tuotteen_vak_koodi($tuoteno, $laji = '') {
    global $kukarow, $yhtiorow;

    $taulu = "vak";
    $vak_kentta = "vakkoodi";

    $vakselect = "tuote.vakkoodi";
    $vakjoin   = "";

    if ($yhtiorow["vak_kasittely"] != "" and trim($laji) != "" and strtolower($laji) == 'imdg') {
      $taulu = "vak_imdg";
      $vak_kentta = "vak_imdg_koodi";
    }

    if ($yhtiorow["vak_kasittely"] != "") {
      $vakselect = "concat('UN', {$taulu}.yk_nro) vakkoodi";
      $vakjoin   = "JOIN {$taulu} ON tuote.yhtio = {$taulu}.yhtio and tuote.{$vak_kentta} = {$taulu}.tunnus";
    }

    $query = "SELECT {$vakselect}
              FROM tuote
              {$vakjoin}
              WHERE tuote.yhtio = '{$kukarow['yhtio']}'
              AND tuote.tuoteno = '{$tuoteno}'
              AND tuote.{$vak_kentta} not in ('','0')";
    $res = pupe_query($query);
    $row = mysql_fetch_assoc($res);

    return $row['vakkoodi'];
  }
}

if (!function_exists("palauta_vak_tiedot")) {
  function palauta_vak_tiedot($otunnus, $kieli = '', $tyyppi = '', $laji = '') {
    global $kukarow, $yhtiorow;

    if ($tyyppi == "DGD") $kieli = "en";

    if ($yhtiorow["vak_kasittely"] != "" and trim($laji) != "" and strtolower($laji) == 'imdg') {
      $taulu = "vak_imdg";
      $vak_kentta = "vak_imdg_koodi";
    }
    else {
      $taulu = "vak";
      $vak_kentta = "vakkoodi";
    }

    // K‰ytet‰‰nkˆ VAK-tietokantaa
    if ($yhtiorow["vak_kasittely"] != "") {

      if (isset($kieli) and strtolower($kieli) != "fi") {
        $nimityskuvaus = "name_and_description";
      }
      else {
        $nimityskuvaus = "nimi_ja_kuvaus";
      }

      $vakselect = "  concat({$taulu}.yk_nro, {$taulu}.name_and_description, {$taulu}.lipukkeet, {$taulu}.luokka, {$taulu}.pakkausryhma, tuote.meria_saastuttava, tuote.leimahduspiste) {$vak_kentta},
              concat('UN', {$taulu}.yk_nro) yk_nro,
              {$taulu}.{$nimityskuvaus} nimitys,
              {$taulu}.lipukkeet,
              {$taulu}.luokka,
              {$taulu}.pakkausryhma,
              tuote.leimahduspiste,
              tuote.meria_saastuttava,
              {$taulu}.rajoitetut_maarat_ja_poikkeusmaarat_1 limited_qty";
      $vakjoin   = "JOIN {$taulu} ON tuote.yhtio = {$taulu}.yhtio and tuote.{$vak_kentta} = {$taulu}.tunnus";
    }
    else {
      $vakselect = "  tuote.vakkoodi {$vak_kentta},
              '' yk_nro,
              '' nimitys,
              '' lipukkeet,
              '' luokka,
              '' pakkausryhma,
              '' leimahduspiste,
              '' meria_saastuttava,
              '' limited_qty";
      $vakjoin   = "";
    }

    $query = "SELECT {$vakselect},
              if(tuote.myynti_era > 0,tuote.myynti_era , 1) era,
              tuote.vakmaara tilavuus,
              tuote.pakkausmateriaali materiaali,
              sum(tilausrivi.varattu+tilausrivi.kpl) kpl,
              sum((tilausrivi.varattu+tilausrivi.kpl)*tuote.tuotemassa) tuotepaino
              FROM tilausrivi
              JOIN tuote ON tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno
              {$vakjoin}
              JOIN lasku ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
              LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
              WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
              and tilausrivi.tyyppi  IN ('L','G')
              and tilausrivi.otunnus IN ($otunnus)
              and tuote.{$vak_kentta} not in ('','0')
              and (tilausrivi.varattu+tilausrivi.kpl) > 0
              GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
              ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12";
    $riresult1 = pupe_query($query);

    $pakkaustieto_tunnukset_lisa = "";

    foreach (explode(",", $otunnus) as $ot) {
      $ot = str_replace("'", "", $ot);
      $pakkaustieto_tunnukset_lisa .= " AND r1.pakkaustieto_tunnukset LIKE '%{$ot}%' ";
    }

    if (substr($otunnus, 0, 1) != "'") {
      $otunnus = str_replace(",", "','", $otunnus);
      $otunnus = "'{$otunnus}'";
    }

    // Tarkistetaan onko syˆtetty uudet pakkaustiedot
    $query = "SELECT distinct r1.tunnus,
              r1.pakkaus,
              r1.pakkauskuvaus,
              TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM r1.kollit)) AS kollit,
              round(r1.kilot,1) kilot
              FROM rahtikirjat r1
              WHERE r1.otsikkonro = 0
              AND r1.yhtio        = '{$kukarow['yhtio']}'
              {$pakkaustieto_tunnukset_lisa}";
    $riresult2 = pupe_query($query);

    // Jos uusia pakkaustietoja ei ole syˆtetty, katotaan normaalisti pakkaustiedot
    if (mysql_num_rows($riresult2) == 0) {
      $query = "SELECT distinct r1.tunnus,
                r1.pakkaus,
                r1.pakkauskuvaus,
                TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM r1.kollit)) AS kollit,
                round(r1.kilot,1) kilot
                FROM rahtikirjat r1
                WHERE (r1.pakkaustieto_tunnukset = '' OR r1.pakkaustieto_tunnukset IS NULL)
                AND r1.otsikkonro in ({$otunnus})
                AND r1.yhtio      = '{$kukarow['yhtio']}'";
      $riresult2 = pupe_query($query);
    }

    //* Limited Quantity tiedot *//
    //Inner packagings placed in shrink-wrapped or stretch-wrapped trays a Maximum net quantity
    //Combination packagings a Maximum net quantity
    $limited_qty = array(
      "LQ0"  => "0",
      "LQ1"  => "120",
      "LQ2"  => "1000",
      "LQ3"  => "500",
      "LQ4"  => "3000",
      "LQ5"  => "5000",
      "LQ6"  => "5000",
      "LQ7"  => "5000",
      "LQ8"  => "3000",
      "LQ9"  => "6000",
      "LQ10"  => "500",
      "LQ11"  => "500",
      "LQ12"  => "1000",
      "LQ13"  => "1000",
      "LQ14"  => "25",
      "LQ15"  => "100",
      "LQ16"  => "125",
      "LQ17"  => "500",
      "LQ18"  => "1000",
      "LQ19"  => "5000",
      "LQ20"  => "0",
      "LQ21"  => "0",
      "LQ22"  => "1000",
      "LQ23"  => "3000",
      "LQ24"  => "6000",
      "LQ25"  => "1000",
      "LQ26"  => "500",
      "LQ27"  => "6000",
      "LQ28"  => "3000");

    $vakrakirtiedot = array();
    $vaktuotetiedot = array();
    $rakirkilot = 0;
    $tuotepainot = 0;
    $tuotepainot_yht = 0;

    if (mysql_num_rows($riresult1) > 0 and mysql_num_rows($riresult2) > 0) {

      while ($row = mysql_fetch_assoc($riresult2)) {

        $query = "SELECT *
                  FROM pakkaus
                  WHERE yhtio        = '$kukarow[yhtio]'
                  and pakkaus        = '$row[pakkaus]'
                   and pakkauskuvaus = '$row[pakkauskuvaus]'";
        $sresult = pupe_query($query);
        $srow = mysql_fetch_assoc($sresult);

        $pakkaus_en = t_tunnus_avainsanat($srow, "pakkaus", "PAKKAUSKV", $kieli);

        if ($row["kollit"] != 0 or $row["kilot"] != 0) {
          if ($tyyppi == "DGD") {

            $vakkirakirri = "$row[kollit]###$row[kollit] x $pakkaus_en containing:###";
            $vakkirakirri .= $row["kilot"];

            $vakrakirtiedot[] = $vakkirakirri;
          }
          else {
            $vakrakirtiedot[] = "$row[kollit] x $pakkaus_en (".t("Bruttopaino", $kieli)." ".$row["kilot"]." kg) ".t("sis‰lt‰en", $kieli).":";
          }

          $rakirkilot += $row["kilot"];
        }
      }
    }

    if (mysql_num_rows($riresult1) > 0) {

      $edrow = "";
      $max_ltq_til = 0;
      $wordwrap_mitta = $tyyppi == 'DGD' ? 50 : 90;

      $num_rows = mysql_num_rows($riresult1);
      $i_rows = 1;

      $row = mysql_fetch_assoc($riresult1);

      $edrow_ei_ollut_tyhjaa = true;

      do {

        if (!isset($edrow[$vak_kentta]) or $row[$vak_kentta] == $edrow[$vak_kentta]) {
          $params = array(
            'row' => $row,
            'kieli' => $kieli,
            'vaktuotetiedot' => $vaktuotetiedot,
            'max_ltq_til' => $max_ltq_til,
            'tuotepainot' => $tuotepainot,
            'tuotepainot_yht' => $tuotepainot_yht,
            'limited_qty' => $limited_qty,
          );

          $return_params = piirra_vak_rivi($params);

          $tuotepainot = $return_params['tuotepainot'];
          $tuotepainot_yht = $return_params['tuotepainot_yht'];
          $vaktuotetiedot = $return_params['vaktuotetiedot'];
          $max_ltq_til = $return_params['max_ltq_til'];
        }

        if ($num_rows == $i_rows or (isset($edrow[$vak_kentta]) and $row[$vak_kentta] != $edrow[$vak_kentta])) {

          if ($num_rows == $i_rows and ($edrow == "" or $row[$vak_kentta] == $edrow[$vak_kentta])) {
            $edrow = $row;
            $edrow_ei_ollut_tyhjaa = false;
          }

          $params = array(
            'row' => $row,
            'edrow' => $edrow,
            'max_ltq_til' => $max_ltq_til,
            'limited_qty' => $limited_qty,
            'vaktuotetiedot' => $vaktuotetiedot,
            'tuotepainot' => $tuotepainot,
            'taulu' => $taulu,
            'kieli' => $kieli,
            'tyyppi' => $tyyppi,
            'wordwrap_mitta' => $wordwrap_mitta,
          );

          $return_params = piirra_vak_rivi_loppu($params);

          extract($return_params);
        }

        if (isset($edrow[$vak_kentta]) and $row[$vak_kentta] != $edrow[$vak_kentta]) {
          $params = array(
            'row' => $row,
            'kieli' => $kieli,
            'vaktuotetiedot' => $vaktuotetiedot,
            'max_ltq_til' => $max_ltq_til,
            'tuotepainot' => $tuotepainot,
            'tuotepainot_yht' => $tuotepainot_yht,
            'limited_qty' => $limited_qty,
          );

          $return_params = piirra_vak_rivi($params);

          $tuotepainot = $return_params['tuotepainot'];
          $tuotepainot_yht = $return_params['tuotepainot_yht'];
          $vaktuotetiedot = $return_params['vaktuotetiedot'];
          $max_ltq_til = $return_params['max_ltq_til'];
        }

        if ($num_rows == $i_rows and $edrow_ei_ollut_tyhjaa) {
          $params = array(
            'row' => $row,
            'edrow' => $row,
            'max_ltq_til' => $max_ltq_til,
            'limited_qty' => $limited_qty,
            'vaktuotetiedot' => $vaktuotetiedot,
            'tuotepainot' => $tuotepainot,
            'taulu' => $taulu,
            'kieli' => $kieli,
            'tyyppi' => $tyyppi,
            'wordwrap_mitta' => $wordwrap_mitta,
          );

          $return_params = piirra_vak_rivi_loppu($params);

          extract($return_params);
        }

        $edrow = $row;
        $i_rows++;
      }
      while ($row = mysql_fetch_assoc($riresult1));

      if ($rakirkilot > 0) {
        $vaktuotetiedot[] = "TOTAL GROSS MASS: " . round($rakirkilot, 2) . " kg";
        $vaktuotetiedot[] = "TOTAL NET MASS: " . round($tuotepainot_yht, 2) . " kg";
      }
    }

    return array($vakrakirtiedot, $vaktuotetiedot);
  }
}

if (!function_exists('tulosta_sscc')) {
  function tulosta_sscc($komento, $sscc_kopio = false) {
    global $kukarow, $yhtiorow;

    if ($sscc_kopio) {
      $sscc = $sscc_kopio;
    }
    else {
      $sscc = uusi_sscc_nro();
    }

    $nimi = str_replace(array('ƒ', '‰', '÷', 'ˆ'), array('A', 'a', 'O', 'o'), $yhtiorow['nimi']);

    $viivakoodi  = ">6";
    $viivakoodi .= substr($sscc, 0, 1);
    $viivakoodi .= ">5";
    $viivakoodi .= substr($sscc, 1);

    $sivu = "*** ETIKETIN KOKO ***
                 {D1530,1040,1470|}
                 {AX;+000,+000,+00|}
                 {AY;+05,0|}
                 {C|}

         *** YHTI÷N NIMI ***
         {PC001;0100,0100,1,1,J,00,B|}
               {RC001;$nimi|}

         {LC;0050,0130,1000,0130,0,2|}

         {PC002;0100,0180,05,05,J,00,B|}
               {RC002;SSCC|}

         {PC003;0100,0260,1,1,J,00,B|}
               {RC003;$sscc|}

         {LC;0050,0310,1000,0310,0,2|}

                 {XB00;0100,0350,A,3,04,0,0350,+0000000000,000,0,00|}
                 {RB00;$viivakoodi|}

         *** TULOSTUS  ***
                {XS;I,0001,0002C3210|}
                ".chr(12);

    $sivu = escapeshellarg($sivu);

    if ($komento == "email") {
      echo t("SSCC-tarraa ei voida tulostaa s‰hkˆpostiin"), "<br>";
    }
    else {
      $line = exec("echo \"$sivu\" | $komento");
    }

    return $sscc;
  }
}

if (!function_exists('tulosta_reittietiketti')) {
  function tulosta_reittietiketti($params) {
    global $kukarow, $yhtiorow;

    extract($params);

    $y_nimi   = str_replace(array('ƒ', '‰', '÷', 'ˆ'), array('A', 'a', 'O', 'o'), $yhtiorow['nimi']);
    $y_osoite   = str_replace(array('ƒ', '‰', '÷', 'ˆ'), array('A', 'a', 'O', 'o'), $yhtiorow['osoite']);
    $y_postino   = str_replace(array('ƒ', '‰', '÷', 'ˆ'), array('A', 'a', 'O', 'o'), $yhtiorow['postino']);
    $y_postitp   = str_replace(array('ƒ', '‰', '÷', 'ˆ'), array('A', 'a', 'O', 'o'), $yhtiorow['postitp']);

    $viivakoodi1  = ">6";
    $viivakoodi1 .= substr($tilriv, 0, 2);
    $viivakoodi1 .= ">5";
    $viivakoodi1 .= substr($tilriv, 2);

    $viivakoodi2  = ">6";
    $viivakoodi2 .= substr($sscc, 0, 1);
    $viivakoodi2 .= ">5";
    $viivakoodi2 .= substr($sscc, 1);

    $sivu = "  *** ETIKETIN KOKO ***
          {D2280,1040,2250|}
          {AX;+000,+000,+00|}
          {AY;+10,0|}
          {C|}

           *** YHTI÷N NIMI ***
           {PC000;0850,0260,3,3,M,00,B|}
          {RC000;{$pakkaus_kirjain}|}

           {PC001;0100,0100,1,1,J,00,B|}
           {RC001;{$y_nimi}|}

           {PC002;0100,0150,05,05,J,00,B|}
           {RC002;{$y_osoite}|}

           {PC003;0100,0190,05,05,J,00,B|}
           {RC003;{$y_postino} {$y_postitp}|}

           {PC004;0600,0050,07,07,H,00,B|}
           {RC004;".date("d.m.Y")."|}

           {PC005;0100,0340,1,1,H,00,B|}
           {RC005;{$toimitustapa}|}

           {PC006;0100,0390,05,05,J,00,B|}
           {RC006;Keraaja: {$kukarow['nimi']}|}

           {PC007;0100,0430,05,05,J,00,B|}
           {RC007;Til.nro: {$tilriv}|}

           {PC008;0100,0470,05,05,J,00,B|}
           {RC008;Rivit: {$rivit}|}

           {PC009;0300,0470,05,05,J,00,B|}
           {RC009;Paino: {$paino} kg|}

           {PC010;0650,0470,05,05,J,00,B|}
           {RC010;Tilavuus: {$tilavuus} m3|}

           *** VAAKAVIIVAT ***
           {LC;0100,0570,1000,0570,0,2|}
           {LC;0100,0900,1000,0900,0,2|}

           *** PYSTYVIIVAT ***
           {LC;0100,0570,0100,0900,0,2|}
           {LC;1000,0570,1000,0900,0,2|}

           {PC011;0120,0660,1,1,H,00,B|}
           {RC011;{$lask_nimi}|}

           {PC012;0120,0720,1,1,H,00,B|}
           {RC012;{$lask_nimitark}|}

           {PC013;0120,0780,1,1,H,00,B|}
           {RC013;{$lask_osoite}|}

           {PC014;0120,0840,1,1,H,00,B|}
           {RC014;{$lask_postino} {$lask_postitp}|}

           {PC015;0100,0980,1,1,H,00,B|}
           {RC015;Viite: {$lask_viite}|}

           {PC016;0100,1040,1,1,H,00,B|}
           {RC016;Merkki: {$lask_merkki}|}

             {XB00;0100,1100,A,3,04,0,0150,+0000000000,000,1,00|}
             {RB00;{$viivakoodi1}|}

             {XB01;0100,1320,A,3,04,0,0150,+0000000000,000,1,00|}
             {RB01;{$viivakoodi2}|}

           *** TULOSTUS  ***
          {XS;I,0001,0002C3210|}
          ".chr(12);

    if (trim($reittietikettitulostin) != '' and $reittietikettitulostin != 'email') {
      $line = exec(" echo \"$sivu\" | $reittietikettitulostin");
    }
  }
}

if (!function_exists('tulosta_hrx')) {
  function tulosta_hrx($params) {
    global $kukarow, $yhtiorow;

    extract($params);

    $y_nimi   = trim($lahettaja_nimi.' '.$lahettaja_nimitark);
    $y_osoite   = trim($lahettaja_osoite);
    $y_postino   = trim($lahettaja_postino);
    $y_postitp   = trim($lahettaja_postitp);
    $y_maa     = trim($lahettaja_maa);
    $y_maa_nimi = trim($lahettaja_maa_nimi);

    $viivakoodi1  = ">6";
    $viivakoodi1 .= substr($tilriv, 0, 1);
    $viivakoodi1 .= ">5";
    $viivakoodi1 .= substr($tilriv, 2);

    $viivakoodi1 = $tilriv;

    $ot_toimosoite = t("Toimitusosoite", $yhtiorow['kieli'])." / Delivery address";

    $ot_lahettaja = t("L‰hett‰j‰", $yhtiorow['kieli'])." / Consignor";

    $ot_kuljetusliike = t("Kuljetusliike", $yhtiorow['kieli'])." / Carrier";

    $toimosoite_nimi = trim($toim_nimi.' '.$toim_nimitark);
    $toimosoite_postino_postitp = trim($toim_postino.' '.$toim_postitp);

    $ot_yhteyshenkilo = t("Yhteyshenkilˆ", $yhtiorow['kieli']);
    $ot_puhelin = t("Puhelin", $yhtiorow['kieli']);

    if ($yhtiorow['yhtio'] == 'mergr') {

      if ($pakkauskoodi == 'CLL') {
        $pakkauskoodi = $montako_laatikkoa_yht > 1 ? 'PAKKI' : 'PAKK';
      }
      elseif ($pakkauskoodi == 'PLL') {
        $pakkauskoodi = 'LAVA';
      }
    }

    if (!empty($mediatyyppi) and in_array($mediatyyppi, array('LSN149X104', 'LSN59X40'))) {
      $nauha = "2";
    }
    else {
      $nauha = "0";
    }

    /*
      Yhteyshenkilˆ ja puhelinnumero toimitusosoite-kohdassa tulee jostakin
    */

    $sivu = "  *** ETIKETIN KOKO ***
          {D1530,1040,1490|}
          {AX;+000,+000,+00|}
          {AY;+10,0|}
          {C|}

           *** TOIMITUSOSOITE ***
           {PC000;0070,0140,05,05,J,00,B|}
          {RC000;{$ot_toimosoite}|}

           {PC001;0070,0200,1,1,A,00,B|}
          {RC001;{$toim_nimi}|}

           {PC002;0070,0250,1,1,A,00,B|}
          {RC002;{$toim_osoite}|}

           {PC003;0070,0330,1,1,A,00,B|}
          {RC003;{$toim_postino} {$toim_postitp}|}

           {PC004;0070,0380,1,1,A,00,B|}
          {RC004;{$ot_yhteyshenkilo}: {$yh_nimi}|}

           {PC005;0070,0430,1,1,A,00,B|}
          {RC005;{$ot_puhelin}: {$yh_puh}|}

           *** VAAKAVIIVA ***
           {LC;0070,0450,0920,0450,0,2|}

           {PC006;0070,0490,05,05,J,00,B|}
          {RC006;{$ot_lahettaja}|}

           {PC007;0070,0535,1,1,A,00,B|}
          {RC007;{$y_nimi}|}

           {PC008;0070,0580,1,1,A,00,B|}
          {RC008;{$y_osoite} {$y_postino} {$y_postitp} {$y_maa_nimi}|}

           *** VAAKAVIIVA ***
           {LC;0070,0600,0920,0600,0,2|}

           {PC009;0070,0640,05,05,J,00,B|}
          {RC009;{$ot_kuljetusliike}|}

           {PC010;0070,0700,1,1,A,00,B|}
          {RC010;AS HRX   Reg.no.: 10117789|}

           {PC011;0070,0745,1,1,A,00,B|}
          {RC011;Alasi tee 5 Tabasalu EST/031/1010|}

           {PC012;0070,0790,1,1,A,00,B|}
          {RC012;Ph.: +372 6277800|}

           {PC013;0070,0840,1,1,A,00,B|}
          {RC013;Fax: +372 6277817|}

           {PC014;0070,0890,1,1,A,00,B|}
          {RC014;E-mail: info@hrx.ee Web: www.hrx.ee|}

           *** VAAKAVIIVA ***
           {LC;0070,0910,0920,0910,0,2|}

             {XB00;0070,0930,C,2,04,0,0230,+0000000000,000,0,00|}
             {RB00;{$viivakoodi1}|}

           {PC015;0070,1210,1,1,A,00,B|}
          {RC015;CMR: *{$viivakoodi1}*|}

           {PC016;0070,1310,1,1,A,00,B|}
          {RC016;{$monesko_laatikko} / {$montako_laatikkoa_yht} {$pakkauskoodi}|}

          *** TULOSTUS  ***
          {XS;I,0001,0002C3{$nauha}10|}
          ".chr(12);

    if (trim($reittietikettitulostin) != '' and $reittietikettitulostin != 'email') {
      $line = exec(" echo \"$sivu\" | $reittietikettitulostin");
    }
  }
}

if (!function_exists('tulosta_oslap_mg')) {
  function tulosta_oslap_mg($params) {
    global $kukarow, $yhtiorow;

    extract($params);

    if (trim($komento) != '' and $komento != 'email') {

      $toimosoite_nimi = trim($toim_nimi.' '.$toim_nimitark);

      $ot_tilaus = t("Tilaus", $yhtiorow['kieli']);

      if (in_array($mediatyyppi, array('LSN149X104', 'LSN59X40', 'LS149X104', 'LS59X40'))) {

        if (in_array($mediatyyppi, array('LSN149X104', 'LSN59X40'))) {
          $nauha = "2";
        }
        else {
          $nauha = "0";
        }

        if (in_array($mediatyyppi, array('LSN149X104', 'LS149X104'))) {

          $sivu = "  *** ETIKETIN KOKO ***
                {D1530,1040,1490|}
                {AX;+000,+000,+00|}
                {AY;+10,0|}
                {C|}

                 *** TOIMITUSOSOITE ***
                 {PC000;0070,0200,1,1,I,00,B|}
                {RC000;{$toimosoite_nimi}|}

                 {PC001;0070,0250,1,1,I,00,B|}
                {RC001;{$toim_osoite}|}

                 {PC002;0070,0330,1,1,I,00,B|}
                {RC002;{$toim_postino} {$toim_postitp}|}

                 {PC003;0070,0380,1,1,I,00,B|}
                {RC003;{$ot_tilaus} {$tilriv}|}

                 {PC004;0070,0430,1,1,I,00,B|}
                {RC004;{$montako_laatikkoa_yht} {$pakkauskoodi}|}
                ";
        }
        else {
          $sivu = "  *** ETIKETIN KOKO ***
                {D0420,0590,0400|}
                {AX;+000,+000,+00|}
                {AY;+10,0|}
                {C|}

                 *** TOIMITUSOSOITE ***
                 {PC000;0030,0050,1,1,I,00,B|}
                {RC000;{$toimosoite_nimi}|}

                 {PC001;0030,0100,1,1,I,00,B|}
                {RC001;{$toim_osoite}|}

                 {PC002;0030,0180,1,1,I,00,B|}
                {RC002;{$toim_postino} {$toim_postitp}|}

                 {PC003;0030,0230,1,1,I,00,B|}
                {RC003;{$ot_tilaus} {$tilriv}|}

                 {PC004;0030,0280,1,1,I,00,B|}
                {RC004;{$montako_laatikkoa_yht} {$pakkauskoodi}|}
                ";
        }

        $sivu .= "  *** TULOSTUS  ***
              {XS;I,0001,0002C3{$nauha}10|}
              ".chr(12);

        $line = exec("echo \"$sivu\" | $komento");

        echo t("Osoitelappu tulostuu")."...<br>";
      }
      else {
        $sivu  = "\n\n\n";
        $sivu .= "          --------------------------------------------------\n";
        $sivu .= "          {$toimosoite_nimi}\n\n";
        $sivu .= "          {$toim_osoite}\n";
        $sivu .= "          {$toim_postino} {$toim_postitp}\n";
        $sivu .= "          {$ot_tilaus} {$tilriv}\n";
        $sivu .= "          {$montako_laatikkoa_yht} {$pakkauskoodi}\n";
        $sivu .= "          --------------------------------------------------";

        $tempfile = tempnam("/tmp", "oslap");
        file_put_contents($tempfile, $sivu);

        $params = array(
          'filename' => $tempfile,
        );

        // konveroidaan postscriptiksi
        $filenimi_ps = pupesoft_a2ps($params);

        $line = exec("$komento {$filenimi_ps}");

        echo t("Osoitelappu tulostuu")."...<br>";
      }
    }
  }
}

if (!function_exists("tarkista_email")) {
  function tarkista_email($email) {

    // meill‰ jos on useampi meiliosoite
    if (strpos($email, ",") !== FALSE) {
      $sahkopostit = explode(",", $email);
    }
    else {
      $sahkopostit = array($email);
    }

    foreach ($sahkopostit as $email) {
      // katotaan lˆytyykˆ email osoitteen domain...
      list($nimi, $domain) = explode("@", trim($email));

      if (!(checkdnsrr($domain, "MX") or checkdnsrr($domain, "A"))) {
        return $domain;
      }
    }

    return "";
  }
}

if (!function_exists("hae_tuotemuutokset")) {
  function hae_tuotemuutokset($tuoteno, $pvm = '') {

    global $kukarow;

    $lask = 0;
    $lista = array();
    $muutos = "";
    $validaattori = TRUE;

    while ($validaattori === TRUE) {

      $lisa = "";

      if ($muutos != "") {
        $lisa = " AND tuote_muutokset.muutospvm < '$muutos' ORDER BY tuote_muutokset.muutospvm DESC";
      }

      if ($pvm != "") {
        $lisa .= " AND tuote_muutokset.muutospvm > '$pvm'";
      }

      $query = "SELECT tuote_muutokset.alkup_tuoteno, tuote_muutokset.muutospvm, ifnull(kuka.nimi, tuote_muutokset.kuka) kuka
                FROM tuote_muutokset
                LEFT JOIN kuka on (kuka.yhtio = tuote_muutokset.yhtio AND kuka.kuka = tuote_muutokset.kuka)
                WHERE tuote_muutokset.yhtio = '$kukarow[yhtio]'
                AND tuote_muutokset.tuoteno = '$tuoteno'
                $lisa
                LIMIT 1";
      $result = pupe_query($query);

      if (mysql_num_rows($result) > 0) {
        $row = mysql_fetch_assoc($result);
        $muutos = $row['muutospvm'];
        $tuoteno = $row['alkup_tuoteno'];
        $lista[$lask]['tuoteno'] = $tuoteno;
        $lista[$lask]['muutospvm'] = $muutos;
        $lista[$lask]['kuka'] = $row["kuka"];
      }
      else {
        $validaattori = FALSE;
      }

      $lask++;

      // laitetaan maksimiarvo jonka j‰lkeen se hypp‰‰ pois ettei j‰‰ ikuiseen looppiin
      if ($lask == 60) break;
    }

    return $lista;
  }
}

if (!function_exists("kopioi_tilausrivi")) {
  function kopioi_tilausrivi($tunnus, $poikkeukset = array()) {
    global $kukarow;

    $insid = 0;

    $query = "SELECT *
              from tilausrivi
              where yhtio = '{$kukarow["yhtio"]}'
              and tunnus  = '$tunnus'";
    $rivires = pupe_query($query);

    if (mysql_num_rows($rivires) > 0) {

      $rivirow = mysql_fetch_assoc($rivires);

      $rfields = "";
      $rvalues = "";

      for ($i=0; $i < mysql_num_fields($rivires)-1; $i++) {

        $rfields .= mysql_field_name($rivires, $i).",";

        switch (mysql_field_name($rivires, $i)) {
        case 'muuttaja':
        case 'muutospvm':
          $rvalues .= "'',";
          break;
        case 'laatija':
          $rvalues .= "'$kukarow[kuka]',";
          break;
        case 'laadittu':
          if (isset($poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)])) {
            $rvalues .= $poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)];
          }
          else {
            $rvalues .= "now(),";
          }
          break;
        case 'kate_korjattu':
          $rvalues .= "NULL,";
          break;
        case 'poikkeava_tulliprosentti':
        case 'vahvistettu_maara':
          if (isset($poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)])) {
            $rvalues .= $poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)];
          }
          else {
            $rvalues .= "0.00,";
          }
          break;
        default:
          $rvalues .= "'";

          if (isset($poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)])) {
            $rvalues .= $poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)];
          }
          else {
            $rvalues .= $rivirow[mysql_field_name($rivires, $i)];
          }

          $rvalues .= "',";
        }
      }

      $rfields = substr($rfields, 0, -1);
      $rvalues = substr($rvalues, 0, -1);

      $kysely = "INSERT INTO tilausrivi ($rfields) VALUES ($rvalues)";
      $insres = pupe_query($kysely);
      $insid  = mysql_insert_id($GLOBALS["masterlink"]);

      // tarkistetaan onko alkuper‰inen rivi asn_sanomat-taulussa
      // jos on, lis‰t‰‰n uusi splitattu rivi kanssa sinne
      $query = "SELECT tunnus
                FROM asn_sanomat
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND MATCH (tilausrivi) AGAINST ('{$tunnus}' IN BOOLEAN MODE)";
      $chk_asn_res = pupe_query($query);

      while ($chk_asn_row = mysql_fetch_assoc($chk_asn_res)) {
        $query = "UPDATE asn_sanomat SET
                  tilausrivi  = CONCAT(tilausrivi, ',', '{$insid}')
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$chk_asn_row['tunnus']}'";
        $upd_res = pupe_query($query);
      }

      // Kopioidaan tilausrivin lisatiedot
      $query = "SELECT *
                FROM tilausrivin_lisatiedot
                WHERE yhtio          = '{$kukarow["yhtio"]}'
                and tilausrivitunnus = '$tunnus'";
      $lisrivires = pupe_query($query);

      if (mysql_num_rows($lisrivires) > 0) {
        $rivirow = mysql_fetch_assoc($lisrivires);

        $rfields = "";
        $rvalues = "";

        for ($i=0; $i < mysql_num_fields($lisrivires)-1; $i++) {

          $rfields .= mysql_field_name($lisrivires, $i).",";

          switch (mysql_field_name($lisrivires, $i)) {
          case 'muuttaja':
            $rvalues .= "'',";
            break;
          case 'muutospvm':
            $rvalues .= "'0000-00-00 00:00:00',";
            break;
          case 'laatija':
            $rvalues .= "'$kukarow[kuka]',";
            break;
          case 'luontiaika':
            $rvalues .= "now(),";
            break;
          case 'poikkeava_tulliprosentti':
            if (isset($poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)])) {
              $rvalues .= $poikkeukset["tilausrivi.".mysql_field_name($rivires, $i)];
            }
            else {
              $rvalues .= "0.00,";
            }
            break;
          case 'tilausrivitunnus':
            $rvalues .= "'$insid',";
            break;
          default:
            $rvalues .= "'";

            if (isset($poikkeukset["tilausrivin_lisatiedot.".mysql_field_name($lisrivires, $i)])) {
              $rvalues .= $poikkeukset["tilausrivin_lisatiedot.".mysql_field_name($lisrivires, $i)];
            }
            else {
              $rvalues .= $rivirow[mysql_field_name($lisrivires, $i)];
            }

            $rvalues .= "',";
          }
        }

        $rfields = substr($rfields, 0, -1);
        $rvalues = substr($rvalues, 0, -1);

        $kysely = "INSERT INTO tilausrivin_lisatiedot ($rfields) VALUES ($rvalues)";
        $insres = pupe_query($kysely);
      }
    }

    return $insid;
  }
}

if (!function_exists("hae_hyvityshinta")) {
  function hae_hyvityshinta($liitostunnus, $tuoteno, $kpl) {
    global $kukarow, $yhtiorow;

    $kpl = abs($kpl);
    $laskuri = 0;
    $palautus = array();
    $tilausrivit = array();

    // Haetaan tuotteen tiedot
    $status =  "SELECT *
                FROM tuote
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tuoteno = '{$tuoteno}'";
    $tuoteres = pupe_query($status);
    $tuoterow = mysql_fetch_assoc($tuoteres);

    $query = "SELECT *
              FROM asiakas
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$liitostunnus}'";
    $asiakasres = pupe_query($query);
    $asiakasrow = mysql_fetch_assoc($asiakasres);

    $query_ale_lisa = generoi_alekentta('M');

    $i = 0;
    $cur_date = date('Y-m-d');
    $date_2yo = date("Y-m-d", mktime(0, 0, 0, date("n"), date("j"), date("Y")-2));

    // Jos kahden vuoden aikarajaus ylittyy, breikataan looppi
    while ($cur_date >= $date_2yo) {

      $querylisa = $i == 0 ? " or tilausrivi.laskutettuaika = '0000-00-00'" : "";
      $i++;

      $pre_date = $cur_date;
      $cur_date = explode('-', $cur_date);
      $cur_date = date("Y-m-d", mktime(0, 0, 0, $cur_date[1]-1, $cur_date[2], $cur_date[0]));

      // Haetaan asiakkaan laskutetut/toimitetut veloitusrivit + toisella queryll‰ hyvitysrivit
      $query = "SELECT datediff(CURRENT_DATE, if(tilausrivi.laskutettuaika = '0000-00-00', CURRENT_DATE, tilausrivi.laskutettuaika)) AS ika,
                tilausrivi.hinta * {$query_ale_lisa} hinta,
                sum(tilausrivi.kpl + tilausrivi.varattu) kpl
                FROM tilausrivi USE index (yhtio_tyyppi_tuoteno_laskutettuaika)
                JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio
                  AND lasku.tunnus       = tilausrivi.otunnus
                  AND lasku.tila         = 'L'
                  AND lasku.alatila      IN ('D','X')
                  AND lasku.liitostunnus = '{$liitostunnus}')
                WHERE tilausrivi.yhtio   = '{$kukarow['yhtio']}'
                AND tilausrivi.tyyppi    = 'L'
                AND tilausrivi.tuoteno   = '{$tuoteno}'
                AND tilausrivi.varattu + tilausrivi.kpl > 0
                AND tilausrivi.var       not in ('P','J')
                AND tilausrivi.laadittu  >= '{$date_2yo} 00:00:00'
                AND ((tilausrivi.laskutettuaika <= '{$pre_date}' and tilausrivi.laskutettuaika >= '{$cur_date}') $querylisa)
                GROUP BY ika, hinta
                HAVING kpl != 0

                UNION

                SELECT datediff(CURRENT_DATE, if(tilausrivi.laskutettuaika = '0000-00-00', CURRENT_DATE, tilausrivi.laskutettuaika)) AS ika,
                tilausrivi.hinta * {$query_ale_lisa} hinta,
                sum(tilausrivi.kpl + tilausrivi.varattu) kpl
                FROM tilausrivi USE index (yhtio_tyyppi_tuoteno_laskutettuaika)
                JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio
                  AND lasku.tunnus       = tilausrivi.otunnus
                  AND lasku.liitostunnus = '{$liitostunnus}')
                WHERE tilausrivi.yhtio   = '{$kukarow['yhtio']}'
                AND tilausrivi.tyyppi    = 'L'
                AND tilausrivi.tuoteno   = '{$tuoteno}'
                AND tilausrivi.varattu + tilausrivi.kpl < 0
                AND tilausrivi.var       not in ('P','J')
                AND tilausrivi.laadittu  >= '{$date_2yo} 00:00:00'
                AND ((tilausrivi.laskutettuaika <= '{$pre_date}' and tilausrivi.laskutettuaika >= '{$cur_date}') $querylisa)
                GROUP BY ika, hinta
                HAVING kpl != 0

                ORDER BY ika ASC, kpl ASC";
      $viimhintares = pupe_query($query);

      // echo "Syotetty: $kpl<br>";

      while ($viimerow = mysql_fetch_assoc($viimhintares)) {

        // Haluamme hyvitt‰‰ $kpl kappaletta
        // Tilausrivill‰ (historiassa) on myyty $viimerow[kpl] kappaletta
        // Asiakkaan kumulatiiviset myydyt kappaleet on $laskuri kappaletta

        $laskuri += $viimerow['kpl'];

        // echo "Kpl $viimerow[kpl] Kumulatiivinen_kpl $laskuri J‰ljell‰_kpl $kpl<br>";

        if ($laskuri > 0 and $viimerow["kpl"] > 0) {

          // Rivill‰ on v‰hemm‰n kuin halutaan hyvitt‰‰, joten hyvitet‰‰n vain rivin verra
          if ($viimerow["kpl"] <= $kpl and $laskuri >= $kpl) {
            $hyvitys_kpl = $viimerow["kpl"];
          }
          elseif ($laskuri <= $kpl) {
            // Kumulatiivisesti on v‰hemm‰n kuin halutaan, joten hyvitet‰‰n vain kumulatiivinen arvo
            $hyvitys_kpl = $laskuri;
          }
          else {
            // Muussa tapauksessa hyvitet‰‰n niin paljon kun tarvitaan;
            $hyvitys_kpl = $kpl;
          }

          // Lis‰t‰‰n rivi
          $tilausrivit[] = array("ika" => $viimerow['ika'], "hinta" => $viimerow['hinta'], "kpl" => $hyvitys_kpl);

          // V‰hennet‰‰n kumulatiivisesta saldosta sek‰ j‰ljell‰ olevasta m‰‰r‰tst‰ t‰m‰ rivi
          $laskuri -= $hyvitys_kpl;
          $kpl -= $hyvitys_kpl;
          // echo "** Hyvitet‰‰n: $hyvitys_kpl J‰ljell‰_kpl $kpl<br>";
        }

        if ($laskuri >= $kpl) {
          break 2;
        }
      }
    }

    // Asiakas ei ole ostanut t‰t‰ tuotette -> palautuskielto
    if (count($tilausrivit) == 0) {
      $palautus[] = array(
        "tuoteno" => $tuoteno,
        "kpl" => $kpl,
        "hinta" => 0,
        "ale" => 0,
        "kommentti" => t("Palautuskielto"),
        "palautuskielto" => "X"
      );
      return $palautus;
    }

    // Jos lˆytyi v‰hemm‰n myyntej‰ kun asiakas on palauttamassa -> palautuskielto
    if ($laskuri < $kpl) {
      $palautus[] = array(
        "tuoteno" => $tuoteno,
        "kpl" => $kpl,
        "hinta" => 0,
        "ale" => 0,
        "kommentti" => t("Palautuskielto"),
        "palautuskielto" => "X"
      );
      // echo "** Palautuskielto: $kpl<br>";
    }

    foreach ($tilausrivit as $tilausrivi_index => $tilausrivi_arvo) {

      unset($ale);

      $kommentti = $palautuskielto = "";

      $sql = "SELECT tuote_kentta,
              tuote_arvo,
              asiakas_kentta,
              asiakas_arvo,
              asiakas_segmentti,
              aika_ostosta,
              rokotusprosentti,
              palautuskielto,
              prioriteetti,
              rokotusselite
              FROM hyvityssaannot
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND (aika_ostosta > '{$tilausrivi_arvo['ika']}' or aika_ostosta = 0)
              ORDER BY prioriteetti, tunnus";
      $result = pupe_query($sql);

      while ($rivi = mysql_fetch_array($result)) {

        $tuote = true;
        $asiakas = true;
        $segmentti = true;

        unset($kentta, $arvo);

        foreach ($rivi as $kentta => $arvo) {

          switch ($kentta) {
          case 'tuote_kentta':
            if ($arvo != '' and $rivi['tuote_arvo'] != '' and $tuoterow[$arvo] != $rivi["tuote_arvo"]) $tuote = false;
            break;
          case 'asiakas_kentta':
            if ($arvo != '' and $rivi['asiakas_arvo'] != '' and $asiakasrow[$arvo] != $rivi["asiakas_arvo"]) $asiakas = false;
            break;
          case 'asiakas_segmentti':
            if ($arvo != 0) {

              // haetaan asiakkaan segmentit
              $query = "SELECT parent.tunnus
                        FROM puun_alkio
                        JOIN dynaaminen_puu AS node ON (puun_alkio.yhtio = node.yhtio and puun_alkio.laji = node.laji and puun_alkio.puun_tunnus = node.tunnus)
                        JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft AND parent.lft > 0)
                        WHERE puun_alkio.yhtio = '$kukarow[yhtio]'
                        AND puun_alkio.laji    = 'asiakas'
                        AND puun_alkio.liitos  = '{$liitostunnus}'";
              $as_seg_res = pupe_query($query);

              $segmentti = false;

              while ($as_seg_row = mysql_fetch_assoc($as_seg_res)) {
                if ($as_seg_row['tunnus'] == $arvo) {
                  $segmentti = true;
                  break;
                }
              }
            }

            break;
          }
        }

        if ($tuote and $asiakas and $segmentti) {
          $ale = $rivi["rokotusprosentti"];
          $kommentti = $rivi["rokotusselite"];
          $palautuskielto = $rivi['palautuskielto'];
          break;
        }
      }

      // Jos ei lˆytynyt yht‰‰n hyvityssaantˆj‰ -> palautuskielto
      if (!isset($ale)) {
        $palautus[] = array(
          "tuoteno" => $tuoteno,
          "kpl" => $tilausrivi_arvo['kpl'],
          "hinta" => 0,
          "ale" => 0,
          "kommentti" => t("Palautuskielto"),
          "palautuskielto" => "X"
        );
      }
      else {

        if ($palautuskielto != "") {
          $tilausrivi_arvo['hinta'] = 0;
          $ale = 0;
        }

        $palautus[] = array(
          "tuoteno" => $tuoteno,
          "kpl" => $tilausrivi_arvo['kpl'],
          "hinta" => $tilausrivi_arvo['hinta'],
          "ale" => $ale,
          "kommentti" => $kommentti,
          "palautuskielto" => $palautuskielto
        );
      }
    }

    return $palautus;
  }
}

if (!function_exists("tuotteen_lisatiedot")) {
  function tuotteen_lisatiedot($tuoteno) {
    global $kukarow;

    $i = 0;
    $parametrit = array();

    // Haetaan asiakkaan laskutetut/toimitetut veloitusrivit + toisella queryll‰ hyvitysrivit
    $query = "SELECT tuotteen_avainsanat.laji, tuotteen_avainsanat.selite, avainsana.selitetark
              FROM tuotteen_avainsanat
              JOIN avainsana ON (avainsana.yhtio = tuotteen_avainsanat.yhtio
                AND avainsana.laji             = 'LISATIETO'
                AND avainsana.selite           = SUBSTR(tuotteen_avainsanat.laji, 11))
              WHERE tuotteen_avainsanat.yhtio  = '$kukarow[yhtio]'
              AND tuotteen_avainsanat.kieli    = '$kukarow[kieli]'
              AND tuotteen_avainsanat.tuoteno  = '$tuoteno'
              AND tuotteen_avainsanat.laji     LIKE 'lisatieto_%'
              AND tuotteen_avainsanat.selite  != ''
              ORDER BY avainsana.jarjestys, tuotteen_avainsanat.selite";
    $parares = pupe_query($query);

    // Jos tuotteelle ei lˆydy parametrej‰
    if (mysql_num_rows($parares) == 0) {
      return $parametrit;
    }

    while ($pararow = mysql_fetch_assoc($parares)) {
      if ($pararow["selitetark"] == "") {
        $parametrit[$i]["kentta"] = substr($pararow["laji"], 10);
      }
      else {
        $parametrit[$i]["kentta"] = $pararow["selitetark"];
      }
      $parametrit[$i]["selite"] = $pararow["selite"];
      $i++;
    }

    return $parametrit;
  }
}

if (!function_exists("pisin_tuote")) {
  function pisin_tuote($pisin_tuote_array, $pisin_tuote_per_asiakas) {

    // sortataan pisin tuote ensiksi
    $tmp_arr = array();

    foreach ($pisin_tuote_array as $key => $arr) {
      foreach ($arr as $k => $v) {
        if ($k == 'tilaus') {
          foreach ($v as $nro) {
            foreach ($pisin_tuote_per_asiakas as $tmp => $arr2) {
              if (is_array($arr2) and in_array($key, $arr2)) {
                $tmp_arr[$key] = $arr['koko'];
              }
            }
          }
        }
      }
    }

    $pisin_tuote_array = array_intersect_key($pisin_tuote_array, $tmp_arr);

    return $pisin_tuote_array;
  }
}

if (!function_exists("valitse_pakkaus")) {
  function valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote_array, $pisin_tuote_per_asiakas, $eran_koko = '', $kaytetty_paino = '', $koko_nippu_tilavuus = 0, $koko_nippu_paino = 0, $eran_koko_pintaala = 0, $nurkan_takaa = false) {
    global $kukarow, $yhtiorow;

    $kaytettava_pakkaus = "";

    if ($eran_koko != '') {

      $pisin_tuote_array = pisin_tuote($pisin_tuote_array, $pisin_tuote_per_asiakas);
      $pisin_tuote = array_shift($pisin_tuote_array);

      if ($pisin_tuote['koko'] == '') {
        return "";
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<br>pakkaukset ovat pienimm‰st‰ isoimpaan<br>";
      }

      // pakkaukset ovat pienimm‰st‰ isoimpaan
      foreach ($pakkaukset as $indx => $pakkaus_array) {

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "$indx: ({$pakkaus_array['leveys']} >= {$pisin_tuote['koko']} or {$pakkaus_array['korkeus']} >= {$pisin_tuote['koko']} or {$pakkaus_array['syvyys']} >= {$pisin_tuote['koko']}) and {$pakkaus_array['paino']} >= $kaytetty_paino
          and (".$pakkaus_array['leveys'] * $pakkaus_array['syvyys'].") <= {$keraysvyohyketiedot['max_keraysera_pintaala']}<br>";
        }

        if (($pakkaus_array['leveys'] >= $pisin_tuote['koko'] or $pakkaus_array['korkeus'] >= $pisin_tuote['koko'] or $pakkaus_array['syvyys'] >= $pisin_tuote['koko']) and $pakkaus_array['paino'] >= $kaytetty_paino
          and ($pakkaus_array['leveys'] * $pakkaus_array['syvyys']) <= $keraysvyohyketiedot['max_keraysera_pintaala']) {

          if ($koko_nippu_tilavuus > 0 and $koko_nippu_paino > 0) {
            if ($koko_nippu_tilavuus >= $pakkaus_array['minimi_tilavuus'] or $koko_nippu_paino >= $pakkaus_array['minimi_paino']) {
              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "$koko_nippu_tilavuus > 0 and $koko_nippu_paino > 0 # $koko_nippu_tilavuus >= {$pakkaus_array['minimi_tilavuus']} or $koko_nippu_paino >= {$pakkaus_array['minimi_paino']}<br>";
              }
              $kaytettava_pakkaus = $indx;
              continue;
            }
          }
          elseif ($koko_nippu_tilavuus > 0 and $koko_nippu_paino == 0) {
            if ($koko_nippu_tilavuus >= $pakkaus_array['minimi_tilavuus']) {
              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "$koko_nippu_tilavuus > 0 and $koko_nippu_paino == 0 # $koko_nippu_tilavuus >= {$pakkaus_array['minimi_tilavuus']}<br>";
              }
              $kaytettava_pakkaus = $indx;
              continue;
            }
          }
          elseif ($koko_nippu_tilavuus == 0 and $koko_nippu_paino > 0) {
            if ($koko_nippu_paino >= $pakkaus_array['minimi_paino']) {
              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "$koko_nippu_tilavuus == 0 and $koko_nippu_paino > 0 # $koko_nippu_paino >= {$pakkaus_array['minimi_paino']}<br>";
              }
              $kaytettava_pakkaus = $indx;
              continue;
            }
          }
          else {
            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "else-haara, k‰ytett‰v‰ pakkaus = $indx<br>";
            }
            $kaytettava_pakkaus = $indx;
            continue;
          }
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "poistetaan pakkaus $indx pakkauksien joukosta<br>";
        }
        unset($pakkaukset[$indx]);
      }

      $kaytettava_pakkaus = false;

      foreach ($pakkaukset as $indx => $pakkaus_array) {
        if ($pakkaus_array['tilavuus'] >= $eran_koko) {
          $kaytettava_pakkaus = $indx;
          break;
        }
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<br>pisin mitta: $pisin_tuote[koko]<br>";
        $kukarow['debugstring'] .= "<pre>";
        $kukarow['debugstring'] .= var_export($pisin_tuote, TRUE);
        $kukarow['debugstring'] .= "</pre>";
        $kukarow['debugstring'] .= "kaytettava_pakkaus: $kaytettava_pakkaus valitse_pakkaus er‰n koko: $eran_koko<br>kaytetty_paino: $kaytetty_paino<br>";
      }

      if (!$nurkan_takaa) {
        // jos er‰n koko on tosi iso, niin katsotaan pakkauksista mik‰ on pakkauksia tarvittava minimim‰‰r‰
        $pakkauksien_jako = array();

        foreach ($pakkaukset as $_indx => $_pakkaus_array) {

          $jako = $eran_koko / $_pakkaus_array['tilavuus'];

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "$_indx: $jako = $eran_koko / $_pakkaus_array[tilavuus]<br>";

          // jos jako on pienempi kuin yksi, halutaan arvo mik‰ on l‰hinn‰ ykkˆst‰ = optimaalinen t‰yttˆm‰‰r‰!!!!
          if ($jako < 1) {
            $jako = 1 - $jako;
          }

          $pakkauksien_jako["k$_indx"] = $jako;
        }

        asort($pakkauksien_jako);

        // pienin arvo
        // esim "k53";
        $tmp = array_keys($pakkauksien_jako);

        // poistetaan k-merkint‰ edest‰
        $tmp = substr($tmp[0], 1);

        $kaytettava_pakkaus = $tmp;

        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "kaytettava_pakkaus : $kaytettava_pakkaus<br>";
      }
    }
    else {

      $pisin_tuote_array = pisin_tuote($pisin_tuote_array, $pisin_tuote_per_asiakas);
      $pisin_tuote = array_shift($pisin_tuote_array);

      if ($pisin_tuote['koko'] == "") return "";

      // tarkistetaan ensin mahtuuko koko nippu yhteen pakettiin
      if ($koko_nippu_tilavuus > 0 and $koko_nippu_paino > 0) {

        // pakkaukset ovat pienimm‰st‰ isoimpaan
        foreach ($pakkaukset as $indx => $pakkaus_array) {

          if (($pakkaus_array['leveys'] >= $pisin_tuote['koko'] or $pakkaus_array['korkeus'] >= $pisin_tuote['koko'] or $pakkaus_array['syvyys'] >= $pisin_tuote['koko']) and $pakkaus_array['paino'] >= $pisin_tuote['paino']) {
            if ($pakkaus_array['paino'] >= $koko_nippu_paino and $pakkaus_array['tilavuus'] >= $koko_nippu_tilavuus) {
              if ($koko_nippu_tilavuus >= $pakkaus_array['minimi_tilavuus'] or $koko_nippu_paino >= $pakkaus_array['minimi_paino']) {
                $kaytettava_pakkaus = $indx;
                break;
              }
            }
          }
        }
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "pisin mitta: $pisin_tuote[koko]<br>";
        $kukarow['debugstring'] .= "<pre>";
        $kukarow['debugstring'] .= var_export($pisin_tuote, TRUE);
        $kukarow['debugstring'] .= "</pre>";
        $kukarow['debugstring'] .= "koko_nippu_tilavuus: $koko_nippu_tilavuus<br>";
        $kukarow['debugstring'] .= "koko_nippu_paino: $koko_nippu_paino<br>";
      }

      if ($kaytettava_pakkaus == "" and !$nurkan_takaa) {

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "K‰ytett‰v‰‰ pakkausta ei lˆytynyt. Ei olla nurkan takaa casessa. Katsotaan pakkaukset pienimm‰st‰ isompaan<br>";
        }

        // pakkaukset ovat pienimm‰st‰ isoimpaan
        foreach ($pakkaukset as $indx => $pakkaus_array) {

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "$indx: ({$pakkaus_array['leveys']} >= {$pisin_tuote['koko']} or {$pakkaus_array['korkeus']} >= {$pisin_tuote['koko']} or {$pakkaus_array['syvyys']} >= {$pisin_tuote['koko']}) and {$pakkaus_array['paino']} >= {$pisin_tuote['paino']}<br>";
          }

          if (($pakkaus_array['leveys'] >= $pisin_tuote['koko'] or $pakkaus_array['korkeus'] >= $pisin_tuote['koko'] or $pakkaus_array['syvyys'] >= $pisin_tuote['koko']) and $pakkaus_array['paino'] >= $pisin_tuote['paino']) {
            if ($koko_nippu_tilavuus > 0 and $koko_nippu_paino > 0) {
              if ($koko_nippu_tilavuus >= $pakkaus_array['minimi_tilavuus'] or $koko_nippu_paino >= $pakkaus_array['minimi_paino']) {

                if (isset($kukarow['debugstring'])) {
                  $kukarow['debugstring'] .= "$koko_nippu_tilavuus > 0 and $koko_nippu_paino > 0 and $koko_nippu_tilavuus >= {$pakkaus_array['minimi_tilavuus']} or $koko_nippu_paino >= {$pakkaus_array['minimi_paino']}<br>";
                }

                $kaytettava_pakkaus = $indx;
                break;
              }
            }
            elseif ($koko_nippu_tilavuus > 0 and $koko_nippu_paino == 0) {
              if ($koko_nippu_tilavuus >= $pakkaus_array['minimi_tilavuus']) {

                if (isset($kukarow['debugstring'])) {
                  $kukarow['debugstring'] .= "$koko_nippu_tilavuus > 0 and $koko_nippu_paino == 0 and $koko_nippu_tilavuus >= {$pakkaus_array['minimi_tilavuus']}<br>";
                }

                $kaytettava_pakkaus = $indx;
                break;
              }
            }
            elseif ($koko_nippu_tilavuus == 0 and $koko_nippu_paino > 0) {
              if ($koko_nippu_paino >= $pakkaus_array['minimi_paino']) {

                if (isset($kukarow['debugstring'])) {
                  $kukarow['debugstring'] .= "$koko_nippu_tilavuus == 0 and $koko_nippu_paino > 0 and $koko_nippu_paino >= {$pakkaus_array['minimi_paino']}<br>";
                }

                $kaytettava_pakkaus = $indx;
                break;
              }
            }
            else {
              $kaytettava_pakkaus = $indx;
              break;
            }
          }
        }
      }
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<br>(VALITSE PAKKAUS FUNKTIO): KƒYTETƒƒN PAKKAUSTA <font class='head'>{$pakkaukset[$kaytettava_pakkaus]['nimi']}</font><br><br>\n";
    }

    return $kaytettava_pakkaus;

  }
}

if (!function_exists("pakkauksen_iterointi")) {
  function pakkauksen_iterointi($keraysvyohyketiedot, $pakkaukset, $kaytettava_pakkaus, $pisin_tuote, $kaytettavat_pakkaukset, $eka_kierros, $eran_koko, $eran_koko_pintaala, $juokseva_nro, $kerailyniput_tiedot, $kerailyniput_key, $key, $pisin_tuote_per_asiakas) {
    global $kukarow, $yhtiorow;

    // tilaus loppuu, tehd‰‰n viel‰ t‰ss‰ vaiheessa pakkaustsekki
    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "Tarkastellaan tarvitaanko pienempi pakkaus!!!!<br>";
      $kukarow['debugstring'] .= "Nyt k‰ytett‰v‰ pakkaus: $kaytettava_pakkaus ja er‰n koko $eran_koko<br>";
    }

    $valitse_pakkaus_array_per_asiakas = array();

    foreach ($pisin_tuote_per_asiakas as $lask => $arr) {
      if ($kerailyniput_key[$key] == $lask) {
        $valitse_pakkaus_array_per_asiakas[$lask] = $arr;
      }
    }

    $kaytettava_pakkaus_backup = $kaytettava_pakkaus;
    $param = $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];
    $param_paino = $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'];

    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "kaytetty paino: $param_paino<br>";

    $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $valitse_pakkaus_array_per_asiakas, $param, $param_paino, $param, $param_paino);

    if ($kaytettava_pakkaus != $kaytettava_pakkaus_backup and $kaytettava_pakkaus != '') {
      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "T‰‰ ois parempi!!!! $kaytettava_pakkaus<br>";

      $backup_array = $kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro];

      $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = $pakkaukset[$kaytettava_pakkaus_backup]['kaytetty_tilavuus'];

      $pakkaukset[$kaytettava_pakkaus_backup]['kaytetty_tilavuus'] = 0;
      $pakkaukset[$kaytettava_pakkaus_backup]['kaytetty_paino'] = 0;

      if (isset($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro])) {
        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "unsetataan: ";
          $kukarow['debugstring'] .= var_export($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro], TRUE);
          $kukarow['debugstring'] .= "<br>";
        }

        unset($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro]);
      }

      if (count($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']]) == 0) {
        unset($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup][$kerailyniput_tiedot[$key]['liitostunnus']]);
      }

      if (count($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup]) == 0) {
        unset($kaytettavat_pakkaukset[$kaytettava_pakkaus_backup]);
      }

      $kaytettavat_pakkaukset[$kaytettava_pakkaus][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro] = $backup_array;

      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<br>";
    }
    elseif ($kaytettava_pakkaus == '') {
      $kaytettava_pakkaus = $kaytettava_pakkaus_backup;
    }

    return array($pakkaukset, $kaytettava_pakkaus, $kaytettavat_pakkaukset, $eran_koko, $eran_koko_pintaala);
  }
}

if (!function_exists("calculate_median")) {
  function calculate_median($arr) {
    sort($arr);

    // total numbers in array
    $count = count($arr);

    // find the middle value, or the lowest middle value
    $middleval = floor(($count - 1) / 2);

    // odd number, middle is the median
    if ($count % 2) {
      $median = $arr[$middleval];
    }
    else {
      // even number, calculate avg of 2 medians
      $low = $arr[$middleval];
      $high = $arr[$middleval + 1];
      $median = (($low + $high) / 2);
    }

    return $median;
  }
}

if (!function_exists("calculate_average")) {
  function calculate_average($arr) {
    return array_sum($arr) / count($arr);
  }
}

if (!function_exists("splittaa_tilaus")) {
  function splittaa_tilaus($lisatyt_tilausrivit) {
    global $kukarow, $yhtiorow;

    // $lisatyt_tilausrivit --> $lisatyt_tilausrivit[tilausrivi.otunnus][tilausrivi.tunnus] = sum(keraysera.kpl);
    $uudelle_tilaukselle = array();

    // K‰sitelt‰v‰t tilaukset
    $otunnukset = array_unique(array_keys($lisatyt_tilausrivit));

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<br>otunnukset:<pre>";
      $kukarow['debugstring'] .= var_export($otunnukset, TRUE);
      $kukarow['debugstring'] .= "</pre>Er‰‰n lis‰tyt tilausrivit:";
      $kukarow['debugstring'] .= "<pre>";
      $kukarow['debugstring'] .= var_export($lisatyt_tilausrivit, TRUE);
      $kukarow['debugstring'] .= "</pre>";
    }

    foreach ($otunnukset as $otun) {

      // Ei katsota saldottomia tuotteita t‰ss‰ kohtaa, koska niit‰ ei ole ker‰yser‰ss‰k‰‰n
      $query = "SELECT tilausrivi.*
                FROM tilausrivi
                JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                  AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                  AND tilausrivin_lisatiedot.ohita_kerays      = '')
                JOIN tuote ON (tilausrivi.yhtio = tuote.yhtio
                  AND tilausrivi.tuoteno                       = tuote.tuoteno
                  AND tuote.ei_saldoa                          = '')
                WHERE tilausrivi.yhtio                         = '{$kukarow['yhtio']}'
                AND tilausrivi.otunnus                         = '{$otun}'
                AND tilausrivi.var                             not in ('P','J','O','S')
                AND tilausrivi.tyyppi                         != 'D'
                AND tilausrivi.varattu                         > 0";
      $tilausrivires = pupe_query($query);

      while ($tilausrivirow = mysql_fetch_assoc($tilausrivires)) {
        // rivi‰ ei lis‰tty er‰‰n ollenkaan, siiret‰‰n se omalle tilaukselle
        if (!isset($lisatyt_tilausrivit[$otun][$tilausrivirow['tunnus']])) {
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "Rivi‰ ei lis‰tty er‰‰n ollenkaan, siiret‰‰n se omalle tilaukselle: $otun, $tilausrivirow[tunnus]<br>";

          $uudelle_tilaukselle[$otun][$tilausrivirow['tunnus']] = $tilausrivirow['varattu'];
        }

        // rivi‰ ei kokonaan lis‰tty er‰‰n, splitataan ja siirret‰‰n loput se omalle tilaukselle
        if (isset($lisatyt_tilausrivit[$otun][$tilausrivirow['tunnus']]) and $tilausrivirow['varattu'] > $lisatyt_tilausrivit[$otun][$tilausrivirow['tunnus']]) {
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "Rivi‰ ei kokonaan lis‰tty er‰‰n, splitataan ja siirret‰‰n loput omalle tilaukselle: $otun, $tilausrivirow[tunnus] ({$tilausrivirow['varattu']} > {$lisatyt_tilausrivit[$otun][$tilausrivirow['tunnus']]})<br>";

          $uudelle_tilaukselle[$otun][$tilausrivirow['tunnus']] = $lisatyt_tilausrivit[$otun][$tilausrivirow['tunnus']];
        }
      }
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<br>Uudelle tilaukselle:";
      $kukarow['debugstring'] .= "<pre>";
      $kukarow['debugstring'] .= var_export($uudelle_tilaukselle, TRUE);
      $kukarow['debugstring'] .= "</pre>";
    }

    foreach ($uudelle_tilaukselle as $otunn => $rivit) {

      // Haetaan splitattava tilaus
      $query = "SELECT *
                FROM lasku
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$otunn}'";
      $laskusplitres = pupe_query($query);
      $laskusplitrow = mysql_fetch_assoc($laskusplitres);

      $fields = "yhtio";
      $values = "'{$kukarow['yhtio']}'";

      // Ei monisteta tunnusta
      for ($i = 1; $i < mysql_num_fields($laskusplitres) - 1; $i++) {

        $fieldname = mysql_field_name($laskusplitres, $i);

        $fields .= ", {$fieldname}";

        switch ($fieldname) {
        case "kate_korjattu":
        case "lahetetty_ulkoiseen_varastoon":
          $values .= ", NULL";
          break;
        default:
          $values .= ", '".$laskusplitrow[$fieldname]."'";
        }
      }

      $query = "INSERT INTO lasku ($fields) VALUES ($values)";
      $uusires = pupe_query($query);

      $uusitunnus = mysql_insert_id($GLOBALS["masterlink"]);

      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "UUSI TILAUKSEN TUNNUS ON $uusitunnus<br><br>";

      $query = "SELECT *
                FROM laskun_lisatiedot
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND otunnus = '{$otunn}'";
      $laskulisatiedotsplitres = pupe_query($query);
      $lisatiedot_row = mysql_fetch_assoc($laskulisatiedotsplitres);

      $fields = "yhtio";
      $values = "'$kukarow[yhtio]'";

      // Ei monisteta tunnusta
      for ($i = 1; $i < mysql_num_fields($laskulisatiedotsplitres) - 1; $i++) {

        $fieldname = mysql_field_name($laskulisatiedotsplitres, $i);

        $fields .= ", {$fieldname}";

        switch ($fieldname) {
        case 'otunnus':
          $values .= ", '{$uusitunnus}'";
          break;
        default:
          $values .= ", '{$lisatiedot_row[$fieldname]}'";
        }
      }

      $query = "INSERT INTO laskun_lisatiedot ($fields) VALUES ($values)";
      $uusires = pupe_query($query);

      foreach ($rivit as $tilriv => $splitattava_tilausrivi_kpl) {
        // Siirrett‰v‰n/splitattavat rivin tiedot
        $query = "SELECT *
                  FROM tilausrivi
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$tilriv}'";
        $tilausrivisplitres = pupe_query($query);
        $tilausrivisplitrow = mysql_fetch_assoc($tilausrivisplitres);

        if ($tilausrivisplitrow["varattu"] != $splitattava_tilausrivi_kpl) {
          // Rivi splitataan
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "Rivi splitataan: $tilausrivisplitrow[tunnus]. ($tilausrivisplitrow[varattu] != $splitattava_tilausrivi_kpl)<br>";

          $fields = "yhtio";
          $values = "'$kukarow[yhtio]'";

          // Ei monisteta tunnusta
          for ($i = 1; $i < mysql_num_fields($tilausrivisplitres) - 1; $i++) {

            $fieldname = mysql_field_name($tilausrivisplitres, $i);

            $fields .= ", {$fieldname}";

            switch ($fieldname) {
            case 'otunnus':
              $values .= ", '{$uusitunnus}'";
              break;
            case 'varattu':
            case 'tilkpl':
              $values .= ", '".($tilausrivisplitrow['varattu'] - $splitattava_tilausrivi_kpl)."'";
              break;
            case 'kate_korjattu':
              $values .= ", NULL";
              break;
            default:
              $values .= ", '{$tilausrivisplitrow[$fieldname]}'";
            }
          }

          $query = "INSERT INTO tilausrivi ($fields) VALUES ($values)";
          $insertres = pupe_query($query);

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "$query<br><br>";

          $uusitunnus_tilausrivi = mysql_insert_id($GLOBALS["masterlink"]);

          $query = "SELECT *
                    FROM tilausrivin_lisatiedot
                    WHERE yhtio          = '{$kukarow['yhtio']}'
                    AND tilausrivitunnus = '{$tilriv}'";
          $tilausrivin_lisatiedot_splitres = pupe_query($query);
          $tilausrivin_lisatiedot_splitrow = mysql_fetch_assoc($tilausrivin_lisatiedot_splitres);

          $fields = "yhtio";
          $values = "'$kukarow[yhtio]'";

          // Ei monisteta tunnusta
          for ($i = 1; $i < mysql_num_fields($tilausrivin_lisatiedot_splitres) - 1; $i++) {

            $fieldname = mysql_field_name($tilausrivin_lisatiedot_splitres, $i);
            $fields .= ", {$fieldname}";

            switch ($fieldname) {
            case 'tilausrivitunnus':
              $values .= ", '{$uusitunnus_tilausrivi}'";
              break;
            default:
              $values .= ", '{$tilausrivin_lisatiedot_splitrow[$fieldname]}'";
            }
          }

          $query = "INSERT INTO tilausrivin_lisatiedot ($fields) VALUES ($values)";
          $insertres = pupe_query($query);

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "$query<br><br>";

          // tuoteperhe-keissi
          if ($tilausrivisplitrow['perheid'] > 0 and $tilausrivisplitrow['tunnus'] == $tilausrivisplitrow['perheid']) {
            // p‰ivitet‰‰n splitatulle riville perheid
            $query = "UPDATE tilausrivi
                      SET perheid = '{$uusitunnus_tilausrivi}'
                      WHERE yhtio = '{$kukarow['yhtio']}'
                      AND tunnus  = '{$uusitunnus_tilausrivi}'";
            $update_res = pupe_query($query);

            $query = "SELECT *
                      FROM tilausrivi
                      WHERE yhtio  = '{$kukarow['yhtio']}'
                      AND otunnus  = '{$otunn}'
                      AND perheid  = '{$tilausrivisplitrow['tunnus']}'
                      AND tunnus  != '{$tilausrivisplitrow['tunnus']}'";
            $lapsires = pupe_query($query);

            while ($lapsirow = mysql_fetch_assoc($lapsires)) {

              $fields = "yhtio";
              $values = "'{$kukarow['yhtio']}'";

              // Ei monisteta tunnusta
              for ($i = 1; $i < mysql_num_fields($lapsires) - 1; $i++) {

                $fieldname = mysql_field_name($lapsires, $i);
                $fields .= ", ".$fieldname;

                switch ($fieldname) {
                case 'varattu':
                case 'tilkpl':
                  $values .= ", '".($lapsirow['varattu'] - $splitattava_tilausrivi_kpl)."'";
                  break;
                case 'otunnus':
                  $values .= ", '{$uusitunnus}'";
                  break;
                case 'perheid':
                  $values .= ", {$uusitunnus_tilausrivi}";
                  break;
                case 'kate_korjattu':
                  $values .= ", NULL";
                  break;
                default:
                  $values .= ", '{$lapsirow[$fieldname]}'";
                }
              }

              $kysely  = "INSERT INTO tilausrivi ({$fields}) VALUES ({$values})";
              $uusires = pupe_query($kysely);

              $split_tilausrivin_tunnus_lapsi = mysql_insert_id($GLOBALS["masterlink"]);

              $query = "SELECT *
                        FROM tilausrivin_lisatiedot
                        WHERE yhtio          = '{$kukarow['yhtio']}'
                        AND tilausrivitunnus = '{$lapsirow['tunnus']}'";
              $lisatiedot_result = pupe_query($query);
              $lisatiedot_row = mysql_fetch_array($lisatiedot_result);

              $fields = "yhtio";
              $values = "'{$kukarow['yhtio']}'";

              // Ei monisteta tunnusta
              for ($i = 1; $i < mysql_num_fields($lisatiedot_result) - 1; $i++) {

                $fieldname = mysql_field_name($lisatiedot_result, $i);
                $fields .= ", ".$fieldname;

                switch ($fieldname) {
                case 'tilausrivitunnus':
                  $values .= ", '{$split_tilausrivin_tunnus_lapsi}'";
                  break;
                default:
                  $values .= ", '".$lisatiedot_row[$fieldname]."'";
                }
              }

              $query = "INSERT into tilausrivin_lisatiedot ($fields) VALUES ($values)";
              $lisatiedot_result = pupe_query($query);

              $query = "UPDATE tilausrivi
                        SET tilkpl  = '{$splitattava_tilausrivi_kpl}',
                        varattu     = '{$splitattava_tilausrivi_kpl}'
                        WHERE yhtio = '{$kukarow['yhtio']}'
                        AND otunnus = '{$otunn}'
                        AND tunnus  = '{$lapsirow['tunnus']}'";
              $update_res = pupe_query($query);
            }
          }

          $query = "UPDATE tilausrivi
                    SET tilkpl  = '{$splitattava_tilausrivi_kpl}',
                    varattu     = '{$splitattava_tilausrivi_kpl}'
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '{$tilriv}'";
          $updateres = pupe_query($query);

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "$query<br><br>";
        }
        else {
          // Rivi siirret‰‰n
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "Rivi siirret‰‰n: $tilausrivisplitrow[tunnus]<br>";

          // katsotaan onko tuoteperheen lapsituotteella "ohita ker‰ys"-t‰pp‰ p‰‰ll‰
          if ($tilausrivisplitrow['perheid'] != 0 and $tilausrivisplitrow['perheid'] = $tilausrivisplitrow['tunnus']) {

            $query = "SELECT tunnus, tuoteno
                      FROM tilausrivi
                      WHERE yhtio  = '{$kukarow['yhtio']}'
                      AND otunnus  = '{$tilausrivisplitrow['otunnus']}'
                      AND perheid  = '{$tilausrivisplitrow['perheid']}'
                      AND tunnus  != '{$tilausrivisplitrow['perheid']}'";
            $lapsi_chk_res = pupe_query($query);

            while ($lapsi_chk_row = mysql_fetch_assoc($lapsi_chk_res)) {

              $query = "SELECT ohita_kerays
                        FROM tuoteperhe
                        WHERE yhtio    = '{$kukarow['yhtio']}'
                        AND tuoteno    = '{$lapsi_chk_row['tuoteno']}'
                        AND isatuoteno = '{$tilausrivisplitrow['tuoteno']}'
                        AND tyyppi     = 'P'";
              $ohita_kerays_chk_res = pupe_query($query);
              $ohita_kerays_chk_row = mysql_fetch_assoc($ohita_kerays_chk_res);

              if ($ohita_kerays_chk_row['ohita_kerays'] != '') {
                // p‰ivitet‰‰n lapsituote samalle tilaukselle minne is‰tuotekin menee
                $query = "UPDATE tilausrivi SET otunnus = '{$uusitunnus}' WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$lapsi_chk_row['tunnus']}'";
                $updateres = pupe_query($query);

                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "LAPSITUOTE $lapsi_chk_row[tuoteno] ohita ker‰ys on p‰‰ll‰!<br>$query<br><br>";
              }
            }
          }

          $query = "UPDATE tilausrivi SET otunnus = '{$uusitunnus}' WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$tilriv}'";
          $updateres = pupe_query($query);

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "$query<br><br>";
        }
      }
    }
  }
}

// j‰rjestell‰‰n ker‰ilyniput bubble sortin avulla vertaamalla sit‰ ensimm‰isen alkion mediaaniin, eli ensimm‰isen = parhaaseen keskihajontaotokseen
if (!function_exists('arrcmp')) {
  function arrcmp($a, $b) {
    global $main_value;

    if (abs($a - $main_value) > abs($b - $main_value)) {
      return -1;
    }
    elseif (abs($b - $main_value) > abs($a - $main_value)) {
      return 1;
    }
    else {
      return 0;
    }
  }
}

if (!function_exists("release_tee_keraysera")) {
  function release_tee_keraysera() {
    global $kukarow, $yhtiorow;

    // Vapautetaan muutkin k‰sittelyyn otetut tilaukset
    $query = "UPDATE lasku
              SET alatila = 'A'
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tila    = 'N'
              AND alatila = 'KA'";
    pupe_query($query);

    if ($yhtiorow['kerayserat'] != '' and $yhtiorow['siirtolistan_tulostustapa'] == 'U') {
      $query = "UPDATE lasku
                SET alatila = 'J'
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tila    = 'G'
                AND alatila = 'KJ'";
      pupe_query($query);
    }

    // Vapautetaan flocki
    flock($GLOBALS["flock_fp"], LOCK_UN);
  }
}

if (!function_exists('hae_tuotteet_ja_pisin_mitta')) {
  function hae_tuotteet_ja_pisin_mitta($args) {
    global $kukarow;

    $mittakerroin = $args['mittakerroin'];
    $tilaukset = $args['tilaukset'];
    $keraysvyohyke = $args['keraysvyohyke'];
    $pisin_tuote = $args['pisin_tuote'];
    $pisin_tuote_per_asiakas = $args['pisin_tuote_per_asiakas'];
    $eran_koko_chk = $args['eran_koko_chk'];
    $eran_koko_pintaala_chk = $args['eran_koko_pintaala_chk'];
    $eran_paino_chk = $args['eran_paino_chk'];

    $query = "SELECT tilausrivi.tunnus, tilausrivi.otunnus,
              round(if(tuote.tuotekorkeus * {$mittakerroin} < 1, 1, tuote.tuotekorkeus * {$mittakerroin}) * if(tuote.tuoteleveys * {$mittakerroin} < 1, 1, tuote.tuoteleveys * {$mittakerroin}) * if(tuote.tuotesyvyys * {$mittakerroin} < 1, 1, tuote.tuotesyvyys * {$mittakerroin}) * if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)), 4) as tuotteen_koko,
              tilausrivi.tuoteno,
              round(if(tuote.tuotekorkeus * {$mittakerroin} < 1, 1, tuote.tuotekorkeus * {$mittakerroin}) * if(tuote.tuoteleveys * {$mittakerroin} < 1, 1, tuote.tuoteleveys * {$mittakerroin}) * if(tuote.tuotesyvyys * {$mittakerroin} < 1, 1, tuote.tuotesyvyys * {$mittakerroin}), 4) y_koko,
              round(if(tuote.tuotekorkeus * {$mittakerroin} < 1, 1, tuote.tuotekorkeus * {$mittakerroin}), 2) tuotekorkeus,
              round(if(tuote.tuoteleveys * {$mittakerroin} < 1, 1, tuote.tuoteleveys * {$mittakerroin}), 2) tuoteleveys,
              round(if(tuote.tuotesyvyys * {$mittakerroin} < 1, 1, tuote.tuotesyvyys * {$mittakerroin}), 2) tuotesyvyys,
              if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)) y_maara,
              tuote.yksin_kerailyalustalle,
              IF(tuote.yksin_kerailyalustalle = 'K', 3, IF(tuote.yksin_kerailyalustalle = 'E', 1, 2)) yksin_kerailyalustalle_sort,
              tuote.tuotemassa y_paino,
              tilausrivi.perheid,
              if (tuote.tuotekorkeus > tuote.tuoteleveys, if(tuote.tuotekorkeus > tuote.tuotesyvyys, tuote.tuotekorkeus, tuote.tuotesyvyys), if(tuote.tuoteleveys > tuote.tuotesyvyys, tuote.tuoteleveys, tuote.tuotesyvyys)) * {$mittakerroin} AS pisin_sorttaus,
              if (tuote.tuotekorkeus < tuote.tuoteleveys, if(tuote.tuotekorkeus < tuote.tuotesyvyys, tuote.tuotekorkeus, tuote.tuotesyvyys), if(tuote.tuoteleveys < tuote.tuotesyvyys, tuote.tuoteleveys, tuote.tuotesyvyys)) * {$mittakerroin} AS lyhin_sorttaus,
              tuote.myynti_era
              FROM tilausrivi
              JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                AND tilausrivin_lisatiedot.ohita_kerays      = '')
              JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio
                AND tuote.tuoteno                            = tilausrivi.tuoteno)
              JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                AND varaston_hyllypaikat.keraysvyohyke       = '{$keraysvyohyke}')
              WHERE tilausrivi.yhtio                         = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus                         IN ({$tilaukset})
              AND tilausrivi.tyyppi                         != 'D'
              AND tilausrivi.var                             not in ('P','J','O','S')
              AND tilausrivi.varattu                         > 0
              ORDER BY yksin_kerailyalustalle_sort ASC, pisin_sorttaus DESC, varaston_hyllypaikat.indeksi ASC";
    $tuoteres = pupe_query($query);

    $inner_main_array = array();

    while ($tuoterow = mysql_fetch_assoc($tuoteres)) {

      $inner_main_array[] = $tuoterow;

      if (!isset($pisin_tuote[$tuoterow['tuoteno']]['koko'])) $pisin_tuote[$tuoterow['tuoteno']]['koko'] = 0;

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<font class='head'>(E400): Tuoteno: $tuoterow[tuoteno] KPL: $tuoterow[y_maara]</font> \n";
        $kukarow['debugstring'] .= "(E410): Otunnus: $tuoterow[otunnus] \n";
        $kukarow['debugstring'] .= "(E420): Tuotteen tilavuus: $tuoterow[y_koko] Tuotteen paino: $tuoterow[y_paino] <font class='head'>($tuoterow[tuoteleveys] cm&nbsp;&nbsp;x&nbsp;&nbsp;$tuoterow[tuotekorkeus] cm&nbsp;&nbsp;x&nbsp;&nbsp;$tuoterow[tuotesyvyys] cm)</font> \n";
        $kukarow['debugstring'] .= "<br>\n";
      }

      if ($tuoterow['tuoteleveys'] > $pisin_tuote[$tuoterow['tuoteno']]['koko']) {
        $pisin_tuote[$tuoterow['tuoteno']]['koko'] = $tuoterow['tuoteleveys'];
      }

      if ($tuoterow['tuotekorkeus'] > $pisin_tuote[$tuoterow['tuoteno']]['koko']) {
        $pisin_tuote[$tuoterow['tuoteno']]['koko'] = $tuoterow['tuotekorkeus'];
      }

      if ($tuoterow['tuotesyvyys'] > $pisin_tuote[$tuoterow['tuoteno']]['koko']) {
        $pisin_tuote[$tuoterow['tuoteno']]['koko'] = $tuoterow['tuotesyvyys'];
      }

      $pisin_tuote[$tuoterow['tuoteno']]['paino'] = $tuoterow['y_paino'];
      $pisin_tuote[$tuoterow['tuoteno']]['tilavuus'] = $tuoterow['y_koko'];
      $pisin_tuote[$tuoterow['tuoteno']]['kpl'] = $tuoterow['y_maara'];
      $pisin_tuote[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']] = $tuoterow['otunnus'];

      $pisin_tuote_per_asiakas[$tuoterow['otunnus']][] = $tuoterow['tuoteno'];

      if ($tuoterow['yksin_kerailyalustalle'] != 'K') {
        // simuloidaan ker‰yksen muodostumista
        $eran_koko_chk += $tuoterow['tuotteen_koko'];
      }

      $eran_koko_pintaala_chk += (($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus']) * $tuoterow['y_maara']);
      $eran_paino_chk += ($tuoterow['y_paino'] * $tuoterow['y_maara']);
    }

    return array(
      $inner_main_array,
      $pisin_tuote,
      $pisin_tuote_per_asiakas,
      $eran_koko_chk,
      $eran_koko_pintaala_chk,
      $eran_paino_chk,
      $tuoteres
    );
  }
}

if (!function_exists("tee_keraysera")) {
  function tee_keraysera($keraysvyohyke, $varasto) {
    global $kukarow, $yhtiorow, $tee_keraysera_debugdir;

    $lock_params = array(
      "locktime" => 0,
      "lockfile" => "$kukarow[yhtio]-tee_keraysera.lock",
      "return"   => TRUE
    );

    $yrityskerta   = 0;
    $max_yritykset = 5;

    // yritet‰‰n ottaa flock lukko
    do {
      if ($yrityskerta > 0) {
        // odotetaan 1-2 sekkaa
        usleep(rand(1000000, 2000000));
      }
      $yrityskerta++;
    } while (!pupesoft_flock($lock_params) and $yrityskerta < $max_yritykset);

    // jos ei saatu flock lukkoa!
    if ($yrityskerta == $max_yritykset) {
      return FALSE;
    }

    $varasto = (int) $varasto;

    // toimitustavan l‰htˆjen viikonp‰iv‰
    $viikonpaiva = date('w');

    $pakkaukset = array();
    $keraysvyohyketiedot = array();

    // esim. muutetaan metrit senteiksi
    $mittakerroin = 100;

    if ($tee_keraysera_debugdir != "" and is_dir($tee_keraysera_debugdir)) {

      if ($yhtiorow["kayttoliittyma"] == "U") {
        $css = $yhtiorow['css'];
      }
      else {
        $css = $yhtiorow['css_classic'];
      }

      // K‰ytet‰‰n globaalia muutujaa ja tehd‰‰n el‰m‰ helpoksi
      $kukarow['debugstring']  = "<html>\n<head>";
      $kukarow['debugstring'] .= "<style type='text/css'>{$css}</style>\n";
      $kukarow['debugstring'] .= "<title>$yhtiorow[nimi]</title>\n";
      $kukarow['debugstring'] .= "</head>\n";
      $kukarow['debugstring'] .= "<body>\n";
      $kukarow['debugstring'] .= "<font class='head'>".t("Ker‰yser‰debug")."</font><hr><br><br>\n";
      $kukarow['debugstring'] .= "<font class='head'>".t("Ker‰‰j‰").": $kukarow[kuka], $kukarow[nimi]. ($kukarow[keraajanro])</font><br><br>\n";
    }

    // Huom: tarkista updatet jos muutat k‰sitelt‰vi‰ alatiloja
    $tilat = "AND lasku.tila = 'N' AND lasku.alatila = 'A' ";

    if ($yhtiorow['kerayserat'] != '' and $yhtiorow['siirtolistan_tulostustapa'] == 'U') {
      $tilat = "AND ((lasku.tila = 'N' AND lasku.alatila = 'A') OR (lasku.tila = 'G' AND lasku.alatila = 'J')) ";
    }

    // Kun k‰ytt‰j‰n takana on ker‰ysvyˆhykkeiden monivalinta, joudutaan tilauksen order by ja group by tekem‰‰n niin, ett‰ pienimm‰n prioriteetin ja kellonajan mukaan j‰rjestet‰‰n
    // tilaukset tulemaan ker‰ysvyˆhykkeitt‰in. Jos prio ja aika on sama, otetaan randomisti jonkun ker‰ysvyˆhykkeen tilauksia (kumpi nyt sattuu tulemaan ensiksi),
    // muuten prio ja aika m‰‰r‰‰ mink‰ ker‰ysvyˆhykkeen tilaukset tulevat ensiksi.
    $query = "(SELECT SQL_NO_CACHE
               lasku.prioriteettinro as prioriteetti,
               (TIME_TO_SEC(TIMEDIFF(lahdot.lahdon_kellonaika, CURTIME())) / 60) as erotus,
               lasku.ohjausmerkki,
               lasku.h1time,
               lahdot.lahdon_kellonaika,
               keraysvyohyke.tunnus AS ker_tunnus,
               maksuehto.jv
               FROM lasku AS lasku
               JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio
                 AND tilausrivi.otunnus                       = lasku.tunnus
                 AND tilausrivi.var                           not in ('P','J','O','S')
                 AND tilausrivi.tyyppi                       != 'D'
                 AND tilausrivi.varattu                       > 0)
               JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                 AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                 AND tilausrivin_lisatiedot.ohita_kerays      = '')
               JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                 AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                 AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                 AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                 AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                 AND varaston_hyllypaikat.keraysvyohyke       IN ({$keraysvyohyke}))
               JOIN keraysvyohyke ON (keraysvyohyke.yhtio = lasku.yhtio
                 AND keraysvyohyke.tunnus                     IN ({$keraysvyohyke})
                 AND keraysvyohyke.tunnus                     = varaston_hyllypaikat.keraysvyohyke)
               JOIN toimitustapa ON (toimitustapa.yhtio = lasku.yhtio
                 AND toimitustapa.selite                      = lasku.toimitustapa)
               JOIN lahdot AS lahdot ON (lahdot.yhtio = toimitustapa.yhtio
                 AND lahdot.liitostunnus                      = toimitustapa.tunnus
                 AND (lahdot.pvm = CURDATE() or lahdot.vakisin_kerays != '')
                 AND (lahdot.lahdon_viikonpvm = {$viikonpaiva} or lahdot.vakisin_kerays != '')
                 AND lahdot.aktiivi                           IN ('', 'T')
                 AND (lahdot.kerailyn_aloitusaika <= CURTIME() or lahdot.vakisin_kerays != '')
                 AND (lahdot.tunnus = lasku.toimitustavan_lahto or lahdot.vakisin_kerays != ''))
               LEFT JOIN maksuehto AS maksuehto ON (maksuehto.yhtio = lasku.yhtio
                 and maksuehto.tunnus                         = lasku.maksuehto
                 and maksuehto.jv                            != '')
               LEFT JOIN kuka ON (kuka.yhtio = lasku.yhtio and kuka.kesken = lasku.tunnus)
               LEFT JOIN kerayserat ON (kerayserat.yhtio = lasku.yhtio
                 AND kerayserat.otunnus                       = lasku.tunnus
               )
               WHERE lasku.yhtio                              = '{$kukarow['yhtio']}'
               {$tilat}
               AND lasku.vakisin_kerays                       = ''
               AND lasku.varasto                              = '{$varasto}'
               AND kuka.tunnus is null
               AND kerayserat.tunnus is null
               GROUP BY 1,2,3,4,5,6,7)

               UNION

               (SELECT SQL_NO_CACHE
               lasku.prioriteettinro as prioriteetti,
               0 as erotus,
               lasku.ohjausmerkki,
               lasku.h1time,
               999999999999 as lahdon_kellonaika,
               keraysvyohyke.tunnus AS ker_tunnus,
               maksuehto.jv
               FROM lasku
               JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio
                 AND tilausrivi.otunnus                       = lasku.tunnus
                 AND tilausrivi.var                           not in ('P','J','O','S')
                 AND tilausrivi.tyyppi                       != 'D'
                 AND tilausrivi.varattu                       > 0)
               JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                 AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                 AND tilausrivin_lisatiedot.ohita_kerays      = '')
               JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                 AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                 AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                 AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                 AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                 AND varaston_hyllypaikat.keraysvyohyke       IN ({$keraysvyohyke}))
               JOIN keraysvyohyke ON (keraysvyohyke.yhtio = lasku.yhtio
                 AND keraysvyohyke.tunnus                     IN ({$keraysvyohyke})
                 AND keraysvyohyke.tunnus                     = varaston_hyllypaikat.keraysvyohyke)
               JOIN toimitustapa AS toimitustapa ON (toimitustapa.yhtio = lasku.yhtio
                 AND toimitustapa.selite                      = lasku.toimitustapa)
               JOIN lahdot AS lahdot ON (lahdot.yhtio = lasku.yhtio
                 AND lahdot.tunnus                            = lasku.toimitustavan_lahto)
               LEFT JOIN maksuehto ON (maksuehto.yhtio = lasku.yhtio
                 AND maksuehto.tunnus                         = lasku.maksuehto
                 AND maksuehto.jv                            != '')
               LEFT JOIN kuka ON (kuka.yhtio = lasku.yhtio
                 AND kuka.kesken                              = lasku.tunnus)
               LEFT JOIN kerayserat ON (kerayserat.yhtio = lasku.yhtio
                 AND kerayserat.otunnus                       = lasku.tunnus
               )
               WHERE lasku.yhtio                              = '{$kukarow['yhtio']}'
               {$tilat}
               AND lasku.vakisin_kerays                      != ''
               AND lasku.varasto                              = '{$varasto}'
               AND kuka.tunnus is null
               AND kerayserat.tunnus is null
               GROUP BY 1,2,3,4,5,6,7)
               ORDER BY 1,2,3,4,5,6";
    $res = pupe_query($query);

    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<pre>(E10): ".str_replace("\t", "", $query)."</pre>\n";

    if (mysql_num_rows($res) == 0) {
      return array('tilaukset' => array(), 'msg' => $query);
    }

    // Otetaan eka rivi, siin‰ on korkeimman prion vyˆhyke
    $row = mysql_fetch_assoc($res);

    // Tallennetaan prio 1 vyˆhyke t‰nne
    $keraysvyohyke = $row['ker_tunnus'];
    $aikarajaus    = $row['lahdon_kellonaika'];

    $query = "SELECT nimitys, sallitut_alustat,
              IF(max_keraysera_pintaala * pow({$mittakerroin}, 2) < 1, 1, max_keraysera_pintaala * pow({$mittakerroin}, 2)) max_keraysera_pintaala,
              max_keraysera_rivit,
              IF(max_keraysera_alustat = 0, 9999999999, max_keraysera_alustat) max_keraysera_alustat,
              yhdistelysaanto,
              lahtojen_valinen_enimmaisaika,
              ulkoinen_jarjestelma,
              tunnus as keraysvyohyke,
              keraysnippujen_priorisointi,
              aikaraja,
              mittaraja,
              painoraja,
              kappaleraja
              FROM keraysvyohyke
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$keraysvyohyke}'";
    $ker_result = pupe_query($query);
    $keraysvyohyketiedot = mysql_fetch_assoc($ker_result);

    $kukarow['max_keraysera_alustat'] = ((int) $kukarow['max_keraysera_alustat'] > 0) ? (int) $kukarow['max_keraysera_alustat'] : 9999999;

    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E20): Ker‰‰j‰n max_keraysera_alustat $kukarow[max_keraysera_alustat]<br><br>\n";
    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<font class='head'>(E30): ".t("Ker‰ysvyˆhyke").": $keraysvyohyketiedot[nimitys]</font><br>\n";

    if ($keraysvyohyketiedot['sallitut_alustat'] != "") {

      $query = "SELECT pakkaus.tunnus,
                pakkaus.pakkauskuvaus,
                pakkaus.pakkaus,
                pakkaus.yksin_eraan,
                pakkaus.paino,
                pakkaus.minimi_tilavuus * pow({$mittakerroin}, 3) as minimi_tilavuus,
                pakkaus.minimi_paino,
                (pakkaus.kayttoprosentti / 100) AS kayttoprosentti,
                if(pakkaus.leveys  * {$mittakerroin} < 1, 1, pakkaus.leveys  * {$mittakerroin}) leveys,
                if(pakkaus.korkeus * {$mittakerroin} < 1, 1, pakkaus.korkeus * {$mittakerroin}) korkeus,
                if(pakkaus.syvyys  * {$mittakerroin} < 1, 1, pakkaus.syvyys  * {$mittakerroin}) syvyys,
                if(pakkaus.leveys  * {$mittakerroin} < 1, 1, pakkaus.leveys  * {$mittakerroin}) * if(pakkaus.korkeus * {$mittakerroin} < 1, 1, pakkaus.korkeus * {$mittakerroin}) * if(pakkaus.syvyys * {$mittakerroin} < 1, 1, pakkaus.syvyys * {$mittakerroin}) AS tilavuus
                FROM pakkaus
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND paino   > 0
                AND leveys  > 0
                AND syvyys  > 0
                AND korkeus > 0
                AND tunnus  IN ({$keraysvyohyketiedot['sallitut_alustat']})
                ORDER BY tilavuus ASC";
      $pakkaus_result = pupe_query($query);

      $yksin_eraan = false;

      while ($pakkaus_row = mysql_fetch_assoc($pakkaus_result)) {
        $pakkaukset[$pakkaus_row['tunnus']]['nimi']          = $pakkaus_row['pakkauskuvaus'];
        $pakkaukset[$pakkaus_row['tunnus']]['leveys']         = $pakkaus_row['leveys'];
        $pakkaukset[$pakkaus_row['tunnus']]['korkeus']         = $pakkaus_row['korkeus'];
        $pakkaukset[$pakkaus_row['tunnus']]['syvyys']         = $pakkaus_row['syvyys'];
        $pakkaukset[$pakkaus_row['tunnus']]['paino']         = $pakkaus_row['paino'];
        $pakkaukset[$pakkaus_row['tunnus']]['minimi_tilavuus']     = $pakkaus_row['minimi_tilavuus'];
        $pakkaukset[$pakkaus_row['tunnus']]['minimi_paino']     = $pakkaus_row['minimi_paino'];
        $pakkaukset[$pakkaus_row['tunnus']]['tilavuus']       = $pakkaus_row['tilavuus'] * $pakkaus_row['kayttoprosentti'];
        $pakkaukset[$pakkaus_row['tunnus']]['yksin_eraan']       = $pakkaus_row['yksin_eraan'];
        $pakkaukset[$pakkaus_row['tunnus']]['kaytetty_tilavuus']   = 0;
        $pakkaukset[$pakkaus_row['tunnus']]['kaytetty_paino']     = 0;
        $pakkaukset[$pakkaus_row['tunnus']]['pintaala']     = $pakkaus_row['leveys'] * $pakkaus_row['syvyys'];
        $pakkaukset[$pakkaus_row['tunnus']]['pahvipintaala']    = (2 * ($pakkaus_row['leveys'] * $pakkaus_row['korkeus'] + $pakkaus_row['leveys'] * $pakkaus_row['syvyys'] + $pakkaus_row['korkeus'] * $pakkaus_row['syvyys']) + ($pakkaus_row['leveys'] * $pakkaus_row['syvyys']));

        if (!$yksin_eraan and $pakkaus_row['yksin_eraan'] == 'K') {
          $yksin_eraan = true;
        }
      }
    }
    else {
      $pakkaukset = array();
    }

    $asiakas_join  = "";

    if ($yhtiorow['siirtolistan_tulostustapa'] != 'U') {
      $asiakas_join  = "JOIN asiakas AS asiakas ON (asiakas.yhtio = lasku.yhtio AND asiakas.tunnus = lasku.liitostunnus)";
    }

    $_priorisointi_kaytossa = !empty($keraysvyohyketiedot['keraysnippujen_priorisointi']);
    $_aikaraja_kaytossa     = !empty($keraysvyohyketiedot['aikaraja']);

    $_mittaraja   = !empty($keraysvyohyketiedot['mittaraja']);
    $_painoraja   = !empty($keraysvyohyketiedot['painoraja']);
    $_kappaleraja = !empty($keraysvyohyketiedot['kappaleraja']);
    $_mitta_vai_paino_kappale = ($_mittaraja or $_painoraja or $_kappaleraja);

    if ($_priorisointi_kaytossa and $_aikaraja_kaytossa and $_mitta_vai_paino_kappale) {

      $pienimman_pak_til = $keraysvyohyketiedot['mittaraja'];
      $rivin_painoraja   = $keraysvyohyketiedot['painoraja'];
      $_aikaraja         = $keraysvyohyketiedot['aikaraja'];
      $_kappaleraja      = $keraysvyohyketiedot['kappaleraja'];

      $prioriteettilisa = "
      IF(
      lasku.tila = 'G' AND
      lasku.alatila = 'J' AND
      round((TIME_TO_SEC(TIMEDIFF(CURTIME(), lahdot.kerailyn_aloitusaika)) / 60) / (TIME_TO_SEC(TIMEDIFF(lahdot.lahdon_kellonaika, lahdot.kerailyn_aloitusaika)) / 60) * 100, 2) < {$_aikaraja} AND
      (
        SUM(ROUND((if(tuote.tuoteleveys * {$mittakerroin} < 1, 1, tuote.tuoteleveys * {$mittakerroin}) * if(tuote.tuotekorkeus * {$mittakerroin} < 1, 1, tuote.tuotekorkeus * {$mittakerroin}) * if(tuote.tuotesyvyys * {$mittakerroin} < 1, 1, tuote.tuotesyvyys * {$mittakerroin})) * if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)), 4))  < {$pienimman_pak_til} OR
        SUM(ROUND(tuote.tuotemassa * if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)), 4)) < {$rivin_painoraja} OR
        SUM(tilausrivi.varattu) < {$_kappaleraja}
      ),
      lasku.prioriteettinro + 1, lasku.prioriteettinro
      ) AS prioriteetti,
      ";

      $_group_by_lisa = "GROUP BY 2,3,4,5,6,7";
    }
    else {
      $prioriteettilisa = "lasku.prioriteettinro as prioriteetti,";
      $_group_by_lisa   = "GROUP BY 1,2,3,4,5,6,7";
    }

    $query = "LOCK TABLES
              lasku WRITE,
              asiakas READ,
              tilausrivi READ,
              tilausrivin_lisatiedot READ,
              varaston_hyllypaikat READ,
              tuote READ,
              keraysvyohyke READ,
              toimitustapa READ,
              maksuehto READ,
              kerayserat READ,
              kuka READ,
              lahdot READ";
    pupe_query($query);

    if ($aikarajaus != 999999999999 and $keraysvyohyketiedot['lahtojen_valinen_enimmaisaika'] > 0) {
      $query = "SELECT SQL_NO_CACHE
                {$prioriteettilisa}
                (TIME_TO_SEC(TIMEDIFF(lahdot.lahdon_kellonaika, CURTIME())) / 60) as erotus,
                lasku.ohjausmerkki,
                lasku.liitostunnus,
                maksuehto.jv,
                TRIM(CONCAT(lasku.toim_nimi, ' ', lasku.toim_nimitark, ' ', lasku.toim_osoite, ' ', lasku.toim_postino, ' ', lasku.toim_postitp)) as asiakas_nimi,
                CONCAT_WS('!°!', lahdot.tunnus, lahdot.asiakasluokka, lahdot.lahdon_kellonaika) as lahdon_tiedot,
                AVG(DATE_FORMAT(lasku.h1time, '%y%m%d%H%i')) h1time,
                GROUP_CONCAT(DISTINCT lasku.tunnus) AS tunnus
                FROM lasku
                {$asiakas_join}
                JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio
                  AND tilausrivi.otunnus                       = lasku.tunnus
                  AND tilausrivi.var                           not in ('P','J','O','S')
                  AND tilausrivi.tyyppi                       != 'D'
                  AND tilausrivi.varattu                       > 0)
                JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                  AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                  AND tilausrivin_lisatiedot.ohita_kerays      = '')
                JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                  AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                  AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                  AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                  AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                  AND varaston_hyllypaikat.keraysvyohyke       = '{$keraysvyohyke}')
                JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio
                  AND tuote.tuoteno                            = tilausrivi.tuoteno)
                JOIN keraysvyohyke ON (keraysvyohyke.yhtio = lasku.yhtio
                  AND keraysvyohyke.tunnus                     = '{$keraysvyohyke}')
                JOIN toimitustapa ON (toimitustapa.yhtio = lasku.yhtio
                  AND toimitustapa.selite                      = lasku.toimitustapa)
                LEFT JOIN maksuehto ON (maksuehto.yhtio = lasku.yhtio
                  AND maksuehto.tunnus                         = lasku.maksuehto
                  AND maksuehto.jv                            != '')
                LEFT JOIN kuka ON (kuka.yhtio = lasku.yhtio
                  and kuka.kesken                              = lasku.tunnus)
                LEFT JOIN kerayserat ON (kerayserat.yhtio = lasku.yhtio
                  AND kerayserat.otunnus                       = lasku.tunnus
                )
                JOIN lahdot ON (lahdot.yhtio = toimitustapa.yhtio
                  AND lahdot.liitostunnus                      = toimitustapa.tunnus
                  AND lahdot.aktiivi                           IN ('', 'T')
                  AND ((lahdot.pvm = CURDATE() AND lahdot.lahdon_viikonpvm = '{$viikonpaiva}' AND lahdot.kerailyn_aloitusaika <= CURTIME() AND lahdot.tunnus = lasku.toimitustavan_lahto) OR lahdot.vakisin_kerays != '')
                  AND (TIME_TO_SEC(TIMEDIFF(lahdot.lahdon_kellonaika, CURTIME())) / 60) <= ((TIME_TO_SEC(TIMEDIFF('{$aikarajaus}', CURTIME())) / 60) + {$keraysvyohyketiedot['lahtojen_valinen_enimmaisaika']}))
                WHERE lasku.yhtio                              = '{$kukarow['yhtio']}'
                {$tilat}
                AND lasku.vakisin_kerays                       = ''
                AND lasku.varasto                              = '{$varasto}'
                AND kuka.tunnus is null
                AND kerayserat.tunnus is null
                {$_group_by_lisa}
                ORDER BY prioriteetti,erotus,lahdon_tiedot,h1time,liitostunnus,ohjausmerkki";
    }
    else {

      $query = "SELECT SQL_NO_CACHE
                {$prioriteettilisa}
                0 as erotus,
                lasku.ohjausmerkki,
                lasku.liitostunnus,
                maksuehto.jv,
                TRIM(CONCAT(lasku.toim_nimi, ' ', lasku.toim_nimitark, ' ', lasku.toim_osoite, ' ', lasku.toim_postino, ' ', lasku.toim_postitp)) as asiakas_nimi,
                CONCAT_WS('!°!', 999999999999, 999999999999, 999999999999) lahdon_tiedot,
                AVG(DATE_FORMAT(lasku.h1time, '%y%m%d%H%i')) h1time,
                GROUP_CONCAT(DISTINCT lasku.tunnus) AS tunnus
                FROM lasku
                {$asiakas_join}
                JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio
                  AND tilausrivi.otunnus                       = lasku.tunnus
                  AND tilausrivi.var                           not in ('P','J','O','S')
                  AND tilausrivi.tyyppi                       != 'D'
                  AND tilausrivi.varattu                       > 0)
                JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                  AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                  AND tilausrivin_lisatiedot.ohita_kerays      = '')
                JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                  AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                  AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                  AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                  AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                  AND varaston_hyllypaikat.keraysvyohyke       = '{$keraysvyohyke}')
                JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio
                  AND tuote.tuoteno                            = tilausrivi.tuoteno)
                JOIN keraysvyohyke ON (keraysvyohyke.yhtio = lasku.yhtio
                  AND keraysvyohyke.tunnus                     = '{$keraysvyohyke}')
                JOIN toimitustapa ON (toimitustapa.yhtio = lasku.yhtio
                  AND toimitustapa.selite                      = lasku.toimitustapa)
                JOIN lahdot ON (lahdot.yhtio = lasku.yhtio
                  AND lahdot.tunnus                            = lasku.toimitustavan_lahto)
                LEFT JOIN maksuehto ON (maksuehto.yhtio = lasku.yhtio
                  AND maksuehto.tunnus                         = lasku.maksuehto
                  AND maksuehto.jv                            != '')
                LEFT JOIN kuka ON (kuka.yhtio = lasku.yhtio
                  and kuka.kesken                              = lasku.tunnus)
                LEFT JOIN kerayserat ON (kerayserat.yhtio = lasku.yhtio
                  AND kerayserat.otunnus                       = lasku.tunnus
                )
                WHERE lasku.yhtio                              = '{$kukarow['yhtio']}'
                {$tilat}
                AND lasku.vakisin_kerays                      != ''
                AND lasku.varasto                              = '{$varasto}'
                AND kuka.tunnus is null
                AND kerayserat.tunnus is null
                {$_group_by_lisa}
                ORDER BY prioriteetti,erotus,lahdon_tiedot,h1time,liitostunnus,ohjausmerkki";
    }
    $res = pupe_query($query);

    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<pre>(E40): ".str_replace("\t", "", $query)."</pre>\n";

    /**
     * Ker‰ilynippujen optimaalinen j‰rjest‰minen.
     * Lasketaan optimaalinen k‰velymatka varaston hyllypaikkojen indeksien mediaanien avulla.
     * Mediaanirypp‰‰st‰ otetaan keskihajontaluku eri askelv‰leill‰.
     * Askelv‰li riippuu montako ker‰ilynippuja saadaan.
     */


    $kerailyniput        = array();
    $kerailyniput_key    = array();
    $kerailyniput_tiedot = array();

    $ed_prioriteetti = '';
    $ed_asiakas      = '';
    $ed_lahto        = '';

    $i = 1;

    while ($row = mysql_fetch_assoc($res)) {

      list($row["lahto"], $row["asiakasluokka"], $row["lahdon_kellonaika"]) = explode("!°!", $row["lahdon_tiedot"]);

      if (strpos($keraysvyohyketiedot['yhdistelysaanto'], 'P') === false and trim($ed_prioriteetti) != '' and $ed_prioriteetti != $row['prioriteetti']) {
        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E50): EI SAA OLLA USEITA PRIORITEETTEJƒ ALUSTOISSA! BREAK<br>\n";
        break;
      }

      if (strpos($keraysvyohyketiedot['yhdistelysaanto'], 'K') === false and trim($ed_lahto) != '' and $ed_lahto != $row['lahto']) {
        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E60): EI SAA OLLA USEITA LƒHT÷Jƒ! BREAK<br>\n";
        break;
      }

      if (strpos($keraysvyohyketiedot['yhdistelysaanto'], 'S') === false and trim($ed_asiakas) != '' and $ed_asiakas != $row['asiakas_nimi']) {
        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E70): EI SAA OLLA USEITA ASIAKKAITA! BREAK<br>\n";
        break;
      }

      $indeksit = array();
      $til_koko = $til_paino = 0;

      // otunnukset tulevat group concatilla esim. 123,124,125
      $query = "SELECT varaston_hyllypaikat.indeksi,
                ROUND((if(tuote.tuoteleveys * {$mittakerroin} < 1, 1, tuote.tuoteleveys * {$mittakerroin}) * if(tuote.tuotekorkeus * {$mittakerroin} < 1, 1, tuote.tuotekorkeus * {$mittakerroin}) * if(tuote.tuotesyvyys * {$mittakerroin} < 1, 1, tuote.tuotesyvyys * {$mittakerroin})) * if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)), 4) tilauksen_koko,
                ROUND(tuote.tuotemassa * if(tilausrivi.varattu < 1, 1, round(tilausrivi.varattu)), 4) as tilauksen_paino,
                tilausrivi.perheid, tilausrivi.tunnus, tilausrivi.tuoteno
                FROM tilausrivi
                JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio
                  AND tilausrivin_lisatiedot.tilausrivitunnus  = tilausrivi.tunnus
                  AND tilausrivin_lisatiedot.ohita_kerays      = '')
                JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio
                  AND tuote.tuoteno                            = tilausrivi.tuoteno)
                JOIN varaston_hyllypaikat ON (varaston_hyllypaikat.yhtio = tilausrivi.yhtio
                  AND varaston_hyllypaikat.hyllyalue           = tilausrivi.hyllyalue
                  AND varaston_hyllypaikat.hyllynro            = tilausrivi.hyllynro
                  AND varaston_hyllypaikat.hyllyvali           = tilausrivi.hyllyvali
                  AND varaston_hyllypaikat.hyllytaso           = tilausrivi.hyllytaso
                  AND varaston_hyllypaikat.keraysvyohyke       = '{$keraysvyohyke}')
                WHERE tilausrivi.yhtio                         = '{$kukarow['yhtio']}'
                AND tilausrivi.otunnus                         IN ({$row['tunnus']})
                AND tilausrivi.varattu                         > 0
                AND tilausrivi.var                             not in ('P','J','O','S')
                AND tilausrivi.tyyppi                         != 'D'
                ORDER BY varaston_hyllypaikat.indeksi";
      $indeksi_res = pupe_query($query);

      while ($indeksi_row = mysql_fetch_assoc($indeksi_res)) {
        $indeksit[] = $indeksi_row['indeksi'];
        $til_koko  += $indeksi_row['tilauksen_koko'];
        $til_paino += $indeksi_row['tilauksen_paino'];
      }

      // lasketaan saatujen varaston hyllypaikkojen indeksien mediaani
      $mediaani = calculate_median($indeksit);

      // otetaan mediaani, loopattavat tilaukset ja niiden tiedot talteen
      $kerailyniput[$row['prioriteetti']][$i] = $mediaani;
      $kerailyniput_key[$i] = $row['tunnus'];
      $kerailyniput_tiedot[$i]['liitostunnus'] = $row['liitostunnus'];
      $kerailyniput_tiedot[$i]['lahto'] = $row['lahto'];
      $kerailyniput_tiedot[$i]['nimi'] = $row['asiakas_nimi'];
      $kerailyniput_tiedot[$i]['tilauksen_koko'] = $til_koko;
      $kerailyniput_tiedot[$i]['tilauksen_paino'] = $til_paino;

      $ed_prioriteetti = $row['prioriteetti'];
      $ed_asiakas      = $row['asiakas_nimi'];
      $ed_lahto        = $row['lahto'];

      // Otetaan tilaus k‰sittelyyn
      $query = "UPDATE lasku
                SET alatila = 'KA'
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  IN ({$row['tunnus']})
                AND alatila = 'A'";
      pupe_query($query);

      if ($yhtiorow['kerayserat'] != '' and $yhtiorow['siirtolistan_tulostustapa'] == 'U') {
        $query = "UPDATE lasku
                  SET alatila = 'KJ'
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  IN ({$row['tunnus']})
                  AND alatila = 'J'";
        pupe_query($query);
      }

      $i++;
    }

    $query = "UNLOCK TABLES";
    pupe_query($query);

    // j‰rjestet‰‰n mediaanit nousevaan j‰rjestykseen
    foreach ($kerailyniput as $pri => &$nippu) {
      asort($nippu);
    }

    // annetaan mediaanien lukum‰‰r‰n minimi ja maksimiarvot (ja niille askelv‰lit) joita k‰ytet‰‰n lineaarisen suoran kulmakertoimen ja vakion laskentaan
    $min_max = array(
      // mediaanien lkm min
      0 => array(5 => 3),
      // mediaanien lkm max
      1 => array(70 => 10)
    );

    foreach ($kerailyniput as $pri => &$nippu) {
      // mediaanien lukum‰‰r‰
      $mediaanilkm = count($nippu);

      // $mediaanilkm = 1;

      // jos mediaanien lukum‰‰r‰ on v‰hint‰‰n yht‰ suuri kuin annettu minimi
      if ($mediaanilkm >= key($min_max[0])) {

        // jos mediaanien lukum‰‰r‰ ylitt‰‰ sallitun maksimin, k‰ytet‰‰n maksimin askelv‰li‰
        if ($mediaanilkm > key($min_max[1])) {
          $askelvali = current($min_max[1]);
        }
        else {
          // lineaarisen suoran kulmakerroin ja vakio
          // kulmakertoimella ja vakiolla pystyt‰‰n laskemaan askelv‰li
          $kulmakerroin = round((current($min_max[1]) - current($min_max[0])) / (key($min_max[1]) - key($min_max[0])), 5);
          $vakio = round(current($min_max[0]) - ($kulmakerroin * key($min_max[0])) , 5);
          $askelvali = round($mediaanilkm * $kulmakerroin + $vakio , 0);
        }

        $keskihajonta = array();

        if (isset($kukarow['debugstring'])) {

          $kukarow['debugstring'] .= "(E75):<br><table>\n";
          $kukarow['debugstring'] .= "<tr><th>Mediaani lkm</th><th>Kulmakerroin</th><th>Vakio</th><th>Askelv‰li</th></tr>\n";
          $kukarow['debugstring'] .= "<tr><td>$mediaanilkm</td><td>$kulmakerroin</td><td>$vakio</td><td>$askelvali</td></tr>\n";
          $kukarow['debugstring'] .= "</table>\n";
          $kukarow['debugstring'] .= "<br>(E80):\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>Index</th><th>Ker‰ilynippu</th><th>Mediaani</th></tr>\n";

          foreach ($nippu as $indx => $mediaani) {
            $kukarow['debugstring'] .= "<tr><td>$indx</td><td>{$kerailyniput_key[$indx]}</td><td>$mediaani</td></tr>\n";
          }

          $kukarow['debugstring'] .= "</table>\n";
          $kukarow['debugstring'] .= "<br>\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>Aputaulukko</th><th>Tulos</th><th>Sortattu</th></tr>\n";
          $kukarow['debugstring'] .= "<tr><td>\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>I</th><th>Keskihajonta</th><th>Key</th></tr>\n";
        }

        // muodostetaan keskihajonta-taulukko
        for ($i = 0; $i < $mediaanilkm; $i++) {
          $tmp_arr = array_slice($nippu, $i, $askelvali, TRUE);

          $cnt_tmp_arr = count($tmp_arr);

          if ($cnt_tmp_arr < $askelvali) continue;

          $std_deviation = round(stats_standard_deviation($tmp_arr, TRUE), 0);

          $get_indx_from = array_chunk($tmp_arr, $cnt_tmp_arr / 2, TRUE);
          $indx_from = array_pop($get_indx_from);
          $key = key($indx_from);

          $keskihajonta[$key] = $std_deviation;

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<tr><td>$i</td><td>$std_deviation</td><td>$key</td></tr>\n";
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "</table>\n";
          $kukarow['debugstring'] .= "</td>\n";

          $kukarow['debugstring'] .= "<td>\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>Key</th><th>Keskihajonta</th></tr>\n";

          foreach ($keskihajonta as $key => $kh) {
            $kukarow['debugstring'] .= "<tr><td>$key</td><td>$kh</td></tr>\n";
          }
          $kukarow['debugstring'] .= "</table>\n";
          $kukarow['debugstring'] .= "</td>\n";
        }

        // j‰rjestet‰‰n keskihajonta-taulukko nousevaan j‰rjestykseen
        // mit‰ pienempi keskihajontaluku on, sit‰ parempi!
        asort($keskihajonta);

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "<td>\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>Key</th><th>Keskihajonta</th></tr>\n";

          foreach ($keskihajonta as $key => $kh) {
            $kukarow['debugstring'] .= "<tr><td>$key</td><td>$kh</td></tr>\n";
          }

          $kukarow['debugstring'] .= "</table>\n";
          $kukarow['debugstring'] .= "</td></tr>\n";
          $kukarow['debugstring'] .= "</table>\n";
        }

        reset($keskihajonta);

        // otetaan ensimm‰isen alkion mediaani talteen
        $main_value = $nippu[key($keskihajonta)];

        uasort($nippu, 'arrcmp');

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "<br>(E100):\n";
          $kukarow['debugstring'] .= "<table>\n";
          $kukarow['debugstring'] .= "<tr><th>Indeksi</th><th>Mediaani</th></tr>\n";

          foreach ($nippu as $indx => $med) {
            $kukarow['debugstring'] .= "<tr><td>$indx</td><td>$med</td></tr>\n";
          }

          $kukarow['debugstring'] .= "</table>\n";
        }
      }
    }

    $fixed_main_array = $fixed_main_prio_array = array();

    reset($kerailyniput);

    // muodostetaan loopattava p‰‰taulukko
    foreach ($kerailyniput as $pri => $nippux) {
      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "(E110): prio: $pri<br>\n";
        $kukarow['debugstring'] .= "<pre>(E120): ";
        $kukarow['debugstring'] .= var_export($nippux, TRUE);
        $kukarow['debugstring'] .= "</pre>\n";
      }

      foreach ($nippux as $indx => $med) {
        $fixed_main_array[$indx] = $kerailyniput_key[$indx];
        $fixed_main_prio_array[$kerailyniput_key[$indx]] = array('prioriteetti' => $pri, 'indeksi' => $indx);
      }
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<pre>(E130): ";
      $kukarow['debugstring'] .= var_export($fixed_main_array, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
    }

    $kerailyniput_tiedot2 = $kerailyniput_tiedot;

    // koitetaan heitt‰‰ tilausryp‰s ensimm‰iseksi joka matchaa minimi tilavuuteen tai minimi painoon
    if ($yksin_eraan and count($fixed_main_array) > 0) {
      foreach ($kerailyniput_tiedot as $key => $arr) {
        foreach ($arr as $ot => $val) {
          if ($ot == 'tilauksen_koko' or $ot == 'tilauksen_paino') {
            foreach ($pakkaukset as $paktun => $pak) {
              if ($pak['yksin_eraan'] == 'K') {

                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E140): debug!!! ($ot == 'tilauksen_koko' and $val >= $pak[minimi_tilavuus] and $val <= $pak[tilavuus]) or ($ot == 'tilauksen_paino' and $val >= $pak[minimi_paino] and $val <= $pak[tilavuus])<br><br>\n";

                // otetaan and $val <= $pak['tilavuus'] pois!!!
                if (($ot == 'tilauksen_koko' and $val >= $pak['minimi_tilavuus']) or ($ot == 'tilauksen_paino' and $val >= $pak['minimi_paino'])) {

                  if (isset($kukarow['debugstring'])) {
                    $kukarow['debugstring'] .= "(E150): Siirret‰‰n $key ensimm‰iseksi!<br>\n";
                    $kukarow['debugstring'] .= "(E160): ($ot == 'tilauksen_koko' and $val >= $pak[minimi_tilavuus] and $val <= $pak[tilavuus]) or ($ot == 'tilauksen_paino' and $val >= $pak[minimi_paino] and $val <= $pak[tilavuus])<br><br>\n";
                  }

                  $backup_array = array();
                  $backup_array[$key] = $fixed_main_array[$key];
                  //unset($fixed_main_array[$key]);

                  $fixed_main_array = array();

                  $huijataanko = true;

                  foreach ($fixed_main_prio_array as $nippu_z => $nipun_tiedot) {
                    if ($nipun_tiedot['prioriteetti'] < $fixed_main_prio_array[$backup_array[$key]]['prioriteetti']) {

                      $fixed_main_array[$nipun_tiedot['indeksi']] = $nippu_z;

                      if (isset($kukarow['debugstring'])) {
                        $kukarow['debugstring'] .= "(E190): nipun_tiedot indeksi: $nipun_tiedot[indeksi]<br>\n";
                        $kukarow['debugstring'] .= "<pre>(E200): ";
                        $kukarow['debugstring'] .= var_export($kerailyniput_tiedot2[$nipun_tiedot['indeksi']], TRUE);
                        $kukarow['debugstring'] .= "</pre>\n";
                      }

                      // katsotaan ylitt‰‰kˆ pienemm‰n prioriteetin tilaus yksin er‰‰n speksit
                      foreach ($kerailyniput_tiedot2[$nipun_tiedot['indeksi']] as $ot2 => $val2) {
                        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E210): ($ot2 == 'tilauksen_koko' and ($val2 < $pak[minimi_tilavuus] or $val2 > $pak[tilavuus])) or ($ot2 == 'tilauksen_paino' and ($val2 < $pak[minimi_paino] or $val2 > $pak[tilavuus]))<br>\n";

                        if ($ot2 == 'tilauksen_koko' or $ot2 == 'tilauksen_paino') {
                          if (($ot2 == 'tilauksen_koko' and ($val2 < $pak['minimi_tilavuus'] or $val2 > $pak['tilavuus'])) or ($ot2 == 'tilauksen_paino' and ($val2 < $pak['minimi_paino'] or $val2 > $pak['tilavuus']))) {
                            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E220): indeksi $nipun_tiedot[indeksi] ei mahdu!<br><br>\n";
                            $huijataanko = false;
                          }
                        }
                      }

                      reset($kerailyniput_tiedot2);
                    }
                  }

                  $fixed_main_array[$key] = $backup_array[$key];

                  if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E230): Huijataan ker‰ysvyˆhykkeen pinta-ala rajoitusta!<br>Vanha pinta-ala rajoitus on $keraysvyohyketiedot[max_keraysera_pintaala]<br>\n";

                  // huijataan pinta-alaa jos valitaan "Yksin er‰‰n"-alusta. 1,5 kertainen yksin ker‰‰n alustan verran.
                  $query = "SELECT (if(pakkaus.leveys * {$mittakerroin} < 1, 1, pakkaus.leveys * {$mittakerroin}) * if(pakkaus.syvyys * {$mittakerroin} < 1, 1, pakkaus.syvyys * {$mittakerroin})) pinta_ala
                            FROM pakkaus
                            WHERE yhtio     = '{$kukarow['yhtio']}'
                            AND paino       > 0
                            AND leveys      > 0
                            AND syvyys      > 0
                            AND korkeus     > 0
                            AND yksin_eraan = 'K'
                            AND tunnus      IN ({$keraysvyohyketiedot['sallitut_alustat']})
                            ORDER BY pinta_ala DESC";
                  $pakkaus_result = pupe_query($query);
                  $pakkaus_row = mysql_fetch_assoc($pakkaus_result);

                  $keraysvyohyketiedot['max_keraysera_pintaala'] = $huijataanko ? ($pakkaus_row['pinta_ala'] * 1.1) : $keraysvyohyketiedot['max_keraysera_pintaala'];
                  if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E240): Uusi pinta-ala rajoitus on $keraysvyohyketiedot[max_keraysera_pintaala]<br><br>\n";
                  // break 2;
                  break 3;
                }
              }
            }
          }
        }
      }
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<pre>(E250): ";
      $kukarow['debugstring'] .= var_export($fixed_main_array, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
    }

    $tuote_yksin_keraysalustalle = array();

    $eran_koko  = 0;
    $eran_paino = 0;
    $era_valmis = false;

    $erat = array('tilaukset' => array(), 'pakkaukset' => array(), 'keraysvyohyketiedot' => $keraysvyohyketiedot);

    if (isset($kukarow['debugstring'])) {

      $kukarow['debugstring'] .= "<br>\n";
      $kukarow['debugstring'] .= "<br>(E280): \n";
      $kukarow['debugstring'] .= "<br>(E290): <hr>\n";
      $kukarow['debugstring'] .= "<font class='head'>(E300): T‰st‰ alkaa debug viestit!</font><br><br>\n";

      $kukarow['debugstring'] .= "<table id='content_package'>\n";
      $kukarow['debugstring'] .= "<tr>\n";
      $kukarow['debugstring'] .= "<th>Nimi</th><th>Leveys</th><th>Korkeus</th><th>Syvyys</th><th>Kantavuus</th><th>Minimi<br>tilavuus</th><th>Minimi<br>Kantavuus</th><th>Netto<br>tilavuus</th><th>Yksin<br>er‰‰n</th><th>K‰ytetty<br>tilavuus</th><th>K‰ytetty<br>paino</th><th>pinta-ala</th><th>pahvipintaala</th></tr>\n";

      foreach ($pakkaukset as $nro) {
        $kukarow['debugstring'] .= "<tr>\n";
        foreach ($nro as $ot => $pak) {
          if ($ot == 'tilavuus' or $ot == 'minimi_tilavuus') {
            $pak = round($pak / 1000, 2);
          }
          $kukarow['debugstring'] .= "<td>$pak</td>\n";
        }
        $kukarow['debugstring'] .= "</tr>\n";
      }

      $kukarow['debugstring'] .= "</tr>\n";
      $kukarow['debugstring'] .= "</table>\n";

      $kukarow['debugstring'] .= "<br><br>\n";

      $kukarow['debugstring'] .= "<br>(E320): ALETAAN LOOPATA KERƒYSERƒƒ:<br>\n";
      $kukarow['debugstring'] .= "<font class='message'>(E330): MAX pinta-ala: $keraysvyohyketiedot[max_keraysera_pintaala] cm2</font><br>\n";
      $kukarow['debugstring'] .= "<font class='message'>(E340): MAX rivit: $keraysvyohyketiedot[max_keraysera_rivit]</font>\n";
      $kukarow['debugstring'] .= "<br><br>\n";
    }

    $fail        = "";
    $ed_lahto      = '';
    $ed_prioriteetti = '';
    $ed_asiakas    = '';
    $ed_tilausnro    = '';
    $rivit        = 0;
    $looppi_koko    = 0;

    $kaytettavat_pakkaukset = array();
    $lisatyt_tilausrivit = array();
    $juokseva_nro = 0;

    $eran_koko = 0;
    $eran_koko_pintaala = 0;
    $eran_koko_tuotteet = 0;

    mysql_data_seek($res, 0);

    $nurkan_takaa = false;

    $_fixed_main_array_count = count($fixed_main_array);
    $_fixed_main_array_keys = array_keys($fixed_main_array);

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<pre>(E250): ";
      $kukarow['debugstring'] .= var_export($fixed_main_array, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";

      $kukarow['debugstring'] .= "<pre>(E250): ";
      $kukarow['debugstring'] .= var_export($_fixed_main_array_count, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";

      $kukarow['debugstring'] .= "<pre>(E250): ";
      $kukarow['debugstring'] .= var_export($_fixed_main_array_keys, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
    }

    for ($_main_i = 0; $_fixed_main_array_count > $_main_i; $_main_i++) {

      $eka_kierros = true;

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring']  .= "(E001) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
      }

      $key = $_fixed_main_array_keys[$_main_i];
      $tilaukset = $fixed_main_array[$key];

      if (isset($kaytettava_pakkaus) and $kaytettava_pakkaus != "" and $eran_koko > 0 and $pakkaukset[$kaytettava_pakkaus]['yksin_eraan'] == 'K') {
        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<br>(E360): Pakkaus oli yksin er‰‰n alusta! Ker‰yser‰ valmis!<br><br>\n";

        $era_valmis = true;
        break;
      }

      $eran_koko_chk = 0;
      $eran_koko_pintaala_chk = 0;
      $eran_paino_chk = 0;
      $pisin_tuote = array();
      $pisin_tuote_per_asiakas = array();

      if (!$nurkan_takaa) {
        $kaytettava_pakkaus = "";
      }

      $ohjausmerkki = $jiivee = array();

      $query = "SELECT lasku.tunnus,
                LOWER(TRIM(lasku.ohjausmerkki)) AS ohjausmerkki,
                 IFNULL(maksuehto.jv, '') jv
                FROM lasku
                LEFT JOIN maksuehto ON (maksuehto.yhtio = lasku.yhtio AND maksuehto.tunnus = lasku.maksuehto)
                WHERE lasku.yhtio = '{$kukarow['yhtio']}'
                AND lasku.tunnus  IN ({$tilaukset})";
      $ohjausmerkki_res = pupe_query($query);

      while ($ohjausmerkki_row = mysql_fetch_assoc($ohjausmerkki_res)) {
        $ohjausmerkki[$ohjausmerkki_row['tunnus']] = $ohjausmerkki_row['ohjausmerkki'];
        $jiivee[$ohjausmerkki_row['tunnus']] = $ohjausmerkki_row['jv'];
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<br>(E370): <br>ASIAKAS: {$kerailyniput_tiedot[$key]['nimi']}<br>\n";
        $kukarow['debugstring'] .= "(E380): Tilaukset: $tilaukset<br>\n";
        $kukarow['debugstring'] .= "<br>(E390): ETSITƒƒN PISIN TUOTE:<br>\n";
      }

      $args = array(
        'mittakerroin' => $mittakerroin,
        'tilaukset' => $tilaukset,
        'keraysvyohyke' => $keraysvyohyke,
        'pisin_tuote' => $pisin_tuote,
        'pisin_tuote_per_asiakas' => $pisin_tuote_per_asiakas,
        'eran_koko_chk' => $eran_koko_chk,
        'eran_koko_pintaala_chk' => $eran_koko_pintaala_chk,
        'eran_paino_chk' => $eran_paino_chk,
      );

      list(
        $inner_main_array,
        $pisin_tuote,
        $pisin_tuote_per_asiakas,
        $eran_koko_chk,
        $eran_koko_pintaala_chk,
        $eran_paino_chk,
        $tuoteres
      ) = hae_tuotteet_ja_pisin_mitta($args);

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<br>(E440): <font class='head'>NIPUN TILAVUUS YHT: $eran_koko_chk</font>\n";
        $kukarow['debugstring'] .= "<br>(E450): <font class='head'>NIPUN PINTA-ALA YHT: $eran_koko_pintaala_chk</font>\n";
        $kukarow['debugstring'] .= "<br>(E460): <font class='head'>NIPUN PAINO YHT: $eran_paino_chk</font><br>\n";

        $kukarow['debugstring'] .= "<br>(E470): <font class='head'>PISIMMƒT TUOTTEET JƒRJESTYKSESSƒ:</font>\n";

        $kukarow['debugstring'] .= "<table>\n";
        $kukarow['debugstring'] .= "<tr><th>Tuoteno</th><th>Pisin sivu</th><th>Paino</th><th>Tilavuus</th><th>Kpl</th><th>Tilaukset</th></tr>\n";

        foreach ($pisin_tuote as $tuoteno => $muut_tiedot) {
          $kukarow['debugstring'] .= "<tr>\n";
          $kukarow['debugstring'] .= "<td>$tuoteno</td>\n";

          foreach ($muut_tiedot as $ot => $tieto) {
            $kukarow['debugstring'] .= "<td>\n";
            if ($ot == 'tilaus') {
              $kukarow['debugstring'] .= implode(",", $tieto);
            }
            else {
              $kukarow['debugstring'] .= $tieto;
            }
            $kukarow['debugstring'] .= "</td>\n";
          }

          $kukarow['debugstring'] .= "</tr>\n";
        }

        $kukarow['debugstring'] .= "</table>\n";
        $kukarow['debugstring'] .= "<br><br>\n";
      }

      $juokseva_nro++;

      if ($kaytettava_pakkaus == "") {

        $cnt = count($pisin_tuote);

        $pisin_tuote_chklist = $pisin_tuote;

        for ($i = 1; $i <= $cnt; $i++) {
          $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote_chklist, $pisin_tuote_per_asiakas, '', '', $eran_koko_chk, $eran_paino_chk, $eran_koko_pintaala);

          if ($kaytettava_pakkaus == '') {
            $pisin_tuote_arr_chk = pisin_tuote($pisin_tuote_chklist, $pisin_tuote_per_asiakas);

            $arr_keys = array_keys($pisin_tuote_arr_chk);

            $tuote_yksin_keraysalustalle[$arr_keys[0]] = array_shift($pisin_tuote_arr_chk);

            unset($pisin_tuote_chklist[$arr_keys[0]]);

            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E490): Yksin ker‰ysalusta-listalle: $arr_keys[0]<br><br>\n";

            $eran_koko_chk -= ($pisin_tuote[$arr_keys[0]]['tilavuus'] * $pisin_tuote[$arr_keys[0]]['kpl']);

            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E500): eran_koko_chk j‰lkeen kun ollaan poistettu {$pisin_tuote[$arr_keys[0]]['kpl']} verran kappaleita: $eran_koko_chk<br>\n";
          }
          else {
            break;
          }
        }

        $pisin_tuote = $pisin_tuote_chklist;

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E510): KƒYTETƒƒN PAKKAUSTA <font class='head'>{$pakkaukset[$kaytettava_pakkaus]['nimi']}</font><br>\n";
          $kukarow['debugstring'] .= "(E520): SIMULOITU ERƒN TILAVUUS: <font class='head'>$eran_koko_chk cm3</font><br>\n";
        }

        if ($kaytettava_pakkaus != '') {
          $kaytettava_pakkaus_backup = $kaytettava_pakkaus;

          if ($eran_koko_chk > $pakkaukset[$kaytettava_pakkaus]['tilavuus']) {
            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E530): Pit‰isikˆ valita isompi pakkaus?<br>\n";

            $kaytettava_pakkaus_chk = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, $eran_koko_chk, '', $eran_koko_chk, $eran_paino_chk, $eran_koko_pintaala);

            $kaytettava_pakkaus = $kaytettava_pakkaus_chk !== false ? $kaytettava_pakkaus_chk : $kaytettava_pakkaus;

            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "(E540): PƒƒDYTTIIN KƒYTTƒMƒƒN PAKKAUSTA {$pakkaukset[$kaytettava_pakkaus]['nimi']}<br>\n";
              $kukarow['debugstring'] .= "<pre>(E550): ";
              $kukarow['debugstring'] .= var_export($pakkaukset[$kaytettava_pakkaus], TRUE);
              $kukarow['debugstring'] .= "</pre>\n";
            }

            if ($kaytettava_pakkaus != $kaytettava_pakkaus_backup and $eran_paino > $pakkaukset[$kaytettava_pakkaus_backup]['paino']) {
              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "(E560): Simuloidun er‰n paino ylitt‰‰ k‰ytett‰v‰n pakkauksen kapasiteetin. ($eran_paino > {$pakkaukset[$kaytettava_pakkaus_backup]['paino']})<br>\n";
                $kukarow['debugstring'] .= "(E570): K‰ytet‰‰nkin aiempaa valittua pakkausta {$pakkaukset[$kaytettava_pakkaus_backup]['nimi']}<br>\n";
              }

              $kaytettava_pakkaus = $kaytettava_pakkaus_backup;
            }
          }

          if (($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']) > $keraysvyohyketiedot['max_keraysera_pintaala']) {
            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "(E580): K‰ytett‰v‰ pakkaus ylitt‰isi ker‰yser‰n pinta-alan! ".($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])." cm2 > $keraysvyohyketiedot[max_keraysera_pintaala] cm2<br>\n";
              $kukarow['debugstring'] .= "(E590): K‰ytet‰‰nkin aiempaa valittua pakkausta {$pakkaukset[$kaytettava_pakkaus_backup]['nimi']}<br>\n";
            }

            $kaytettava_pakkaus = $kaytettava_pakkaus_backup;
          }
        }
      }

      $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
      $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;

      if ($eran_koko_pintaala > $keraysvyohyketiedot['max_keraysera_pintaala']) {
        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E600): Ker‰yser‰n maksimiraja ylitetty! $eran_koko_pintaala / $keraysvyohyketiedot[max_keraysera_pintaala]<br>\n";
        $era_valmis = true;
        break;
      }

      if (trim($ed_asiakas) != '' and $ed_asiakas == $kerailyniput_tiedot[$key]['nimi'] and trim($ed_lahto) != '' and $ed_lahto != $kerailyniput_tiedot[$key]['lahto']) {
        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "<br>(E610): <br>Er‰n tilavuus NYT: $eran_koko cm3<br>\n";
          $kukarow['debugstring'] .= "(E620): Er‰n pinta-ala NYT: $eran_koko_pintaala cm2<br><br>\n";
          $kukarow['debugstring'] .= "(E002) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
        }

        if (!$eka_kierros) {
          $eran_koko += $pakkaukset[$kaytettava_pakkaus]['tilavuus'];
          $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E630): Asiakas ei vaihtunut, mutta l‰htˆ vaihtui!<br>\n";
          $kukarow['debugstring'] .= "(E640): Etsit‰‰n uusi pakkaus...<br>\n";
          $kukarow['debugstring'] .= "(E650): Simuloitu ERƒ: $eran_koko_chk eran koko: $eran_koko<br>\n";
        }

        $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
        $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;

        $param = $eran_koko_chk;

        $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, $param, '', 0, 0, $eran_koko_pintaala);

        $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
        $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;
        $looppi_koko = 0;

        $eka_kierros = false;
      }

      if (trim($ed_asiakas) != '' and $ed_asiakas != $kerailyniput_tiedot[$key]['nimi']) {
        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "<br>(E660): <br>Er‰n tilavuus NYT: $eran_koko cm3<br>\n";
          $kukarow['debugstring'] .= "(E670): Er‰n pinta-ala NYT: $eran_koko_pintaala cm2<br><br>\n";
          $kukarow['debugstring'].= "(E003) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
        }

        if (!$eka_kierros) {
          $eran_koko += $pakkaukset[$kaytettava_pakkaus]['tilavuus'];
          $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E680): Asiakas vaihtui!<br>\n";
          $kukarow['debugstring'] .= "(E690): simuloitu: $eran_koko_chk eran koko: $eran_koko<br>\n";
        }

        if ($nurkan_takaa) {
          $kaytettava_pakkaus = "";
        }

        $looppi_koko = 0;

        $eka_kierros = false;
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "(E004) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
      }

      mysql_data_seek($tuoteres, 0);
      $max_tuoterivit = mysql_num_rows($tuoteres);
      $ii = 1;

      $ed_ohjausmerkki = '÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷';
      $ed_jiivee = "÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷";

      $ed_tuote = '';

      foreach ($inner_main_array as $inner_key => &$tuoterow) {

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E005) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
        }

        if ($kaytettava_pakkaus == '' and $eran_koko_chk > 0 and $tuoterow['yksin_kerailyalustalle'] == "" and !isset($tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']])) {
          if ($nurkan_takaa) {
            $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, '', '', $eran_koko_chk, $eran_paino_chk, $eran_koko_pintaala);
          }
          else {
            $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, $eran_koko, $eran_paino, $eran_koko_chk, $eran_paino_chk, $eran_koko_pintaala);
          }
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E006) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
        }

        $yksin_kerailyalustalle_normi_tuote_trigger = false;

        if ($eran_koko == 0 and ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus']) > $keraysvyohyketiedot['max_keraysera_pintaala']) {
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E700): Tuotteen $tuoterow[tuoteno] lis‰ys yksin‰‰n ylitt‰isi max ker‰yser‰ pinta-alan ($keraysvyohyketiedot[max_keraysera_pintaala]). ($tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus])<br><br>\n";

          $fail = $fail != "" ? "{$fail}|||{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}" : "{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}";
          break 2;
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E007) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "<br>(E710): <br>Er‰n tilavuus NYT: $eran_koko cm3<br>\n";
          $kukarow['debugstring'] .= "(E720): Er‰n pinta-ala NYT: $eran_koko_pintaala cm2<br><br>\n";
          $kukarow['debugstring'] .= "<font class='head'>(E730): Tuoteno: $tuoterow[tuoteno]</font> \n";
          $kukarow['debugstring'] .= "(E740): Otunnus: $tuoterow[otunnus] \n";
          $kukarow['debugstring'] .= "(E750): Tuotteen tilavuus: $tuoterow[y_koko] (l: $tuoterow[tuoteleveys] x k: $tuoterow[tuotekorkeus] x s: $tuoterow[tuotesyvyys]) \n";
          $kukarow['debugstring'] .= "(E760): Yksin ker‰ysalustalle: $tuoterow[yksin_kerailyalustalle] \n";
          $kukarow['debugstring'] .= "(E761): Ohjausmerkki: {$ohjausmerkki[$tuoterow['otunnus']]} \n";
          $kukarow['debugstring'] .= "(E762): JV: {$jiivee[$tuoterow['otunnus']]} \n";
          $kukarow['debugstring'] .= "<br>\n";
        }

        // MERKKI-KENTTƒ
        if (trim($ed_asiakas) != '' and $ed_asiakas == $kerailyniput_tiedot[$key]['nimi'] and ((trim($ed_ohjausmerkki) != '÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷' and $ed_ohjausmerkki != $ohjausmerkki[$tuoterow['otunnus']]) or (trim($ed_jiivee) != '÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷' and $ed_jiivee != $jiivee[$tuoterow['otunnus']]))) {

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<br>(E780): <br>Er‰n tilavuus NYT: $eran_koko cm3<br>\n";
            $kukarow['debugstring'] .= "(E790): Er‰n pinta-ala NYT: $eran_koko_pintaala cm2<br><br>\n";
          }

          if (!$eka_kierros) {
            $eran_koko += $pakkaukset[$kaytettava_pakkaus]['tilavuus'];
            $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);
          }

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "(E800): Asiakas ei vaihtunut, mutta merkki tai jv vaihtui!<br>\n";
            $kukarow['debugstring'] .= "<br>\n";
          }

          list($pakkaukset, $kaytettava_pakkaus, $kaytettavat_pakkaukset, $eran_koko, $eran_koko_pintaala) = pakkauksen_iterointi($keraysvyohyketiedot, $pakkaukset, $kaytettava_pakkaus, $pisin_tuote, $kaytettavat_pakkaukset, $eka_kierros, $eran_koko, $eran_koko_pintaala, $juokseva_nro, $kerailyniput_tiedot, $kerailyniput_key, $key, $pisin_tuote_per_asiakas);

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<br>\n";
            $kukarow['debugstring'] .= "(E830): Etsit‰‰n uusi pakkaus...<br>\n";
            $kukarow['debugstring'] .= "(E840): simuloitu: $eran_koko_chk eran koko: $eran_koko<br>\n";
          }

          $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
          $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;

          $param = $eran_koko_chk;

          $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, $param, '', '', 0, $eran_koko_pintaala);

          $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
          $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;
          $looppi_koko = 0;
          $juokseva_nro++;

          $eka_kierros = false;
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E850): juokseva_nro $juokseva_nro > k‰ytt‰j‰n max_keraysera_alustat $kukarow[max_keraysera_alustat]<br>\n";
          $kukarow['debugstring'] .= "(E860): ((int) $rivit >= (int) $keraysvyohyketiedot[max_keraysera_rivit]) or ((int) $juokseva_nro > (int) $keraysvyohyketiedot[max_keraysera_alustat]) or ((int) $juokseva_nro > (int) $kukarow[max_keraysera_alustat])<br><br>\n";

          if (((int) $rivit >= (int) $keraysvyohyketiedot['max_keraysera_rivit'])) {
            $kukarow['debugstring'] .= "(E870): boo1<br>\n";
          }
          if (((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat'])) {
            $kukarow['debugstring'] .= "(E880): boo2<br>\n";
          }
          if (((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {
            $kukarow['debugstring'] .= "(E890): boo3<br>\n";
          }
        }

        if (((int) $rivit >= (int) $keraysvyohyketiedot['max_keraysera_rivit']) or ((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {

          if (isset($kukarow['debugstring']) and (((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat']))) {
            $kukarow['debugstring'] .= "(E900): 1.) ALUSTOJA ON TARPEEKSI KERƒYSERƒƒ VARTEN (alustoja: $juokseva_nro max_alustat: ker‰ysvyˆhykkeell‰ $keraysvyohyketiedot[max_keraysera_alustat] / ker‰‰j‰n $kukarow[max_keraysera_alustat])<br>\n";
          }

          if (isset($kukarow['debugstring']) and (int) $rivit >= (int) $keraysvyohyketiedot['max_keraysera_rivit']) {
            $kukarow['debugstring'] .= "(E910): RIVEJƒ ON TARPEEKSI KERƒYSERƒƒ VARTEN (rivit: $rivit max_rivit: $keraysvyohyketiedot[max_keraysera_rivit])<br>\n";
          }

          $era_valmis = true;

          // tilaus loppuu, tehd‰‰n viel‰ t‰ss‰ vaiheessa pakkaustsekki
          list($pakkaukset, $kaytettava_pakkaus, $kaytettavat_pakkaukset, $eran_koko, $eran_koko_pintaala) = pakkauksen_iterointi($keraysvyohyketiedot, $pakkaukset, $kaytettava_pakkaus, $pisin_tuote, $kaytettavat_pakkaukset, $eka_kierros, $eran_koko, $eran_koko_pintaala, $juokseva_nro, $kerailyniput_tiedot, $kerailyniput_key, $key, $pisin_tuote_per_asiakas);

          break 2;
        }

        if ($kaytettava_pakkaus != "" and $tuoterow['yksin_kerailyalustalle'] == "" and ($pakkaukset[$kaytettava_pakkaus]['leveys'] < $tuoterow['pisin_sorttaus'] and $pakkaukset[$kaytettava_pakkaus]['korkeus'] < $tuoterow['pisin_sorttaus'] and $pakkaukset[$kaytettava_pakkaus]['syvyys'] < $tuoterow['pisin_sorttaus'])) {
          $tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']] = $tuoterow['otunnus'];
          $yksin_kerailyalustalle_normi_tuote_trigger = true;

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E920): Laitetaan tuote tuote_yksin_keraysalustalle arrayseen ja yksin_kerailyalustalle_normi_tuote_trigger p‰‰lle<br><br>\n";
          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E930): FAIL-jonoon!<br><br>\n";

          $fail = $fail != "" ? "{$fail}|||{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}" : "{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}";

          $kaytettavat_pakkaukset = array();

          break 2;
        }

        if ($kaytettava_pakkaus == "" and count($pakkaukset) > 0 and $tuoterow['yksin_kerailyalustalle'] == "" and !isset($tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']])) {
          $loytyko_pakkaus = false;

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E940): K‰ytett‰v‰ pakkaus on tyhj‰‰ ja ei ole yksin ker‰ysalustalle tuote!<br><br>\n";

          foreach ($pakkaukset as $indeksinro => $arrx) {

            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E950): {$arrx['yksin_eraan']} == '' and ({$arrx['leveys']} >= {$tuoterow['pisin_sorttaus']} or {$arrx['korkeus']} >= {$tuoterow['pisin_sorttaus']} or {$arrx['syvyys']} >= {$tuoterow['pisin_sorttaus']})<br>\n";

            if ($arrx['yksin_eraan'] == "" and ($arrx['leveys'] >= $tuoterow['pisin_sorttaus'] or $arrx['korkeus'] >= $tuoterow['pisin_sorttaus'] or $arrx['syvyys'] >= $tuoterow['pisin_sorttaus'])) {
              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E960): L÷YTYI! tuote mahtuu johonkin pakkaukseen.<br><br>\n";

              $loytyko_pakkaus = true;
              $kaytettava_pakkaus = $indeksinro;
            }
          }

          if (!$loytyko_pakkaus) {
            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E970): Ei lˆytynyt sopivaa pakkausta. Laitetaan tuote yksin ker‰ysalustalle.<br><br>\n";

            $tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']] = $tuoterow['otunnus'];
            $yksin_kerailyalustalle_normi_tuote_trigger = true;
          }
        }

        if (($kaytettava_pakkaus != '' and ($eran_koko_pintaala + ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])) > $keraysvyohyketiedot['max_keraysera_pintaala'])
          or ($kaytettava_pakkaus == '' and $eran_koko_pintaala > 0 and ($eran_koko_pintaala + ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $tuoterow['y_maara']) > $keraysvyohyketiedot['max_keraysera_pintaala']))) {

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E980): Tuleva pakkaus ylitt‰isi ker‰yser‰n sallitun pinta-alan ($eran_koko_pintaala cm2 + (pakkauksen ".($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])." cm2 tai tuotteen $tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus] * $tuoterow[y_maara]) > $keraysvyohyketiedot[max_keraysera_pintaala] cm2). <br>\n";

          // Katsotaan nurkan takaa onko parempia nippuja tarjolla mitk‰ mahtuisi er‰‰n
          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "(E1001): Katsotaan nurkan takaa<br>\n";
          }

          $_mahtuu = false;

          // tarkistetaan mahtuuko yksik‰‰n pakkaus en‰‰ ker‰ykseen
          foreach ($pakkaukset as $indx => $p_arr) {
            $_leveys = $p_arr['leveys'];
            $_syvyys = $p_arr['syvyys'];
            $_til_koko_chk = $eran_koko_pintaala + ($_leveys * $_syvyys);

            if (empty($_leveys) or empty($_syvyys)) {
              continue;
            }

            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "(E10011): Nurkan takaa pakkauscheck: $eran_koko_pintaala + ($_leveys * $_syvyys) <= $keraysvyohyketiedot[max_keraysera_pintaala]<br>\n";
            }

            if ($_til_koko_chk <= $keraysvyohyketiedot['max_keraysera_pintaala']) {
              $_mahtuu = true;
              break;
            }
          }

          if (!$_mahtuu) {
            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "(E10012): Yht‰‰n pakettia ei en‰‰ mahdu ker‰ykseen<br>\n";
            }

            $era_valmis = true;
            break 2;
          }

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "(E10011): Nurkan takaa for-ehdot: $_nurkka_i = ($_main_i + 1); ($_main_i + 4 and $_fixed_main_array_count) > $_nurkka_i; $_nurkka_i++<br>\n";
          }

          $juokseva_nro--;

          for ($_nurkka_i = ($_main_i + 1); ($_main_i + 6) > $_nurkka_i and $_fixed_main_array_count > $_nurkka_i; $_nurkka_i++) {

            $_key = $_fixed_main_array_keys[$_nurkka_i];
            $_tilaukset = $fixed_main_array[$_key];

            $args = array(
              'mittakerroin' => $mittakerroin,
              'tilaukset' => $_tilaukset,
              'keraysvyohyke' => $keraysvyohyke,
              'pisin_tuote' => array(),
              'pisin_tuote_per_asiakas' => array(),
              'eran_koko_chk' => 0,
              'eran_koko_pintaala_chk' => 0,
              'eran_paino_chk' => 0,
            );

            list(
              $_inner_main_array,
              $pisin_tuote,
              $pisin_tuote_per_asiakas,
              $eran_koko_chk,
              $eran_koko_pintaala_chk,
              $eran_paino_chk,
              $tuoteres
            ) = hae_tuotteet_ja_pisin_mitta($args);

            $kaytettava_pakkaus = valitse_pakkaus(
              $keraysvyohyketiedot,
              $pakkaukset,
              $pisin_tuote,
              $pisin_tuote_per_asiakas,
              '',
              '',
              $eran_koko_chk,
              $eran_paino_chk,
              $eran_koko_pintaala,
              true
            );

            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E10014): Nurkan takaa kaytettava pakkaus: $kaytettava_pakkaus<br>\n";

            if ($kaytettava_pakkaus != '') {

              $_leveys = $pakkaukset[$kaytettava_pakkaus]['leveys'];
              $_syvyys = $pakkaukset[$kaytettava_pakkaus]['syvyys'];
              $_til_koko_chk = $eran_koko_pintaala + ($_leveys * $_syvyys);

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E10015): Nurkan takaa check: $eran_koko_pintaala + ($_leveys * $_syvyys) <= $keraysvyohyketiedot[max_keraysera_pintaala]<br>\n";

              if ($_til_koko_chk <= $keraysvyohyketiedot['max_keraysera_pintaala']) {

                if (isset($kukarow['debugstring'])) {
                  $kukarow['debugstring'] .= "(E1002): Lˆydettiin lupaava nippu ($_nurkka_i)<br>\n";
                }

                $_main_i = $_nurkka_i - 1;

                $ii++;
                $ed_asiakas = $kerailyniput_tiedot[$key]['nimi'];
                $ed_otunnus = $tuoterow['otunnus'];
                $ed_ohjausmerkki = $ohjausmerkki[$tuoterow['otunnus']];
                $ed_jiivee = $jiivee[$tuoterow['otunnus']];

                $nurkan_takaa = true;

                break 2;
              }
            }
            else {
              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E10016): Nurkan takaa ei lˆytynyt sopivaa pakkausta<br>\n";
            }
          }

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "(E1003): Ei lˆytynyt nurkan takaa<br>\n";
          }

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "(E10035): Er‰ valmis<br>\n";
          }

          $era_valmis = true;
          break 2;
        }
        else {
          $nurkan_takaa = false;
        }

        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1010): JUOKSEVA NRO: $juokseva_nro KƒYTETTƒVƒ PAKKAUS: $kaytettava_pakkaus<br>\n";

        if ($tuoterow['yksin_kerailyalustalle'] != '' or ($tuote_yksin_keraysalustalle[$tuoterow['tuoteno']] and $tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']] != '')) {

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<br><br>(E1020): Er‰n tilavuus ennen YKSIN KERƒYSALUSTALLE: $eran_koko cm3<br>\n";
            $kukarow['debugstring'] .= "(E1030): Er‰n pinta-ala ennen YKSIN KERƒYSALUSTALLE: $eran_koko_pintaala cm2<br>\n";
          }

          $tehdaanko_yksin_kerailyalustalle = true;

          if ($tuoterow['yksin_kerailyalustalle'] == 'E') {

            if ($kaytettava_pakkaus != "" and $pakkaukset[$kaytettava_pakkaus]['yksin_eraan'] == 'K') {
              $tehdaanko_yksin_kerailyalustalle = false;

              if (isset($tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']])) {
                unset($tuote_yksin_keraysalustalle[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']]);
              }
            }

            if ($tuoterow['y_maara'] > 1 and $tehdaanko_yksin_kerailyalustalle) {
              $query = "SELECT osto_era, pakkauskoko,
                        IF(jarjestys = 0, 999999999, jarjestys) AS true_order
                        FROM tuotteen_toimittajat
                        WHERE yhtio = '{$kukarow['yhtio']}'
                        AND tuoteno = '{$tuoterow['tuoteno']}'
                        ORDER BY true_order";
              $order_chk_res = pupe_query($query);
              $order_chk_row = mysql_fetch_assoc($order_chk_res);

              // pakkauskoon valitsemisperiaate
              if ($order_chk_row['osto_era'] > 1) {
                $kerayspakkauskoko = $order_chk_row['osto_era'];
              }
              elseif ($tuoterow['myynti_era'] > 1) {
                $kerayspakkauskoko = $tuoterow['myynti_era'];
              }
              else {
                $kerayspakkauskoko = 1;
              }

              // jos osto_era on suurempi kuin 1, katsotaan montako kertaa osto_era menee tilattavaan m‰‰r‰‰n ja tehd‰‰n jokaisella kerralla yksin ker‰ilyalustalle pakkaus (dummy 999)
              if ($kerayspakkauskoko > 1) {

                $tuoterow['y_maara'] = (int) $tuoterow['y_maara'];
                $kerayspakkauskoko   = (int) $kerayspakkauskoko;

                if ($tuoterow['y_maara'] % $kerayspakkauskoko == 0) {
                  $lkm = $tuoterow['y_maara'] / $kerayspakkauskoko;
                }
                else {
                  $lkm = ceil($tuoterow['y_maara'] / $kerayspakkauskoko);
                }

                for ($ix = 1; $ix <= $lkm; $ix++) {

                  if ($ix == $lkm and $kerayspakkauskoko < $tuoterow['y_maara']) {
                    if (ceil($tuoterow['y_maara'] / $kerayspakkauskoko) > 2) {
                      if (($kerayspakkauskoko * $ix) - $tuoterow['y_maara'] == 0) {
                        $kappalemaara = $kerayspakkauskoko;
                      }
                      else {
                        $kappalemaara = $tuoterow['y_maara'] - ($kerayspakkauskoko * ($ix-1));
                      }
                    }
                    else {
                      $kappalemaara = $tuoterow['y_maara'] - $kerayspakkauskoko;
                    }
                  }
                  elseif ($ix == $lkm and $kerayspakkauskoko > $tuoterow['y_maara']) {
                    $kappalemaara = $tuoterow['y_maara'];
                  }
                  else {
                    $kappalemaara = $kerayspakkauskoko;
                  }

                  if ($eran_koko_pintaala + ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $kappalemaara) > $keraysvyohyketiedot['max_keraysera_pintaala']) {
                    if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1050): Tuotteen $tuoterow[tuoteno] lis‰ys ylitt‰isi max ker‰yser‰ pinta-alan ($keraysvyohyketiedot[max_keraysera_pintaala]). $kappalemaara kpl. ($tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus] * $ix)<br>ostoer‰: {$order_chk_row['osto_era']}<br>myyntier‰: {$tuoterow['myynti_era']}<br><br>\n";

                    if ($eran_koko == 0) {
                      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1060): Laitetaan herja!!!<br><br>\n";

                      $fail = $fail != "" ? "{$fail}|||{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}" : "{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}";
                      break 3;
                    }

                    $ix--;

                    if ($ix == 0) {
                      unset($kaytettavat_pakkaukset[999][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']]);
                    }

                    $juokseva_nro--;
                    // skipataan kyseinen nippu
                    break 2;
                  }

                  // esimerkki
                  // lkm = 3
                  // y_maara 50
                  // osto_era 20
                  // ix == 1 -> 20
                  // ix == 2 -> 20
                  // ix == 3 -> 3 * 20 - 50 = 10

                  $kaytettavat_pakkaukset[999][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']] = $kappalemaara;

                  $eran_koko += ($tuoterow['y_koko'] * $kappalemaara);
                  $eran_koko_pintaala += ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $kappalemaara);

                  if ($ix < $lkm) {
                    $juokseva_nro++;

                    if (((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {
                      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1070): 2.) ALUSTOJA ON TARPEEKSI KERƒYSERƒƒ VARTEN (alustoja: $juokseva_nro max_alustat: ker‰ysvyˆhykkeell‰ $keraysvyohyketiedot[max_keraysera_alustat] / ker‰‰j‰n $kukarow[max_keraysera_alustat])<br>\n";

                      $era_valmis = true;
                      break 3;
                    }
                  }
                }

                $lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']] = $tuoterow['tunnus'];

                unset($pisin_tuote[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']]);

                if (count($pisin_tuote[$tuoterow['tuoteno']]['tilaus']) == 0 and count($pisin_tuote) > 0) {
                  if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<font class='message'>(E1080): Otetaan pois tuote \"pisin tuote listalta\" ($tuoterow[tuoteno])...</font><br><br>\n";

                  unset($pisin_tuote[$tuoterow['tuoteno']]);
                }

                $kaytettava_pakkaus = "";

                if ($rivit >= $keraysvyohyketiedot['max_keraysera_rivit']) {
                  if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1090): RIVEJƒ ON TARPEEKSI KERƒYSERƒƒ VARTEN (rivit: $rivit max_rivit: $keraysvyohyketiedot[max_keraysera_rivit])<br>\n";

                  unset($kaytettavat_pakkaukset[999][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']]);

                  $era_valmis = true;
                  break 2;
                }

                $rivit++;

                $ed_tilausnro = $tuoterow['otunnus'];

                if ($max_tuoterivit > $ii) $juokseva_nro++;

                $ii++;

                if ($eran_koko_chk > 0) {
                  $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, abs($eran_koko_chk - $eran_koko), '', 0, 0, $eran_koko_pintaala);
                }

                continue;
              }
            }
          }

          if ($tehdaanko_yksin_kerailyalustalle) {
            for ($x = 1; $x <= $tuoterow['y_maara']; $x++) {
              if (((int) $rivit >= (int) $keraysvyohyketiedot['max_keraysera_rivit']) or ($eran_koko_pintaala + ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $x) > $keraysvyohyketiedot['max_keraysera_pintaala']) or ((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {
                if (isset($kukarow['debugstring'])) {
                  if ((int) $rivit >= (int) $keraysvyohyketiedot['max_keraysera_rivit']) {
                    $kukarow['debugstring'] .= "(E1100): RIVEJƒ ON TARPEEKSI KERƒYSERƒƒ VARTEN (rivit: $rivit max_rivit: $keraysvyohyketiedot[max_keraysera_rivit])<br>\n";
                  }
                  elseif (((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {
                    $kukarow['debugstring'] .= "(E1110): 3.) ALUSTOJA ON TARPEEKSI KERƒYSERƒƒ VARTEN (alustoja: $juokseva_nro max_alustat: ker‰ysvyˆhykkeell‰ $keraysvyohyketiedot[max_keraysera_alustat] / ker‰‰j‰n $kukarow[max_keraysera_alustat])<br>\n";
                  }
                  else {
                    $kukarow['debugstring'] .= "(E1120): Tuotteen $tuoterow[tuoteno] lis‰ys ylitt‰isi max ker‰yser‰ pinta-alan ($keraysvyohyketiedot[max_keraysera_pintaala]). $x kpl. ($tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus] * $x)<br><br>\n";
                  }
                }

                $x--;

                $era_valmis = true;
                break 3;
              }

              // tiedet‰‰n ett‰ ollaan pakkauksen sis‰ll‰ ja tuote menee yksin ker‰ysalustalle. uusi pakettinro.
              if ($kaytettava_pakkaus != "") {
                if ($tuoterow['yksin_kerailyalustalle'] == 'K' or ($yksin_kerailyalustalle_normi_tuote_trigger and $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] > 0)) {
                  $juokseva_nro++;
                }

                if (!$yksin_kerailyalustalle_normi_tuote_trigger) {

                  if ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] > 0) {
                    $eran_koko += $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];
                    $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);

                    if ($eran_koko_pintaala + ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $x) > $keraysvyohyketiedot['max_keraysera_pintaala']) {
                      if (isset($kukarow['debugstring'])) {
                        $kukarow['debugstring'] .= "(E1120): Tuotteen $tuoterow[tuoteno] lis‰ys ylitt‰isi max ker‰yser‰ pinta-alan ($keraysvyohyketiedot[max_keraysera_pintaala]). $x kpl. ($tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus] * $x)<br><br>\n";
                      }

                      $x--;

                      $era_valmis = true;
                      break 3;
                    }
                  }

                  $kaytettava_pakkaus = "";
                }
              }

              $kaytettavat_pakkaukset[999][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']] = 1;

              // tiedet‰‰n ett‰ ollaan pakkauksen sis‰ll‰ ja tuote menee yksin ker‰ysalustalle, vaikka sill‰ ei ollut kyseist‰ ominaisuutta p‰‰ll‰. paketti on silti tyhj‰, joten tiedet‰‰n ett‰ kyseess‰ on ensimm‰inen tuote.
              if ($kaytettava_pakkaus != "" and $tuoterow['yksin_kerailyalustalle'] == "" and $yksin_kerailyalustalle_normi_tuote_trigger and $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] == 0) {
                $juokseva_nro++;
              }

              $eran_koko += $tuoterow['y_koko'];
              $eran_koko_pintaala += ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus']);

              if (!$yksin_kerailyalustalle_normi_tuote_trigger) $juokseva_nro++;
              $lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']] = $tuoterow['tunnus'];

              $rivit++;
            }

            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "<br>(E1130): <br>Er‰n tilavuus j‰lkeen YKSIN KERƒYSALUSTALLE: $eran_koko cm3<br>\n";
              $kukarow['debugstring'] .= "(E1140): Er‰n pinta-ala j‰lkeen YKSIN KERƒYSALUSTALLE: $eran_koko_pintaala cm2<br>\n";
            }

            unset($pisin_tuote[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']]);

            if (count($pisin_tuote[$tuoterow['tuoteno']]['tilaus']) == 0 and count($pisin_tuote) > 0) {
              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<font class='message'>(E1150): Otetaan pois tuote \"pisin tuote listalta\" ($tuoterow[tuoteno])...</font><br><br>\n";

              unset($pisin_tuote[$tuoterow['tuoteno']]);
            }

            if ($max_tuoterivit == $ii and $kaytettava_pakkaus != "" and $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] > 0) {
              $eran_koko += $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];
              $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);
            }

            if ($kaytettava_pakkaus == '' and $eran_koko_chk > 0) {
              $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, abs($eran_koko_chk - $eran_koko), '', 0, 0, $eran_koko_pintaala);
            }

            if ($max_tuoterivit == $ii) {
              $juokseva_nro--;
            }

            $ii++;

            $ed_tilausnro = $tuoterow['otunnus'];

            continue;
          }
        }

        if ($kaytettava_pakkaus == "") {
          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<pre>(E1160): ";
            $kukarow['debugstring'] .= var_export($pisin_tuote, TRUE);
            $kukarow['debugstring'] .= "</pre>\n";
          }

          $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, array($tuoterow['tuoteno'] => array('koko' => $tuoterow['pisin_sorttaus'], 'paino' => $tuoterow['y_paino'], 'tilavuus' => $tuoterow['y_koko'], 'tilaus' => array($tuoterow['otunnus'] => $tuoterow['otunnus']))), array($tuoterow['otunnus'] => $tuoterow['tuoteno']), '', '', 0, 0, $eran_koko_pintaala);

          if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1170): k‰ytett‰v‰ pakkaus: $kaytettava_pakkaus<br>\n";

          if ($kaytettava_pakkaus != '' and ($eran_koko_pintaala + ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])) > $keraysvyohyketiedot['max_keraysera_pintaala']) {
            $era_valmis = true;
            break 2;
          }
        }

        if (isset($kukarow['debugstring'])) {
          $kukarow['debugstring'] .= "(E1175): Myyntier‰: {$tuoterow['myynti_era']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Pakkaukset kaytettava_pakkaus tilavuus: {$pakkaukset[$kaytettava_pakkaus]['tilavuus']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Pakkaukset kaytettava_pakkaus kaytetty_tilavuus: {$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Tuoterow y_koko: {$tuoterow['y_koko']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Pakkaukset kaytettava_pakkaus paino: {$pakkaukset[$kaytettava_pakkaus]['paino']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Pakkaukset kaytettava_pakkaus kaytetty_paino: {$pakkaukset[$kaytettava_pakkaus]['kaytetty_paino']}<br>\n";
          $kukarow['debugstring'] .= "(E1175): Tuoterow y_paino: {$tuoterow['y_paino']}<br>\n";
        }

        if ($pakkaukset[$kaytettava_pakkaus]['tilavuus'] >= ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] + $tuoterow['tuotteen_koko'])
          and $pakkaukset[$kaytettava_pakkaus]['paino'] >= ($pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] + ($tuoterow['y_maara'] * $tuoterow['y_paino']))) {

          $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] += $tuoterow['tuotteen_koko'];
          $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] += ($tuoterow['y_maara'] * $tuoterow['y_paino']);

          $kaytettavat_pakkaukset[$kaytettava_pakkaus][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']] += $tuoterow['y_maara'];

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<font class='ok'>(E1180): Kaikki tuotteet mahtuivat samaan pakettiin!1 Kappalem‰‰r‰ on $tuoterow[y_maara]</font><br>\n";
            $kukarow['debugstring'] .= "(E1190): K‰ytetty tilavuus: ".$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']."<br>\n";
            $kukarow['debugstring'] .= "(E1200): K‰ytetty paino: ".$pakkaukset[$kaytettava_pakkaus]['kaytetty_paino']."<br>\n";
          }

          $rivit++;

          $lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']] = $tuoterow['tunnus'];

          if ($max_tuoterivit == $ii) {
            $eran_koko += $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];
            $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);

            $ed_tilausnro = $tuoterow['otunnus'];
          }

          unset($pisin_tuote[$tuoterow['tuoteno']]['tilaus'][$tuoterow['otunnus']]);

          if (count($pisin_tuote[$tuoterow['tuoteno']]['tilaus']) == 0 and count($pisin_tuote) > 0) {
            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<font class='message'>(E1210): Otetaan pois tuote \"pisin tuote listalta\" ($tuoterow[tuoteno])...</font><br><br>\n";

            unset($pisin_tuote[$tuoterow['tuoteno']]);
          }

          $eka_kierros = false;
        }
        else {

          if (isset($kukarow['debugstring'])) {
            $kukarow['debugstring'] .= "<font class='error'>(E1220): Kaikki tuotteet eiv‰t mahtuneet samaan pakettiin.</font><br>\n";
            $kukarow['debugstring'] .= "(E1230): Katsotaan montako tuotetta mahtuu t‰h‰n pakettiin (kappaleita $tuoterow[y_maara])<br>\n";
          }

          $xxx = 1;

          for ($i = 1; $i <= $tuoterow['y_maara']; $i++) {
            if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1240): $i. tuote <br>\n";

            if ($tuoterow['myynti_era'] > 1 and ($pakkaukset[$kaytettava_pakkaus]['tilavuus'] < ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] + $tuoterow['y_koko']) or $pakkaukset[$kaytettava_pakkaus]['paino'] < ($pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] + $tuoterow['y_paino']))) {

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1250): Tuotteen myyntier‰ ylitetty ($tuoterow[myynti_era])!!! Splitataan tilaus.<br>\n";

              $myyeramaara = floor($i / $tuoterow['myynti_era']) * $tuoterow['myynti_era'];

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1260): splitattava m‰‰r‰ on $myyeramaara = floor($i / $tuoterow[myynti_era]) * $tuoterow[myynti_era]<br>\n";

              if ($myyeramaara > 0) {
                $kaytettavat_pakkaukset[$kaytettava_pakkaus][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']] = $myyeramaara;
                break;
              }
              else {

                $fail = $fail != "" ? "{$fail}|||{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}" : "{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}";

                // Yht‰‰n er‰‰ ei mahtunut....
                unset($kaytettavat_pakkaukset[$kaytettava_pakkaus][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']]);
                $ii--;
                break;
              }
            }

            if ($pakkaukset[$kaytettava_pakkaus]['tilavuus'] >= ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] + $tuoterow['y_koko'])
              and $pakkaukset[$kaytettava_pakkaus]['paino'] >= ($pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] + $tuoterow['y_paino'])) {

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1270): Tuote mahtuu pakkaukseen!<br>\n";

              if ($i == $tuoterow['y_maara']) {
                $ed_tuote = $tuoterow['tuoteno'];
                $rivit++;

                if ($max_tuoterivit == $ii) {
                  $eran_koko += $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];
                  $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);

                  $ed_tilausnro = $tuoterow['otunnus'];
                }
              }

              $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] += $tuoterow['y_koko'];
              $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] += (1 * $tuoterow['y_paino']);

              $kaytettavat_pakkaukset[$kaytettava_pakkaus][$kerailyniput_tiedot[$key]['liitostunnus']][$juokseva_nro][$tuoterow['tunnus']]++;

              $looppi_koko++;
            }
            else {

              // HUOM.!!!! TULEVAISUUDEN ITEROINTIA VARTEN
              // TARVITAANKO SITTENKIN ALUKSI KATSOA MAHDOLLISTA ISOMPAA PAKETTIA JOHON MAHTUISI LOPUT TUOTTEET?????
              // TALLENNETAAN ARRAYSEEN MY÷S PUUKOTUSKERROIN JONKA AVULLA VOIDAAN KERƒYKSEN PƒƒTTEEKSI LASKEA RAHTIKIRJALLE REALISTISEMMAT PAKKAUKSEN KUUTIOT (keraa.php rivi 1314)
              $lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']] = $tuoterow['tunnus'];

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<br>(E1280): Tuote ei mahdu pakkaukseen!<br>\n";

              if ($kaytettava_pakkaus == "" or ((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat'])) {

                if (isset($kukarow['debugstring']) and (((int) $juokseva_nro > (int) $keraysvyohyketiedot['max_keraysera_alustat']) or ((int) $juokseva_nro > (int) $kukarow['max_keraysera_alustat']))) {
                  $kukarow['debugstring'] .= "(E1290): 4.) ALUSTOJA ON TARPEEKSI KERƒYSERƒƒ VARTEN (alustoja: $juokseva_nro max_alustat: ker‰ysvyˆhykkeell‰ $keraysvyohyketiedot[max_keraysera_alustat] / ker‰‰j‰n $kukarow[max_keraysera_alustat])<br>\n";
                }

                $chk_arr = $lisatyt_tilausrivit;
                unset($chk_arr[$tuoterow['otunnus']][$tuoterow['tunnus']]);

                if (count($chk_arr[$tuoterow['otunnus']]) > 0) {

                  $i--;

                  if ($i == 0) {
                    unset($lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']]);
                  }
                }

                $era_valmis = true;
                break 3;
              }

              if (isset($kukarow['debugstring']) and $pakkaukset[$kaytettava_pakkaus]['tilavuus'] < ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] + $tuoterow['y_koko'])) {
                $kukarow['debugstring'] .= "(E1300): Pakkauksen tilavuus ylittyi! ({$pakkaukset[$kaytettava_pakkaus]['tilavuus']} < {$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']} + {$tuoterow['y_koko']})<br>\n";
              }
              elseif (isset($kukarow['debugstring']) and $pakkaukset[$kaytettava_pakkaus]['paino'] < ($pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] + $tuoterow['y_paino'])) {
                $kukarow['debugstring'] .= "(E1310): Pakkauksen paino ylittyi! ({$pakkaukset[$kaytettava_pakkaus]['paino']} < {$pakkaukset[$kaytettava_pakkaus]['kaytetty_paino']} + {$tuoterow['y_paino']})<br>\n";
              }

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1320): Debug: $eran_koko == 0 and $kaytettava_pakkaus != '' and {$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']} == 0 and {$pakkaukset[$kaytettava_pakkaus]['tilavuus']} < ({$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']} + {$tuoterow['y_koko']})<br><br>\n";

              if ($eran_koko == 0 and $kaytettava_pakkaus != '' and $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] == 0 and $pakkaukset[$kaytettava_pakkaus]['tilavuus'] < ($pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] + $tuoterow['y_koko'])) {
                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1330): Tuotteen $tuoterow[tuoteno] lis‰ys yksin‰‰n ylitt‰isi max ker‰yser‰ pinta-alan ($keraysvyohyketiedot[max_keraysera_pintaala]). ($tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus])<br><br>\n";

                $fail = $fail != "" ? "{$fail}|||{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}" : "{$tuoterow['tuoteno']}###{$tuoterow['otunnus']}";
                break 3;
              }

              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "<br>(E1340): Pakkaus on t‰ynn‰!<br>\n";
                $kukarow['debugstring'] .= "(E1350): Tuotteiden tilavuus pakkauksessa: {$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']}<br>\n";
                $kukarow['debugstring'] .= "(E1360): Tuotteiden paino pakkauksessa: {$pakkaukset[$kaytettava_pakkaus]['kaytetty_paino']}<br>\n";
              }

              if ($looppi_koko > 0) {
                $kaytettava_pakkaus_backup = $kaytettava_pakkaus;
                list($pakkaukset, $kaytettava_pakkaus, $kaytettavat_pakkaukset, $eran_koko, $eran_koko_pintaala) = pakkauksen_iterointi($keraysvyohyketiedot, $pakkaukset, $kaytettava_pakkaus, $pisin_tuote, $kaytettavat_pakkaukset, $eka_kierros, $eran_koko, $eran_koko_pintaala, $juokseva_nro, $kerailyniput_tiedot, $kerailyniput_key, $key, $pisin_tuote_per_asiakas);
              }

              // varotoimenpide ikuista looppia varten
              if ($xxx > ($tuoterow['y_maara'] * 2)) {
                if (isset($kukarow['debugstring'])) {
                  $kukarow['debugstring'] .= "(E1370): Nyt sis‰inen looppi on $xxx > ($tuoterow[y_maara] * 2)<br>\n";
                  $kukarow['debugstring'] .= "(E1380): POIS TƒƒLTƒ! KERƒYSERƒ VALMIS!<br>\n";
                }

                $i--;

                // katsotaan onko t‰m‰ tilausrivi tilauksen ensimm‰inen rivi, jos ei ole niin splitataan
                $chk_arr = $lisatyt_tilausrivit;
                unset($chk_arr[$tuoterow['otunnus']][$tuoterow['tunnus']]);

                if (count($chk_arr[$tuoterow['otunnus']]) > 0) {
                  if ($i == 0) {
                    unset($lisatyt_tilausrivit[$tuoterow['otunnus']][$tuoterow['tunnus']]);
                  }
                }

                $era_valmis = true;

                break 3;
              }

              if ($ed_tuote != '' and isset($pisin_tuote[$ed_tuote]['tilaus'][$tuoterow['otunnus']])) {
                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<br>(E1390): Edellinen tuote on $ed_tuote! Otetaan se pois.<br><br>\n";

                unset($pisin_tuote[$ed_tuote]['tilaus'][$tuoterow['otunnus']]);

                if (count($pisin_tuote[$ed_tuote]['tilaus']) == 0 and count($pisin_tuote) > 1) {
                  if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<font class='message'>(E1400): Otetaan pois tuote \"pisin tuote listalta\" ($ed_tuote)...</font><br><br>\n";

                  unset($pisin_tuote[$ed_tuote]);
                }
              }

              $eran_koko += $pakkaukset[$kaytettava_pakkaus]['tilavuus'];
              $eran_koko_pintaala += ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys']);

              if ($eka_kierros) $eka_kierros = false;

              $eran_koko_tuotteet += $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];

              // Pakkaus meni t‰yteen, siirret‰‰n loopattavaa indexi‰ yksi takasp‰in
              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "<br>(E1410): <br>\n";
                $kukarow['debugstring'] .= "(E1420): Er‰n tilavuus nyt: $eran_koko cm3 loopissa tuotteita $looppi_koko kpl<br>\n";
              }

              if ($pakkaukset[$kaytettava_pakkaus]['yksin_eraan'] == 'K') {
                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "<br>(E1430): Pakkaus oli yksin er‰‰n alusta! Ker‰yser‰ valmis!<br><br>\n";

                $era_valmis = true;

                $i--;

                break 3;
              }

              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "(E1440): Etsit‰‰n uusi pakkaus...<br>\n";
                $kukarow['debugstring'] .= "(E1450): simuloitu: $eran_koko_chk eran koko: $eran_koko pakkauksen k‰ytetty tilavuus: {$pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus']}<br>\n";
              }

              // v‰hennet‰‰n aina simuloitua kokoa pakkauksen k‰ytetyll‰ tilavuudella
              $eran_koko_chk -= $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'];

              $kaytettava_pakkaus = valitse_pakkaus($keraysvyohyketiedot, $pakkaukset, $pisin_tuote, $pisin_tuote_per_asiakas, $eran_koko_chk, '', 0, 0, $eran_koko_pintaala);

              if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1460): Kƒytett‰v‰ pakkaus: $kaytettava_pakkaus<br>\n";

              $pakkaukset[$kaytettava_pakkaus]['kaytetty_tilavuus'] = 0;
              $pakkaukset[$kaytettava_pakkaus]['kaytetty_paino'] = 0;

              $looppi_koko = 0;
              $i--;
              $juokseva_nro++;

              $xxx++;

              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "(E1470): KƒYTETƒƒN PAKKAUSTA $kaytettava_pakkaus:<br>\n";
                $kukarow['debugstring'] .= "<pre>(E1480): ";
                $kukarow['debugstring'] .= var_export($pakkaukset[$kaytettava_pakkaus], TRUE);
                $kukarow['debugstring'] .= "</pre>\n";
              }

              if (($kaytettava_pakkaus != '' and ($eran_koko_pintaala + ($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])) > $keraysvyohyketiedot['max_keraysera_pintaala'])
                or ($kaytettava_pakkaus == '' and ($eran_koko_pintaala + ($tuoterow['pisin_sorttaus'] * $tuoterow['lyhin_sorttaus'] * $tuoterow['y_maara']) > $keraysvyohyketiedot['max_keraysera_pintaala']))) {

                if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1490): Tuleva pakkaus ylitt‰isi ker‰yser‰n sallitun pinta-alan ($eran_koko_pintaala cm2 + (pakkauksen ".($pakkaukset[$kaytettava_pakkaus]['leveys'] * $pakkaukset[$kaytettava_pakkaus]['syvyys'])." cm2 tai tuotteen $tuoterow[pisin_sorttaus] * $tuoterow[lyhin_sorttaus] * $tuoterow[y_maara]) > $keraysvyohyketiedot[max_keraysera_pintaala] cm2). Ker‰yser‰ valmis!<br>\n";

                $era_valmis = true;
                break 3;
              }
            }
          }
        }

        $ii++;
        $ed_asiakas = $kerailyniput_tiedot[$key]['nimi'];
        $ed_otunnus = $tuoterow['otunnus'];
        $ed_ohjausmerkki = $ohjausmerkki[$tuoterow['otunnus']];
        $ed_jiivee = $jiivee[$tuoterow['otunnus']];
      }

      if (mysql_num_rows($tuoteres) > 0 and $pakkaukset[$kaytettava_pakkaus]['yksin_eraan'] != 'K' and !$nurkan_takaa) {
        // tilaus loppuu, tehd‰‰n viel‰ t‰ss‰ vaiheessa pakkaustsekki
        list($pakkaukset, $kaytettava_pakkaus, $kaytettavat_pakkaukset, $eran_koko, $eran_koko_pintaala) = pakkauksen_iterointi($keraysvyohyketiedot, $pakkaukset, $kaytettava_pakkaus, $pisin_tuote, $kaytettavat_pakkaukset, $eka_kierros, $eran_koko, $eran_koko_pintaala, $juokseva_nro, $kerailyniput_tiedot, $kerailyniput_key, $key, $pisin_tuote_per_asiakas);
      }

      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "(E008) nurkan_takaa: ".(int) $nurkan_takaa."<br>";
      }
    }

    // nyt on luultavasti mennyt jotain vikaan. yksi syy voi olla tuotteiden hullut mitat.
    // l‰hetet‰‰n t‰st‰ infomaili
    if (count($fixed_main_array) > 0 and !$era_valmis and $fail != "") {

      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1500): Virhe ker‰yser‰‰ tehdess‰. Tarkista tuotteen mitat, paino, yksin ker‰ilyalustalle ehto ja laita tilaukselle l‰htˆ!<br>\n";

      $message = t("Virhe ker‰yser‰‰ tehdess‰").". ";
      $message .= t("Tarkista tuotteen mitat, paino, ostoer‰, myyntier‰, yksin ker‰ilyalustalle ehto ja laita tilaukselle l‰htˆ")."! ";

      foreach (explode("|||", $fail) as $failures) {
        list($fail_tuoteno, $fail_otunnus) = explode("###", $failures);

        $message .= t("Tuoteno")." {$fail_tuoteno} (".t("Tilaus")." {$fail_otunnus}) ";

        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "(E1510): Tuoteno $fail_tuoteno (Tilaus $fail_otunnus)<br>\n";

        $query = "UPDATE lasku SET toimitustavan_lahto = 0, toimitustavan_lahto_siirto = 0 WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$fail_otunnus}'";
        $upd_res = pupe_query($query);
      }

      if ($yhtiorow['alert_varasto_kayttajat'] != '') {
        foreach (explode(",", $yhtiorow['alert_varasto_kayttajat']) as $admini) {
          $query = "INSERT INTO messenger SET
                    yhtio         = '{$kukarow['yhtio']}',
                    kuka          = '{$kukarow['kuka']}',
                    vastaanottaja = '{$admini}',
                    viesti        = '{$message}',
                    status        = 'X',
                    luontiaika    = now()";
          $messenger_result = pupe_query($query);
        }
      }
    }

    if (!$era_valmis and $eran_koko > 0) $era_valmis = true;

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "(E1520): Lis‰tyt tilausrivit array:<br>\n";
      $kukarow['debugstring'] .= "<pre>(E1530): ";
      $kukarow['debugstring'] .= var_export($lisatyt_tilausrivit, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
      $kukarow['debugstring'] .= t("Er‰n tilavuus").": $eran_koko cm3<br>\n";
      $kukarow['debugstring'] .= t("Er‰n pinta-ala").": $eran_koko_pintaala cm2\n";
      $kukarow['debugstring'] .= "<br>\n";
    }

    if (isset($kukarow['debugstring']) and $era_valmis) {
      $kukarow['debugstring'] .= "(E1550): ERƒ VALMIS!<br><br>\n";
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<pre>(E1560): ";
      $kukarow['debugstring'] .= var_export($kaytettavat_pakkaukset, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
    }

    if (count($kaytettavat_pakkaukset) > 0) {
      if (isset($kukarow['debugstring'])) {
        $kukarow['debugstring'] .= "<table id='content_table'>\n";
        $kukarow['debugstring'] .= "<tr>\n";
        $kukarow['debugstring'] .= "<th>".t("Pakkaus")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Asiakas")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Paknro")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Toimitustapa")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("L‰htˆklo")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Tilaus")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Tilausrivi")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Merkki")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Tuoteno")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Nimitys")."</th>\n";
        $kukarow['debugstring'] .= "<th>Y.A.<br>m2</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Yht. Paino")."<br>kg</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Yht. Tilavuus")."<br>".t("litroina")."</th>\n";
        $kukarow['debugstring'] .= "<th>".t("Kpl")."</th>\n";
        $kukarow['debugstring'] .= "</tr>\n";
      }

      foreach ($kaytettavat_pakkaukset as $paknro => $arr) {
        if (count($kaytettavat_pakkaukset[$paknro]) == 0) {
          unset($kaytettavat_pakkaukset[$paknro]);
          continue;
        }

        foreach ($arr as $asiakas => $arr2) {
          if (count($kaytettavat_pakkaukset[$paknro][$asiakas]) == 0) {
            unset($kaytettavat_pakkaukset[$paknro][$asiakas]);

            if (count($kaytettavat_pakkaukset[$paknro]) == 0) {
              unset($kaytettavat_pakkaukset[$paknro]);
            }
          }

          foreach ($arr2 as $increment => $arr3) {
            if (count($kaytettavat_pakkaukset[$paknro][$asiakas][$increment]) == 0) {
              unset($kaytettavat_pakkaukset[$paknro][$asiakas][$increment]);

              if (count($kaytettavat_pakkaukset[$paknro][$asiakas]) == 0) {
                unset($kaytettavat_pakkaukset[$paknro][$asiakas]);

                if (count($kaytettavat_pakkaukset[$paknro]) == 0) {
                  unset($kaytettavat_pakkaukset[$paknro]);
                }

              }
            }
          }
        }

        if (count($kaytettavat_pakkaukset[$paknro]) == 0) {
          unset($kaytettavat_pakkaukset[$paknro]);
        }
      }

      $summataan_laatikot = array();

      $ed_pak = '';
      $ed_pakkaustunnus = '';

      reset($kaytettavat_pakkaukset);
      unset($paknro, $arr);

      foreach ($kaytettavat_pakkaukset as $paknro => $arr) {

        if (!isset($summataan_laatikot[$paknro])) {
          $summataan_laatikot[$paknro]['massa'] = $summataan_laatikot[$paknro]['tilavuus'] = 0;
        }

        foreach ($arr as $asiakas => $arr2) {

          $chky = count($arr2);
          $yyy = 1;

          foreach ($arr2 as $increment => $arr3) {

            if (isset($kukarow['debugstring'])) {
              if ($ed_pak != '' and $ed_pak != $increment) {
                $m2 = $ed_pakkaustunnus != 999 ? (($pakkaukset[$ed_pakkaustunnus]['leveys'] * $pakkaukset[$ed_pakkaustunnus]['syvyys']) / 10000) : "";

                $puukotettu = $summataan_laatikot[$ed_pak]['tilavuus'];

                if ($ed_pakkaustunnus != 999) {
                  $query = "SELECT puukotuskerroin FROM pakkaus WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$ed_pakkaustunnus}'";
                  $puukko_res = pupe_query($query);
                  $puukko_row = mysql_fetch_assoc($puukko_res);

                  if ($puukko_row['puukotuskerroin'] != 0) {
                    $puukotettu = $summataan_laatikot[$ed_pak]['tilavuus'] * $puukko_row['puukotuskerroin'];
                  }
                }

                $kukarow['debugstring'] .= "<tr><th colspan='10'>".t("Yhteens‰")."</th><th>{$m2}</th><th>{$summataan_laatikot[$ed_pak]['massa']}</th><th>{$summataan_laatikot[$ed_pak]['tilavuus']}</th><th>{$puukotettu}</th></tr>\n";
              }

              $kukarow['debugstring'] .= "<tr>\n";
              $kukarow['debugstring'] .= "<td>".$pakkaukset[$paknro]['nimi']."</td>\n";
            }

            $query = "SELECT nimi FROM asiakas WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$asiakas}'";
            $nimi_chk_res = pupe_query($query);
            $nimi_chk_row = mysql_fetch_assoc($nimi_chk_res);

            if (isset($kukarow['debugstring'])) {
              $kukarow['debugstring'] .= "<td>$nimi_chk_row[nimi] ($asiakas)</td>\n";
              $kukarow['debugstring'] .= "<td>".chr(64+$increment)."</td>\n";
            }

            $chk = count($arr3);
            $xxx = 1;

            foreach ($arr3 as $tilriv => $kpl) {
              $query = "SELECT tilausrivi.tuoteno, tuote.tuotemassa, tuote.tuoteleveys, tuote.tuotekorkeus, tuote.tuotesyvyys, tilausrivi.otunnus, tuote.nimitys, tuote.yksin_kerailyalustalle
                        FROM tilausrivi
                        JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno)
                        WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
                        AND tilausrivi.tunnus  = '{$tilriv}'";
              $tuotenimi_res = pupe_query($query);
              $tuotenimi_row = mysql_fetch_assoc($tuotenimi_res);

              $query = "SELECT ohjausmerkki, toimitustapa, toimitustavan_lahto
                        FROM lasku
                        WHERE yhtio = '{$kukarow['yhtio']}'
                        AND tunnus  = '{$tuotenimi_row['otunnus']}'";
              $lask_res = pupe_query($query);
              $lask_row = mysql_fetch_assoc($lask_res);

              $rivi_massa = round($kpl * $tuotenimi_row['tuotemassa'], 1);
              $rivi_tilavuus = round($kpl * $tuotenimi_row['tuoteleveys'] * $tuotenimi_row['tuotekorkeus'] * $tuotenimi_row['tuotesyvyys'] * 1000, 1);

              $erat['tilaukset'][$tuotenimi_row['otunnus']] = $tuotenimi_row['otunnus'];

              if (isset($kukarow['debugstring'])) {

                $query = "SELECT lahdon_kellonaika
                          FROM lahdot
                          WHERE yhtio = '{$kukarow['yhtio']}'
                          AND tunnus  = '{$lask_row['toimitustavan_lahto']}'";
                $klo_res = pupe_query($query);
                $klo_row = mysql_fetch_assoc($klo_res);

                $kukarow['debugstring'] .= "<td>$lask_row[toimitustapa]</td>\n";
                $kukarow['debugstring'] .= "<td>$klo_row[lahdon_kellonaika]</td>\n";
                $kukarow['debugstring'] .= "<td>$tuotenimi_row[otunnus]</td>\n";
                $kukarow['debugstring'] .= "<td>$tilriv</td>\n";
                $kukarow['debugstring'] .= "<td>$lask_row[ohjausmerkki]</td>\n";
                $kukarow['debugstring'] .= "<td>$tuotenimi_row[tuoteno]</td>\n";
                $kukarow['debugstring'] .= "<td>$tuotenimi_row[nimitys]</td>\n";
                $kukarow['debugstring'] .= "<td>$tuotenimi_row[yksin_kerailyalustalle]</td>\n";
                $kukarow['debugstring'] .= "<td>$rivi_massa</td>\n";
                $kukarow['debugstring'] .= "<td>$rivi_tilavuus</td>\n";
              }

              $summataan_laatikot[$increment]['massa'] += $rivi_massa;
              $summataan_laatikot[$increment]['tilavuus'] += $rivi_tilavuus;

              if (isset($kukarow['debugstring'])) {
                $kukarow['debugstring'] .= "<td>$kpl</td>\n";

                if ($chk != $xxx) {
                  $kukarow['debugstring'] .= "</tr>\n";
                  $kukarow['debugstring'] .= "<tr>\n";
                  $kukarow['debugstring'] .= "<td>".$pakkaukset[$paknro]['nimi']."</td>\n";
                  $kukarow['debugstring'] .= "<td>$nimi_chk_row[nimi] ($asiakas)</td>\n";
                  $kukarow['debugstring'] .= "<td>".chr(64+$increment)."</td>\n";
                  $xxx++;
                }
              }
            }

            if (isset($kukarow['debugstring']) and $chky != $yyy and $ed_pak != '' and $ed_pak == $increment) {
              $kukarow['debugstring'] .= "</tr>\n";
              $kukarow['debugstring'] .= "<tr>\n";
              $kukarow['debugstring'] .= "<td>".$pakkaukset[$paknro]['nimi']."</td>\n";
              $kukarow['debugstring'] .= "<td>$nimi_chk_row[nimi] ($asiakas)</td>\n";

              $yyy++;
            }

            $ed_pak = $increment;
            $ed_pakkaustunnus = $paknro;
          }
        }

        if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "</tr>\n";
      }

      if (isset($kukarow['debugstring']) and $ed_pak != '') {
        $m2 = $ed_pakkaustunnus != 999 ? (($pakkaukset[$ed_pakkaustunnus]['leveys'] * $pakkaukset[$ed_pakkaustunnus]['syvyys']) / 10000) : "";

        $puukotettu = $summataan_laatikot[$ed_pak]['tilavuus'];

        if ($ed_pakkaustunnus != 999) {
          $query = "SELECT puukotuskerroin FROM pakkaus WHERE yhtio = '{$kukarow['yhtio']}' AND tunnus = '{$ed_pakkaustunnus}'";
          $puukko_res = pupe_query($query);
          $puukko_row = mysql_fetch_assoc($puukko_res);

          if ($puukko_row['puukotuskerroin'] != 0) {
            $puukotettu = $summataan_laatikot[$ed_pak]['tilavuus'] * $puukko_row['puukotuskerroin'];
          }
        }

        $kukarow['debugstring'] .= "<tr><th colspan='10'>".t("Yhteens‰")."</th><th></th>{$m2}<th>{$summataan_laatikot[$ed_pak]['massa']}</th><th>{$summataan_laatikot[$ed_pak]['tilavuus']}</th><th>{$puukotettu}</th></tr>\n";
        $kukarow['debugstring'] .= "<tr><th colspan='11'>".t("Ker‰yser‰ yhteens‰")."</th>\n";

        $koko_massa = $koko_tilavuus = 0;

        foreach ($summataan_laatikot as $pak => $arr) {
          foreach ($arr as $key => $val) {
            ${'koko_'.$key} += $val;
          }
        }

        $kukarow['debugstring'] .= "<th>$koko_massa</th><th>$koko_tilavuus</th>\n";
        $kukarow['debugstring'] .= "<th></th></tr>\n";
      }

      if (isset($kukarow['debugstring'])) $kukarow['debugstring'] .= "</table>\n";
    }

    foreach ($kaytettavat_pakkaukset as $pakkauksen_nro => $larr) {
      foreach ($larr as $as_tun => $jarr) {
        foreach ($jarr as $juokseva_nro => $marr) {
          foreach ($marr as $tilriv => $kpl) {
            $erat['pakkaukset'][$pakkauksen_nro][$juokseva_nro][$tilriv] = $kpl;
          }
        }
      }
    }

    if (isset($kukarow['debugstring'])) {
      $kukarow['debugstring'] .= "<pre>(E1570): ";
      $kukarow['debugstring'] .= var_export($kaytettavat_pakkaukset, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
      $kukarow['debugstring'] .= "<pre>(E1580): ";
      $kukarow['debugstring'] .= var_export($erat, TRUE);
      $kukarow['debugstring'] .= "</pre>\n";
    }

    if (isset($kukarow['debugstring'])) {
      $filenimi = "Kerayseradebug-".md5(uniqid(mt_rand(), true)).".html";

      file_put_contents($tee_keraysera_debugdir."/".$filenimi, $kukarow['debugstring']);

      // Tyhjennet‰‰n t‰m‰ t‰ss‰ ja lis‰t‰‰n tallenna_ker‰yser‰ss‰ viel‰ v‰h‰n lis‰‰ jos on tarvis
      $kukarow['debugstring'] = "";

      // Setataan filenimi, niin voidaan nimet‰ se uudestaan tallenna_kerayser‰.inciss‰
      $kukarow['debugfile'] = $filenimi;
    }

    return $erat;
  }
}

if (!function_exists("pupesoft_lahetetyypit")) {
  function pupesoft_lahetetyypit() {

    //$lahetetyyppi = substr($lahetetyyppi, 0, -4)."_verollinen.inc";  # Verolliset hinnat
    //$lahetetyyppi = "perhe_".$lahetetyyppi;                          # Perheet yhdess‰, vain is‰t n‰ytet‰‰n
    //$lahetetyyppi = "hinnat_isalla_".$lahetetyyppi;                  # Perheet n‰ytet‰‰n, mutta hinnat summataan is‰lle

    return array(
      "tulosta_lahete.inc" => "N‰ytet‰‰n asiakkaan hinta ja alennus",
      "tulosta_lahete_asiakviivakoodi.inc" => "Ei n‰ytet‰ hintoja eik‰ alennuksia. Asiakkaan tuotekoodi viivakoodina",
      "tulosta_lahete_brutto.inc" => "N‰ytet‰‰n tuotteen myym‰l‰hinta, tai asiakkaan hinta jos myym‰l‰hinta puuttuu. Ilman alennuksia",
      "tulosta_lahete_custom.inc" => "N‰ytet‰‰n asiakkaan rivihinta, modifioitu tulostuspohja",
      "tulosta_lahete_ean.inc" => "N‰ytet‰‰n asiakkaan hinta ja alennus. Tuotteen EAN viivakoodina",
      "tulosta_lahete_ean_eiale.inc" => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia. Tuotteen EAN viivakoodina",
      "tulosta_lahete_eiale_eihinta.inc" => "Ei n‰ytet‰ hintoja eik‰ alennuksia",
      "tulosta_lahete_eiale_eihinta_iso.inc" => "Ei n‰ytet‰ hintoja eik‰ alennuksia (V‰lj‰t rivit)",
      "tulosta_lahete_eialehintoja.inc" => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia",
      "tulosta_lahete_eialeja.inc" => "N‰ytet‰‰n tuotteen myyntihinta ja alennusryhm‰",
      "tulosta_lahete_hae_hinnat.inc" => "Haetaan hinnat toisesta pupesta",
      "tulosta_lahete_tilausrivihinta_eialennuksia.inc" => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia",
      "tulosta_lahete_viivakoodi.inc" => "Ei n‰ytet‰ hintoja eik‰ alennuksia. Tuotteen EAN viivakoodina",
      "tulosta_lahete_viivakoodi_ale1.inc" => "N‰ytet‰‰n asiakkaan hinta, vain Ale1 ja erikoisalennus. Tuotteen EAN viivakoodina",
      "tulosta_lahete_viivakoodi_ean13.inc" => "N‰ytet‰‰n asiakkaan hinta. Alennukset laskettuna hintaan. Tuotteen EAN EAN13-viivakoodina",
      "tulosta_lahete_viivakoodi_osh.inc" => "N‰ytet‰‰n tuotteen myyntihinta ja asiakkaan hinta. Alennukset laskettuna hintaan. Tuotteen EAN viivakoodina",
      "tulosta_lahete_viivakoodi_ykshinta_normaali.inc" => "N‰ytet‰‰n asiakkaan hinta ja alennus. Tuotteen EAN viivakoodina. JT-rivit normaaleina",
      "tulosta_lahete_viivakoodi_ykshinta_normaali_eiale.inc" => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia. Tuotteen EAN viivakoodina. JT-rivit normaaleina",
    );
  }
}

if (!function_exists("pupesoft_laskutyypit")) {
  function pupesoft_laskutyypit() {
    return array(
      99 => "Normaali laskupohja",
      2  => "Normaali laskupohja (Tuoteperheet yhdistetty)",
      5  => "Normaali laskupohja (Ei n‰ytet‰ verollista rivihintaa)",
      6  => "Normaali laskupohja (Ei n‰ytet‰ tilausnumeroa/toimitusaikaa)",
      7  => "Normaali laskupohja (N‰ytet‰‰n tuotteen EAN koodi ja asiakaskommentti)",
      23 => "Normaali laskupohja (N‰ytet‰‰n myˆs yhteens‰ ilman alennuksia)",
      24 => "Normaali laskupohja (N‰ytet‰‰n toimitusajan paikalla verollinen yksikkˆhinta)",
      1  => "Pelkistetty laskupohja 1",
      3  => "Pelkistetty laskupohja 2 (Tuoteperheet yhdistetty)",
      4  => "Pelkistetty laskupohja 3",
      8  => "Ruotsin laskupohja",
      10 => "Normaali laskupohja ilman rivihintoja (ei laillinen Suomessa)",
      12 => "Normaali laskupohja (Tuoteperheet yhdistetty) ilman rivihintoja (ei laillinen Suomessa)",
      13 => "Nettohinnat, ei alennuksia, ei verollisia hintoja",
      14 => "Nettohinnat, ei alennuksia, ei verollisia hintoja (Tuoteperheet yhdistetty)",
      15 => "SVH, Nettohinnat, ei alennuksia, ei verollisia hintoja",
      16 => "SVH, Nettohinnat, ei alennuksia, ei verollisia hintoja (Tuoteperheet yhdistetty)",
      17 => "Normaali laskupohja (lihavoidut ja kursivoidut tekstit)",
      18 => "Normaali laskupohja (nimitykset rivitettyn‰)",
      19 => "Normaali laskupohja (Tuoteperheen hinnat is‰tuotteella, lapsituotteet n‰ytet‰‰n ilman hintoja)",
      20 => "Normaali laskupohja (Korvattu alennukset ja viite viennin lis‰tiedoilla ja lis‰tty uusi kommenttikentt‰)",
      21 => "Tuoteno, nimitys. Kommentit rivien j‰lkeen.",
      22 => "Tuoteno, nimitys. Kommentit rivien j‰lkeen. (Tuoteperheet yhdistetty)",
    );
  }
}

if (!function_exists("pupesoft_tilausvahvistustyypit")) {
  function pupesoft_tilausvahvistustyypit() {
    return array(
      "1"  => "N‰ytet‰‰n asiakkaan hinta ja alennus",
      "2"  => "N‰ytet‰‰n tuotteen myyntihinta ja alennusryhm‰",
      "3"  => "Ei n‰ytet‰ hintoja eik‰ alennuksia",
      "4"  => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia",
      "5"  => "Haetaan hinnat toisesta pupesta",
      "6"  => "N‰ytet‰‰n asiakkaan rivihinta, modifioitu tulostuspohja",
      "7"  => "N‰ytet‰‰n asiakkaan hinta ja alennus. Tuotteen EAN viivakoodina",
      "8"  => "N‰ytet‰‰n asiakkaan hinta, ilman alennuksia. Tuotteen EAN viivakoodina",
      "10" => "N‰ytet‰‰n asiakkaan hinta, alennus, viivakoodi ja jt-rivit normaaleina",
      "11" => "N‰ytet‰‰n asiakkaan hinta ja alennus. Tuotteen EAN viivakoodina. JT-rivit normaaleina",
      "12" => "N‰ytet‰‰n asiakkaan hinta, vain Ale1 ja erikoisalennus. Tuotteen EAN viivakoodina",
      "14" => "N‰ytet‰‰n asiakkaan hinta ja alennus (JT-rivit lasketaan mukaan yhteens‰summaan)",
    );
  }
}

if (!function_exists("pupesoft_tarjoustyypit")) {
  function pupesoft_tarjoustyypit() {
    return array(
      "0" => "Normaali tarjouspohja",
      "2" => "Normaali tarjouspohja ei ALV",
      "1" => "Pelkistetty tarjouspohja",
      "3" => "Lyhyt tarjouspohja",
      "4" => "Tarjouspohja, jossa ainoastaan nettohinnat",
      "5" => "Kuvallinen tarjouspohja",
    );
  }
}

if (!function_exists("pupesoft_lahetetyyppi")) {
  function pupesoft_lahetetyyppi($laskutunnus, $asiakastunnus = 0) {
    global $kukarow;

    if ((int) $laskutunnus != 0) {
      // Haetaan laskun l‰hetetyyppi
      $query = "SELECT lahetetyyppi, liitostunnus
                FROM lasku
                WHERE tunnus = '$laskutunnus'
                AND yhtio    = '$kukarow[yhtio]'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {

        $lahetetyyppi = mysql_fetch_assoc($result);

        if ($lahetetyyppi['lahetetyyppi'] != '') {
          return $lahetetyyppi['lahetetyyppi'];
        }

        $asiakastunnus = $lahetetyyppi["liitostunnus"];
      }
    }

    if ((int) $asiakastunnus != 0) {
      // Jos tilauksella ei ollut l‰hetetyyppi‰, haetaan asiakkaan oletusl‰hettyyppi
      $query = "SELECT asiakas.lahetetyyppi
                FROM asiakas
                JOIN avainsana ON (avainsana.yhtio = asiakas.yhtio AND avainsana.selite = asiakas.lahetetyyppi AND avainsana.laji = 'LAHETETYYPPI')
                WHERE asiakas.tunnus = '$asiakastunnus'
                AND asiakas.yhtio    = '$kukarow[yhtio]'";
      $result = pupe_query($query);

      if (mysql_num_rows($result) == 1) {

        $lahetetyyppi = mysql_fetch_assoc($result);

        if ($lahetetyyppi['lahetetyyppi'] != '') {
          return $lahetetyyppi['lahetetyyppi'];
        }
      }
    }

    // Jos ei asiakkaalla ei ole l‰hetetyyppi‰, haetaan yhtiˆn oletusl‰hetetyyppi
    $query = "SELECT selite
              FROM avainsana
              WHERE yhtio = '$kukarow[yhtio]'
              AND laji    = 'LAHETETYYPPI'
              ORDER BY jarjestys, selite
              LIMIT 1";
    $result = pupe_query($query);
    $lahetetyyppi = mysql_fetch_assoc($result);

    if ($lahetetyyppi['selite'] != '') {
      return $lahetetyyppi['selite'];
    }

    return false;
  }
}

if (!function_exists("pupesoft_tulosta_lahete")) {
  function pupesoft_tulosta_lahete($params) {
    global $kukarow, $yhtiorow;

    extract($params);

    $otunnus = $laskurow["tunnus"];

    //hatetaan asiakkaan l‰hetetyyppi
    $query = "SELECT luokka, puhelin,
              if (asiakasnro!='', asiakasnro, ytunnus) asiakasnro,
              asiakasnro as asiakasnro_aito,
              kieli,
              asiakasviivakoodi
              FROM asiakas
              WHERE tunnus = '$laskurow[liitostunnus]'
              and yhtio    = '$kukarow[yhtio]'";
    $result = pupe_query($query);
    $asrow = mysql_fetch_assoc($result);

    $lahetetyyppi = "";

    if (isset($sellahetetyyppi) and $sellahetetyyppi != '') {
      $lahetetyyppi = $sellahetetyyppi;
    }
    else {
      $lahetetyyppi = pupesoft_lahetetyyppi($otunnus, $laskurow['liitostunnus']);
    }

    if (@include "tilauskasittely/tulosta_lahete.inc");
    else require "tulosta_lahete.inc";

    // katotaan miten halutaan sortattavan
    // haetaan asiakkaan tietojen takaa sorttaustiedot
    $order_sorttaus = '';

    $asiakas_apu_query = "SELECT lahetteen_jarjestys,
                          lahetteen_jarjestys_suunta,
                          email,
                          kerayserat,
                          koontilahete_kollitiedot
                          FROM asiakas
                          WHERE yhtio = '{$kukarow['yhtio']}'
                          and tunnus  = '{$laskurow['liitostunnus']}'";
    $asiakas_apu_res = pupe_query($asiakas_apu_query);
    $asiakas_apu_row = mysql_fetch_assoc($asiakas_apu_res);

    if (mysql_num_rows($asiakas_apu_res) == 1) {
      $sorttauskentta = generoi_sorttauskentta($asiakas_apu_row["lahetteen_jarjestys"] != "" ? $asiakas_apu_row["lahetteen_jarjestys"] : $yhtiorow["lahetteen_jarjestys"]);
      $order_sorttaus = $asiakas_apu_row["lahetteen_jarjestys_suunta"] != "" ? $asiakas_apu_row["lahetteen_jarjestys_suunta"] : $yhtiorow["lahetteen_jarjestys_suunta"];
    }
    else {
      $sorttauskentta = generoi_sorttauskentta($yhtiorow["lahetteen_jarjestys"]);
      $order_sorttaus = $yhtiorow["lahetteen_jarjestys_suunta"];
    }

    if ($yhtiorow["lahetteen_palvelutjatuottet"] == "E") $pjat_sortlisa = "tuotetyyppi,";
    else $pjat_sortlisa = "";

    if ($laskurow["tila"] == "L" or $laskurow["tila"] == "N") {
      $tyyppilisa = " and tilausrivi.tyyppi in ('L') ";
    }
    else {
      $tyyppilisa = " and tilausrivi.tyyppi in ('L','G','W') ";
    }

    $query_ale_lisa = generoi_alekentta('M');

    $onko_kerayserat_kaytossa = false;
    $koontiselect   = "";
    $koontijoin   = "";
    $koontisort   = "";
    $koontilisa    = "";
    $koontirivihinta = "";

    $_yhtion_kollitiedot = ($yhtiorow['koontilahete_kollitiedot'] == '');
    $_as_kollitiedot = $asiakas_apu_row['koontilahete_kollitiedot'];
    $_kollitieto = ($_as_kollitiedot == 'K' or ($_as_kollitiedot == '' and $_yhtion_kollitiedot));

    // Koontil‰hetteen lis‰valinnat ja -ehdot
    if (isset($koontilahete) and $koontilahete != 0) {

      $otunnus = $koontilahete;

      if (isset($koontilahete_tilausrivit) and $koontilahete_tilausrivit != 0) {
        $koontilisa = "AND tilausrivi.tunnus IN ({$koontilahete_tilausrivit})";
      }

      if ($yhtiorow['kerayserat'] == 'K' or $yhtiorow['kerayserat'] == 'P') {
        $onko_kerayserat_kaytossa = true;
      }

      // jos ker‰yser‰t on A, eli asiakkaan takana pit‰‰ olla ker‰yser‰t p‰‰ll‰
      if ($yhtiorow['kerayserat'] == 'A' and $asiakas_apu_row['kerayserat'] == 'A') {
        $onko_kerayserat_kaytossa = true;
      }

      if ($onko_kerayserat_kaytossa === true and $_kollitieto) {
        $koontiselect  = " ifnull(kerayserat.sscc, 0) sscc, ifnull(kerayserat.sscc_ulkoinen, 99999999) sscc_ulkoinen, pakkaus.pakkaus, kerayserat.kpl_keratty AS varattu, 0 AS kpl, 0 as jt, ifnull(kerayserat.kpl, tilausrivi.tilkpl) AS tilkpl,";
        $koontirivihinta = "round(tilausrivi.hinta * ifnull(kerayserat.kpl_keratty, (tilausrivi.varattu+tilausrivi.jt+tilausrivi.kpl)) * {$query_ale_lisa},'{$yhtiorow['hintapyoristys']}') rivihinta,";
        $koontijoin   = " LEFT JOIN kerayserat ON (kerayserat.tilausrivi = tilausrivi.tunnus AND kerayserat.yhtio = tilausrivi.yhtio)
                  LEFT JOIN pakkaus ON (kerayserat.pakkaus = pakkaus.tunnus)";
        $koontisort   = " sscc_ulkoinen, ";
      }
    }

    // N‰m‰ menee Toimituskulut:-otsikon alle
    $query = "SELECT GROUP_CONCAT(DISTINCT kuljetusvakuutus_tuotenumero SEPARATOR '\',\'') kuljetusvakuutus_tuotenumerot
              FROM toimitustapa
              WHERE yhtio                       = '{$kukarow['yhtio']}'
              AND kuljetusvakuutus_tuotenumero != ''";
    $toimitustapa_res = pupe_query($query);
    $toimitustapa_row = mysql_fetch_assoc($toimitustapa_res);

    if ($toimitustapa_row['kuljetusvakuutus_tuotenumerot'] != "") {
      $kvaktuotteet = ",'{$toimitustapa_row['kuljetusvakuutus_tuotenumerot']}'";
    }

    $poisrajattavat_tuotteet = "'$yhtiorow[rahti_tuotenumero]' $kvaktuotteet";
    $poisrajattavat_tuotteet = lisaa_vaihtoehtoinen_rahti_merkkijonoon($poisrajattavat_tuotteet);

    $jtsort_lisa = "if (tilausrivi.tuoteno in ({$poisrajattavat_tuotteet}), 2, if(tilausrivi.var='J', 1, 0)) jtsort,";

    if (substr($lahetetyyppi, 0, 6) != "perhe_" and (hae_base_lahetetyyppi($lahetetyyppi) == 'tulosta_lahete_viivakoodi_ykshinta_normaali.inc' or hae_base_lahetetyyppi($lahetetyyppi) == 'tulosta_lahete_viivakoodi_ykshinta_normaali_eiale.inc')) {
      $jtsort_lisa = "0 as jtsort,";
    }

    if (strpos($lahetetyyppi, "_eipuute") !== FALSE) {
      $varlisa = "and tilausrivi.var not in ('O','P')";
    }
    else {
      $varlisa = "and tilausrivi.var != 'O'";
    }

    $ale_query_select_lisa = generoi_alekentta_select('yhteen', 'M');

    //generoidaan l‰hetteelle ja ker‰yslistalle rivinumerot
    $query = "SELECT tilausrivi.*,
              $ale_query_select_lisa aleyhteensa,
              {$koontiselect}
              round(if (tuote.myymalahinta != 0, tuote.myymalahinta/if(tuote.myyntihinta_maara>0, tuote.myyntihinta_maara, 1), tilausrivi.hinta * if ('$yhtiorow[alv_kasittely]' != '' and tilausrivi.alv < 500, (1+tilausrivi.alv/100), 1)),'$yhtiorow[hintapyoristys]') ovhhinta,
              round(tilausrivi.hinta * (tilausrivi.varattu+tilausrivi.jt+tilausrivi.kpl) * {$query_ale_lisa},'$yhtiorow[hintapyoristys]') rivihinta,
              {$koontirivihinta}
              $sorttauskentta,
              {$jtsort_lisa}
              if (tuote.tuotetyyppi='K','2 Tyˆt','1 Muut') tuotetyyppi,
              if (tuote.myyntihinta_maara=0, 1, tuote.myyntihinta_maara) myyntihinta_maara,
              tuote.sarjanumeroseuranta,
              trim(eankoodi) eankoodi
              FROM tilausrivi
              $koontijoin
              JOIN tuote ON tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno
              JOIN lasku ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
              LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
                WHERE tilausrivi.otunnus  in ($otunnus)
              AND tilausrivi.yhtio        = '$kukarow[yhtio]'
              $tyyppilisa
              {$koontilisa}
              {$varlisa}
              AND (tilausrivi.perheid = 0 or tilausrivi.perheid=tilausrivi.tunnus or tilausrivin_lisatiedot.ei_nayteta !='E' or tilausrivin_lisatiedot.ei_nayteta is null)
              ORDER BY jtsort, $koontisort $pjat_sortlisa sorttauskentta $order_sorttaus, tilausrivi.tunnus";
    $riresult = pupe_query($query);

    $params_lahete = array(
      'arvo'                     => 0,
      'asrow'                    => $asrow,
      'boldi'                    => $boldi,
      'ei_otsikoita'             => '',
      'extranet_tilausvahvistus' => $extranet_tilausvahvistus,
      'iso'                      => $iso,
      'jtid'                     => '',
      'kala'                     => 0,
      'kassa_ale'                => '',
      'kieli'                    => $kieli,
      'lahetetyyppi'             => $lahetetyyppi,
      'laskurow'                 => $laskurow,
      'naytetaanko_rivihinta'    => $naytetaanko_rivihinta,
      'norm'                     => $norm,
      'page'                     => NULL,
      'pdf'                      => NULL,
      'perheid'                  => 0,
      'pieni'                    => $pieni,
      'pieni_boldi'              => $pieni_boldi,
      'pitkattuotteet'           => FALSE,
      'rectparam'                => $rectparam,
      'riviresult'               => $riresult,
      'rivinkorkeus'             => $rivinkorkeus,
      'rivinumerot'              => "",
      'row'                      => NULL,
      'sivu'                     => 1,
      'summa'                    => 0,
      'tee'                      => $tee,
      'thispage'                 => NULL,
      'toim'                     => $toim,
      'tots'                     => 0,
      'tuotenopituus'            => '',
      'nimityskohta'             => '',
      'nimitysleveys'            => '',
      'tyyppi'                   => '',
      'useita'                   => '',
      'komento'                  => $komento,
      'yhteensamaara'            => 0,
      'lahetekpl'                => $lahetekpl,
      'onko_kerayserat_kaytossa' => $onko_kerayserat_kaytossa,
      'koontilahete'             => $koontilahete,
    );

    if ($laskurow["tila"] == "G") {
      $params_lahete["tyyppi"] = "SIIRTOLISTA";
    }

    $params_lahete = alku_lahete($params_lahete);

    // Piirret‰‰n rivit
    mysql_data_seek($riresult, 0);

    unset($sscc);
    $otsikoitu = false;

    $laheterows = array();

    // tsekataan pit‰‰kˆ tuote korvata osaluettelolla
    while ($row = mysql_fetch_assoc($riresult)) {
      if ($yhtiorow["pura_osaluettelot"] != "") {
        // Korvataanko tilauksella oleva rivi osaluettelolla
        $laheterows = array_merge($laheterows, pura_osaluettelot($laskurow, $row));
          }
        else {
          $laheterows[] = $row;
        }
      }

    foreach ($laheterows as $row) {

      $params_lahete["row"] = $row;

      // Mik‰li kolli vaihtuu, tulostetaan kollirivi
      if ($koontilahete != 0 and $onko_kerayserat_kaytossa and (!isset($sscc) or $sscc != $row['sscc'])) {

        if ($row['sscc'] != 0) {
          $params_lahete = kollirivi_lahete($params_lahete);
          $siirto =  5;
        }
        elseif (isset($sscc)) {
          $siirto = 60;
        }
        else {
          $siirto = 20;
        }

        if ($otsikoitu === false or $_kollitieto) {
          $params_lahete['kala'] = $params_lahete['kala'] -= $siirto;
          $params_lahete = rivi_otsikot_lahete($params_lahete);
          $otsikoitu = true;
        }
      }

      $params_lahete = rivi_lahete($params_lahete);

      if ($koontilahete != 0 and $onko_kerayserat_kaytossa) $sscc = $row['sscc'];
    }

    // Haetaan erikseen toimitettavat tuotteet
    if (!$params_lahete['koontilahete'] and $yhtiorow['kerayserat'] == '' and $laskurow["vanhatunnus"] > 0) {
      $query = "SELECT GROUP_CONCAT(distinct tunnus SEPARATOR ',') tunnukset
                FROM lasku use index (yhtio_vanhatunnus)
                WHERE yhtio      = '$kukarow[yhtio]'
                and vanhatunnus  = '$laskurow[vanhatunnus]'
                and tunnus      != '$laskurow[tunnus]'";
      $perheresult = pupe_query($query);
      $tunrow = mysql_fetch_assoc($perheresult);

      //generoidaan l‰hetteelle ja ker‰yslistalle rivinumerot
      if ($tunrow["tunnukset"] != "") {

        $toimitettulisa = "";

        if ($laskurow["clearing"] == "ENNAKKOTILAUS" or $laskurow["clearing"] == "JT-TILAUS") {
          $toimitettulisa = " and tilausrivi.toimitettu = '' ";
        }

        $rahtituotenumerot_lisa = "'$yhtiorow[rahti_tuotenumero]'";
        $rahtituotenumerot_lisa = lisaa_vaihtoehtoinen_rahti_merkkijonoon($rahtituotenumerot_lisa);

        $query = "SELECT tilausrivi.*,
                  round(if (tuote.myymalahinta != 0, tuote.myymalahinta/if(tuote.myyntihinta_maara>0, tuote.myyntihinta_maara, 1), tilausrivi.hinta * if ('$yhtiorow[alv_kasittely]' != '' and tilausrivi.alv < 500, (1+tilausrivi.alv/100), 1)),'$yhtiorow[hintapyoristys]') ovhhinta,
                  round(tilausrivi.hinta * (tilausrivi.varattu+tilausrivi.jt+tilausrivi.kpl) * {$query_ale_lisa},'$yhtiorow[hintapyoristys]') rivihinta,
                  $sorttauskentta,
                  if (tilausrivi.tuoteno IN ({$rahtituotenumerot_lisa}), 2, if(tilausrivi.var='J', 1, 0)) jtsort,
                  if (tuote.tuotetyyppi='K','2 Tyˆt','1 Muut') tuotetyyppi,
                  if (tuote.myyntihinta_maara=0, 1, tuote.myyntihinta_maara) myyntihinta_maara,
                  tuote.sarjanumeroseuranta
                  FROM tilausrivi
                  JOIN tuote ON tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno
                  JOIN lasku ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
                  LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
                  WHERE tilausrivi.otunnus  in ('$tunrow[tunnukset]')
                  and tilausrivi.yhtio      = '$kukarow[yhtio]'
                  $tyyppilisa
                  $toimitettulisa
                  and tilausrivi.var       != 'O'
                  and (tilausrivi.perheid = 0 or tilausrivi.perheid=tilausrivi.tunnus or tilausrivin_lisatiedot.ei_nayteta !='E' or tilausrivin_lisatiedot.ei_nayteta is null)
                  ORDER BY jtsort, $pjat_sortlisa sorttauskentta $order_sorttaus, tilausrivi.tunnus";
        $riresult = pupe_query($query);

        while ($row = mysql_fetch_assoc($riresult)) {

          if ($row['toimitettu'] == '') {
            $row['kommentti'] .= "\n******* ".t("Toimitetaan erikseen", $kieli).". *******";
          }
          else {
            $row['kommentti'] .= "\n******* ".t("Toimitettu erikseen tilauksella", $kieli)." ".$row['otunnus'].". *******";
          }

          $row['rivihinta']   = "";
          $row['varattu']   = "";
          $row['kpl']      = "";
          $row['jt']       = "";
          $row['d_erikseen']   = "JOO";

          $params_lahete["row"] = $row;
          $params_lahete = rivi_lahete($params_lahete);
        }
      }
    }

    // Loppulaatikot
    $params_lahete["tots"] = 1;
    $params_lahete = loppu_lahete($params_lahete);

    if ($yhtiorow["lahete_allekirjoitus"] != "") {
      $params_lahete = kuittaus_lahete($params_lahete);
    }

    if (is_array($komento) and isset($komento["L‰hete"])) $params_lahete["komento"] = $komento["L‰hete"];

    //tulostetaan sivu
    print_pdf_lahete($params_lahete);
  }
}

if (!function_exists("pupeFileReader")) {
  function pupeFileReader($file, $extension = "", $saveintocsvfile = "", $multiple_sheet = false) {

    /**
     * Laitetaan rivit arrayseen *
     */
    $excelrivit = array();

    // Jos halutaan tehd‰ esim XLSX to CSV konversio
    if ($saveintocsvfile != "") {
      // Aina temppiin
      $saveintocsvfile = "/tmp/".basename($saveintocsvfile);

      // Avataan file
      $savefile = fopen($saveintocsvfile, "w");
    }

    if ($extension == "DATAIMPORT") {

      /**
       * Ladataan CSV file *
       */
      $file = fopen($file, "r") or die (t("Tiedoston avaus ep‰onnistui")."!");

      while ($rivi = fgets($file)) {

        /**
         * Luetaan CSV rivi tiedostosta *
         */
        // Katsotaan onko UTF-8 muodossa
        if (!PUPE_UNICODE and mb_detect_encoding($rivi, 'UTF-8', true) !== FALSE) {
          $rivi = str_getcsv(utf8_decode($rivi));
        }
        else {
          $rivi = str_getcsv($rivi);
        }

        $excelrivit[] = $rivi;
      }

      fclose($file);
    }
    elseif ($extension == "TXT" or $extension == "CSV") {

      /**
       * Ladataan Tab eroteltu teksti file *
       */
      $file = fopen($file, "r") or die (t("Tiedoston avaus ep‰onnistui")."!");

      $rowIndex = 0;

      while ($rivi = fgets($file)) {
        // luetaan rivi tiedostosta..
        $rivi = explode("\t", pupesoft_cleanstring($rivi));

        for ($colIndex = 0; $colIndex < count($rivi); $colIndex++) {
          $excelrivit[$rowIndex][$colIndex] = trim($rivi[$colIndex]);
        }

        $rowIndex++;
      }

      fclose($file);
    }
    elseif ($extension == "XLSX") {

      /**
       * XLSX XML-tiedosto *
       */
      $foldername = md5(uniqid(rand(), true));

      function charColumn($string) {

        $string = strrev($string);
        $luku   = 0;

        for ($r = 0; $r < strlen($string); $r++) {
          $luku += (ord($string{$r})-64) * pow(26, $r);
        }

        return $luku-1;
      }

      // Avataan XLSX Zippi
      exec("cp $file /tmp/$foldername.zip; unzip /tmp/$foldername.zip -d /tmp/$foldername;");

      if ($multiple_sheet) {
        $sheets_dir = "/tmp/$foldername/xl/worksheets/";
        $number_of_sheets = 0;
        if ($handle = opendir($sheets_dir)) {
          while (($file = readdir($handle)) !== false) {
            if (!in_array($file, array('.', '..')) && !is_dir($sheets_dir.$file))
              $number_of_sheets++;
          }
        }

        for ($i = 1; $i <= $number_of_sheets; $i++) {
          $excelrivit[$i] = pupeFileReaderXLSRows($foldername, $i, $savefile);
        }
      }
      else {
        $excelrivit = pupeFileReaderXLSRows($foldername, 1, $savefile);
      }

      // Poistetaan zipppi ja purettu zippi
      exec("rm -f /tmp/$foldername.zip; rm -rf /tmp/$foldername;");
    }
    else {

      /**
       * PHPExcel kirjasto *
       */
      if (@include "PHPExcel/Classes/PHPExcel/IOFactory.php");
      elseif (@include "PHPExcel/PHPExcel/IOFactory.php");

      /**
       * Tunnistetaan tiedostomuoto *
       */
      $inputFileType = PHPExcel_IOFactory::identify($file);

      /**
       * Luodaan readeri *
       */
      $objReader = PHPExcel_IOFactory::createReader($inputFileType);

      /**
       * Ladataan vain solujen datat (ei formatointeja jne) *
       */
      $objReader->setReadDataOnly(true);

      /**
       * Ladataan vain eka sheet *
       */
      $objReader->setLoadSheetsOnly(0);

      /**
       * Ladataan file halutuilla parametreilla *
       */
      $objPHPExcel = $objReader->load($file);

      if ($multiple_sheet) {
        for ($i = 0; $i <= $objPHPExcel->getSheetCount() - 1; $i++) {
          $excelrivit[$i] = pupeFileReaderXLSRow($objPHPExcel, $i);
        }
      }
      else {
        $excelrivit = pupeFileReaderXLSRow($objPHPExcel, 0);
      }

      /**
       * Tuhotaan excel oliot *
       */
      unset($objReader);
      unset($objPHPExcel);
    }

    if (isset($savefile)) {
      fclose($savefile);

      return $saveintocsvfile;
    }
    else {
      return $excelrivit;
    }
  }
}

if (!function_exists('pupeFileReaderXLSRows')) {
  function pupeFileReaderXLSRows($foldername, $i, $savefile) {
    $excelrivit = array();

    $workSheetFile    = "/tmp/$foldername/xl/worksheets/sheet{$i}.xml";
    $sharedStringsFile  = "/tmp/$foldername/xl/sharedStrings.xml";

    $sheetData    = simplexml_load_file($workSheetFile);
    $sharedStrings  = simplexml_load_file($sharedStringsFile);

    $sharedStringsArray = array();

    foreach ($sharedStrings->si as $string) {
      $sharedStringsArray[] = utf8_decode($string->t);
    }

    foreach ($sheetData->sheetData->row as $row) {

      $rowIndex = ($row->attributes()->r)-1;

      foreach ($row->c as $cell) {

        if (isset($cell->attributes()->t) and $cell->attributes()->t == "s") {
          $value = $sharedStringsArray[(int) $cell->v];
        }
        else {
          $value = $cell->v;
        }

        $colIndex = charColumn(str_replace(($rowIndex+1), "", (string) $cell->attributes()->r));

        $excelrivit[$rowIndex][$colIndex] = trim($value);
        $colIndex++;
      }
    }

    // XLSX failisssa ei ole ollenkaan tyhji‰ soluja, injisoidaan ne t‰ss‰...
    foreach ($excelrivit as $rowIndex => $row) {
      $edindex = 0;

      foreach ($row as $colIndex => $column) {

        if ($colIndex > 0 and $colIndex > $edindex+1) {
          for ($inj = $edindex+1; $inj < $colIndex; $inj++) {
            $excelrivit[$rowIndex][$inj] = "";
          }
        }

        $edindex = $colIndex;
      }

      // Laitetaan solut viel‰ indeksien mukaan j‰rjestykseen jotta implode toimisi
      ksort($excelrivit[$rowIndex]);

      if (isset($savefile)) {
        fwrite($savefile, "\"".implode("\",\"", $excelrivit[$rowIndex])."\"\n");
      }
    }

    return $excelrivit;
  }
}

if (!function_exists('pupeFileReaderXLSRow')) {
  function pupeFileReaderXLSRow(&$objPHPExcel, $i) {
    $excelrivit = array();

    /**
     * Aktivoidaan eka sheetti*
     */
    $objPHPExcel->setActiveSheetIndex($i);

    /**
     * Loopataan tiedoston rivit *
     */
    foreach ($objPHPExcel->getActiveSheet()->getRowIterator() as $row) {
      $cellIterator = $row->getCellIterator();
      $cellIterator->setIterateOnlyExistingCells(false);

      $rowIndex = ($row->getRowIndex())-1;

      foreach ($cellIterator as $cell) {
        $colIndex = (PHPExcel_Cell::columnIndexFromString($cell->getColumn()))-1;

        $excelrivit[$rowIndex][$colIndex] = trim(utf8_decode($cell->getCalculatedValue()));
      }
    }

    return $excelrivit;
  }
}

if (!function_exists("kustannuspaikka_kohde_projekti")) {
  function kustannuspaikka_kohde_projekti($tilino, $kustp=0, $kohde=0, $projekti=0) {
    global $kukarow;

    $kustp    = (int) $kustp;
    $kohde    = (int) $kohde;
    $projekti  = (int) $projekti;

    $query = "SELECT kustp, kohde, projekti
              FROM tili
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tilino  = '{$tilino}'";
    $kustp_kohde_proj_res = pupe_query($query);
    $kustp_kohde_proj_row = mysql_fetch_assoc($kustp_kohde_proj_res);

    $returnarray = array();

    if ($kustp == 0) {
      $returnarray[] = $kustp_kohde_proj_row["kustp"];
    }
    else {
      $returnarray[] = $kustp;
    }

    if ($kohde == 0) {
      $returnarray[] = $kustp_kohde_proj_row["kohde"];
    }
    else {
      $returnarray[] = $kohde;
    }

    if ($projekti == 0) {
      $returnarray[] = $kustp_kohde_proj_row["projekti"];
    }
    else {
      $returnarray[] = $projekti;
    }

    return $returnarray;
  }
}

if (!function_exists("tarkistahetu")) {
  function tarkistahetu($hetu) {

    $hetu_orig = $hetu;

    // otetaan sis‰‰n $hetu
    // palautetaan $hetuok

    // Henkilˆtunnus on muotoa PPKKVVSNNNT

    $hetuok = 0; // kaikki ok

    if (strlen($hetu) == 11) {

      // muutetaan kaikki kirjamet kapitaaleiksi
      $hetu = strtoupper($hetu);

      // konkatenoidaan pvm ja yksilˆnumero tarkistuslaskua varten
      $hetutarkista1 = substr($hetu, 0, 6).substr($hetu, 7, 3);

      // otetaan tarkistusmerkki talteen
      $hetutarkista2 = substr($hetu, 10, 1);

      // otetaan v‰limerkki tarkistusta varten
      $hetutarkista3 = substr($hetu, 6, 1);

      // otetaan tarkistettavasta osasta mod 31
      $jaannos = $hetutarkista1 % 31;

      // tehd‰‰n jakoj‰‰nnˆksest‰ konversio kirjaimeen
      if ($jaannos <  10) $tarkiste = $jaannos;
      if ($jaannos == 10) $tarkiste = "A";
      if ($jaannos == 11) $tarkiste = "B";
      if ($jaannos == 12) $tarkiste = "C";
      if ($jaannos == 13) $tarkiste = "D";
      if ($jaannos == 14) $tarkiste = "E";
      if ($jaannos == 15) $tarkiste = "F";
      if ($jaannos == 16) $tarkiste = "H";
      if ($jaannos == 17) $tarkiste = "J";
      if ($jaannos == 18) $tarkiste = "K";
      if ($jaannos == 19) $tarkiste = "L";
      if ($jaannos == 20) $tarkiste = "M";
      if ($jaannos == 21) $tarkiste = "N";
      if ($jaannos == 22) $tarkiste = "P";
      if ($jaannos == 23) $tarkiste = "R";
      if ($jaannos == 24) $tarkiste = "S";
      if ($jaannos == 25) $tarkiste = "T";
      if ($jaannos == 26) $tarkiste = "U";
      if ($jaannos == 27) $tarkiste = "V";
      if ($jaannos == 28) $tarkiste = "W";
      if ($jaannos == 29) $tarkiste = "X";
      if ($jaannos == 30) $tarkiste = "Y";

      // katotaan p‰‰stiinkˆ samaan tarkisteeseen
      if ($tarkiste != $hetutarkista2) {
        $hetuok = 1; // ei ole ok
      }

      // katotaan, ett‰ v‰limerkki on oikein
      if ($hetutarkista3 != "-" and $hetutarkista3 != '+' and $hetutarkista3 != 'A') {
        $hetuok = 1; // ei ole ok
      }

    }
    else {
      $hetuok = 1; // ei ole ok
    }

    if ($hetuok == 0) {
      $hetu_clean = substr($hetu_orig, 0, 7)."XXXX";
    }
    else {
      $hetu_clean = $hetu_orig;
    }

    return $hetu_clean;
  }
}

if (!function_exists("tarkistaytunnus")) {
  function tarkistaytunnus($ytunnus) {

    $tulo = 0;

    // Ytunnus pit‰‰ olla numeerinen ja 8 merkki‰ pitk‰
    if (!is_numeric($ytunnus) or strlen($ytunnus) != 8) {
      return FALSE;
    }

    // loopataan ytunnus
    for ($ytunnusi = 0; $ytunnusi < 7; $ytunnusi++) {

      $merkki = substr($ytunnus, $ytunnusi, 1);

      switch ($ytunnusi) {
      case 0:
        $kerroin = 7;
        break;
      case 1:
        $kerroin = 9;
        break;
      case 2:
        $kerroin = 10;
        break;
      case 3:
        $kerroin = 5;
        break;
      case 4:
        $kerroin = 8;
        break;
      case 5:
        $kerroin = 4;
        break;
      case 6:
        $kerroin = 2;
        break;
      }
      $tulo += $kerroin * $merkki;
    }

    // otetaan tarkastusmerkki
    $tmerkki = substr($ytunnus, -1);

    // summasta mod 11
    $tulo = $tulo % 11;

    if ($tulo <> 0) {
      $tulo = 11 - $tulo;
    }

    // oliko tarkastusmerkki ok
    if ($tulo == $tmerkki) {
      return TRUE;
    }
    else {
      return FALSE;
    }

  }
}

if (!function_exists('gauge')) {
  function gauge() {

    /**
     * Mittari piirret‰‰n diviin id:ll‰ chart_div
     * Tarvitaan args- ja options-oliot
     */

    /**
     * ESIMERKKI
     * var gauge = new Gauge();
     * var args = {
     * foo: ['BAR', 0]
     * }
     * var options = {  width: 800,
     * height: 220,
     * min: 0,
     * max: 400000,
     * redFrom: 200000,
     * redTo: 300000,
     * greenFrom: 350000,
     * greenTo: 400000,
     * yellowFrom: 300000,
     * yellowTo: 350000,
     * minorTicks: 5,
     * majorTicks: ['0', '50', '100', '150', '200', '250', '300', '350', '400']};
     * gauge.init(args, options);
     * gauge.draw($('#value_from').val(), options.max);
     */
?>
  <script type='text/javascript' src='https://www.google.com/jsapi'></script>
  <script type='text/javascript' charset='utf-8'>

    google.load('visualization', '1', {packages:['gauge']});
    // google.setOnLoadCallback(drawChart);

    var Gauge = (function() {
      var data;
      var options;
      var chart;

      var parsers = {
        'custom_parseint': function custom_parseint(val) { return parseInt(val); },
        'custom_parsefloat': function custom_parsefloat(val) { return parseFloat(val); }
      }

      return {
        init: function(args, opt) {
          data = new google.visualization.DataTable();
          options = opt;

          data.addColumn('string', 'Label');
          data.addColumn('number', 'Value');

          data.addRows(1);

          var div_id;
          var _i = 0;

          for (var i in args) {
            var _x = 0;
            div_id = i;

            for (var x in args[i]) {
              data.setValue(_i, _x, args[i][x]);
              _x++;
            }
            _i++;
          }

          $('#chart_div').append('<div id=\''+div_id+'\'></div>');
          $('#'+div_id).css('float', 'left');
          var div = document.getElementById(div_id);
          chart = new google.visualization.Gauge(div);

          chart.draw(data, options);

          var body_bgcolor = $('body').css('background-color');
          $('#chart_div *').css({'background-color': body_bgcolor});
        },
        draw: function(value, draw_options) {

          parser = parsers[draw_options.type];
          value = parser(value);

          data.setValue(0, 1, value);
          chart.draw(data, options);
        }
      }
    });

  </script>
<?php
  }
}

// Lasketaan moneenko valmisteeseen raaka-aineet riitt‰‰
if (!function_exists('raaka_aineiden_riitto')) {
  function raaka_aineiden_riitto($tuoteno, $varasto = 0, $return_type = '') {

    global $kukarow;

    // K‰ytett‰v‰t muuttujat
    $join_lisa = "";
    $varasto = (int) $varasto;
    $tuoteno = mysql_real_escape_string($tuoteno);
    $return = array();

    // Katotaan halutaanko saldo vaan jostain tietyst‰ varastosta (varastopaikat.tunnus), silloin unohdetaan edell‰ annettu tyyppi kokonaan
    if ($varasto != 0) {
      $join_lisa = "JOIN tuotepaikat ON (tuotepaikat.yhtio = tuote.yhtio
                      AND tuotepaikat.tuoteno = tuote.tuoteno
                      AND tuotepaikat.varasto in ($varasto))";
    }

    // Loopataan lapsituotteet l‰pi
    $query = "SELECT tuoteperhe.tuoteno,
              tuoteperhe.kerroin,
              tuote.nimitys
              FROM tuoteperhe
              JOIN tuote ON (tuote.yhtio = tuoteperhe.yhtio
                AND tuote.tuoteno       = tuoteperhe.tuoteno
                AND tuote.ei_saldoa     = '')
              $join_lisa
              WHERE tuoteperhe.yhtio    = '{$kukarow["yhtio"]}'
              AND tuoteperhe.isatuoteno = '$tuoteno'
              AND tuoteperhe.tyyppi     = 'R'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      return 0;
    }

    $voidaan_valmistaa = 9999999999999;

    // Katotaan moneeko valmisteeseen lapsien saldo riitt‰‰
    while ($row = mysql_fetch_assoc($result)) {
      list ($saldo, $hyllyssa, $myytavissa, $bool) = saldo_myytavissa($row["tuoteno"], '', $varasto);

      $riitto = round($myytavissa / $row["kerroin"], 2);

      $return[] = array(
        'tuoteno'   => $row['tuoteno'],
        'nimitys'   => $row['nimitys'],
        'saldo'     => $myytavissa,
        'riitto'   => $riitto,
      );

      // Otetaan telteen pienin riitto
      if ($riitto < $voidaan_valmistaa) {
        $voidaan_valmistaa = $riitto;
      }
    }

    // N‰ytet‰‰n alle nollat nollana ja pyˆristet‰‰n desimaalit alas
    $voidaan_valmistaa = $voidaan_valmistaa < 0 ? 0 : floor($voidaan_valmistaa);

    //Jos return_type != '',
    //palautetaan kaikki raaka-aineet ja niiden saldot sek‰ riitot array:ss‰
    if ($return_type != "") {
      return $return;
    }
    else {
      return $voidaan_valmistaa;
    }
  }
}

if (!function_exists("mod10_tarkiste")) {
  function mod10_tarkiste($numero) {

    $kerroin = 7;
    $tulo    = 0;

    for ($i=1; $i<=strlen($numero); $i++) {

      $merkki = substr($numero, -1 * $i, 1);
      $tulo += $kerroin * $merkki;

      switch ($kerroin) {
      case 7:
        $kerroin = 3;
        break;
      case 3:
        $kerroin = 1;
        break;
      case 1:
        $kerroin = 7;
        break;
      }
    }

    $tulo = substr($tulo, -1) + 0;

    if ($tulo != 0) {
      $tulo = 10 - $tulo;
    }

    $numero .= $tulo;

    return $numero;
  }
}

// Lasketaan moneenko valmisteeseen raaka-aineet riitt‰‰
if (!function_exists('zendesk_curl')) {
  function zendesk_curl($url) {
    global $zendesk_auth;

    $ch  = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($ch, CURLOPT_HEADER, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
    curl_setopt($ch, CURLOPT_GET, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, "Content-Type: application/xml");
    curl_setopt($ch, CURLOPT_USERPWD, $zendesk_auth);

    $result = curl_exec($ch);

    if ($result === FALSE) {
      echo "<font class='error'>VIRHE:</font><br>";
      echo curl_errno($ch)." - ".curl_error($ch)."</font><br>";
      exit;
    }

    $info   = curl_getinfo($ch);
    $header = substr($result, 0, $info['header_size']);
    $body   = substr($result, $info['header_size']);

    curl_close($ch);

    $statukset = array();
    $statukset[0] = "New";
    $statukset[1] = "Open";
    $statukset[2] = "Pending";
    $statukset[3] = "Solved";

    $priot = array();
    $priot[0] = "-";
    $priot[1] = "Low";
    $priot[2] = "Normal";
    $priot[3] = "High";
    $priot[4] = "Urgent";

    return array($body, $statukset, $priot);
  }
}

// Haetaan ryhm‰nimet tietokannasta ja palautetaan 2 arrayta
if (!function_exists('hae_ryhmanimet')) {
  function hae_ryhmanimet($abc_tyyppi) {
    global $yhtiorow, $kukarow;

    if ($abc_tyyppi == "") {
      return FALSE;
    }

    // Haetaan abc-parametrit
    $query = "SELECT *
              FROM abc_parametrit
              WHERE yhtio = '{$kukarow["yhtio"]}'
              and tyyppi  = '{$abc_tyyppi}'
              ORDER by luokka";
    $res = pupe_query($query);

    if (mysql_num_rows($res) == 0) {
      echo t("ABC-parametrit puuttuu")."</br>";
      exit;
    }

    $ryhmanimet             = array();
    $ryhmaprossat          = array();
    $kiertonopeus_tavoite       = array();
    $palvelutaso_tavoite       = array();
    $varmuusvarasto_pv         = array();
    $toimittajan_toimitusaika_pv   = array();

    while ($row = mysql_fetch_array($res)) {
      $ryhmanimet[]           = $row["luokka"];
      $ryhmaprossat[]         = $row["osuusprosentti"];
      $kiertonopeus_tavoite[]     = $row["kiertonopeus_tavoite"];
      $palvelutaso_tavoite[]       = $row["palvelutaso_tavoite"];
      $varmuusvarasto_pv[]         = $row["varmuusvarasto_pv"];
      $toimittajan_toimitusaika_pv[]   = $row["toimittajan_toimitusaika_pv"];
    }

    return array($ryhmanimet, $ryhmaprossat, $kiertonopeus_tavoite, $palvelutaso_tavoite, $varmuusvarasto_pv, $toimittajan_toimitusaika_pv);
  }
}

// Tehd‰‰n asiakkaan tunnuksesta myyntitili-varastopaikka
if (!function_exists('myyntitili_varastopaikka')) {
  function myyntitili_varastopaikka($tunnus) {

    // Left paddataan nollilla 15 merkki‰ pitk‰ksi
    $asiakkaan_tunnus = str_pad($tunnus, 15, 0, STR_PAD_LEFT);

    // Splitataan kolmeen, 5 merkki‰ pitk‰‰n, osaan
    $hyllypaikka = str_split($asiakkaan_tunnus, 5);

    // Palautetaan hyllyalue, hyllynro, hyllyvali, hyllytaso
    return array("!!M", $hyllypaikka[0], $hyllypaikka[1], $hyllypaikka[2]);
  }
}

// Tulostetaan VAK/ADR-erittely
if (!function_exists('tulosta_vakadr_erittely')) {
  function tulosta_vakadr_erittely($laskun_tunnus, $vakadr_komento, $tee) {
    global $yhtiorow, $kukarow, $kieli;

    if ($yhtiorow["kerayserat"] == "") {
      echo t("Ker‰yser‰t pit‰‰ olla k‰ytˆss‰, ei tulosteta VAK-erittely‰");
      return FALSE;
    }

    if ($yhtiorow["vak_erittely"] != "K") {
      echo t("Vak-erittely pit‰‰ olla k‰ytˆss‰, ei tulosteta VAK-erittely‰");
      return FALSE;
    }

    $query = "SELECT *
              FROM lasku
              WHERE yhtio = '{$kukarow["yhtio"]}'
              AND tunnus  = '$laskun_tunnus'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      echo t("Laskua ei lˆydy");
      return FALSE;
    }

    $laskurow = mysql_fetch_assoc($result);

    require "tilauskasittely/tulosta_vakerittely.inc";

    if ($kieli == '') {
      $querykiel = "SELECT kieli FROM asiakas WHERE yhtio = '$kukarow[yhtio]' and ytunnus = '$laskurow[ytunnus]'";
      $kielresult = pupe_query($querykiel);
      $kielrow = mysql_fetch_assoc($kielresult);
      $kieli = strtolower($kielrow['kieli']);
    }

    // Haetaan kaikki tilauksen SSCC koodit
    $query = "SELECT distinct sscc, sscc_ulkoinen
              FROM tilausrivi
              JOIN kerayserat on (kerayserat.yhtio = tilausrivi.yhtio and kerayserat.tilausrivi = tilausrivi.tunnus)
              JOIN tuote on (tuote.yhtio = tilausrivi.yhtio and tuote.tuoteno = tilausrivi.tuoteno and tuote.vakkoodi not in ('','0'))
              WHERE tilausrivi.yhtio  = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus  = '{$laskurow['tunnus']}'
              AND tilausrivi.tyyppi  != 'D'
              AND tilausrivi.kpl+tilausrivi.varattu > 0";
    $result_sscc = pupe_query($query);

    if (mysql_num_rows($result_sscc) > 0) {

      $params_vak = array(
        'boldi'      => $boldi,
        'iso'      => $iso,
        'kala'      => 0,
        'kieli'      => $kieli,
        'komento'     => $vakadr_komento,
        'laskurow'    => $laskurow,
        'massa'      => 0,
        'norm'      => $norm,
        'page'      => NULL,
        'pdf'      => NULL,
        'pieni'      => $pieni,
        'sivu'      => 1,
        'rectparam'    => $rectparam,
        'tee'      => $tee,
        'sscc'       => NULL,
        'sscc_ulkoinen' => NULL,
        'thispage'    => NULL,
        'vakkoodi'     => NULL,
      );

      // VAK lapun otsikko
      $params_vak = vakadr_otsikko($params_vak);

      while ($row = mysql_fetch_assoc($result_sscc)) {

        $params_vak['sscc']       = $row["sscc"];
        $params_vak['sscc_ulkoinen']   = $row["sscc_ulkoinen"];
        $params_vak['vakkoodi']     = NULL;
        $params_vak['massa']       = NULL;

        // piirret‰‰n riviotsikko (koska meill‰ on sscc setattu)
        $params_vak = vakadr_rivi($params_vak);

        // K‰ytet‰‰nkˆ VAK-tietokantaa
        if ($yhtiorow["vak_kasittely"] != "") {

          if (isset($kieli) and strtolower($kieli) != "fi") {
            $nimityskuvaus = "name_and_description";
          }
          else {
            $nimityskuvaus = "nimi_ja_kuvaus";
          }

          $vakselect = " concat('UN ',vak.yk_nro,' ', vak.{$nimityskuvaus},', ', vak.lipukkeet,', ', vak.pakkausryhma) as vakkoodi,";
          $vakjoin   = " JOIN vak ON (tuote.yhtio = vak.yhtio and tuote.vakkoodi = vak.tunnus)";
        }
        else {
          $vakselect = " tuote.vakkoodi vakkoodi,";
          $vakjoin   = "";
        }

        // Haetaan paketille (SSCC) kaikki vakkoodit ja niiden massa (kerroin 0.95, koska koko tuotteen massa ei ole yleens‰ vaarallista ainetta)
        $aliquery = "SELECT {$vakselect}
                     sum(kerayserat.kpl * tuote.tuotemassa * 0.95) as massa
                     FROM tilausrivi
                     JOIN kerayserat on (kerayserat.yhtio = tilausrivi.yhtio and kerayserat.tilausrivi = tilausrivi.tunnus and kerayserat.sscc = '{$row['sscc']}')
                     JOIN tuote on (tuote.yhtio = tilausrivi.yhtio and tuote.tuoteno = tilausrivi.tuoteno and tuote.vakkoodi != '')
                     {$vakjoin}
                     WHERE tilausrivi.yhtio  = '{$kukarow['yhtio']}'
                     AND tilausrivi.otunnus  = '{$laskurow['tunnus']}'
                     AND tilausrivi.tyyppi  != 'D'
                     AND tilausrivi.kpl+tilausrivi.varattu > 0
                     group by vakkoodi";
        $apuresult = pupe_query($aliquery);

        while ($sscc_rivi = mysql_fetch_assoc($apuresult)) {
          $params_vak['sscc']       = NULL;
          $params_vak['sscc_ulkoinen']   = NULL;
          $params_vak['vakkoodi']     = $sscc_rivi["vakkoodi"];
          $params_vak['massa']       = $sscc_rivi["massa"];

          // Piirret‰‰n vakkoodit (koska meill‰ on vakkoodi ja massa setattu)
          $params_vak = vakadr_rivi($params_vak);
        }
      }

      // Piirret‰‰n footer
      $params_vak = vakadr_loppu($params_vak);

      // Tulostetaan PDF
      print_pdf_vakadr($params_vak);

      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}

if (!function_exists("pupesoft_sahkoposti")) {
  function pupesoft_sahkoposti($parametrit) {

    /* T‰ll‰ funktiolla l‰hetet‰‰n s‰hkˆposti, johon voidaan liitt‰‰ yksi tai useampi liitetiedosto.

    Parametrin‰ seuraavanlainen array:

    $parametri = array( "to"     => "devlab@devlab.fi",
              "cc"     => "",
              "subject"  => "Mail from Pupesoft!",
              "ctype"    => "html",
              "body"    => "<h1>Hello from Pupesoft!</h1>",

              "attachements" => array(0   => array(
                            "filename"    => "/foo/baz/file1.txt",
                            "newfilename"  => "report.txt",
                            "ctype"      => "text"),

                          1   => array(
                            "filename"    => "/bar/foo/file2",
                            "newfilename"  => "pretty_report.xls",
                            "ctype"      => "excel"),
              )
    );

    */

    global $yhtiorow, $kukarow;

    // Tarvitaan seuraavat parametrit
    $email_to    = isset($parametrit["to"]) ? $parametrit["to"] : "";
    $email_cc    = isset($parametrit["cc"]) ? $parametrit["cc"] : "";
    $email_subject  = isset($parametrit["subject"]) ? $parametrit["subject"] : "";
    $email_ctype   = isset($parametrit["ctype"]) ? strtoupper($parametrit["ctype"]) : "";
    $email_body   = isset($parametrit["body"]) ? $parametrit["body"] : "";

    // Liitetiedostoja tulee parametreiss‰ arrayna
    $liitteet    = (isset($parametrit["attachements"]) and is_array($parametrit["attachements"])) ? $parametrit["attachements"] : "";

    // To ja Subject pit‰‰ olla kunnossa, ett‰ voidaan jatkaa
    if ($email_to == "" or $email_subject == "") {
      return FALSE;
    }

    // Laitetaan php-resque jonoon
    if ($GLOBALS["pupe_resque"] === TRUE) {

      $resque_liitteet = array();

      if (!empty($liitteet)) {
        foreach ($liitteet as $liite) {

          $attachement_filename    = isset($liite["filename"]) ? $liite["filename"] : "";
          $attachement_newfilename = isset($liite["newfilename"]) ? $liite["newfilename"] : "";
          $attachement_ctype       = isset($liite["ctype"]) ? strtoupper($liite["ctype"]) : "";

          $resque_liitteet[] = array("filename"    => utf8_encode($attachement_filename),
            "newfilename" => utf8_encode($attachement_newfilename),
            "ctype"       => utf8_encode($attachement_ctype));
        }
      }

      // N‰m‰ v‰litet‰‰n ActiveJobin perform metodille parametreiksi
      $perform_args = array(0 =>
        array(
          'user'          => $kukarow["eposti"],
          'error_message' => utf8_encode(t("S‰hkˆpostin l‰hetys ep‰onnistui").": $email_to"),
          'from'          => $yhtiorow["postittaja_email"],
          'from_name'     => utf8_encode($yhtiorow["nimi"]),
          'to'            => $email_to,
          'cc'            => $email_cc,
          'subject'       => utf8_encode($email_subject),
          'body'          => utf8_encode($email_body),
          'attachements'  => $resque_liitteet
        )
      );

      $resque_args = array(
        'job_class'  => 'EmailWorkerJob',
        'queue_name' => 'PupeEmail',
        'arguments'  => $perform_args
      );

      Resque::enqueue('PupeEmail', 'ActiveJob::QueueAdapters::ResqueAdapter::JobWrapper', $resque_args);
      return TRUE;
    }

    $content = "";
    $bound = uniqid(time()."_") ;

    $header = "MIME-Version: 1.0\n" ;
    $header .= "From: ".mb_encode_mimeheader($yhtiorow["nimi"], "ISO-8859-1", "Q")."<{$yhtiorow["postittaja_email"]}>\n";

    if ($email_cc != "") {
      $header .= "Cc: $email_cc\n";
    }

    $header .= "Content-Type: multipart/mixed; boundary=$bound\n" ;

    if ($email_body != "") {
      $content .= "--$bound\n";
      if ($email_ctype == "HTML") {
        $content .= "Content-Type: text/html; charset=ISO-8859-1\n";
      }
      else {
        $content .= "Content-Type: text/plain; charset=ISO-8859-1\n";
      }

      $content .= "Content-Transfer-Encoding: quoted-printable\n\n";

      if ($email_ctype == "HTML") {
        if ($yhtiorow["kayttoliittyma"] == "U") {
          $css = $yhtiorow['css'];
        }
        else {
          $css = $yhtiorow['css_classic'];
        }

        $html_email_body  = "\n<head>\n";
        $html_email_body .= "<style type='text/css'>{$css}</style>\n";
        $html_email_body .= "</head>\n";

        $email_body = $html_email_body.$email_body;
      }

      $content .= quoted_printable_encode($email_body)."\n\n";
    }

    $content .= "--$bound";

    if (!empty($liitteet)) {
      foreach ($liitteet as $liite) {

        // Tarkistetaan $liite arrayn oikeellisuus
        $attachement_filename    = isset($liite["filename"]) ? $liite["filename"] : "";
        $attachement_newfilename = isset($liite["newfilename"]) ? $liite["newfilename"] : "";
        $attachement_ctype       = isset($liite["ctype"]) ? strtoupper($liite["ctype"]) : "";

        // Selvitet‰‰n ctype jos ei annettu, PHP version mukaan
        if ($attachement_ctype == "") {
          // 5.3 version j‰lkeen pit‰‰ k‰ytt‰‰ finfo_open
          if (version_compare(PHP_VERSION, '5.3', '>=')) {
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
            $attachement_ctype = finfo_file($finfo, $attachement_filename);
          }
          // ennen 5.2 versiota pit‰‰ k‰ytt‰‰ mime_content_type
          elseif (version_compare(PHP_VERSION, '5.2', '<')) {
            $attachement_ctype = mime_content_type($attachement_filename);
          }
          // versiossa 5.2 otetaan vain file extensio
          else {
            $path_parts = pathinfo($attachement_filename);
            $attachement_ctype = $path_parts['extension'];
          }

          $attachement_ctype = strtoupper($attachement_ctype);
        }

        // Jos tiedostoa ei lˆydy tai sit‰ ei voi lukea, hyp‰t‰‰n filen yli.
        if (!file_exists($attachement_filename) or !is_readable($attachement_filename)) {
          continue;
        }

        // Otetaan tiedoston sis‰ltˆ muuttujaan
        $attachement_content = chunk_split(base64_encode(file_get_contents($attachement_filename)));

        // Tiedostosta vain nimi
        $attachement_name = basename($attachement_filename);

        // Jos on poikkeava nimi, otetaan se
        if ($attachement_newfilename != "") {
          $attachement_name = basename($attachement_newfilename);
        }

        // Boundin j‰lkeen aina rivinvaihto
        $content .= "\nContent-Type: ";

        if ($attachement_ctype == "TEXT") {
          $content .= "text/plain;";
        }
        elseif ($attachement_ctype == "PS") {
          $content .= "application/ps;";
        }
        elseif ($attachement_ctype == "JPG" or $attachement_ctype == "JPEG") {
          $content .= "image/jpeg;";
        }
        elseif ($attachement_ctype == "PNG") {
          $content .= "image/png;";
        }
        elseif ($attachement_ctype == "GIF") {
          $content .= "image/gif;";
        }
        elseif ($attachement_ctype == "TIF" or $attachement_ctype == "TIFF") {
          $content .= "image/tiff;";
        }
        elseif ($attachement_ctype == "BMP") {
          $content .= "image/bmp;";
        }
        elseif ($attachement_ctype == "EXCEL") {
          $content .= "application/excel;";
        }
        elseif ($attachement_ctype == "PDF") {
          $content .= "application/pdf;";
        }
        else {
          $content .= "application/octet-stream;";
        }

        $content .= " name=\"".mb_encode_mimeheader($attachement_name, "ISO-8859-1", "Q")."\"\n";

        $content .= "Content-Disposition: attachment; filename=\"".mb_encode_mimeheader($attachement_name, "ISO-8859-1", "Q")."\"\n";
        $content .= "Content-Transfer-Encoding: base64\n\n";
        $content .= $attachement_content;
        $content .= "\n";
        $content .= "--$bound";
      }
    }

    // Vikassa boundissa pit‰‰ olla -- lopussa.
    $content .= "--\n";

    $boob = mail($email_to, mb_encode_mimeheader($email_subject, "ISO-8859-1", "Q"), $content, $header, "-f {$yhtiorow["postittaja_email"]}");
    if ($boob === FALSE) echo t("S‰hkˆpostin l‰hetys ep‰onnistui").": $email_to<br>";
    return $boob;
  }
}

if (!function_exists("ostolaskun_kulujen_tiliointi")) {
  function ostolaskun_kulujen_tiliointi($laskun_summa, $tiliointirivin_summa, $osto_rahti = 0, $osto_kulu = 0, $osto_rivi_kulu = 0) {

    global $kukarow, $yhtiorow;

    //# TARVITAAN SEURAAVAT MUUTTUJAT:
    // $laskun_summa
    // $tiliointirivin_summa
    // $osto_rahti
    // $osto_kulu
    // $osto_rivi_kulu
    //# PALAUTETAAN TILI÷INTIRIVIN MUUTETTU ARVO

    $osto_rahti   = (float) str_replace(",", ".", $osto_rahti);
    $osto_kulu     = (float) str_replace(",", ".", $osto_kulu);
    $osto_rivi_kulu = (float) str_replace(",", ".", $osto_rivi_kulu);
    $til_sum_ratio  = $tiliointirivin_summa / $laskun_summa;

    $return_array = array(
      'osto_rahti'   => 0,
      'osto_kulu'    => 0,
      'osto_rivi_kulu' => 0
    );

    for ($ix = 1; $ix <= $yhtiorow['ostolaskun_kulutilit']; $ix++) {

      if ($ix == 1 and $osto_rahti != 0) {
        $summa = $osto_rahti * $til_sum_ratio;
        $tiliointirivin_summa = round($tiliointirivin_summa - $summa, 2);
        $return_array['osto_rahti'] += $summa;
      }
      elseif ($ix == 2 and $osto_kulu != 0) {
        $summa = $osto_kulu * $til_sum_ratio;
        $tiliointirivin_summa = round($tiliointirivin_summa - $summa, 2);
        $return_array['osto_kulu'] += $summa;
      }
      elseif ($ix == 3 and $osto_rivi_kulu != 0) {
        $summa = $osto_rivi_kulu * $til_sum_ratio;
        $tiliointirivin_summa = round($tiliointirivin_summa - $summa, 2);
        $return_array['osto_rivi_kulu'] += $summa;
      }
    }

    return array($tiliointirivin_summa, $return_array);
  }
}

if (!function_exists("kopioitiliointi")) {
  function kopioitiliointi($tunnus, $viivaaja = "", $params = array()) {
    //Tehd‰‰n kopio tiliˆinnist‰ $tunnus
    //Jos $viivaajassa on jotain tehd‰‰n uusi vienti yliviivattuna

    global $kukarow;

    $query = "SELECT *
              FROM tiliointi
              WHERE yhtio = '$kukarow[yhtio]'
              and tunnus  = '$tunnus'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) != 1) {
      echo "Tiliˆintirivi kateissa Systeemivirhe!";
    }
    else {
      $tiliointirow = mysql_fetch_assoc($result);

      $query = "INSERT into tiliointi set ";

      for ($i=0; $i<mysql_num_fields($result); $i++) {
        $kennimi = mysql_field_name($result, $i);
        if ($kennimi != 'tunnus') {
          if ($viivaaja != '') {
            if ($kennimi == 'korjattu') {
              $query .= "korjattu ='$viivaaja',";
            }
            elseif ($kennimi == 'korjausaika') {
              $query .= "korjausaika = now(),";
            }
            else {
              $query .= $kennimi." = '".$tiliointirow[$kennimi]."',";
            }
          }
          elseif (isset($params[$kennimi])) {
            $query .= "{$kennimi} ='{$params[$kennimi]}',";
          }
          else {
            $query .= $kennimi." = '".$tiliointirow[$kennimi]."',";
          }
        }
      }

      $query  = substr($query, 0, -1);
      $result = pupe_query($query);

      return mysql_insert_id($GLOBALS["masterlink"]);
    }
  }
}

if (!function_exists("kopioitapahtuma")) {
  function kopioitapahtuma($tunnus, $params = array()) {
    //Tehd‰‰n kopio tapahtumasta $tunnus

    global $kukarow, $jalkilaskenta_debug, $jalkilaskenta_debug_text;

    $query = "SELECT *
              FROM tapahtuma
              WHERE yhtio = '{$kukarow['yhtio']}'
              and tunnus  = '{$tunnus}'";
    $result = pupe_query($query);
    if ($jalkilaskenta_debug > 1) $jalkilaskenta_debug_text .= "$query<br>";

    if (mysql_num_rows($result) != 1) {
      echo t("Tapahtuma kateissa, systeemivirhe!")."<br>";
    }
    else {
      $tapahtumarow = mysql_fetch_assoc($result);

      $query = "INSERT INTO tapahtuma SET ";

      for ($i = 0; $i < mysql_num_fields($result); $i++) {

        $kennimi = mysql_field_name($result, $i);

        if ($kennimi != 'tunnus') {
          if (isset($params[$kennimi])) {
            $query .= "{$kennimi} ='{$params[$kennimi]}',";
          }
          else {
            $query .= $kennimi." = '".$tapahtumarow[$kennimi]."',";
          }
        }
      }

      $query  = substr($query, 0, -1);
      $result = pupe_query($query);

      if ($jalkilaskenta_debug > 1) $jalkilaskenta_debug_text .= "$query<br>";

      return mysql_insert_id($GLOBALS["masterlink"]);
    }
  }
}

if (!function_exists("etsi_kuuluvat_tilioinnit")) {
  function etsi_kuuluvat_tilioinnit($tunnus, $ylikirjataanko = true) {
    global $kukarow;

    $summa = 0;

    // Etsit‰‰n kaikki tiliˆintirivit, jotka kuuluvat t‰h‰n tiliˆintiin ja lasketaan niiden summa
    $query = "SELECT sum(summa) summa
              FROM tiliointi
              WHERE aputunnus = '{$tunnus}'
              AND yhtio       = '{$kukarow['yhtio']}'
              AND korjattu    = ''
              GROUP BY aputunnus";
    $result = pupe_query($query);

    if (mysql_num_rows($result) != 0) {
      $summarow = mysql_fetch_assoc($result);
      $summa += $summarow["summa"];

      if ($ylikirjataanko) {
        $query = "UPDATE tiliointi SET
                  korjattu        = '{$kukarow['kuka']}',
                  korjausaika     = now()
                  WHERE aputunnus = '{$tunnus}'
                  and yhtio       = '{$kukarow['yhtio']}'
                  and korjattu    = ''";
        $result = pupe_query($query);
      }
    }

    return $summa;
  }
}

if (!function_exists('etsi_suuntalava_sscc')) {
  function etsi_suuntalava_sscc($sscc) {
    global $kukarow;

    $sscc = mysql_real_escape_string($sscc);

    $query = "SELECT suuntalavat.tunnus as suuntalava,
              suuntalavat_saapuminen.saapuminen,
              lasku.laskunro AS saapuminen_nro,
              toimi.tunnus AS liitostunnus,
              toimi.toimittajanro,
              toimi.nimi,
              SUM(IF((tilausrivi.uusiotunnus != 0 AND tilausrivi.kpl != 0), 1, 0)) AS varastossa,
              SUM(IF((tilausrivi.uusiotunnus != 0 AND tilausrivi.kpl = 0), 1, 0)) AS kohdistettu
              FROM suuntalavat
              JOIN suuntalavat_saapuminen ON (suuntalavat_saapuminen.yhtio = suuntalavat.yhtio AND suuntalavat_saapuminen.suuntalava = suuntalavat.tunnus)
              JOIN lasku ON (lasku.yhtio = suuntalavat_saapuminen.yhtio AND lasku.tunnus = suuntalavat_saapuminen.saapuminen AND lasku.tila = 'K')
              JOIN toimi ON (toimi.yhtio = lasku.yhtio AND toimi.tunnus = lasku.liitostunnus)
              LEFT JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio AND tilausrivi.uusiotunnus = lasku.tunnus AND tilausrivi.tyyppi = 'O')
              WHERE suuntalavat.yhtio = '{$kukarow['yhtio']}'
              AND suuntalavat.sscc    = '{$sscc}'
              AND suuntalavat.tila    = 'S'
              GROUP BY 1,2,3,4,5,6";
    $result = pupe_query($query);

    $return = array();

    if (mysql_num_rows($result) > 0) {
      while ($row = mysql_fetch_assoc($result)) {
        $return[] = $row;
      }
    }

    return $return;
  }
}

if (!function_exists('etsi_kasittelemattomat_asn_sanomat')) {
  function etsi_kasittelemattomat_asn_sanomat($sscc) {
    global $kukarow;

    $query = "SELECT *
              FROM asn_sanomat
              WHERE asn_sanomat.yhtio    = '{$kukarow['yhtio']}'
              AND asn_sanomat.sscc_koodi = '{$sscc}'
              AND asn_sanomat.status     = ''
              AND asn_sanomat.laji       = 'asn'";
    $result = pupe_query($query);

    $return = array();

    if (mysql_num_rows($result) > 0) {
      while ($row = mysql_fetch_assoc($result)) {
        $return[] = $row;
      }
    }

    return $return;
  }
}

if (!function_exists("suuntalavan_tuotteet")) {
  function suuntalavan_tuotteet($suuntalavat, $liitostunnus, $order = "", $ascdesc = "", $tuoteno = "", $tilriv = 0, $eankoodi = "") {
    global $kukarow;

    if (is_array($suuntalavat) and count($suuntalavat) > 0) {
      $suuntalavalisa = " AND suuntalavat.tunnus IN (".implode(",", $suuntalavat).") ";
      $suuntalava_implode = implode(",", $suuntalavat);
    }
    else {
      echo "<font class='error'>", t("VIRHE: Et valinnut suuntalavaa"), "!</font>";
      require '../inc/footer.inc';
      exit;
    }

    $ascdesc = $ascdesc != "" ? mysql_real_escape_string($ascdesc) : "";

    if ($order == "tuotepaikka") {
      $order = "hyllypaikka";
    }
    elseif ($order == "maara") {
      $order = "siskpl";
    }
    elseif ($order == "yksikko") {
      $order = "tilausrivi.yksikko";
    }
    else {
      $order = "suuntalavat.sscc, tilausrivi.tuoteno";
    }

    $query = "SELECT GROUP_CONCAT(DISTINCT saapuminen) keikkatunnus
              FROM suuntalavat_saapuminen
              WHERE yhtio    = '{$kukarow['yhtio']}'
              AND suuntalava IN ({$suuntalava_implode})";
    $uusiotunnus_chk_res = pupe_query($query);
    $uusiotunnus_chk_row = mysql_fetch_assoc($uusiotunnus_chk_res);

    if (mysql_num_rows($uusiotunnus_chk_res) > 0) {
      $uusiotunnuslisa = "tilausrivi.uusiotunnus IN ({$uusiotunnus_chk_row['keikkatunnus']})";
    }
    else {
      $uusiotunnuslisa = '';
    }

    // Haku tuotenumerolla
    $tuoteno = mysql_real_escape_string($tuoteno);
    $tuotenolisa = trim($tuoteno) != "" ? "and tilausrivi.tuoteno = '{$tuoteno}'" : "";
    // Haku eankoodilla
    $eankoodi = mysql_real_escape_string($eankoodi);
    if ($eankoodi != '') {
      $tuotenumerot = hae_viivakoodilla($eankoodi);

      $param_viivakoodi = array();

      foreach ($tuotenumerot as $_tuoteno => $_arr) {
        array_push($param_viivakoodi, $_tuoteno);
      }

      $eankoodilisa = "and tilausrivi.tuoteno in ('" . implode($param_viivakoodi, "','") . "')";
    }

    $tilriv = (int) $tilriv;

    $tilrivlisa = trim($tilriv) != 0 ? " and tilausrivi.tunnus = '{$tilriv}'" : "";

    $query = "SELECT tilausrivi.*,
              suuntalavat.sscc,
              suuntalavat.kasittelytapa,
              tuotteen_toimittajat.toim_tuoteno,
              tilausrivi.varattu + tilausrivi.kpl siskpl,
              tuote.eankoodi,
              IF(tuotteen_toimittajat.tuotekerroin = 0, 1, tuotteen_toimittajat.tuotekerroin) AS tuotekerroin,
              CONCAT(tilausrivi.hyllyalue, ' ', tilausrivi.hyllynro, ' ', tilausrivi.hyllyvali, ' ', tilausrivi.hyllytaso) AS hyllypaikka,
              IFNULL(tilausrivin_lisatiedot.suoraan_laskutukseen, 'NORM') as tilausrivi_tyyppi
              FROM tilausrivi
              JOIN suuntalavat ON (suuntalavat.yhtio = tilausrivi.yhtio AND suuntalavat.tila = 'S' AND suuntalavat.tunnus = tilausrivi.suuntalava $suuntalavalisa)
              JOIN suuntalavat_saapuminen ON (suuntalavat_saapuminen.yhtio = suuntalavat.yhtio AND suuntalavat_saapuminen.suuntalava = suuntalavat.tunnus AND suuntalavat_saapuminen.saapuminen = tilausrivi.uusiotunnus)
              JOIN tuote use index (tuoteno_index) ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno)
              LEFT JOIN tuotteen_toimittajat use index (yhtio_tuoteno) ON (tuotteen_toimittajat.yhtio = tuote.yhtio AND tuotteen_toimittajat.tuoteno = tuote.tuoteno AND tuotteen_toimittajat.liitostunnus = '{$liitostunnus}')
              LEFT JOIN tilausrivin_lisatiedot
              ON ( tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivilinkki = tilausrivi.tunnus )
              WHERE tilausrivi.yhtio    = '{$kukarow['yhtio']}'
              AND {$uusiotunnuslisa}
              AND tilausrivi.tyyppi     = 'O'
              AND tilausrivi.kpl        = 0
              AND tilausrivi.suuntalava > 0
              {$tuotenolisa}
              {$eankoodilisa}
              {$tilrivlisa}
              ORDER BY {$order} {$ascdesc}";
    $tavaraetiketti_res = pupe_query($query) or pupe_error($query);

    return $tavaraetiketti_res;
  }
}

if (!function_exists('onko_suoratoimitus')) {
  function onko_suoratoimitus($rivitunnus) {
    global $kukarow;

    $rivitunnus = (int) $rivitunnus;

    $query = "SELECT tilausrivi.otunnus, lasku.nimi, tilausrivin_lisatiedot.suoraan_laskutukseen
              FROM tilausrivin_lisatiedot
              JOIN tilausrivi ON (tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus)
              JOIN lasku ON (tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus)
              WHERE tilausrivi.yhtio                      = '{$kukarow['yhtio']}'
              and tilausrivin_lisatiedot.tilausrivilinkki = '{$rivitunnus}'";
    $varastoon_result = pupe_query($query);

    return $varastoon_result;
  }
}

if (!function_exists('splittaa_tilausrivi')) {
  function splittaa_tilausrivi($tunnus, $uuden_rivin_kpl, $varastoon = TRUE, $pois_suuntalavalta = FALSE, $perheid = FALSE, $vanhan_rivin_kpl = '') {
    global $kukarow, $yhtiorow;

    $query = "SELECT tilausrivi.*
              FROM tilausrivi
              JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio AND lasku.tunnus = tilausrivi.otunnus)
              WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
              AND tilausrivi.tunnus  = '{$tunnus}'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) return 0;

    $rivi = mysql_fetch_array($result);

    $vanhan_rivin_kpl = $vanhan_rivin_kpl != '' ? $vanhan_rivin_kpl : $rivi['varattu'];

    mysql_data_seek($result, 0);

    $_tmp_hinta_alkuperainen = 0;

    $query = "INSERT INTO tilausrivi SET ";

    for ($i = 0; $i < mysql_num_fields($result) - 1; $i++) {
      switch (mysql_field_name($result, $i)) {
      case 'varattu':
        $query .= " varattu = '{$uuden_rivin_kpl}',";
        break;
      case 'varastoon':

        if ($yhtiorow['suuntalavat'] == 'S' and !$varastoon) {
          $query .= " varastoon = 0,";
        }
        else {
          $query .= " varastoon = '".$rivi[mysql_field_name($result, $i)]."',";
        }

        break;
      case 'laatija':
        $query .= " laatija = '{$kukarow['kuka']}',";
        break;
      case 'laadittu':
        $query .= " laadittu = now(),";
        break;
      case 'tunnus':
        break;
      case 'kate_korjattu':
        break;
      case 'hinta_alkuperainen':
        if ($rivi['hinta_alkuperainen'] != 0) {
          $_tmp_hinta_alkuperainen = round(($rivi['hinta_alkuperainen'] / $vanhan_rivin_kpl) * $uuden_rivin_kpl, 6);
          $query .= " hinta_alkuperainen = {$_tmp_hinta_alkuperainen},";
        }
        else {
          $query .= " hinta_alkuperainen = 0,";
        }
        break;
      case 'suuntalava':

        if ($pois_suuntalavalta) {
          $query .= " suuntalava = 0,";
        }
        else {
          $query .= " suuntalava = '".$rivi[mysql_field_name($result, $i)]."',";
        }

        break;
      case 'perheid':
        if ($perheid) {
          $query .= " perheid = '{$perheid}',";
        }
        else {
          $query .= " perheid = '".$rivi[mysql_field_name($result, $i)]."',";
        }
        break;
      default:
        $query .= mysql_field_name($result, $i)." = '".$rivi[mysql_field_name($result, $i)]."',";
      }
    }

    $query = substr($query, 0, -1);
    $result = pupe_query($query);
    $uusi_id = mysql_insert_id($GLOBALS["masterlink"]);

    if ($_tmp_hinta_alkuperainen != 0) {

      $hinta_alkuperainen = round($rivi['hinta_alkuperainen'] - $_tmp_hinta_alkuperainen, 6);

      $query = "UPDATE tilausrivi SET
                hinta_alkuperainen = '{$hinta_alkuperainen}'
                WHERE yhtio        = '{$kukarow['yhtio']}'
                AND tunnus         = '{$rivi['tunnus']}'";
      $upd_res = pupe_query($query);
    }

    // tarkistetaan onko alkuper‰inen rivi asn_sanomat-taulussa
    // jos on, lis‰t‰‰n uusi splitattu rivi kanssa sinne
    $query = "SELECT tunnus
              FROM asn_sanomat
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND MATCH (tilausrivi) AGAINST ('{$tunnus}' IN BOOLEAN MODE)";
    $chk_asn_res = pupe_query($query);

    while ($chk_asn_row = mysql_fetch_assoc($chk_asn_res)) {
      $query = "UPDATE asn_sanomat SET
                tilausrivi  = CONCAT(tilausrivi, ',', '{$uusi_id}')
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$chk_asn_row['tunnus']}'";
      $upd_res = pupe_query($query);
    }

    // jos splitattava tilausrivi oli tuoteperheen is‰, pit‰‰ splitatulle tilausriville p‰ivitt‰‰ perheid kuntoon
    if ($rivi['perheid'] != 0 and $rivi['tunnus'] == $rivi['perheid']) {

      $query = "UPDATE tilausrivi SET
                perheid     = tunnus
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$uusi_id}'";
      $upd_res = pupe_query($query);

      $query = "SELECT tilausrivi.tunnus, tuoteperhe.kerroin
                FROM tilausrivi
                JOIN tuoteperhe ON (tuoteperhe.yhtio = tilausrivi.yhtio AND tuoteperhe.tuoteno = tilausrivi.tuoteno AND tuoteperhe.tyyppi IN ('P',''))
                WHERE tilausrivi.yhtio  = '{$kukarow['yhtio']}'
                AND tilausrivi.tyyppi   = 'O'
                AND tilausrivi.otunnus  = '{$rivi['otunnus']}'
                AND tilausrivi.perheid  = '{$rivi['perheid']}'
                AND tilausrivi.tunnus  != '{$rivi['perheid']}'";
      $lapsi_chk_res = pupe_query($query);

      while ($lapsi_chk_row = mysql_fetch_assoc($lapsi_chk_res)) {

        $lapsen_uusi_kpl = $uuden_rivin_kpl * $lapsi_chk_row['kerroin'];

        splittaa_tilausrivi($lapsi_chk_row['tunnus'], $lapsen_uusi_kpl, $varastoon, FALSE, $uusi_id);

        // p‰ivitet‰‰n splitattava lapsi
        $query = "UPDATE tilausrivi SET
                  varattu     = varattu - {$lapsen_uusi_kpl}
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$lapsi_chk_row['tunnus']}'";
        $upd_res = pupe_query($query);
      }
    }

    return $uusi_id;
  }
}

if (!function_exists('lisaa_tuotepaikka')) {
  function lisaa_tuotepaikka($tuoteno, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $viesti, $oletus = '', $halytysraja = 0, $tilausmaara = 0, $varasto = 0) {
    global $kukarow;

    // Isot kirjaimet
    $hyllyalue   = strtoupper(trim($hyllyalue));
    $hyllynro   = strtoupper(trim($hyllynro));
    $hyllyvali   = strtoupper(trim($hyllyvali));
    $hyllytaso   = strtoupper(trim($hyllytaso));

    if ($hyllyalue == '' and !empty($varasto)) {
      //Hylly‰ ei ole annettu mutta varasto on. Luodaan annettuun varastoon tuotteelle default-tuotepaikka.
      $varasto = hae_varasto($varasto);

      $hyllyalue = $varasto['alkuhyllyalue'];
      $hyllynro  = $varasto['alkuhyllynro'];
      $hyllyvali = 0;
      if ($hyllytaso == '') {
        $hyllytaso = 0;
      }
    }
    elseif ($hyllyalue == '' and empty($varasto)) {
      return false;
    }

    // Tsekataan, ettei t‰t‰ paikkaa oo jo perustettu
    $query = "SELECT *
              FROM tuotepaikat
              WHERE yhtio   = '{$kukarow['yhtio']}'
              AND tuoteno   = '{$tuoteno}'
              AND hyllyalue = '{$hyllyalue}'
              AND hyllynro  = '{$hyllynro}'
              AND hyllyvali = '{$hyllyvali}'
              AND hyllytaso = '{$hyllytaso}'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      $query = "INSERT INTO tuotepaikat SET
                yhtio       = '{$kukarow['yhtio']}',
                tuoteno     = '{$tuoteno}',
                hyllyalue   = '{$hyllyalue}',
                hyllynro    = '{$hyllynro}',
                hyllyvali   = '{$hyllyvali}',
                hyllytaso   = '{$hyllytaso}',
                oletus      = '{$oletus}',
                halytysraja = '{$halytysraja}',
                tilausmaara = '{$tilausmaara}',
                laatija     = '{$kukarow['kuka']}',
                luontiaika  = now()";
      pupe_query($query);
      $lisatty_tun = mysql_insert_id($GLOBALS["masterlink"]);

      $query = "INSERT INTO tapahtuma SET
                yhtio     = '{$kukarow['yhtio']}',
                tuoteno   = '{$tuoteno}',
                kpl       = 0,
                kplhinta  = 0,
                hinta     = 0,
                laji      = 'uusipaikka',
                hyllyalue = '{$hyllyalue}',
                hyllynro  = '{$hyllynro}',
                hyllyvali = '{$hyllyvali}',
                hyllytaso = '{$hyllytaso}',
                selite    = trim('".t("{$viesti} lis‰ttiin tuotepaikka", $yhtiorow['kieli'])." {$hyllyalue} {$hyllynro} {$hyllyvali} {$hyllytaso}'),
                laatija   = '{$kukarow['kuka']}',
                laadittu  = now()";
      pupe_query($query);
    }
    else {
      $tuoepaikkarow = mysql_fetch_assoc($result);
      $lisatty_tun = $tuoepaikkarow["tunnus"];
    }

    return array("hyllyalue" => $hyllyalue, "hyllynro" => $hyllynro, "hyllytaso" => $hyllytaso, "hyllyvali" => $hyllyvali, "tuotepaikan_tunnus" => $lisatty_tun);
  }
}

if (!function_exists('tarkista_varaston_hyllypaikka')) {
  function tarkista_varaston_hyllypaikka($hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $options = array()) {
    global $kukarow;

    // Haetaan varastopaikka
    $query = "SELECT * FROM varaston_hyllypaikat
              WHERE yhtio='{$kukarow['yhtio']}'
              AND hyllyalue='{$hyllyalue}'
              AND hyllynro='{$hyllynro}'
              AND hyllyvali='{$hyllyvali}'
              AND hyllytaso='{$hyllytaso}'
              ";

    // Sallitut kyselyn ehdot
    $acceptable_options = array('varmistuskoodi', 'reservipaikka');
    $query_lisa = array();

    // parse options
    foreach ($options as $key => $value) {
      if (!empty($key) and in_array($key, $acceptable_options)) {
        $query_lisa[] = "$key = '{$value}'";
      }
    }

    if (count($query_lisa) > 0) {
      $query_lisa = implode($query_lisa, " AND ");
      $query .= "AND $query_lisa";
    }

    $result = pupe_query($query);
    return (mysql_num_rows($result) == 0) ? false : true;
  }
}

if (!function_exists('onko_varaston_hyllypaikat_kaytossa')) {
  function onko_varaston_hyllypaikat_kaytossa($varasto = null) {
    global $kukarow;

    $varastolisa = !empty($varasto) ? "and varasto = ".(int) $varasto : "";

    // Haetaan varastopaikka
    $query = "SELECT tunnus
              FROM varaston_hyllypaikat
              WHERE yhtio = '{$kukarow['yhtio']}'
              {$varastolisa}
              LIMIT 1";
    $result = pupe_query($query);
    return (mysql_num_rows($result) == 0) ? false : true;
  }
}

/**
 * P‰ivitt‰‰ tilausrivin kpl m‰‰r‰n
 *
 * @param int     $tunnus Tilausrivin tunnus
 * @param int     $kpl
 * @return bool
 */
if (!function_exists('paivita_tilausrivin_kpl')) {
  function paivita_tilausrivin_kpl($tunnus, $kpl, $otunnus = 0, $paivita_lapset = false) {
    global $kukarow, $yhtiorow;

    if ($paivita_lapset) {
      // Haetaan tilausrivilt‰...
      $_query = "SELECT tilausrivi.kpl, tilausrivi.varattu, tilausrivi.tuoteno, tuoteperhe.kerroin, tilausrivi.tunnus
                 FROM tilausrivi
                 JOIN tuoteperhe ON (tuoteperhe.yhtio = tilausrivi.yhtio AND tuoteperhe.tuoteno = tilausrivi.tuoteno AND tuoteperhe.tyyppi IN ('', 'P'))
                 WHERE tilausrivi.yhtio      = '{$kukarow['yhtio']}'
                 AND tilausrivi.tyyppi       = 'O'
                 AND tilausrivi.uusiotunnus  = '{$otunnus}'
                 AND tilausrivi.perheid      = '{$tunnus}'
                 AND tilausrivi.tunnus      != '{$tunnus}'";
      $result = pupe_query($_query);

      $returni = false;

      while ($rivi = mysql_fetch_assoc($result)) {
        $kpl_ins = $kpl * $rivi['kerroin'];

        $query = "UPDATE tilausrivi SET
                  varattu     = varattu + {$kpl_ins}
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$rivi['tunnus']}'";
        $result = pupe_query($query);

        $returni = true;
      }

      return $returni;
    }
    else {
      // Haetaan tilausrivilt‰...
      $query  = "SELECT kpl, varattu, tuoteno
                 FROM tilausrivi
                 WHERE yhtio = '{$kukarow['yhtio']}' and tunnus = '{$tunnus}'";
      $result = pupe_query($query);
      $rivi  = mysql_fetch_assoc($result);
    }

    if (!$paivita_lapset) {

      // jos t‰t‰ rivi‰ ei ole viel‰ viety varastoon niin p‰ivitet‰‰n varattu kentt‰‰
      if ($rivi["kpl"] == 0 and $rivi["varattu"] != 0 and $kpl != 0) {
        $query = "UPDATE tilausrivi
                  set varattu = '{$kpl}'
                  where yhtio = '{$kukarow['yhtio']}'
                  and tunnus  = '{$tunnus}'
                  and varattu <> '{$kpl}'";
        $result = pupe_query($query);
      }

      if ($rivi["kpl"] == 0 and strtoupper($kpl) == "DEL") {
        $query = "DELETE FROM tilausrivi
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  and tunnus  = '{$tunnus}'
                  and tyyppi  = 'O'";
        $result = pupe_query($query);

        // Nollataan sarjanumero
        if ($rivi["varattu"] > 0) {
          $tunken = "ostorivitunnus";
        }
        else {
          $tunken = "myyntirivitunnus";
        }

        $query = "UPDATE sarjanumeroseuranta
                  SET {$tunken} = 0
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  and tuoteno = '{$rivi['tuoteno']}'
                  and {$tunken} = '{$tunnus}'";
        $sarjares = pupe_query($query);
      }

      // Jos kpl nollassa ja suuntalavat == 'S'
      if ($kpl == 0 and $yhtiorow['suuntalavat'] == 'S') {
        $query = "UPDATE tilausrivi
                  SET varastoon = 0
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  and tunnus  = '{$tunnus}'";
        $result = pupe_query($query);
      }
    }
  }
}

/**
 *
 * @param unknown $saapuminen
 * @param Array   [hyllyalue, hyllynro, hyllyvali, hyllytaso]
 * @param unknown $tilausrivi
 */
if (!function_exists('vie_varastoon')) {
  function vie_varastoon($saapumisen_tunnus, $suuntalavan_tunnus, $hylly, $tilausrivi = 0) {
    global $kukarow, $yhtiorow;

    // t‰m‰n keikan voi vied‰ saldoille...
    $otunnus = $saapumisen_tunnus;

    $query = "SELECT * FROM lasku WHERE yhtio = '$kukarow[yhtio]' AND tunnus = '$otunnus'";
    $result = pupe_query($query);
    $laskurow = mysql_fetch_assoc($result);

    // Setataan parametrit varastoon.incille
    //extract(params)
    $toimittajaid = $laskurow['liitostunnus'];
    $toiminto = "kalkyyli";
    $tee = "varastoon";

    // TODO: korjaa
    $hyllyalue   = $hylly['hyllyalue'];
    $hyllynro   = $hylly['hyllynro'];
    $hyllyvali   = $hylly['hyllyvali'];
    $hyllytaso   = $hylly['hyllytaso'];

    // Koko suuntalava varastoon
    if ($tilausrivi == 0) {
      $koko_suuntalava = 'X';
      $vietiinko_koko_suuntalava = 'joo';
    }

    $mobiili_keikka = "yes";

    // vied‰‰n varastoon...
    require "tilauskasittely/varastoon.inc";
  }
}

/**
 * P‰ivitt‰‰ suuntalavan tuotteiden hyllypaikat
 */
if (!function_exists('paivita_hyllypaikat')) {
  function paivita_hyllypaikat($suuntalavan_tunnus, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso) {
    global $kukarow;

    // haetaan kaikki saapumisten tunnukset
    $query = "SELECT GROUP_CONCAT(saapuminen) keikkatunnus
              FROM suuntalavat_saapuminen
              WHERE yhtio    = '{$kukarow['yhtio']}'
              AND suuntalava = '{$suuntalavan_tunnus}'";
    $uusiotunnus_chk_res = pupe_query($query);
    $uusiotunnus_chk_row = mysql_fetch_assoc($uusiotunnus_chk_res);

    $uusiotunnuslisa = "tilausrivi.uusiotunnus IN ({$uusiotunnus_chk_row['keikkatunnus']})";

    $query = "SELECT tilausrivi.hyllyalue, tilausrivi.hyllynro, tilausrivi.hyllyvali, tilausrivi.hyllytaso
              FROM tilausrivi
              JOIN suuntalavat ON (suuntalavat.yhtio = tilausrivi.yhtio AND suuntalavat.tunnus = tilausrivi.suuntalava AND suuntalavat.tila = 'S')
              JOIN suuntalavat_saapuminen ON (suuntalavat_saapuminen.yhtio = suuntalavat.yhtio AND suuntalavat_saapuminen.suuntalava = suuntalavat.tunnus)
              WHERE tilausrivi.yhtio    = '{$kukarow['yhtio']}'
              AND {$uusiotunnuslisa}
              AND tilausrivi.tyyppi     = 'O'
              AND tilausrivi.kpl        = 0
              AND tilausrivi.suuntalava = '{$suuntalavan_tunnus}'";
    $koko_suuntalava_result = pupe_query($query);

    if (mysql_num_rows($koko_suuntalava_result) > 0) {
      $query = "UPDATE tilausrivi
                JOIN suuntalavat ON (suuntalavat.yhtio = tilausrivi.yhtio AND suuntalavat.tunnus = tilausrivi.suuntalava AND suuntalavat.tila = 'S')
                JOIN suuntalavat_saapuminen ON (suuntalavat_saapuminen.yhtio = suuntalavat.yhtio AND suuntalavat_saapuminen.suuntalava = suuntalavat.tunnus)
                SET tilausrivi.hyllyalue = '{$hyllyalue}',
                tilausrivi.hyllynro       = '{$hyllynro}',
                tilausrivi.hyllyvali      = '{$hyllyvali}',
                tilausrivi.hyllytaso      = '{$hyllytaso}'
                WHERE tilausrivi.yhtio    = '{$kukarow['yhtio']}'
                AND {$uusiotunnuslisa}
                AND tilausrivi.tyyppi     = 'O'
                AND tilausrivi.kpl        = 0
                AND tilausrivi.suuntalava = '{$suuntalavan_tunnus}'";
      $paivitetty = pupe_query($query);

    }
    return mysql_num_rows($koko_suuntalava_result);
  }
}

/**
 * Tarkistaa saako saapumisen vied‰ varastoon
 *
 * @param unknown $saapumisen_tunnus
 * @param unknown $palautus
 * @return integer    0 = ei virheit‰, 1 = virhe
 */
if (!function_exists('saako_vieda_varastoon')) {
  function saako_vieda_varastoon($saapumisen_tunnus, $toiminto, $palautus='') {
    global $kukarow, $yhtiorow;

    $query = "SELECT nimi
              FROM kuka
              WHERE yhtio = '$kukarow[yhtio]'
              and kesken  = '$saapumisen_tunnus'";
    $result = pupe_query($query);

    $varastoerror = 0;

    $lock_params = array(
      "locktime" => 0,
      "lockfile" => "$kukarow[yhtio]-keikka.lock",
      "return"   => TRUE
    );

    if (!pupesoft_flock($lock_params)) {

      if ($palautus != '') {
        list($keikkakesken, $_kuka, $_timestamp) = explode(";", file_get_contents("/tmp/$kukarow[yhtio]-keikka.lock"));

        echo "<font class='error'>".t("VIRHE: Saapumista ei voi vied‰ varastoon.")." ".t("Varastoonvienti on kesken!")." ".t("K‰ytt‰j‰")." {$_kuka} @ {$_timestamp}</font><br>";
      }

      $varastoerror = 1;
    }
    elseif (mysql_num_rows($result) != 0) {
      while ($rivi = mysql_fetch_assoc($result)) {
        if ($palautus != '') {
          echo "<font class='error'>".t("VIRHE: Saapumista ei voi vied‰ varastoon.")." ".sprintf(t("K‰ytt‰j‰ll‰ %s on kohdistus kesken!"), $rivi["nimi"])."</font><br>";
        }
      }
      $varastoerror = 1;
    }

    if ($toiminto == 'kalkyyli' and $yhtiorow['suuntalavat'] == 'S') {
      $query = "SELECT GROUP_CONCAT(suuntalava) suuntalavat
                FROM tilausrivi
                WHERE yhtio      = '{$kukarow['yhtio']}'
                AND uusiotunnus  = '{$saapumisen_tunnus}'
                AND tyyppi       = 'O'
                AND kpl          = 0
                AND suuntalava  != 0";
      $suuntalavat_chk_result = pupe_query($query);
      $suuntalavat_chk_row = mysql_fetch_assoc($suuntalavat_chk_result);

      if (trim($suuntalavat_chk_row['suuntalavat']) == '') {
        echo "<font class='error'>", t("VIRHE: Saapumista ei voi vied‰ varastoon."), " ", t("Suuntalava on pakollinen"), "!</font><br />";
        $varastoerror = 1;
      }
    }

    return $varastoerror;
  }
}

/**
 * Haetaan saapumiset suuntalavan tunnuksen mukaan
 *
 * @param unknown $suuntalavan_tunnus
 * @return Array $saapumiset
 */
if (!function_exists('hae_saapumiset')) {
  function hae_saapumiset($suuntalava_tunnus) {
    global $kukarow;

    $query = "SELECT saapuminen
              FROM suuntalavat_saapuminen
              WHERE suuntalava='{$suuntalava_tunnus}'
              AND yhtio='{$kukarow['yhtio']}'";
    $result = pupe_query($query);

    $saapumiset = array();

    while ($row = mysql_fetch_array($result)) {
      $saapumiset[] = $row['saapuminen'];
    }

    return $saapumiset;
  }
}

if (!function_exists('paivita_tilausrivin_hylly')) {
  function paivita_tilausrivin_hylly($tilausrivi_tunnus, array $hylly) {
    global $kukarow;

    // Isot kirjaimet
    $hylly['hyllyalue']  = strtoupper($hylly['hyllyalue']);
    $hylly['hyllynro']   = strtoupper($hylly['hyllynro']);
    $hylly['hyllyvali'] = strtoupper($hylly['hyllyvali']);
    $hylly['hyllytaso'] = strtoupper($hylly['hyllytaso']);

    $query = "UPDATE tilausrivi SET
              hyllyalue    = '$hylly[hyllyalue]',
              hyllynro     = '$hylly[hyllynro]',
              hyllyvali    = '$hylly[hyllyvali]',
              hyllytaso    = '$hylly[hyllytaso]'
               WHERE yhtio = '$kukarow[yhtio]'
               and tunnus  = '$tilausrivi_tunnus'";

    $presult = pupe_query($query);

    return mysql_affected_rows();
  }
}

if (!function_exists('paivita_oletuspaikka')) {
  function paivita_oletuspaikka($tuoteno, array $hylly, $tultiin_mobiilista = false) {
    global $kukarow, $yhtiorow;

    // Palautusmuuttuja
    $return = array();

    // Haetaan vanha oletuspaikka talteen ostotilausmuutoksia varten
    $oletusquery = "SELECT *
                    FROM tuotepaikat
                    WHERE yhtio  = '$kukarow[yhtio]'
                    and tuoteno  = '$tuoteno'
                    and oletus  != ''";
    $oletusresult = pupe_query($oletusquery);
    $oletusrow = mysql_fetch_assoc($oletusresult);

    // Poistetaan kaikilta tuotteen tuotepaikoilta oletus
    // ostorivienvarastopaikat.inc, rivi 281
    $query = "UPDATE tuotepaikat
              SET oletus     = '',
              muuttaja    = '$kukarow[kuka]',
              muutospvm   = now()
              WHERE yhtio = '$kukarow[yhtio]'
              and tuoteno = '$tuoteno'";
    $upresult = pupe_query($query);

    // Asetetaan uusi oletuspaikka
    // ostorivienvarastopaikat.inc, rivi 289
    $query = "UPDATE tuotepaikat
              SET oletus   = 'X',
              muuttaja      = '$kukarow[kuka]',
              muutospvm     = now(),
              poistettava   = ''
              WHERE yhtio   = '$kukarow[yhtio]'
              and tuoteno   = '$tuoteno'
              and hyllyalue = '$hylly[hyllyalue]'
              and hyllynro  = '$hylly[hyllynro]'
              and hyllyvali = '$hylly[hyllyvali]'
              and hyllytaso = '$hylly[hyllytaso]'
              LIMIT 1";
    $upresult = pupe_query($query);

    // Haetaan tuotepaikat miss‰ oletus ei ole '', eli nykyiset oletuspaikat
    $query = "SELECT *
              FROM tuotepaikat
              WHERE yhtio  = '$kukarow[yhtio]'
              and tuoteno  = '$tuoteno'
              and oletus  != ''";
    $upresult = pupe_query($query);

    // Jos oletuspaikkaa ei lˆytynyt, asetetaan ensimm‰inen oletuspaikaksi.
    if (mysql_num_rows($upresult) == 0) {

      $query = "UPDATE tuotepaikat
                SET oletus   = 'X',
                muuttaja    = '$kukarow[kuka]',
                muutospvm   = now(),
                poistettava = ''
                WHERE yhtio = '$kukarow[yhtio]'
                and tuoteno = '$tuoteno'
                ORDER BY hyllyalue,hyllynro,hyllyvali,hyllytaso LIMIT 1";
      $upresult = pupe_query($query);

      $return["error"] = "Oletuspaikkaa ei lˆytynyt, tehtiin ensimm‰isest‰ paikasta oletuspaikka";
    }
    elseif (mysql_num_rows($upresult) == 1 and kuuluukovarastoon($oletusrow['hyllyalue'], $oletusrow['hyllynro']) == kuuluukovarastoon($hylly['hyllyalue'], $hylly['hyllynro'])) {

      if ($yhtiorow['paivita_oletuspaikka'] == 'S') {
        $wherelisa = "";
        $joinlisa = "JOIN lasku ON (lasku.yhtio = t.yhtio AND lasku.tunnus = t.otunnus AND lasku.tila = 'O' and lasku.alatila != 'X')";
        $tyyppilisa = "AND t.tyyppi = 'O'";
      }
      elseif ($yhtiorow['paivita_oletuspaikka'] == 'M') {
        $wherelisa = "";
        $joinlisa = "JOIN lasku ON (lasku.yhtio = t.yhtio AND lasku.tunnus = t.otunnus AND lasku.tila IN ('N','O') and lasku.alatila != 'X')";
        $tyyppilisa = "AND t.tyyppi IN ('O','L')";
      }
      else {
        $wherelisa = "AND t.uusiotunnus = '0'";
        $joinlisa = "JOIN lasku ON (lasku.yhtio = t.yhtio AND lasku.tunnus = t.otunnus AND lasku.tila = 'O' and lasku.alatila != 'X')";
        $tyyppilisa = "AND t.tyyppi = 'O'";
      }

      // P‰ivitet‰‰n uusi oletuspaikka (jos uusi paikka on samassa varastossa kun vanha)
      $query = "UPDATE tilausrivi AS t
                {$joinlisa}
                SET t.hyllyalue  = '{$hylly['hyllyalue']}',
                t.hyllynro       = '{$hylly['hyllynro']}',
                t.hyllyvali      = '{$hylly['hyllyvali']}',
                t.hyllytaso      = '{$hylly['hyllytaso']}'
                WHERE t.yhtio    = '{$kukarow['yhtio']}'
                AND t.tuoteno    = '{$tuoteno}'
                AND t.hyllyalue  = '{$oletusrow['hyllyalue']}'
                AND t.hyllynro   = '{$oletusrow['hyllynro']}'
                AND t.hyllytaso  = '{$oletusrow['hyllytaso']}'
                AND t.hyllyvali  = '{$oletusrow['hyllyvali']}'
                {$tyyppilisa}
                {$wherelisa}
                AND t.kpl        = '0'
                AND t.varattu   != '0'";
      $result = pupe_query($query);

      $return["paivitetyt_ostorivit"] = mysql_affected_rows();

      if ($yhtiorow['paivita_oletuspaikka'] == 'M') {

        // P‰ivitet‰‰n siirtorivien l‰hdepaikka
        $query = "UPDATE tilausrivi AS t
                  JOIN lasku ON (lasku.yhtio = t.yhtio AND lasku.tunnus = t.otunnus AND lasku.tila = 'G' and lasku.alatila not in ('V','D','X'))
                  SET t.hyllyalue  = '{$hylly['hyllyalue']}',
                  t.hyllynro       = '{$hylly['hyllynro']}',
                  t.hyllyvali      = '{$hylly['hyllyvali']}',
                  t.hyllytaso      = '{$hylly['hyllytaso']}'
                  WHERE t.yhtio    = '{$kukarow['yhtio']}'
                  AND t.tuoteno    = '{$tuoteno}'
                  AND t.hyllyalue  = '{$oletusrow['hyllyalue']}'
                  AND t.hyllynro   = '{$oletusrow['hyllynro']}'
                  AND t.hyllytaso  = '{$oletusrow['hyllytaso']}'
                  AND t.hyllyvali  = '{$oletusrow['hyllyvali']}'
                  AND t.tyyppi     = 'G'
                  AND t.kpl        = '0'
                  AND t.varattu   != '0'";
        $result = pupe_query($query);

        // P‰ivitet‰‰n siirtorivien kohdepaikka
        $query = "UPDATE tilausrivin_lisatiedot AS tt
                  JOIN tilausrivi AS t ON (t.yhtio = tt.yhtio AND
                    t.tunnus              = tt.tilausrivitunnus AND
                    t.tuoteno             = '{$tuoteno}' AND
                    t.kpl                 = '0' AND
                    t.varattu            != '0' AND
                    t.tyyppi              = 'G')
                  SET tt.kohde_hyllyalue  = '{$hylly['hyllyalue']}',
                  tt.kohde_hyllynro       = '{$hylly['hyllynro']}',
                  tt.kohde_hyllyvali      = '{$hylly['hyllyvali']}',
                  tt.kohde_hyllytaso      = '{$hylly['hyllytaso']}'
                  WHERE tt.yhtio          = '{$kukarow['yhtio']}'
                  AND tt.kohde_hyllyalue  = '{$oletusrow['hyllyalue']}'
                  AND tt.kohde_hyllynro   = '{$oletusrow['hyllynro']}'
                  AND tt.kohde_hyllytaso  = '{$oletusrow['hyllytaso']}'
                  AND tt.kohde_hyllyvali  = '{$oletusrow['hyllyvali']}'";
        $result = pupe_query($query);
      }
    }

    return $return;
  }
}

if (!function_exists('hyllyalue')) {
  function hyllyalue($hyllyalue_key, $hyllyalue_value, $esitysmuoto = '') {
    global $kukarow, $yhtiorow;

    /*
    Funktioon liittyv‰ javascripti lˆytyy parametrit.inc rivilt‰ 617
    Funktion $hyllyalue_key ei saa sis‰lt‰‰ "_"-merkki‰
    */

    if ($esitysmuoto == 'riisuttu') {
      return $yhtiorow['varastontunniste'] != "" ? substr("{$hyllyalue_value}", $yhtiorow['varastontunniste']) : $hyllyalue_value;
    }
    else {

      $input_html = $varastolisa = "";

      if ($yhtiorow['varastontunniste'] != "") {
        $input_html .= "<select class='select_varastontunniste' id='{$hyllyalue_key}_select_varastontunniste' name='select_varastontunniste'>";

        $query = "SELECT tunnus, nimitys, alkuhyllyalue
                  FROM varastopaikat
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  ORDER BY alkuhyllyalue";
        $varastores = pupe_query($query);

        while ($varastorow = mysql_fetch_assoc($varastores)) {

          $val = substr($varastorow['alkuhyllyalue'], 0, $yhtiorow['varastontunniste']);

          $sel = "";

          if ((trim($hyllyalue_value) != "" and substr($hyllyalue_value, 0, $yhtiorow['varastontunniste']) == $varastorow['alkuhyllyalue']) or (trim($hyllyalue_value) == '' and $kukarow['oletus_varasto'] == $varastorow['tunnus'])) {
            $varastolisa = $val;
            $sel = " selected";
          }

          $input_html .= "<option value='{$val}'{$sel}>{$varastorow['nimitys']} ({$val}) $sel</option>";
        }

        $input_html .= "</select>&nbsp;";
      }

      $maxlength = $yhtiorow['varastontunniste'] != "" ? (5 - $yhtiorow['varastontunniste']) : 5;
      $size = $maxlength + 1;

      $hyllyalue_value = substr("{$hyllyalue_value}", (int) $yhtiorow['varastontunniste']);

      $input_html .= "  <input type='text' class='hyllyalue' id='{$hyllyalue_key}' size='{$size}' maxlength='{$maxlength}' value = '{$hyllyalue_value}' />
                <input type='hidden' id='hidden_{$hyllyalue_key}' name='{$hyllyalue_key}' value='{$varastolisa}{$hyllyalue_value}' />";

      return $input_html;
    }
  }
}

if (!function_exists('uusi_saapuminen')) {
  function uusi_saapuminen($toimittajarow, $toimipaikka = 0) {
    global $kukarow;

    // Lock table
    $lock_query = "LOCK TABLE lasku WRITE, valuu READ";
    $re = pupe_query($lock_query);

    // haetaan seuraava vapaa keikkaid
    $query  = "SELECT max(laskunro) laskunro from lasku where yhtio='$kukarow[yhtio]' and tila='K'";
    $result = pupe_query($query);
    $row    = mysql_fetch_assoc($result);

    $id     = $row['laskunro']+1;

    $query  = "SELECT kurssi from valuu where nimi='$toimittajarow[oletus_valkoodi]' and yhtio='$kukarow[yhtio]'";
    $result = pupe_query($query);
    $row    = mysql_fetch_assoc($result);
    $kurssi = $row["kurssi"];

    $maa_lahetys = $toimittajarow['maa_lahetys'] != '' ? $toimittajarow['maa_lahetys'] : $toimittajarow['maa'];

    $toimipaikka = $toimipaikka != 0 ? $toimipaikka : $kukarow['toimipaikka'];

    // meill‰ on $toimittajarow haettuna ylh‰‰ll‰
    $query = "INSERT into lasku set
              yhtio                   = '$kukarow[yhtio]',
              laskunro                = '$id',
              ytunnus                 = '$toimittajarow[ytunnus]',
              nimi                    = '$toimittajarow[nimi]',
              valkoodi                = '$toimittajarow[oletus_valkoodi]',
              vienti                  = '$toimittajarow[oletus_vienti]',
              vienti_kurssi           = '$kurssi',
              toimitusehto            = '$toimittajarow[toimitusehto]',
              osoite                  = '$toimittajarow[osoite]',
              postitp                 = '$toimittajarow[postitp]',
              maa                     = '$toimittajarow[maa]',
              maa_lahetys             = '$maa_lahetys',
              kauppatapahtuman_luonne = '$toimittajarow[kauppatapahtuman_luonne]',
              kuljetusmuoto           = '$toimittajarow[kuljetusmuoto]',
              rahti                   = '$toimittajarow[oletus_kulupros]',
              swift                   = '$toimittajarow[swift]',
              liitostunnus            = '$toimittajarow[tunnus]',
              yhtio_toimipaikka       = '{$toimipaikka}',
              tila                    = 'K',
              luontiaika              = now(),
              laatija                 = '$kukarow[kuka]'";
    $result = pupe_query($query);

    $return = mysql_insert_id($GLOBALS["masterlink"]);

    // Unlock table
    $lock_query = "UNLOCK TABLES";
    $re = pupe_query($lock_query);

    return $return;
  }
}

if (!function_exists('hae_yhtion_toimipaikat')) {
  function hae_yhtion_toimipaikat($yhtio, $tunnus = 0) {

    $yhtio = mysql_real_escape_string($yhtio);

    $tunnuslisa = (trim($tunnus) != '' and $tunnus != 0) ? " AND tunnus = '{$tunnus}'" : "";

    $query = "SELECT *
              FROM yhtion_toimipaikat
              WHERE yhtio = '{$yhtio}'
              {$tunnuslisa}
              ORDER BY nimi";
    $res = pupe_query($query);
    return $res;
  }
}

if (!function_exists('tarkiste')) {
  function tarkiste($sscc) {
    $kerroin = 3; // kerroin aluks 3
    $summa   = 0; // summa nolla tietty

    // loopataan luvut oikeelta vasemmalle
    for ($i = 16; $i >= 0; $i--) {
      $summa += $kerroin * (ord($sscc{$i})-48); // lis‰t‰‰n summaan ko. luku * kerroin (t‰‰ hanskaa kirjaimet )
      $kerroin = 4 - $kerroin; // kerroin on vuorotellen 3 tai 1
    }

    $sscc = ceil($summa / 10) * 10 - $summa; // tarkiste on luku mik‰ pit‰‰ lis‰t‰, ett‰ p‰‰st‰‰n seuraavaan tasakymmeneen

    return $sscc;
  }
}

if (!function_exists('uusi_sscc_nro')) {
  function uusi_sscc_nro() {
    global $kukarow;

    $query = "SELECT selite
              FROM avainsana
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND laji    = 'SSCC'";
    $result = pupe_query($query);
    $row = mysql_fetch_assoc($result);

    $sscc = is_numeric($row['selite']) ? (int) $row['selite'] + 1 : 1;

    if (trim($row['selite']) == '') {

      $query = "INSERT INTO avainsana SET
                yhtio        = '{$kukarow['yhtio']}',
                perhe        = '666',
                kieli        = '{$kukarow['kieli']}',
                laji         = 'SSCC',
                nakyvyys     = '',
                selite       = '{$sscc}',
                selitetark   = '',
                selitetark_2 = '',
                selitetark_3 = '',
                jarjestys    = 0,
                laatija      = '{$kukarow['kuka']}',
                luontiaika   = now(),
                muutospvm    = now(),
                muuttaja     = '{$kukarow['kuka']}'";
      $insert_res = pupe_query($query);
    }
    else {
      $query = "UPDATE avainsana
                SET selite  = '{$sscc}'
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND laji    = 'SSCC'";
      $update_res = pupe_query($query);
    }

    return $sscc;
  }
}

if (!function_exists("gs1_sscc")) {
  function gs1_sscc($expansioncode, $id, $n) {
    global $yhtiorow;

    $sscc_prefix = '00';
    $sscc_expansioncode = $expansioncode;

    // jos gs1 yritystunnus on yli 7 merkki‰ (oletuspituus), tehd‰‰n
    // erikoisk‰sittely sscc koodin muodostukselle ja raivataan tilaa
    // tilausnumerosta
    if (strlen($yhtiorow['ean']) > 7) {
      // 9 on maksimi ean pituus, joten lasketaan kuinka paljon yli
      // 7 merkin tuo menee
      $company_id_space   = strlen($yhtiorow['ean']);               //t‰nne lis‰‰ tilaa
      $item_id_space      = 7 - (strlen($yhtiorow['ean']) - 7);     //t‰‰lt‰ pois tilaa
    }
    else {
      $company_id_space   = 7;
      $item_id_space      = 7;
    }

    $sscc_gs1_company_id = str_pad($yhtiorow['ean'], $company_id_space, 0, STR_PAD_RIGHT);
    $sscc_item_id = str_pad(substr($id, -$item_id_space), $item_id_space, 0, STR_PAD_LEFT);
    $sscc_count = str_pad((int) $n, 2, 0, STR_PAD_LEFT);

    $sscc = $sscc_expansioncode.$sscc_gs1_company_id.$sscc_item_id.$sscc_count;
    $sscc_checknum = tarkiste($sscc);
    $sscc = $sscc_prefix.$sscc.$sscc_checknum;

    return $sscc;
  }
}

if (!function_exists('tee_keraysera_painon_perusteella')) {
  function tee_keraysera_painon_perusteella($laskurow, $tilausnumeroita, $_pakkaus = 0) {
    global $kukarow, $yhtiorow;

    $_pakkaus = (int) $_pakkaus;

    $pakkaukset = array();

    if ($_pakkaus == 0) {
      // valitaan sopiva pakkaus painon perusteella
      $query = "SELECT SUM(tuote.tuotemassa * tilausrivi.varattu) AS paino
                FROM tilausrivi
                JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.tuotemassa != 0)
                WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
                AND tilausrivi.var     not in ('P','J','O','S')
                AND tilausrivi.otunnus IN ($tilausnumeroita)";
      $paino_chk_res = pupe_query($query);
      $paino_chk_row = mysql_fetch_assoc($paino_chk_res);
    }

    $pakkaus_wherelisa = $_pakkaus != 0 ? "AND tunnus = '{$_pakkaus}'" : "AND minimi_paino <= '{$paino_chk_row['paino']}'";

    // katsotaan mit‰ pakkauksia voidaan k‰ytt‰‰
    $query = "SELECT *
              FROM pakkaus
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND paino   != 0
              {$pakkaus_wherelisa}
              ORDER BY paino DESC
              LIMIT 1";
    $pakkausres = pupe_query($query);
    $pakkausrow = mysql_fetch_assoc($pakkausres);

    $valittu_pakkaus  = $pakkausrow['tunnus'];
    $pakkaukset_paino = $pakkausrow['paino'];
    $pakkauksen_kaytetty_paino = 0;
    $pakkausnro = 0;

    $sorttauskentta = generoi_sorttauskentta($yhtiorow["kerayslistan_jarjestys"]);
    $order_sorttaus = $yhtiorow["kerayslistan_jarjestys_suunta"];

    // katsotaan tarvitaanko jakaa tilausrivej‰ myyntier‰ll‰
    $query = "SELECT tilausrivi.tunnus, tilausrivi.tuoteno, tilausrivi.otunnus, tilausrivi.varattu, tuote.tuotemassa, tuote.tuotemassa * tilausrivi.varattu AS paino, IF(tuote.myynti_era = 0, 1, myynti_era) myynti_era, {$sorttauskentta}
              FROM tilausrivi
              JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.tuotemassa != 0)
              WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
              AND tilausrivi.var     not in ('P','J','O','S')
              AND tilausrivi.otunnus IN ($tilausnumeroita)
              ORDER BY sorttauskentta {$order_sorttaus}";
    $keraysera_res = pupe_query($query);

    $kerayseran_rivit = array();

    while ($keraysera_row = mysql_fetch_assoc($keraysera_res)) {
      $kerayseran_rivit[]['data'] = $keraysera_row;
    }

    $sscc = 0;
    $sscc_ulkoinen = 0;

    for ($i = 0; $i < count($kerayseran_rivit); $i++) {

      $kerayseran_paino = $kerayseran_rivit[$i]['data']['paino'];
      $jaljella = $kerayseran_rivit[$i]['data']['varattu'];

      $lisatty_kol_maara = 0;

      while (($pakkaukset_paino >= $pakkauksen_kaytetty_paino)) {

        if (($pakkauksen_kaytetty_paino + ($kerayseran_rivit[$i]['data']['tuotemassa'] * $kerayseran_rivit[$i]['data']['myynti_era'])) > $pakkaukset_paino) {

          $pakkauksen_kaytetty_paino = 0;

          if ($_pakkaus != 0 or (count($kerayseran_rivit) > 1 and $lisatty_kol_maara == 0)) {

            $pakkausnro++;
            $pakkauksen_kaytetty_paino = ($kerayseran_rivit[$i]['data']['tuotemassa'] * $jaljella);

            $sscc          = uusi_sscc_nro();

            if (!empty($yhtiorow['ean'])) {
              $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = '{$laskurow['toimitustapa']}'", "", "", "selitetark");

              if ($_selitetark == '') {
                $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = 'kaikki'", "", "", "selitetark");
              }

              if ($_selitetark != '') {
                $expansioncode = $_selitetark;

                $sscc_ulkoinen = gs1_sscc($expansioncode, $sscc, $pakkausnro);
              }
              else {
                $sscc_ulkoinen = $sscc;
              }
            }
            else {
              $sscc_ulkoinen = $sscc;
            }
          }

          break;
        }

        $jaljella -= $kerayseran_rivit[$i]['data']['myynti_era'];
        $kerayseran_paino -= $kerayseran_rivit[$i]['data']['tuotemassa'] * $kerayseran_rivit[$i]['data']['myynti_era'];

        $pakkauksen_kaytetty_paino += ($kerayseran_rivit[$i]['data']['tuotemassa'] * $kerayseran_rivit[$i]['data']['myynti_era']);

        $lisatty_kol_maara += $kerayseran_rivit[$i]['data']['myynti_era'];

        if ($jaljella <= 0) break;
      }

      if ($pakkausnro == 0) {
        $pakkausnro++;

        $sscc          = uusi_sscc_nro();

        if (!empty($yhtiorow['ean'])) {
          $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = '{$laskurow['toimitustapa']}'", "", "", "selitetark");

          if ($_selitetark == '') {
            $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = 'kaikki'", "", "", "selitetark");
          }

          if ($_selitetark != '') {
            $expansioncode = $_selitetark;

            $sscc_ulkoinen = gs1_sscc($expansioncode, $sscc, $pakkausnro);
          }
          else {
            $sscc_ulkoinen = $sscc;
          }
        }
        else {
          $sscc_ulkoinen = $sscc;
        }
      }

      $keraysera_kpl = $kerayseran_rivit[$i]['data']['varattu'] - $jaljella;

      $kerayseran_rivit[$i]['data']['upd_varattu'] = $jaljella == 0 ? 0 : $keraysera_kpl;
      $kerayseran_rivit[$i]['data']['paino'] = $kerayseran_rivit[$i]['data']['tuotemassa'] * $keraysera_kpl;

      $kerayseran_rivit[$i]['data']['pakkausnro'] = $pakkausnro;
      $kerayseran_rivit[$i]['data']['sscc'] = $sscc;
      $kerayseran_rivit[$i]['data']['sscc_ulkoinen'] = $sscc_ulkoinen;

      if ($keraysera_kpl > 0 and $jaljella > 0) {

        $pakkausnro++;

        $uusi_row = $kerayseran_rivit[$i];
        $uusi_row['data']['upd_varattu'] = 0;
        $uusi_row['data']['varattu'] = $jaljella;
        $uusi_row['data']['paino'] = $uusi_row['data']['tuotemassa'] * $jaljella;
        $uusi_row['data']['uusirivi'] = true;
        $uusi_row['data']['sscc'] = $sscc = uusi_sscc_nro();

        if (!empty($yhtiorow['ean'])) {
          $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = '{$laskurow['toimitustapa']}'", "", "", "selitetark");

          if ($_selitetark == '') {
            $_selitetark = t_avainsana("GS1_SSCC", "", "and avainsana.selite = 'kaikki'", "", "", "selitetark");
          }

          if ($_selitetark != '') {
            $expansioncode = $_selitetark;

            $uusi_row['data']['sscc_ulkoinen'] = $sscc_ulkoinen = gs1_sscc($expansioncode, $sscc, $pakkausnro);
          }
          else {
            $uusi_row['data']['sscc_ulkoinen'] = $sscc_ulkoinen = $sscc;
          }
        }
        else {
          $uusi_row['data']['sscc_ulkoinen'] = $sscc_ulkoinen = $sscc;
        }

        // splitataan array
        // halutaan lis‰t‰ uusi_row arrayn keskelle, joten joudutaan k‰ytt‰m‰‰n array_slicea.
        // alkup‰‰n rivit
        $alkupaan_rivit = array_slice($kerayseran_rivit, 0, $i+1);
        $alkupaan_rivit[] = $uusi_row;

        // loppup‰‰n rivit
        $loppupaan_rivit = array_slice($kerayseran_rivit, $i+1);

        // yhdistet‰‰n rivit
        if (count($loppupaan_rivit) > 0) $kerayseran_rivit = array_merge($alkupaan_rivit, $loppupaan_rivit);
        else $kerayseran_rivit = $alkupaan_rivit;
      }
    }

    reset($kerayseran_rivit);

    $keraysera_nro = $laskurow['kerayslista'] != 0 ? $laskurow['kerayslista'] : $laskurow['tunnus'];

    foreach ($kerayseran_rivit as $rivi) {

      if (isset($rivi['data']['uusirivi']) and $rivi['data']['uusirivi']) {

        $uusikpl = $rivi['data']['upd_varattu'] != 0 ? (float) $rivi['data']['upd_varattu'] : (float) $rivi['data']['varattu'];

        $poikkeukset = array(
          'tilausrivi.varattu' => $uusikpl,
        );

        $tun = kopioi_tilausrivi($rivi['data']['tunnus'], $poikkeukset);

        $rivi['data']['tunnus'] = $tun;
        $kappalemaara = $uusikpl;

        $query = "INSERT INTO kerayserat SET
                  yhtio         = '{$kukarow['yhtio']}',
                  nro           = {$keraysera_nro},
                  keraysvyohyke = 0,
                  tila          = '',
                  sscc          = '{$rivi['data']['sscc']}',
                  sscc_ulkoinen = '{$rivi['data']['sscc_ulkoinen']}',
                  otunnus       = '{$rivi['data']['otunnus']}',
                  tilausrivi    = '{$rivi['data']['tunnus']}',
                  pakkaus       = '{$valittu_pakkaus}',
                  pakkausnro    = '{$rivi['data']['pakkausnro']}',
                  kpl           = '{$kappalemaara}',
                  kpl_keratty   = 0,
                  keratty       = '',
                  kerattyaika   = '0000-00-00 00:00:00',
                  laatija       = '{$kukarow['kuka']}',
                  luontiaika    = now(),
                  muutospvm     = now(),
                  muuttaja      = ''";
        $keraysera_ins = pupe_query($query);
      }
      elseif ($rivi['data']['upd_varattu'] != 0 and $rivi['data']['varattu'] != $rivi['data']['upd_varattu']) {

        $query = "UPDATE tilausrivi SET
                  varattu     = '{$rivi['data']['upd_varattu']}'
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$rivi['data']['tunnus']}'";
        $upd_res = pupe_query($query);

        $kappalemaara = $rivi['data']['upd_varattu'];

        $query = "INSERT INTO kerayserat SET
                  yhtio         = '{$kukarow['yhtio']}',
                  nro           = {$keraysera_nro},
                  keraysvyohyke = 0,
                  tila          = '',
                  sscc          = '{$rivi['data']['sscc']}',
                  sscc_ulkoinen = '{$rivi['data']['sscc_ulkoinen']}',
                  otunnus       = '{$rivi['data']['otunnus']}',
                  tilausrivi    = '{$rivi['data']['tunnus']}',
                  pakkaus       = '{$valittu_pakkaus}',
                  pakkausnro    = '{$rivi['data']['pakkausnro']}',
                  kpl           = '{$rivi['data']['upd_varattu']}',
                  kpl_keratty   = 0,
                  keratty       = '',
                  kerattyaika   = '0000-00-00 00:00:00',
                  laatija       = '{$kukarow['kuka']}',
                  luontiaika    = now(),
                  muutospvm     = now(),
                  muuttaja      = ''";
        $keraysera_ins = pupe_query($query);
      }
      else {
        $kappalemaara = $rivi['data']['varattu'];

        if ($_pakkaus != 0) {
          $query = "UPDATE kerayserat SET
                    pakkaus        = '{$valittu_pakkaus}',
                    pakkausnro     = '{$rivi['data']['pakkausnro']}',
                    sscc           = '{$rivi['data']['sscc']}',
                    sscc_ulkoinen  = '{$rivi['data']['sscc_ulkoinen']}'
                    WHERE yhtio    = '{$kukarow['yhtio']}'
                    AND tilausrivi = '{$rivi['data']['tunnus']}'";
          $upd_res = pupe_query($query);
        }
        else {

          $query = "INSERT INTO kerayserat SET
                    yhtio         = '{$kukarow['yhtio']}',
                    nro           = {$keraysera_nro},
                    keraysvyohyke = 0,
                    tila          = '',
                    sscc          = '{$rivi['data']['sscc']}',
                    sscc_ulkoinen = '{$rivi['data']['sscc_ulkoinen']}',
                    otunnus       = '{$rivi['data']['otunnus']}',
                    tilausrivi    = '{$rivi['data']['tunnus']}',
                    pakkaus       = '{$valittu_pakkaus}',
                    pakkausnro    = '{$rivi['data']['pakkausnro']}',
                    kpl           = '{$kappalemaara}',
                    kpl_keratty   = 0,
                    keratty       = '',
                    kerattyaika   = '0000-00-00 00:00:00',
                    laatija       = '{$kukarow['kuka']}',
                    luontiaika    = now(),
                    muutospvm     = now(),
                    muuttaja      = ''";
          $keraysera_ins = pupe_query($query);
        }
      }
    }

    return $keraysera_nro;
  }
}

if (!function_exists('luottotilanne')) {
  function luottotilanne($liitostunnus, $valuutassa=FALSE) {
    global $kukarow, $yhtiorow;

    // Lasketaan asiakkaan luottotilanne, EI HUOMIOIDA AVOIMIA LASKUJA
    if ($liitostunnus == "") return 0;

    $salisa2 = "";

    if ($valuutassa !== FALSE) {
      $salisa2 = " and suoritus.valkoodi='$valuutassa' ";
    }

    $query = "SELECT luottoraja
              FROM asiakas
              WHERE yhtio = '{$kukarow['yhtio']}'
              and tunnus  in ($liitostunnus)";
    $asresult = pupe_query($query);
    $asrow = mysql_fetch_assoc($asresult);

    if ($valuutassa !== FALSE) {
      // Suorituksen valuutassa
      $suorilisa = " sum(summa) summa ";
    }
    else {
      // Yhtiˆn valuutassa
      $suorilisa = " sum(round(summa*if(kurssi=0, 1, kurssi),2)) summa ";
    }

    // Haetaan kaatotilin summa
    $query = "SELECT
              $suorilisa
              FROM suoritus
              WHERE yhtio        = '{$kukarow['yhtio']}'
              and ltunnus        > 0
              and kohdpvm        = '0000-00-00'
              and asiakas_tunnus in ($liitostunnus)
              $salisa2";
    $kaatotilires = pupe_query($query);
    $kaatotilirow = mysql_fetch_assoc($kaatotilires);

    if ($valuutassa !== FALSE) {
      // Laskun valuutassa
      $avtilisa = "(tilausrivi.hinta/if(lasku.vienti_kurssi=0, 1, lasku.vienti_kurssi))";
    }
    else {
      // Yhtiˆn valuutassa
      $avtilisa = "tilausrivi.hinta";
    }

    $query_alennuksia = generoi_alekentta('M');

    // Avoimet tilaukset
    $query = "(SELECT
               round(sum({$avtilisa} * if('{$yhtiorow['alv_kasittely']}' != '' and tilausrivi.alv < 500, (1+tilausrivi.alv/100), 1) * (tilausrivi.varattu+tilausrivi.jt) * {$query_alennuksia}),2) tilausavoinsaldo
               FROM lasku
               JOIN tilausrivi use index (yhtio_otunnus) on (tilausrivi.yhtio=lasku.yhtio and tilausrivi.otunnus=lasku.tunnus and tilausrivi.tyyppi = 'L')
               WHERE lasku.yhtio       = '{$kukarow['yhtio']}'
               AND lasku.tila          in ('L', 'N')
               AND lasku.alatila      != 'X'      # Kaikki myyntitilaukset, paitsi laskutetut
               AND lasku.liitostunnus  in ({$liitostunnus}))
               UNION
               (SELECT
               round(sum({$avtilisa} * if('{$yhtiorow['alv_kasittely']}' != '' and tilausrivi.alv < 500, (1+tilausrivi.alv/100), 1) * (tilausrivi.varattu+tilausrivi.jt) * {$query_alennuksia}),2) tilausavoinsaldo
               FROM lasku
               JOIN tilausrivi use index (yhtio_otunnus) on (tilausrivi.yhtio=lasku.yhtio and tilausrivi.otunnus=lasku.tunnus and tilausrivi.tyyppi = 'W')
               WHERE lasku.yhtio       = '{$kukarow['yhtio']}'
               AND lasku.tila          = 'V'
               AND lasku.alatila       in ('','A','C','J','V')  # Valmistukset
               AND lasku.liitostunnus  in ({$liitostunnus}))";
    $avoimettilauksetres = pupe_query($query);
    $avoimettilauksetrow = mysql_fetch_assoc($avoimettilauksetres);

    return array($asrow['luottoraja'], $kaatotilirow["summa"], $avoimettilauksetrow['tilausavoinsaldo']);
  }
}

if (!function_exists('excel_column_name')) {
  function excel_column_name($luku) {
    $luku = (int)$luku;
    if ($luku < 1) {
      return ' ';
    }
    $string   = "";
    $number   = $luku - 1;

    while ($number >= 0) {
      $string   = chr($number % 26 + 65) . $string;
      $number   = $number / 26 - 1;
    }

    return $string;
  }

}

if (!function_exists('koontilahete_check')) {
  function koontilahete_check($laskurow, $komento) {
    global $kukarow, $yhtiorow;

    $koontilahete = 0;
    $koontilahete_tilausrivit = 0;

    // onko koontivahvistus k‰ytˆss‰?
    if (in_array($laskurow["keraysvahvistus_lahetys"], array('N', 'Q', 'P')) or (in_array($yhtiorow["keraysvahvistus_lahetys"], array('N', 'Q', 'P')) and $laskurow["keraysvahvistus_lahetys"] == '')) {

      $hakutunnus = ($laskurow["vanhatunnus"] > 0) ? $laskurow["vanhatunnus"] : $laskurow["tunnus"];

      // vanha_otunnus on alkuper‰inen tilausnumero
      // Haetaan kaikkien t‰ll‰ tilauksella olevien tilausrivien alkuper‰iset tilausnumerot
      $query = "SELECT GROUP_CONCAT(DISTINCT tlt2.vanha_otunnus) alkuperaiset_tilaukset
                FROM tilausrivi
                JOIN tilausrivin_lisatiedot as tlt2 USE INDEX (tilausrivitunnus) ON (tlt2.yhtio = tilausrivi.yhtio AND tlt2.tilausrivitunnus = tilausrivi.tunnus AND tlt2.ohita_kerays = '')
                JOIN tuote ON (tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno and tuote.ei_saldoa = '')
                WHERE tilausrivi.yhtio  = '{$kukarow['yhtio']}'
                AND tilausrivi.otunnus  = '{$hakutunnus}'
                AND tilausrivi.tyyppi   = 'L'
                AND tilausrivi.var     != 'P'";
      $query_result = pupe_query($query);
      $isa_tilaus = mysql_fetch_assoc($query_result);

      // Lasketaan kuinka monta toimitettua tilausrivi‰ lˆytyy per alkuper‰inen tilaus
      if ($isa_tilaus['alkuperaiset_tilaukset'] != '') {

        $query = "SELECT tlt2.tunnus
                  FROM tilausrivin_lisatiedot as tlt2
                  JOIN tilausrivi on (tilausrivi.tunnus = tlt2.tilausrivitunnus AND tilausrivi.tyyppi = 'L' AND tilausrivi.var != 'P' AND tilausrivi.kerattyaika = '0000-00-00 00:00:00')
                  JOIN tuote ON (tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno and tuote.ei_saldoa = '')
                  WHERE tlt2.yhtio       = '{$kukarow['yhtio']}'
                  AND tlt2.ohita_kerays  = ''
                  AND tlt2.vanha_otunnus IN ({$isa_tilaus['alkuperaiset_tilaukset']})";
        $query_result = pupe_query($query);

        // Jos yksikin tilaus jossa ei ole ker‰ttyj‰ rivej‰
        if (mysql_num_rows($query_result) > 0) {
          $komento = "";
        }
        else {

          $query = "SELECT GROUP_CONCAT(DISTINCT tilausrivi.otunnus ORDER BY tilausrivi.otunnus) otunnukset, GROUP_CONCAT(DISTINCT tilausrivi.tunnus ORDER BY tilausrivi.otunnus) tilausrivit
                    FROM tilausrivin_lisatiedot as tlt2
                    JOIN tilausrivi on (tilausrivi.tunnus = tlt2.tilausrivitunnus AND tilausrivi.tyyppi = 'L')
                    JOIN tuote ON (tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno and tuote.ei_saldoa = '')
                    WHERE tlt2.yhtio       = '{$kukarow['yhtio']}'
                    AND tlt2.ohita_kerays  = ''
                    AND tlt2.vanha_otunnus IN ({$isa_tilaus['alkuperaiset_tilaukset']})";
          $query_result = pupe_query($query);
          $otunnukset_row = mysql_fetch_assoc($query_result);

          $koontilahete = $otunnukset_row['otunnukset'];
          $koontilahete_tilausrivit = $otunnukset_row['tilausrivit'];
        }
      }
    }
    elseif (in_array($laskurow["keraysvahvistus_lahetys"], array('k', 'L', 'M')) or (in_array($yhtiorow["keraysvahvistus_lahetys"], array('k', 'L', 'M')) and $laskurow["keraysvahvistus_lahetys"] == '')) {

      $hakutunnus = ($laskurow["vanhatunnus"] > 0) ? $laskurow["vanhatunnus"] : $laskurow["tunnus"];

      // Onko kaikki rivit ker‰tty?
      $query = "SELECT lasku.tunnus
                FROM lasku
                JOIN tilausrivi use index (yhtio_otunnus) ON (tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus and tilausrivi.keratty = '' AND tilausrivi.tyyppi != 'D' AND tilausrivi.var not in ('P','J','O','S'))
                JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.ohita_kerays = '')
                JOIN tuote ON (tilausrivi.yhtio = tuote.yhtio and tilausrivi.tuoteno = tuote.tuoteno and tuote.ei_saldoa = '')
                WHERE lasku.yhtio     = '{$kukarow['yhtio']}'
                AND lasku.vanhatunnus = '{$hakutunnus}'";
      $vanhat_res = pupe_query($query);

      if (mysql_num_rows($vanhat_res) == 0) {
        // Kaikki rivit ker‰tty! Tulostetaan koontilahete
        $koontilahete = $hakutunnus;

        $query = "SELECT GROUP_CONCAT(DISTINCT tilausrivi.otunnus ORDER BY tilausrivi.otunnus) otunnukset, GROUP_CONCAT(DISTINCT tilausrivi.tunnus ORDER BY tilausrivi.otunnus) tilausrivit
                  FROM lasku
                  JOIN tilausrivi use index (yhtio_otunnus) ON (tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus AND tilausrivi.tyyppi != 'D')
                  WHERE lasku.yhtio     = '{$kukarow['yhtio']}'
                  AND lasku.vanhatunnus = '{$hakutunnus}'";
        $tilausrivit_res = pupe_query($query);
        $tilausrivit_row = mysql_fetch_assoc($tilausrivit_res);

        $koontilahete = $tilausrivit_row['otunnukset'];
        $koontilahete_tilausrivit = $tilausrivit_row['tilausrivit'];
      }
      else {
        // T‰ll‰ asiakkaalla on koontil‰heteprosessi p‰‰ll‰, mutta kaikki rivit ei oo viel‰ ker‰tty, joten ei tulosteta mitt‰‰n
        $komento = "";
      }
    }

    if ($koontilahete != 0 and $laskurow['email'] != "" and (($laskurow['keraysvahvistus_lahetys'] != "" and !in_array($laskurow['keraysvahvistus_lahetys'], array('L', 'Q'))) or ($laskurow['keraysvahvistus_lahetys'] == "" and $yhtiorow["keraysvahvistus_lahetys"] != "" and !in_array($yhtiorow["keraysvahvistus_lahetys"], array('L', 'Q'))))) {
      // Ker‰ysvahvistus/paperinen & s‰hkoinen l‰hete l‰hetet‰‰n asiakkaalle kun koko alkuper‰inen tilaus on ker‰tty
      if ($laskurow['keraysvahvistus_lahetys'] == 'M' or ($yhtiorow['keraysvahvistus_lahetys'] == 'M' and $laskurow['keraysvahvistus_lahetys'] == '')) {
        $komento = $komento != "" ? array($komento) : array();
        $komento[] = "asiakasemail".$laskurow['email'];
      }
      else {
        // Jos l‰hetet‰‰n s‰hkˆinen koontil‰hete, niin ei tulosteta paperille mith‰‰n
        $komento = "asiakasemail".$laskurow['email'];
      }
    }
    // Ker‰ysvahvistus/s‰hkoinen l‰hete l‰hetet‰‰n asiakkaalle jokaisesta toimituksesta erikseen
    elseif (($laskurow["keraysvahvistus_lahetys"] == 'o' or ($yhtiorow["keraysvahvistus_lahetys"] == 'o' and $laskurow["keraysvahvistus_lahetys"] == '')) and $laskurow['email'] != "") {
      // Jos l‰hetet‰‰n s‰hkˆinen ker‰ysvahvistus, niin tulostetaan myˆs paperille, eli pushataan arrayseen
      $komento = $komento != "" ? array($komento) : array();

      $komento[] = "asiakasemail".$laskurow['email'];
    }

    return array($komento, $koontilahete, $koontilahete_tilausrivit);
  }
}

if (!function_exists('triangulation')) {
  function triangulation($tunnukset) {
    global $kukarow, $yhtiorow;

    // Katsotaan onko kyseess‰ kolmikantakauppa
    $query = "SELECT lasku.tunnus, lasku.toim_maa
              FROM tilausrivi
              JOIN lasku AS las ON (las.yhtio = tilausrivi.yhtio AND las.tunnus = tilausrivi.otunnus AND las.toim_maa != '{$yhtiorow['maa']}')
              JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus)
              JOIN tilausrivi as t3 ON (t3.yhtio = tilausrivi.yhtio AND t3.tunnus = tilausrivin_lisatiedot.tilausrivilinkki AND t3.tyyppi = 'O')
              JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio AND lasku.tunnus = t3.otunnus AND lasku.maa != '{$yhtiorow['maa']}')
              WHERE tilausrivi.yhtio  = '{$kukarow['yhtio']}'
              AND tilausrivi.tyyppi   = 'L'
              AND tilausrivi.otunnus  IN ({$tunnukset})
              AND las.maa            != lasku.maa";
    $result = pupe_query($query);

    return mysql_num_rows($result) > 0 ? "VAT 0% Triangulation.\n" : "";
  }
}

if (!function_exists('tarkista_myynti_osto_liitos_ja_poista')) {
  function tarkista_myynti_osto_liitos_ja_poista($osto_rivitunnus, $poistetaanko_oikeasti) {
    global $kukarow;

    if (!empty($osto_rivitunnus)) {
      $query = "SELECT tilausrivin_lisatiedot.tilausrivitunnus
                FROM tilausrivin_lisatiedot
                JOIN tilausrivi ON tilausrivin_lisatiedot.yhtio=tilausrivi.yhtio and tilausrivin_lisatiedot.tilausrivitunnus=tilausrivi.tunnus
                WHERE tilausrivin_lisatiedot.yhtio          = '{$kukarow['yhtio']}'
                AND tilausrivin_lisatiedot.tilausrivilinkki = '{$osto_rivitunnus}'";
      $result = pupe_query($query);

      if ($tilausrivin_lisatiedot_row = mysql_fetch_assoc($result)) {
        // tilaukset on naitettu. poistetaan myynti jos ei ker‰tty, toimitettu tai laskutettu sek‰ osto
        $query = "SELECT *
                  FROM tilausrivi
                  WHERE yhtio        = '{$kukarow['yhtio']}'
                  AND tunnus         = '{$tilausrivin_lisatiedot_row['tilausrivitunnus']}'
                  AND tyyppi         = 'L'
                  AND kerattyaika    = '0000-00-00 00:00:00'
                  AND toimitettuaika = '0000-00-00 00:00:00'
                  AND laskutettuaika = '0000-00-00'";
        $result = pupe_query($query);

        if (mysql_num_rows($result) != 0) {
          if ($poistetaanko_oikeasti) {
            $query = "DELETE FROM tilausrivi
                      WHERE yhtio = '{$kukarow['yhtio']}'
                      AND tunnus  IN ('{$tilausrivin_lisatiedot_row['tilausrivitunnus']}', '{$osto_rivitunnus}')";
            pupe_query($query);

            $query = "DELETE FROM tilausrivin_lisatiedot
                      WHERE yhtio          = '{$kukarow['yhtio']}'
                      AND tilausrivilinkki = '{$osto_rivitunnus}'";
            pupe_query($query);
          }
          else {
            $query = "UPDATE tilausrivi
                      SET tyyppi = 'D'
                      WHERE yhtio = '{$kukarow['yhtio']}'
                      AND tunnus  IN ('{$tilausrivin_lisatiedot_row['tilausrivitunnus']}', '{$osto_rivitunnus}')";
            $result = pupe_query($query);
          }

          echo "<font class='error'>".t("Rivi poistettiin myˆs myyntitilaukselta")."</font><br/><br/>";
        }
        else {
          $query = "SELECT *
                    FROM tilausrivi
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '{$tilausrivin_lisatiedot_row['tilausrivitunnus']}'";
          $result = pupe_query($query);
          $myyntitilausrivi = mysql_fetch_assoc($result);

          if ($myyntitilausrivi['tyyppi'] == 'D') {
            echo "<font class='error'>".t("Myyntitilausrivi oli jo poistettu")."!</font><br/><br/>";
          }
          else {
            echo "<font class='error'>".t("Myyntitilausrivi on ker‰tty, toimitettu tai laskutettu")."!</font><br/><br/>";
          }
        }
      }
      else {
        if ($poistetaanko_oikeasti) {
          $query = "DELETE FROM tilausrivi
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  IN ('{$osto_rivitunnus}')";
        }
        else {
          //jos linkki‰ ei ole poistamme vain ostotilausrivin
          $query = "UPDATE tilausrivi
                    SET tyyppi = 'D'
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  IN ('{$osto_rivitunnus}')";
        }
        pupe_query($query);
      }
    }
  }
}

/**
 * HOW TO:
 * $rivit :
 * $rivit = array();
 * while ($rivi = mysql_fetch_assoc($result)) {
 *      $rivit[] = $rivi;
 * }
 *
 * OPTION 1:
 * $header_values: query column names as array keys
 * $header_values = array(
 * 'tuoteno' => t('Tuoteno'),
 * 'nimitys' => t('Tuotteen nimi'),
 * 'varaston_nimitys' => t('Varasto'),
 * );
 *
 * OPTION 2:
 * $header_values containing column names as array keys and header text and order as value
 *   $header_values = array(
 * 'tuoteno' => array(
 * 'header' => t('Tuoteno'),
 * 'order' => 0
 * ),
 * 'nimitys' => array(
 * 'header' => t('Tuotteen nimi'),
 * 'order' => 1
 * ),
 *  );
 *
 * $force_to_string: query column names that DO NOT need to be printed on excel as array values
 * $force_to_string = array(
 * 'tuoteno'
 * );
 *
 * $sulje_pois: ƒLƒ tulosta n‰it‰ kolumneja
 * $sulje_pois = array(
 *    'tuoteno',
 *    'nimitys',
 * );
 */
if (!function_exists('generoi_excel_tiedosto')) {
  function generoi_excel_tiedosto(&$rivit, $header_values = array(), $force_to_string = array(), $sulje_pois = array()) {
    require_once 'pupeExcel.inc';
    require_once 'ProgressBar.class.php';
    $xls = new pupeExcel();
    $rivi_numero = 0;
    $sarake_numero = 0;

    $_temp = search_array_key_recursive($header_values, 'order');
    if (!empty($_temp)) {
      _two_dimensional_array_sort_by_key($header_values, 'order');

      _xls_jarjestetty_headerit($xls, $rivit, $rivi_numero, $sarake_numero, $header_values, $sulje_pois);
      _xls_jarjestetty_rivit($xls, $rivit, $rivi_numero, $sarake_numero, $header_values, $force_to_string, $sulje_pois);
    }
    else {
      _xls_headerit($xls, $rivit, $rivi_numero, $sarake_numero, $header_values, $sulje_pois);
      _xls_rivit($xls, $rivit, $rivi_numero, $sarake_numero, $force_to_string, $sulje_pois);
    }

    $xls_tiedosto = $xls->close();

    return $xls_tiedosto;
  }
}

if (!function_exists('_xls_headerit')) {
  function _xls_headerit(pupeExcel &$xls, &$rivit, &$rivi_numero, &$sarake_numero, $header_values, $sulje_pois) {
    $style = array("bold" => TRUE);
    foreach ($rivit[0] as $column_name => $value) {
      if (!stristr($column_name, 'tunnus') and !in_array($column_name, $sulje_pois)) {
        if (array_key_exists($column_name, $header_values)) {
          _kirjoita_header_solu($xls, $header_values[$column_name], $rivi_numero, $sarake_numero, $style);
        }
        else {
          //fail safe
          _kirjoita_header_solu($xls, $column_name, $rivi_numero, $sarake_numero, $style);
        }
      }
    }
    $rivi_numero++;
    $sarake_numero = 0;
  }
}

if (!function_exists('_xls_jarjestetty_headerit')) {
  function _xls_jarjestetty_headerit(pupeExcel &$xls, &$rivit, &$rivi_numero, &$sarake_numero, $header_values, $sulje_pois) {
    $style = array("bold" => TRUE);
    foreach ($header_values as $column_name => $value) {
      if (!stristr($column_name, 'tunnus') and array_key_exists($column_name, $rivit[0]) and !in_array($column_name, $sulje_pois)) {
        _kirjoita_header_solu($xls, $value['header'], $rivi_numero, $sarake_numero, $style);
      }
    }

    $rivi_numero++;
    $sarake_numero = 0;
  }
}

if (!function_exists('_xls_rivit')) {
  function _xls_rivit(pupeExcel &$xls, &$rivit, &$rivi_numero, &$sarake_numero, $force_to_string = array(), $sulje_pois) {
    require_once 'ProgressBar.class.php';

    $xls_progress_bar = new ProgressBar(t("Tallennetaan exceliin"));
    $xls_progress_bar->initialize(count($rivit));

    foreach ($rivit as $rivi) {
      foreach ($rivi as $column_name => $solu) {
        if (!stristr($column_name, 'tunnus') and !in_array($column_name, $sulje_pois)) {
          _kirjoita_solu($xls, $column_name, $solu, $rivi_numero, $sarake_numero, $force_to_string);
        }
      }
      $rivi_numero++;
      $sarake_numero = 0;

      $xls_progress_bar->increase();
    }

    echo "<br/>";
  }
}

if (!function_exists('_xls_jarjestetty_rivit')) {
  function _xls_jarjestetty_rivit(pupeExcel &$xls, &$rivit, &$rivi_numero, &$sarake_numero, $header_values, $force_to_string, $sulje_pois) {
    if (php_sapi_name() != 'cli') {
      require_once 'ProgressBar.class.php';
      $xls_progress_bar = new ProgressBar(t("Tallennetaan exceliin"));
      $xls_progress_bar->initialize(count($rivit));
    }

    foreach ($rivit as $rivi) {
      foreach ($header_values as $column_name => $value) {
        if (!stristr($column_name, 'tunnus') and isset($rivi[$column_name]) and !in_array($column_name, $sulje_pois)) {
          _kirjoita_solu($xls, $column_name, $rivi[$column_name], $rivi_numero, $sarake_numero, $force_to_string);
        }
        elseif (!isset($rivi[$column_name])) {
          //jos aineisto on viallinen,
          //lis‰t‰‰n tyhj‰ solu jotta solujen j‰rjestys pysyy oikeana
          _kirjoita_solu($xls, $column_name, '', $rivi_numero, $sarake_numero, $force_to_string);
        }
      }
      $rivi_numero++;
      $sarake_numero = 0;

      if (isset($xls_progress_bar)) {
        $xls_progress_bar->increase();
      }
    }

    if (php_sapi_name() != 'cli') {
      echo "<br/>";
    }
  }
}

if (!function_exists('_kirjoita_solu')) {
  function _kirjoita_solu(&$xls, $key, $string, &$rivi, &$sarake, $force_to_string) {
    if (is_numeric($string) and !in_array($key, $force_to_string)) {
      $xls->writeNumber($rivi, $sarake, $string);
    }
    elseif (valid_date($string) != 0 and valid_date($string) !== false and !in_array($key, $force_to_string)) {
      $xls->writeDate($rivi, $sarake, $string);
    }
    else {
      $xls->write($rivi, $sarake, $string);
    }
    $sarake++;
  }
}

if (!function_exists('_kirjoita_header_solu')) {
  function _kirjoita_header_solu(&$xls, $string, &$rivi, &$sarake, $style = array()) {
    $xls->write($rivi, $sarake, $string, $style);
    $sarake++;
  }
}

if (!function_exists('valid_date')) {
  function valid_date($date) {
    //preg_match() returns 1 if the pattern matches given subject, 0 if it does not, or FALSE if an error occurred.
    return preg_match("/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/", $date);
  }
}

/**
 * WARNING:
 * array key "order" on varattujen key:ten listalle. ƒLƒ KƒYTƒ SITƒ.
 *
 * HOW TO:
 * $rivit :
 * $rivit = array();
 * while ($rivi = mysql_fetch_assoc($result)) {
 *      $rivit[] = $rivi;
 * }
 *
 * OPTION 1:
 * $header_values: query column names as array keys
 * $header_values = array(
 * 'tuoteno' => t('Tuoteno'),
 * 'nimitys' => t('Tuotteen nimi'),
 * 'varaston_nimitys' => t('Varasto'),
 * );
 *
 * OPTION 2:
 * $header_values containing column names as array keys and header text and order as value
 *   $header_values = array(
 * 'tuoteno' => array(
 * 'header' => t('Tuoteno'),
 * 'order' => 0
 * ),
 * 'nimitys' => array(
 * 'header' => t('Tuotteen nimi'),
 * 'order' => 1
 * ),
 *  );
 *
 * $force_to_string: query column names that DO NOT need to be printed on html dom as array values
 * $force_to_string = array(
 * 'tuoteno'
 * );
 */
if (!function_exists('echo_rows_in_table')) {
  function echo_rows_in_table(&$rivit, $header_values = array(), $force_to_string = array(), $callback = '') {
    echo "<table>";
    if (count($rivit) > 0) {
      $_temp = search_array_key_recursive($header_values, 'order');
      if (!empty($_temp)) {
        _two_dimensional_array_sort_by_key($header_values, 'order');

        _echo_ordered_table_headers($rivit[0], $header_values);
        _echo_ordered_table_rows($rivit, $header_values, $force_to_string, $callback);
      }
      else {
        _echo_table_headers($rivit[0], $header_values);
        _echo_table_rows($rivit, $force_to_string, $callback);
      }
    }
    else {
      echo "<tr><td>".t("Ei tulostettavia rivej‰")."</td></tr>";
    }
    echo "</table>";
  }
}

if (!function_exists('_echo_table_headers')) {
  function _echo_table_headers($rivi, $header_values) {
    echo "<tr>";
    foreach ($rivi as $header_text => $value) {
      if (!stristr($header_text, 'tunnus')) {
        if (array_key_exists($header_text, $header_values)) {
          echo "<th>{$header_values[$header_text]}</th>";
        }
        else {
          //fail safe
          echo "<th>{$header_text}</th>";
        }
      }
    }
    echo "</tr>";
  }
}

if (!function_exists('_echo_ordered_table_headers')) {
  function _echo_ordered_table_headers($rivi, $header_values) {
    echo "<tr>";
    foreach ($header_values as $column_name => $value) {
      if (!stristr($column_name, 'tunnus')) {
        if (array_key_exists($column_name, $rivi)) {
          echo "<th>{$value['header']}</th>";
        }
      }
    }
    echo "</tr>";
  }
}

if (!function_exists('_echo_table_rows')) {
  function _echo_table_rows(&$rivit, $force_to_string = array(), $callback = '') {
    foreach ($rivit as $rivi) {
      echo "<tr class='aktiivi'>";
      foreach ($rivi as $header => &$solu) {
        if ($callback == '') {
          _echo_table_row_td($header, $solu, $force_to_string);
        }
        else {
          //callback k‰ytet‰‰n jos halutaan defaultista poikkeava taulukko.
          if (function_exists($callback)) {
            $callback($header, $solu, $force_to_string);
          }
          else {
            //k‰ytet‰‰n defaulttia
            _echo_table_row_td($header, $solu, $force_to_string);
          }
        }
      }
      echo "</tr>";
    }
  }
}

if (!function_exists('_echo_table_row_td')) {
  function _echo_table_row_td($header, $solu, $force_to_string) {
    if (!stristr($header, 'tunnus')) {
      if (is_numeric($solu) and !ctype_digit($solu) and !in_array($header, $force_to_string)) {
        $solu = number_format($solu, 2);
      }
      echo "<td>{$solu}</td>";
    }
  }
}

if (!function_exists('_echo_ordered_table_rows')) {
  function _echo_ordered_table_rows(&$rivit, $header_values, $force_to_string = array(), $callback = '') {
    foreach ($rivit as $rivi) {
      echo "<tr class='aktiivi'>";
      foreach ($header_values as $column_name => $value) {
        if (array_key_exists($column_name, $rivi)) {
          if ($callback == '') {
            _echo_table_row_td($column_name, $rivi[$column_name], $force_to_string);
          }
          else {
            //callback k‰ytet‰‰n jos halutaan defaultista poikkeava taulukko.
            if (function_exists($callback)) {
              $callback($column_name, $rivi[$column_name], $force_to_string);
            }
            else {
              //k‰ytet‰‰n defaulttia
              _echo_table_row_td($column_name, $rivi[$column_name], $force_to_string);
            }
          }
        }
      }
      echo "</tr>";
    }
  }
}

if (!function_exists('echo_tallennus_formi')) {


  /**
   * Echoo formin, jonka avulla voidaan ladata tiedosto palvelimelta
   *
   * @param string  $xls_filename
   */
  function echo_tallennus_formi($xls_filename, $kaunisnimi) {
    echo "<form id='tallennus_form' method='post' class='multisubmit'>";
    echo "<table>";
    echo "<tr>";
    echo "<th>".t("Tallenna excel aineisto").":</th>";
    echo "<input type='hidden' name='tee' value='lataa_tiedosto'>";
    echo "<input type='hidden' name='lataa_tiedosto' value='1'>";
    echo "<input type='hidden' name='kaunisnimi' value='".t($kaunisnimi).".xlsx'>";
    echo "<input type='hidden' name='tmpfilenimi' value='{$xls_filename}'>";
    echo "<td class='back'><input type='submit' value='".t("Tallenna")."'></td>";
    echo "</tr>";
    echo "</table>";
    echo "</form>";
    echo "<br/>";
  }
}

if  (!function_exists('hae_chn_teksti')) {
  function hae_chn_teksti($chn, $kieli = '') {

    switch ($chn) {
    case '100':
      return t("Verkkolasku, tulostuspalvelu", $kieli);
    case '010':
      return t("Verkkolasku", $kieli);
    case '020':
      return t("Vienti-Verkkolasku (EU)", $kieli);
    case '030':
      return t("Vienti-Verkkolasku, tulostuspalvelu (EU)", $kieli);
    case '111':
      return t("Itella EDI: EIH-1.4 s‰hkˆinen lasku", $kieli);
    case '112':
      return t("Pupesoft-Finvoice: Verkkolasku Pupesoftista-Pupesoftiin", $kieli);
    case '666':
      return t("S‰hkˆposti", $kieli);
    case '667':
      return t("Paperilasku, tulostetaan manuaalisesti", $kieli);
    case '999':
      return t("Laskutuskielto, laskutusta ei tehd‰", $kieli);
    case '888':
      return t("Laskuta heti", $kieli)." (".t("sis‰inen", $kieli).")";
    default:
      return FALSE;
    }
  }
}

if  (!function_exists('verkkolaskuputkeen')) {
  function verkkolaskuputkeen($lasrow, $masrow, $info = FALSE) {
    global $yhtiorow;

    // T‰ss‰ pohditaan laitetaanko verkkolaskuputkeen...

    // Talenomiin laitetaan KAIKKI laskut (paitsi k‰teiskuitit)
    if ($yhtiorow["verkkolasku_lah"] == "talenom" and $masrow["kateinen"] == "") {
      if ($info) {
        echo t("Talenom-siirto");
      }
      return TRUE;
    }

    // Arvatoon laitetaan KAIKKI laskut (paitsi k‰teiskuitit)
    if ($yhtiorow["verkkolasku_lah"] == "arvato" and $masrow["kateinen"] == "") {
      if ($info) {
        echo t("Arvato-siirto");
      }
      return TRUE;
    }

    // Maksuehdon takaa voidaan s‰‰t‰‰, ett‰ laskut eiv‰t mene verkkolaskuputkeen
    if ($masrow["itsetulostus"] != "") {
      if ($info) {
        echo t("Itsetulostus maksuehto");
      }
      return FALSE;
    }

    // Sis‰iset laskut eiv‰t mene verkkolaskuputkeen
    if ($lasrow["sisainen"] != "") {
      if ($info) {
        echo t("Sis‰inen lasku");
      }
      return FALSE;
    }

    // K‰teislaskut eiv‰t mene verkkolaskuputkeen
    if ($masrow["kateinen"] != "") {
      if ($info) {
        echo t("K‰teiskuitti");
      }
      return FALSE;
    }

    // S‰hkˆposti-laskut eiv‰t mene verkkolaskuputkeen
    if ($lasrow["chn"] == '666') {
      if ($info) {
        echo t("Kanavointitieto: S‰hkˆposti");
      }
      return FALSE;
    }

    // 'chn-itsetulostus'-laskut eiv‰t mene verkkolaskuputkeen
    if ($lasrow["chn"] == '667') {
      if ($info) {
        echo t("Kanavointitieto: Paperilasku, tulostetaan manuaalisesti");
      }
      return FALSE;
    }

    // Nollasummalaskut eiv‰t mene verkkolaskuputkeen
    if (abs($lasrow["summa"]) == 0) {
      if ($info) {
        echo t("Nollasummainen lasku");
      }
      return FALSE;
    }

    // EU-viennit eiv‰t mene verkkolaskuputkeen, paitsi jos CHN tai verkkolasku_vienti sallii verkkolaskutuksen
    if ($lasrow["vienti"] == "E" and $yhtiorow['verkkolasku_vienti'] == "" and $lasrow["chn"] != "020" and $lasrow["chn"] != "030" and $lasrow["chn"] != "111") {
      if ($info) {
        echo t("EU-vienti‰");
      }
      return FALSE;
    }

    // EI-EU-viennit eiv‰t mene verkkolaskuputkeen, paitsi jos verkkolasku_vienti sallii verkkolaskutuksen
    if ($lasrow["vienti"] == "K" and $yhtiorow['verkkolasku_vienti'] != "K") {
      if ($info) {
        echo t("Vienti‰ EU:n ulkopuolelle");
      }
      return FALSE;
    }

    if ($info) {
      echo t("Kanavointitieto").": ".hae_chn_teksti($lasrow["chn"]);
    }
    return TRUE;
  }
}

// Sorttaa kaksiulotteisen arrayn annetun keyn perusteella
//esim
/**
 * $header_values = array(
 * 'tuoteno' => array(
 * 'header' => t('Tuoteno'),
 * 'order' => 0
 * ),
 * );
 */
if (!function_exists('_two_dimensional_array_sort_by_key')) {
  function _two_dimensional_array_sort_by_key(&$array, $key) {
    $_sorter = array();
    $_return_array = array();

    foreach ($array as $i => $value) {
      $_sorter[$i] = $value[$key];
    }

    asort($_sorter);

    foreach ($_sorter as $i => $value) {
      $_return_array[$i] = $array[$i];
    }

    $array = $_return_array;
  }
}

if (!function_exists('hae_maa')) {
  function hae_maa($params) {

    $maakoodi = !empty($params['maakoodi']) ? $params['maakoodi'] : '';

    if ($maakoodi == '') return array();

    $maan_tiedot = array();

    $query = "SELECT *
              FROM maat
              WHERE koodi = '{$maakoodi}'
              LIMIT 1";
    $maa_res = pupe_query($query);
    $maa_row = mysql_fetch_assoc($maa_res);

    $maan_tiedot['nimi'] = $maa_row['name'] != '' ? $maa_row['name'] : $maa_row['koodi'];
    $maan_tiedot['nimi'] = strtoupper($maan_tiedot['nimi']);

    return $maan_tiedot;
  }
}

if (!function_exists('search_array_key_recursive')) {


  /**
   * Palauttaa kaikki $key mukaiset alkiot
   *
   * @param array   $array haystack
   * @param string  $key   etsitt‰v‰ key
   * @return array
   */
  function search_array_key_recursive($array, $key) {
    $results = array();

    if (is_array($array)) {
      if (isset($array[$key])) {
        $results[] = $array[$key];
      }

      foreach ($array as $subarray) {
        $results = array_merge($results, search_array_key_recursive($subarray, $key));
      }
    }

    return $results;
  }
}

if (!function_exists('search_array_min_with_key')) {
  // Etsii ja palauttaa kaksiulotteisesta arrayst‰ elementin, jossa on pienin arvo annetussa "key" avaimessa
  function search_array_min_with_key($array, $key) {
    $min_array = array_shift($array);
    $min_value = $min_array[$key];

    foreach($array as $a) {
      if ($a[$key] < $min_value) {
        $min_value = $a[$key];
        $min_array = $a;
      }
    }

    return $min_array;
  }
}

/**
 * Tarkistaa onko tilauksen tila muuttunut
 *
 * Jos tila on vaihtunut, nollataan k‰ytt‰j‰n keskener‰inen tilaus.
 */
if (!function_exists('tarkista_tilauksen_tila')) {
  function tarkista_tilauksen_tila($tilausnumero, $alkup_tila, $alkup_alatila) {
    global $kukarow;

    // Tyhj‰t tilat, todenn‰kˆisesti tultu eri ohjelmasta ja ei tarkisteta tiloja
    if ($alkup_tila == '' and $alkup_alatila == '') {
      return true;
    }

    // Tarkistetaan ett‰ tilaus on samassa tilassa jossa se oli kun se klikattiin auki muokkaatilaus-ohjelmassa
    $query = "SELECT tila, alatila
              FROM lasku
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '$tilausnumero'
              AND tila    = '$alkup_tila'
              AND alatila = '$alkup_alatila'";
    $result = pupe_query($query);

    // Jos resulttia ei lˆydy on tilauksen tila vaihtunut
    if (mysql_num_rows($result) != 1) {

      // Poistetaan aktiiviset tilaukset joita t‰ll‰ k‰ytt‰j‰ll‰ oli
      $query = "UPDATE kuka SET kesken='' WHERE yhtio='{$kukarow['yhtio']}' AND kuka='{$kukarow['kuka']}'";
      $result = pupe_query($query);

      // Tilausta ei voida aktivoida
      return false;
    }

    // Tila ei ole muuttunut
    return true;
  }
}

/**
 * Aktivoi tilaus
 *
 * Palauttaa truen jos tilausnumero on aktivoitu k‰ytt‰j‰lle ja asettaa tilausnumeron k‰ytt‰j‰lle kesken
 * Palauttaa false jos tilausnumero on kesken jollain toisella k‰ytt‰j‰ll‰
 */
if (!function_exists('aktivoi_tilaus')) {
  function aktivoi_tilaus($tilausnumero, $session, $alkup_tila = '', $alkup_alatila = '') {
    global $kukarow;

    $tilausnumero = (int) $tilausnumero;

    // Tarkistetaan ett‰ tilauksen tila ei ole muuttunut
    if ($tilausnumero > 0 and !tarkista_tilauksen_tila($tilausnumero, $alkup_tila, $alkup_alatila)) {
      echo "<font class='error'>" . t("Tilauksen tila on vaihtunut. Ole hyv‰ ja avaa tilaus uudestaan") . "</font><br>";
      exit();
    }

    // Katsotaan ett‰ tilaus ei ole kell‰‰n toisella k‰ytt‰j‰ll‰ aktiivisena
    $query = "SELECT *
              FROM kuka
              WHERE yhtio  = '$kukarow[yhtio]'
              AND kesken   = $tilausnumero
              AND kesken  != 0
              AND kuka    != '{$kukarow['kuka']}'";
    $result = pupe_query($query);

    // Jos lˆytyy osuma
    if (mysql_num_rows($result) != 0) {
      $row = mysql_fetch_assoc($result);
    }

    // Jos result palautti jotain ja se ei ole nykyinen k‰ytt‰j‰
    if (isset($row) and $row['kuka'] != $kukarow['kuka']) {
      // Poistetaan aktiiviset tilaukset joita t‰ll‰ k‰ytt‰j‰ll‰ oli
      $query = "UPDATE kuka SET
                kesken      = ''
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND kuka    = '{$kukarow['kuka']}'";
      $result = pupe_query($query);

      // Tilaus kesken jollain toisella k‰ytt‰j‰ll‰
      return false;
    }
    else {
      // P‰ivitet‰‰n nykyiselle k‰ytt‰jlle tilausnumero keskener‰iseksi
      $query = "UPDATE kuka SET
                kesken      = $tilausnumero
                WHERE yhtio = '$kukarow[yhtio]'
                AND kuka    = '$kukarow[kuka]'
                AND session = '$session'";
      $result = pupe_query($query);

      $kukarow['kesken'] = $tilausnumero;

      // Tilaus aktivoitu k‰ytt‰j‰lle
      return true;
    }
  }
}

/**
 * HOW TO:
 * $holidays = array(
 *     "2008-12-25",
 *     "2008-12-26",
 *     "2009-01-01"
 * );
 *
 * $tyopaivien_lukumaara = hae_tyopaivien_lukumaara('2012-01-01', '2012-01-31', $holidays);
 *
 */
//The function returns the no. of business days between two dates and it skips the holidays
if (!function_exists('hae_tyopaivien_lukumaara')) {

  function hae_tyopaivien_lukumaara($alku_aika, $loppu_aika, $lomat = array()) {
    if (!empty($alku_aika) and !empty($loppu_aika)) {
      // do strtotime calculations just once
      $loppu_aika = strtotime($loppu_aika);
      $alku_aika = strtotime($alku_aika);


      //The total number of days between the two dates. We compute the no. of seconds and divide it to 60*60*24
      //We add one to inlude both dates in the interval.
      $paivat = ($loppu_aika - $alku_aika) / 86400 + 1;

      $taysien_viikkojen_lkm = floor($paivat / 7);
      $jaljella_olevien_paivien_lkm = fmod($paivat, 7);

      //It will return 1 if it's Monday,.. ,7 for Sunday
      $viikon_ensimmainen_paiva = date("N", $alku_aika);
      $viikon_viimeinen_paiva = date("N", $loppu_aika);

      //---->The two can be equal in leap years when february has 29 days, the equal sign is added here
      //In the first case the whole interval is within a week, in the second case the interval falls in two weeks.
      if ($viikon_ensimmainen_paiva <= $viikon_viimeinen_paiva) {
        if ($viikon_ensimmainen_paiva <= 6 && 6 <= $viikon_viimeinen_paiva)
          $jaljella_olevien_paivien_lkm--;
        if ($viikon_ensimmainen_paiva <= 7 && 7 <= $viikon_viimeinen_paiva)
          $jaljella_olevien_paivien_lkm--;
      }
      else {
        // (edit by Tokes to fix an edge case where the start day was a Sunday
        // and the end day was NOT a Saturday)
        // the day of the week for start is later than the day of the week for end
        if ($viikon_ensimmainen_paiva == 7) {
          // if the start date is a Sunday, then we definitely subtract 1 day
          $jaljella_olevien_paivien_lkm--;

          if ($viikon_viimeinen_paiva == 6) {
            // if the end date is a Saturday, then we subtract another day
            $jaljella_olevien_paivien_lkm--;
          }
        }
        else {
          // the start date was a Saturday (or earlier), and the end date was (Mon..Fri)
          // so we skip an entire weekend and subtract 2 days
          $jaljella_olevien_paivien_lkm -= 2;
        }
      }

      //The no. of business days is: (number of weeks between the two dates) * (5 working days) + the remainder
      //---->february in none leap years gave a remainder of 0 but still calculated weekends between first and last day, this is one way to fix it
      $tyo_paivat = $taysien_viikkojen_lkm * 5;
      if ($jaljella_olevien_paivien_lkm > 0) {
        $tyo_paivat += $jaljella_olevien_paivien_lkm;
      }

      //We subtract the holidays
      foreach ($lomat as $holiday) {
        $time_stamp = strtotime($holiday);
        //If the holiday doesn't fall in weekend
        if ($alku_aika <= $time_stamp && $time_stamp <= $loppu_aika && date("N", $time_stamp) != 6 && date("N", $time_stamp) != 7)
          $tyo_paivat--;
      }
    }
    return $tyo_paivat;
  }
}

// etsii halutun array keyn arraysta jonka arvo t‰sm‰‰ valuen kanssa ja palauttaa kyseisen keyn parentit arrayssa
// esim voit etsi‰ funktiolla order ja funktio palauttaa kaikki ensimm‰isen tason (tuoteno) arrayt jos order lˆytyy
/**
 * $tilikaudet = array(
 *    0 => array(
 *      'tunnus' => 94,
 *      'nimi' => 'Eka'
 *    ),
 *    1 => array(
 *      'tunnus' => 95,
 *      'nimi' => 'Toka'
 *    ),
 * );
 *
 * $halutut_tilikaudet = search_array_key_for_value_recursive($tilikaudet, 'tunnus', 94);
 *
 * @TODO: T‰n vois mergett‰‰ search_array_key_recursive funktion kanssa ja refaktoroida koodin.
 *
 */
if (!function_exists('search_array_key_for_value_recursive')) {
  function search_array_key_for_value_recursive($array, $key, $value) {
    $results = array();

    if (is_array($array)) {
      if (isset($array[$key]) and $array[$key] == $value) {
        $results[] = $array;
      }

      foreach ($array as $subarray) {
        $results = array_merge($results, search_array_key_for_value_recursive($subarray, $key, $value));
      }
    }

    return $results;
  }
}

if (!function_exists('pupesoft_lisaa_valmisteen_rekursiiviset_reseptit')) {
  function pupesoft_lisaa_valmisteen_rekursiiviset_reseptit() {
    global $kukarow, $yhtiorow, $tuoteno_array, $riikoko, $kpl_array, $kommentti_array, $lapsenlap_array;

    $kommentti_array = array();
    $lapsenlap_array = array();
    $riikoko = count($tuoteno_array);

    for ($rii=0; $rii < $riikoko; $rii++) {
      rekursiivinen_resepti($tuoteno_array[$rii], $kpl_array[$tuoteno_array[$rii]]);
    }
  }
}

if (!function_exists('rekursiivinen_resepti')) {
  function rekursiivinen_resepti($pertuoteno, $perkpl) {
    global $kukarow, $yhtiorow, $tuoteno_array, $riikoko, $kpl_array, $kommentti_array, $lapsenlap_array;

    $query = "SELECT tuoteno, kerroin
              FROM tuoteperhe
              WHERE isatuoteno = '$pertuoteno'
              and yhtio        = '$kukarow[yhtio]'
              and tyyppi       = 'R'
              ORDER by tuoteno";
    $perheresult = pupe_query($query);

    if (mysql_num_rows($perheresult) > 0) {
      while ($perherow = mysql_fetch_assoc($perheresult)) {
        $query = "SELECT distinct isatuoteno
                  FROM tuoteperhe
                  WHERE isatuoteno = '$perherow[tuoteno]'
                  and yhtio        = '$kukarow[yhtio]'
                  and tyyppi       = 'R'
                  ORDER by tuoteno";
        $perheresult2 = pupe_query($query);

        if (mysql_num_rows($perheresult2) > 0) {

          //T‰t‰ tuoteperhett‰ halutaan myyd‰
          if (!in_array(strtoupper($perherow["tuoteno"]), $tuoteno_array)) {

            $lt = strtoupper($perherow["tuoteno"]);

            $tuoteno_array[]    = $lt; // lis‰t‰‰n tuoteno arrayseen
            $kpl_array[$lt]      = round($perkpl * $perherow["kerroin"], 2);
            $kommentti_array[$lt]   = "Valmista $pertuoteno:n raaka-aineeksi $kpl_array[$lt] kappaletta.";
            $lapsenlap_array[$lt]   = $lt;
            $riikoko++;
          }
          else {
            $lt = strtoupper($perherow["tuoteno"]);

            $kpl_array[$lt]       += round($perkpl * $perherow["kerroin"], 2);
            $kommentti_array[$lt]  .= "<br>Valmista $pertuoteno:n raaka-aineeksi ".round($perkpl * $perherow["kerroin"], 2)." kappaletta.";
          }
        }
      }
    }
  }
}

if (!function_exists('hae_lasku')) {
  function hae_lasku($tilausnumero) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM lasku
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND tunnus   = '{$tilausnumero}'
              AND tila    != 'D'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('hae_laskun_tilausrivit')) {
  function hae_laskun_tilausrivit($otunnus, $tyypit = array(), $sorttauskentta = "", $sorttaussuunta = "") {
    global $kukarow, $yhtiorow;

    if (!empty($tyypit)) {
      $tilausrivi_where = " AND tilausrivi.tyyppi IN ('".implode("','", $tyypit)."') ";
    }
    else {
      $tilausrivi_where = " AND tilausrivi.tyyppi != 'D' ";
    }

    if ($sorttauskentta == "") $sorttauskentta = generoi_sorttauskentta($yhtiorow["tilauksen_jarjestys"]);

    $ta_lisa_join = in_array('O', $tyypit) ? "LEFT JOIN tuotteen_avainsanat AS ta ON (ta.yhtio = tilausrivi.yhtio AND ta.tuoteno = tilausrivi.tuoteno AND ta.laji = 'ei_edi_ostotilaukseen')" : "";
    $ta_lisa_where = $ta_lisa_join != "" ? "AND ta.tunnus IS NULL" : "";

    $query = "SELECT tilausrivi.*,
              tilausrivin_lisatiedot.rekisterinumero,
              $sorttauskentta
              FROM tilausrivi
              LEFT JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus)
              {$ta_lisa_join}
              WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus = '{$otunnus}'
              {$ta_lisa_where}
              {$tilausrivi_where}
              ORDER BY sorttauskentta {$sorttaussuunta}, tilausrivi.tunnus";
    $result = pupe_query($query);
    $tilausrivit = array();

    while ($tilausrivi = mysql_fetch_assoc($result)) {
      $tilausrivit[] = $tilausrivi;
    }

    return $tilausrivit;
  }
}

if (!function_exists('hae_tuote')) {


  /**
   * Hakee tuotteen
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param string  $tuoteno
   * @return array
   */
  function hae_tuote($tuoteno) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM tuote
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tuoteno = '{$tuoteno}'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('tarkista_osuuko_myyntitilaus_kampanjaan')) {


  /**
   * Tarkistaa osuuko myyntitilauksen tilausrivit mihink‰‰n kampanjaan ja jos osuu niin lis‰‰ kampanjan palkitorivit myyntitilaukselle
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $tilausnumero
   */
  function tarkista_osuuko_myyntitilaus_kampanjaan($tilausnumero) {
    global $kukarow, $yhtiorow;

    if (@include "tilauskasittely/luo_myyntitilausotsikko.inc");
    elseif (@include "luo_myyntitilausotsikko.inc");
    else exit;

    $kampanjat = hae_kampanjat();

    if (empty($kampanjat)) {
      return false;
    }

    $lisattavat_tuotteet = array();

    foreach ($kampanjat as $kampanja) {

      foreach ($kampanja['kampanja_ehdot'] as $kampanja_ehto) {

        $onko_kampanja_ok = tarkista_kampanja_ehto($tilausnumero, $kampanja_ehto);

        if ($onko_kampanja_ok === false) {
          continue 2;
        }
      }

      //loopataan kampanjan palkinnot l‰pi koska muuten tulee yksi ylim‰‰r‰inen array lisattavat_tuotteet muuttujaan
      foreach ($kampanja['kampanja_palkinnot'] as $kampanja_palkinto) {
        $lisattavat_tuotteet[] = $kampanja_palkinto;
      }
    }

    foreach ($lisattavat_tuotteet as $lisattava_tuote) {
      $haettu_tuote = hae_tuote($lisattava_tuote['tuoteno']);

      $parametrit = array(
        'trow'     => $haettu_tuote,
        'laskurow'   => hae_lasku($tilausnumero),
        'kpl'     => $lisattava_tuote['kpl'],
        'hinta'     => $haettu_tuote['myyntihinta'],
        'ale1'     => 100,
        'tuoteno'   => $lisattava_tuote['tuoteno'],
      );

      lisaa_rivi($parametrit);
    }
  }
}

if (!function_exists('tarkista_kampanja_ehto')) {


  /**
   * Tarkistaa osuuko tilaus kampanjan yhteen ehtoon
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $tilausnumero
   * @param array   $kampanja_ehto
   * @return boolean
   */
  function tarkista_kampanja_ehto($tilausnumero, $kampanja_ehto) {
    global $kukarow, $yhtiorow;

    //kampanjoiden ehtojen ja aliehtojen rajoittimet pit‰‰ konvertoida, jotta niit‰ voidaan k‰ytt‰‰ suoraan queryiss‰
    $kampanja_ehto['rajoitin'] = konvertoi_rajoitin($kampanja_ehto['rajoitin']);

    $group_by = "";

    switch ($kampanja_ehto['kohde']) {
    case 'asiakas':
      $asiakas_ehto = " AND asiakas.tunnus {$kampanja_ehto['rajoitin']} {$kampanja_ehto['arvo']}";
      $ehto_rajaus = "JOIN asiakas ON (asiakas.yhtio = lasku.yhtio and asiakas.tunnus = lasku.liitostunnus {$asiakas_ehto})";
      break;

    case 'asiakas_ytunnus':
      $asiakas_ehto = " AND asiakas.ytunnus {$kampanja_ehto['rajoitin']} '{$kampanja_ehto['arvo']}'";
      $ehto_rajaus = "JOIN asiakas ON (asiakas.yhtio = lasku.yhtio and asiakas.tunnus = lasku.liitostunnus {$asiakas_ehto})";
      break;

    case 'asiakaskategoria':
      $query = "SELECT liitostunnus
                FROM lasku
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$tilausnumero}'";
      $result = pupe_query($query);

      while ($lasku = mysql_fetch_assoc($result)) {

        $query = "SELECT group_concat(parent.tunnus) tunnukset
                  FROM puun_alkio
                  JOIN dynaaminen_puu AS node ON (puun_alkio.yhtio = node.yhtio and puun_alkio.laji = node.laji and puun_alkio.puun_tunnus = node.tunnus)
                  JOIN dynaaminen_puu AS parent ON (parent.yhtio = node.yhtio AND parent.laji = node.laji AND parent.lft <= node.lft AND parent.rgt >= node.lft AND parent.lft > 0)
                  WHERE puun_alkio.yhtio = '$kukarow[yhtio]'
                  AND puun_alkio.laji    = 'ASIAKAS'
                  AND puun_alkio.liitos  = '{$lasku['liitostunnus']}'";
        $result2 = pupe_query($query);

        $puun_tunnukset = mysql_fetch_assoc($result2);
        $puun_tunnukset = explode(',', $puun_tunnukset['tunnukset']);

        if (in_array($kampanja_ehto['arvo'], $puun_tunnukset)) {
          //tilauksen asiakas on kampanjan ehdon asiakaskategoriassa
          return true;
        }
      }
      return false;
      break;

    case 'tuote':
      $having_ehdot = populoi_aliehto_having($kampanja_ehto['aliehdot']);
      $tuote_ehto .= " AND tilausrivi.tuoteno {$kampanja_ehto['rajoitin']} '{$kampanja_ehto['arvo']}'";
      $group_by = "GROUP BY tilausrivi.tuoteno";
      break;

    case 'tuotekategoria':

      $having_ehdot = "";

      if (!empty($kampanja_ehto['aliehdot'])) {
        $having_ehdot = populoi_aliehto_having($kampanja_ehto['aliehdot']);
      }

      $query = "SELECT group_concat(DISTINCT concat('\'', t2.tuoteno, '\'')) tuotteet
                FROM dynaaminen_puu AS node
                JOIN dynaaminen_puu AS child ON (child.yhtio = node.yhtio
                  AND child.laji             = node.laji
                  AND child.lft              >= node.lft
                  AND child.rgt              <= node.rgt)
                JOIN puun_alkio ON (puun_alkio.yhtio = child.yhtio
                  AND puun_alkio.laji        = child.laji
                  AND puun_alkio.puun_tunnus = child.tunnus)
                JOIN tilausrivi as t2 ON (t2.yhtio = puun_alkio.yhtio
                  AND t2.tuoteno             = puun_alkio.liitos
                  AND t2.otunnus             = {$tilausnumero})
                WHERE  node.yhtio            = '{$kukarow['yhtio']}'
                AND node.tunnus              = {$kampanja_ehto['arvo']}";
      $result = pupe_query($query);

      $row = mysql_fetch_assoc($result);

      if ($row['tuotteet'] === NULL) {
        return false;
      }

      $tuote_ehto = " AND tilausrivi.tuoteno IN ({$row['tuotteet']})";

      break;

    case 'tuoteosasto':
      $having_ehdot = populoi_aliehto_having($kampanja_ehto['aliehdot']);
      $ehto_rajaus = "JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.osasto {$kampanja_ehto['rajoitin']} '{$kampanja_ehto['arvo']}')";
      $group_by = "GROUP BY tuote.osasto";
      break;

    case 'tuoteryhma':
      $having_ehdot = populoi_aliehto_having($kampanja_ehto['aliehdot']);
      $ehto_rajaus = "JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.try {$kampanja_ehto['rajoitin']} '{$kampanja_ehto['arvo']}')";
      $group_by = "GROUP BY tuote.try";
      break;

    case 'kappaleet':
      $having_ehdot = "HAVING kpl {$kampanja_ehto['rajoitin']} {$kampanja_ehto['arvo']}";
      break;

    case 'arvo':
      $having_ehdot = "HAVING arvo {$kampanja_ehto['rajoitin']} {$kampanja_ehto['arvo']}";
      break;

    default:
      echo "Rikki meni";
      return false;
      break;
    }

    $query = "SELECT lasku.tunnus,
              sum(tilausrivi.varattu + tilausrivi.jt) AS kpl,
              sum(tilausrivi.hinta * (tilausrivi.varattu + tilausrivi.jt)) AS arvo
              FROM lasku
              JOIN tilausrivi ON (tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus {$tuote_ehto})
              {$ehto_rajaus}
              WHERE lasku.yhtio = '{$kukarow['yhtio']}'
              AND lasku.tunnus  = {$tilausnumero}
              AND lasku.tila    = 'N'
              AND lasku.alatila = ''
              GROUP BY lasku.tunnus
              {$having_ehdot}";
    $result = pupe_query($query);
    $row = mysql_fetch_assoc($result);

    if ($row['tunnus'] === NULL) {
      return false;
    }

    return true;
  }
}

if (!function_exists('populoi_aliehto_having')) {


  /**
   * Palauttaa tilauksen mappaamisessa kampanjoihin k‰ytett‰v‰n aliehto HAVING:in
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param array   $aliehdot
   * @return string
   */
  function populoi_aliehto_having($aliehdot) {
    global $kukarow, $yhtiorow;

    $having_ehdot = "";
    if (!empty($aliehdot)) {
      $having_ehdot = "HAVING";

      foreach ($aliehdot as $aliehto) {
        $aliehto['rajoitin'] = konvertoi_rajoitin($aliehto['rajoitin']);

        if ($aliehto['kohde'] == 'arvo') {
          $having_ehdot .= " arvo {$aliehto['rajoitin']} {$aliehto['arvo']}";
        }
        elseif ($aliehto['kohde'] == 'kappaleet') {
          $having_ehdot .= " kpl {$aliehto['rajoitin']} {$aliehto['arvo']}";
        }
        else {
          echo "Rikki meni";
          return '';
        }

        $having_ehdot .= " AND";
      }
      $having_ehdot = substr($having_ehdot, 0, -3);
    }

    return $having_ehdot;
  }
}

if (!function_exists('hae_kampanjat')) {


  /**
   *   Hakee kaikki kampanjat ja niiden ehdot, aliehdot sek‰ palkintorivit
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @return array $kampanjat
   */
  function hae_kampanjat() {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM kampanjat
              WHERE yhtio = '{$kukarow['yhtio']}'";
    $result = pupe_query($query);

    $kampanjat = array();

    while ($kampanja = mysql_fetch_assoc($result)) {
      $kampanja['kampanja_ehdot'] = hae_kampanjan_ehdot($kampanja['tunnus']);
      $kampanja['kampanja_palkinnot'] = hae_kampanjan_palkinnot($kampanja['tunnus']);
      $kampanjat[] = $kampanja;
    }

    return $kampanjat;
  }
}

if (!function_exists('hae_kampanjan_ehdot')) {


  /**
   * Hakee kampanjan ehdot, aliehdot sek‰ ehtojen kohde resurssit
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $kampanja_tunnus
   * @return array $kampanja_ehdot
   */
  function hae_kampanjan_ehdot($kampanja_tunnus) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM kampanja_ehdot
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND kampanja = '{$kampanja_tunnus}'";
    $result = pupe_query($query);

    $kampanja_ehdot = array();

    while ($kampanja_ehto = mysql_fetch_assoc($result)) {
      $kampanja_ehto['resurssi'] = hae_ehdon_tai_aliehdon_kohteen_resurssi($kampanja_ehto);
      $kampanja_ehto['aliehdot'] = hae_kampanja_ehdon_aliehdot($kampanja_ehto['tunnus']);
      $kampanja_ehdot[] = $kampanja_ehto;
    }

    return $kampanja_ehdot;
  }
}

if (!function_exists('hae_kampanja_ehdon_aliehdot')) {


  /**
   * Hakee kampanjan ehdon aliehdot
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $kampanja_ehto_tunnus
   * @return array $kampanja_aliehdot
   */
  function hae_kampanja_ehdon_aliehdot($kampanja_ehto_tunnus) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM kampanja_ehdot
              WHERE yhtio   = '{$kukarow['yhtio']}'
              AND isatunnus = '{$kampanja_ehto_tunnus}'";
    $result = pupe_query($query);

    $kampanja_aliehdot = array();

    while ($kampanja_aliehto = mysql_fetch_assoc($result)) {
      $kampanja_aliehto['resurssi'] = hae_ehdon_tai_aliehdon_kohteen_resurssi($kampanja_aliehto);
      $kampanja_aliehdot[] = $kampanja_aliehto;
    }

    return $kampanja_aliehdot;
  }
}

if (!function_exists('hae_ehdon_tai_aliehdon_kohteen_resurssi')) {


  /**
   * Hakee ehdon tai aliehdon kohteen resurssin. Eli jos kohde on tuote niin funktio palauttaa kohteen arvon m‰‰r‰‰m‰n tuotteen.
   * Resurssia k‰ytet‰‰n kampanjan muokkaus n‰kym‰ss‰. Inputin yl‰puolella selkokielinen teksti.
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param array   $ehto
   * @return array
   */
  function hae_ehdon_tai_aliehdon_kohteen_resurssi($ehto) {
    global $kukarow, $yhtiorow;

    //Jokaiselle resurssille annetaan info sarake, jotta kampanjan muokkaus n‰kym‰ss‰ voidaan n‰ytt‰‰ inputin yl‰puolella selkokielisen‰ valittu arvo
    switch ($ehto['kohde']) {
    case 'asiakas':
      $query = "SELECT asiakas.*,
                concat_ws(' - ', asiakas.nimi, asiakas.ytunnus, asiakas.asiakasnro) as info
                FROM asiakas
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$ehto['arvo']}'";
      break;
    case 'asiakas_ytunnus':
      $query = "SELECT asiakas.*,
                concat_ws(' - ', asiakas.nimi, asiakas.ytunnus, asiakas.asiakasnro) as info
                FROM asiakas
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND ytunnus = '{$ehto['arvo']}'";
      break;
    case 'asiakaskategoria':
      $query = "SELECT dynaaminen_puu.*,
                group_concat(parent.nimi SEPARATOR ' &raquo; ') polku,
                dynaaminen_puu.nimi as info
                FROM dynaaminen_puu
                JOIN dynaaminen_puu AS parent
                ON ( parent.yhtio = dynaaminen_puu.yhtio
                  AND parent.laji           = dynaaminen_puu.laji
                  AND parent.lft            <= dynaaminen_puu.lft
                  AND parent.rgt            >= dynaaminen_puu.lft
                  AND parent.lft            > 0
                  AND parent.syvyys        != 0 )
                WHERE dynaaminen_puu.yhtio  = '{$kukarow['yhtio']}'
                AND dynaaminen_puu.laji     = 'Asiakas'
                AND dynaaminen_puu.tunnus   = '{$ehto['arvo']}'";
      break;
    case 'tuote':
      $query = "SELECT tuote.*,
                tuote.nimitys as info
                FROM tuote
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tuoteno = '{$ehto['arvo']}'";
      break;
    case 'tuotekategoria':
      $query = "SELECT dynaaminen_puu.*,
                group_concat(parent.nimi SEPARATOR ' &raquo; ') polku,
                dynaaminen_puu.nimi as info
                FROM dynaaminen_puu
                JOIN dynaaminen_puu AS parent
                ON ( parent.yhtio = dynaaminen_puu.yhtio
                  AND parent.laji           = dynaaminen_puu.laji
                  AND parent.lft            <= dynaaminen_puu.lft
                  AND parent.rgt            >= dynaaminen_puu.lft
                  AND parent.lft            > 0
                  AND parent.syvyys        != 0 )
                WHERE dynaaminen_puu.yhtio  = '{$kukarow['yhtio']}'
                AND dynaaminen_puu.laji     = 'Tuote'
                AND dynaaminen_puu.tunnus   = '{$ehto['arvo']}'";
      break;
    case 'tuoteosasto':
      $query = "SELECT avainsana.*,
                avainsana.selitetark as info
                FROM avainsana
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND laji    = 'OSASTO'
                AND selite  = '{$ehto['arvo']}'";
      break;
    case 'tuoteryhma':
      $query = "SELECT avainsana.*,
                avainsana.selitetark as info
                FROM avainsana
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND laji    = 'TRY'
                AND selite  = '{$ehto['arvo']}'";
      break;
    case 'kappaleet':
      return false;
      break;
    case 'arvo':
      return false;
      break;
    default:
      return false;
      break;
    }

    $result = pupe_query($query);

    $resurssi = mysql_fetch_assoc($result);

    if ($ehto['kohde'] == 'asiakaskategoria' or $ehto['kohde'] == 'tuotekategoria') {
      $resurssi['info'] = $resurssi['polku'] . ' &raquo; ' . $resurssi['info'];
    }
    return $resurssi;
  }
}

if (!function_exists('hae_kampanjan_palkinnot')) {


  /**
   * Hakee kampanjan palkintorivit
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $kampanja_tunnus
   * @return array $kampanja_palkinnot
   */
  function hae_kampanjan_palkinnot($kampanja_tunnus) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM kampanja_palkinnot
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND kampanja = '{$kampanja_tunnus}'";
    $result = pupe_query($query);

    $kampanja_palkinnot = array();

    while ($kampanja_palkinto = mysql_fetch_assoc($result)) {
      $kampanja_palkinnot[] = $kampanja_palkinto;
    }

    return $kampanja_palkinnot;
  }
}

if (!function_exists('konvertoi_rajoitin')) {
  function konvertoi_rajoitin($rajoitin) {
    switch ($rajoitin) {
    case 'on':
      return "=";
    case 'ei_ole':
      return "!=";
    case 'suurempi_kuin':
      return ">";
    case 'pienempi_kuin':
      return "<";
    default:
      return "=";
    }
  }
}

if (!function_exists('onko_rahtituote_syotetty')) {
  function onko_rahtituote_syotetty($laskurow, $whateverhinta = FALSE) {
    global $kukarow, $yhtiorow;

    // Palautetaan Rahti-tuoterivien lukum??r?tilausvalmis
    $query = "SELECT *
              FROM toimitustapa
              WHERE yhtio = '$kukarow[yhtio]'
              AND selite  = '$laskurow[toimitustapa]'";
    $result = pupe_query($query);
    $torow = mysql_fetch_assoc($result);

    $rahtinro_tuoteno_lisa = trim($torow['rahti_tuotenumero']) != '' ? "'{$yhtiorow['rahti_tuotenumero']}', '{$torow['rahti_tuotenumero']}'" : "'{$yhtiorow['rahti_tuotenumero']}'";
    $rahtinro_tuoteno_lisa = lisaa_vaihtoehtoinen_rahti_merkkijonoon($rahtinro_tuoteno_lisa);

    $hintalisa = $whateverhinta === FALSE ? " AND hinta != 0 " : "";

    // katsotaan onko rahtituotenumero sy?tetty jo k?sin
    $query = "SELECT tunnus
              FROM tilausrivi
              WHERE yhtio  = '$kukarow[yhtio]'
              AND otunnus  = '$laskurow[tunnus]'
              AND tyyppi  != 'D'
              {$hintalisa}
              AND tuoteno  IN ({$rahtinro_tuoteno_lisa})";
    $result = pupe_query($query);

    return mysql_num_rows($result);
  }
}

if (!function_exists('hae_toimittajat')) {


  /**
   * Hakee kaikki toimittajat tyypin mukaan
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param array   $tyyppi
   * @return array
   */
  function hae_toimittajat($tyypit = array()) {
    global $kukarow, $yhtiorow;

    if (!empty($tyypit)) {
      $toimi_tyyppi_where = "AND tyyppi IN ('".implode("','", $tyypit)."')";
    }
    else {
      $toimi_tyyppi_where = "AND tyyppi != 'P'";
    }

    $query = "SELECT *
              FROM toimi
              WHERE yhtio = '{$kukarow['yhtio']}'
              {$toimi_tyyppi_where}";
    $result = pupe_query($query);

    $toimittajat = array();

    while ($toimittaja = mysql_fetch_assoc($result)) {
      $toimittajat[] = $toimittaja;
    }

    return $toimittajat;
  }
}

/*
 * Poistaa tyhj‰t v‰lit vastaavat tuoteketjusta muuttamatta ketjun hallitsevaa j‰rjestyst‰.
 *
 * @param   int $ketju_id    Tiivistett‰v‰n ketjun id
 */
if (!function_exists('tiivista_vastaavat_tuoteketju')) {
  function tiivista_vastaavat_tuoteketju($ketju_id) {
    global $kukarow;

    // Haetaan tiivistett‰v‰ ketju
    $query = "SELECT *
              FROM vastaavat
              WHERE yhtio    = '{$kukarow['yhtio']}'
              AND id         = '$ketju_id'
              AND jarjestys != 0
              ORDER BY jarjestys";
    $result = pupe_query($query);

    // Loopataan ketjun tuotteet l‰pi
    while ($tuote = mysql_fetch_assoc($result)) {

      // Aloitetaan pienimm‰st‰ ei nollasta (useimmiten 1)
      // Pienimp‰‰n ei kosketa ja muut j‰rk‰t‰‰n siit‰ eteenp‰in
      if (!isset($edellinen)) {
        $edellinen = $tuote['jarjestys'];
        continue;
      }

      // P‰ivitet‰‰n j‰rjestykseksi edellinen+1
      $uusi_jarjestys = ($edellinen + 1);

      // Ei p‰ivitet‰ j‰rjestyst‰ turhaan. Jos j‰rjestys on sama
      if ($tuote['jarjestys'] <> $uusi_jarjestys) {
        $query = "UPDATE vastaavat
                  SET jarjestys = $uusi_jarjestys, muutospvm = now()
                  WHERE yhtio='{$kukarow['yhtio']}' AND tunnus={$tuote['tunnus']}";
        if ( ! pupe_query($query) ) {
          exit("Virhe ketjujen uudelleenj‰rjestelyss‰");
        }
      }

      $edellinen = $uusi_jarjestys;
    }
  }
}

if (!function_exists('hae_toimittaja')) {


  /**
   * Hakee toimittajan tunnuksen perusteella
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param int     $tunnus
   * @return array
   */
  function hae_toimittaja($tunnus) {
    global $kukarow;

    $query = "SELECT *
              FROM toimi
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND tyyppi  != 'P'
              AND tunnus   = '{$tunnus}'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('hae_tuote')) {


  /**
   * Hakee tuotteen
   *
   * @global array $kukarow
   * @global array $yhtiorow
   * @param string  $tuoteno
   * @return array
   */
  function hae_tuote($tuoteno) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM tuote
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tuoteno = '{$tuoteno}'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('poista_lasku')) {
  function poista_lasku($tilausnumero) {
    global $kukarow, $yhtiorow;

    $query = "UPDATE lasku
              SET alatila = tila,
              tila        = 'D',
              muutospvm   = now()
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$tilausnumero}'";
    pupe_query($query);

    $query = "UPDATE tilausrivi
              SET tyyppi = 'D'
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND otunnus = '{$tilausnumero}'";
    pupe_query($query);
  }
}

if (!function_exists('hae_kayttajaan_linkitetty_extranet_kayttaja')) {
  function hae_kayttajaan_linkitetty_extranet_kayttaja($kuka, $yhtio = "") {
    global $kukarow, $yhtiorow;

    if ($yhtio == "") $yhtio = $kukarow['yhtio'];

    $query = "SELECT kuka.*
              FROM extranet_kayttajan_lisatiedot
              JOIN kuka ON (kuka.yhtio = extranet_kayttajan_lisatiedot.yhtio AND kuka.tunnus = extranet_kayttajan_lisatiedot.liitostunnus)
              WHERE extranet_kayttajan_lisatiedot.yhtio = '{$yhtio}'
              AND extranet_kayttajan_lisatiedot.selite  = '{$kuka}'
              AND extranet_kayttajan_lisatiedot.laji    = 'LINKITYS'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('tarkista_onko_taric_veroperusteet_kaytossa')) {
  function tarkista_onko_taric_veroperusteet_kaytossa() {
    global $kukarow, $yhtiorow;
    // Tarkastetaan onko taricit k‰ytˆss‰

    $query = "SELECT count(*) kpl from taric_veroperusteet";
    $tv_res = pupe_query($query);
    $tv_row = mysql_fetch_assoc($tv_res);

    if ($tv_row["kpl"] > 0) {
      return true;
    }

    return false;
  }
}

if (!function_exists('hae_oletus_tulliprosentti')) {
  function hae_oletus_tulliprosentti($laskurow, $tuorow) {
    global $kukarow, $yhtiorow;

    // Sis‰‰n otetaan
    // $tuorow jossa on tuotteen kaikki tiedot.
    // $laskurow jossa on saapumisen tiedot.

    require 'tilauskasittely/taric_veroperusteet.inc';

    return (float) $tulliprossa;
  }
}

if (!function_exists('paivita_poikkeavat_tulliprosentit')) {
  function paivita_poikkeavat_tulliprosentit($poikkeavat_tulliprosentit, $rivi_oletus_tulliprosentti) {
    global $kukarow, $yhtiorow;

    // poikkeava_tulliprosentti
    foreach ($poikkeavat_tulliprosentit as $tunnus => $poikkeava_tulliprosentti) {

      $poikkeava_tulliprosentti = str_replace(',', '.', $poikkeava_tulliprosentti);

      if (!is_numeric($poikkeava_tulliprosentti)) {
        $poikkeava_tulliprosentti = 'NULL';
      }

      $query = "SELECT poikkeava_tulliprosentti
                FROM tilausrivin_lisatiedot
                WHERE yhtio          = '$kukarow[yhtio]'
                AND tilausrivitunnus = '$tunnus'";
      $result = pupe_query($query);
      $poikkeava_tulliprosentti_db = mysql_fetch_assoc($result);

      //ei p‰ivitet‰ poikkeus_tulliprosenttia kantaan jos se on sama kuin oletusprosentti, paitsi jos kantaan on jo p‰ivitetty poikkeus prosentti.
      //kannasta pit‰‰ tarkistaa, onko siell‰ poikkeus_tulliprosentti, koska oletus --> poikkeus ja takaisin poikkeus --> oletus ei p‰ivity kantaan ilman olemassaolevan poikkeuksen tarkistusta.
      if ($poikkeava_tulliprosentti_db['poikkeava_tulliprosentti'] != NULL or $rivi_oletus_tulliprosentti[$tunnus] != $poikkeava_tulliprosentti) {
        $query  = "UPDATE tilausrivin_lisatiedot
                   SET poikkeava_tulliprosentti = $poikkeava_tulliprosentti
                   WHERE yhtio          = '$kukarow[yhtio]'
                   AND tilausrivitunnus = '$tunnus'";
        pupe_query($query);
      }
    }
  }
}

if (!function_exists('hae_tuotteen_saapumisaika')) {
  function hae_tuotteen_saapumisaika($tuoteno, $tuote_status, $myytavissa, $loytyko = FALSE, $loytyko_normivarastosta = FALSE, $kieli = "") {
    global $kukarow, $yhtiorow, $verkkokauppa;

    $tulossalisa = array();

    if ($kukarow["extranet"] != "" or $verkkokauppa != "") {
      // Normaalit saldolliset tuotteet (Extranet ja Verkkokauppa)
      if ($verkkokauppa == "" and ($tuote_status == 'A' or $tuote_status == '') and $myytavissa <= 0) {

        $tulossa_query = "SELECT min(toimaika) paivamaara
                          FROM tilausrivi
                          WHERE yhtio  = '$kukarow[yhtio]'
                          AND tuoteno  = '$tuoteno'
                          AND varattu  > 0
                          AND tyyppi   = 'O'
                          AND toimaika >= curdate()";
        $tulossa_result = pupe_query($tulossa_query);
        $tulossa_row = mysql_fetch_assoc($tulossa_result);

        if (mysql_num_rows($tulossa_result) > 0 and $tulossa_row["paivamaara"] != '') {
          $tulossalisa[] = "<hr>".t("TULOSSA", $kieli)."!°!";
          $tulossalisa[] = t("Arvioitu saapumisp‰iv‰", $kieli)."!°!".tv1dateconv($tulossa_row['paivamaara']);
        }
        else {
          $tulossa_query = "SELECT DATE_ADD(curdate(), INTERVAL (if(tuotteen_toimittajat.toimitusaika > 0, tuotteen_toimittajat.toimitusaika, toimi.oletus_toimaika)+if(tuotteen_toimittajat.tilausvali > 0, tuotteen_toimittajat.tilausvali, toimi.oletus_tilausvali)) DAY) paivamaara,
                            if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) sorttaus
                            FROM tuotteen_toimittajat
                            JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus)
                            WHERE tuotteen_toimittajat.yhtio = '$kukarow[yhtio]'
                            AND tuotteen_toimittajat.tuoteno = '$tuoteno'
                            AND (tuotteen_toimittajat.toimitusaika+toimi.oletus_toimaika) > 0
                            AND (tuotteen_toimittajat.tilausvali+toimi.oletus_tilausvali) > 0
                            ORDER BY sorttaus
                            LIMIT 1";
          $tulossa_result = pupe_query($tulossa_query);
          $tulossa_row = mysql_fetch_assoc($tulossa_result);

          if (mysql_num_rows($tulossa_result) > 0 and $tulossa_row["paivamaara"] != '') {
            $tulossalisa[] = "<hr>".t("EI TILAUKSESSA", $kieli)."!°!"."<hr>";
            $tulossalisa[] = t("Tilausrytmin mukainen saapumisp‰iv‰", $kieli)."!°!".tv1dateconv($tulossa_row['paivamaara']);
          }
        }
      }
      elseif ($verkkokauppa == "" and $tuote_status == 'T' and $myytavissa <= 0) {
        $query = "SELECT if(tuotteen_toimittajat.tehdas_saldo_toimaika != 0, tuotteen_toimittajat.tehdas_saldo_toimaika, if (tuotteen_toimittajat.toimitusaika != 0, tuotteen_toimittajat.toimitusaika, toimi.oletus_toimaika)) toimaika,
                  if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) sorttaus
                  FROM tuotteen_toimittajat
                  JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus)
                  WHERE tuotteen_toimittajat.yhtio = '$kukarow[yhtio]'
                  and tuotteen_toimittajat.tuoteno = '$tuoteno'
                  ORDER BY sorttaus
                  LIMIT 1";
        $tulossa_result = pupe_query($query);
        $tulossa_row = mysql_fetch_assoc($tulossa_result);

        if (mysql_num_rows($tulossa_result) > 0 and $tulossa_row["toimaika"] > 0) {
          $tulossalisa[] = "<hr><font color='orange'>".t("TILAUSTUOTE", $kieli)."</font>!°!";
          $tulossalisa[] = t("Arvioitu toimitusaika", $kieli)."!°!{$tulossa_row["toimaika"]} ".t("p‰iv‰‰", $kieli);
        }
      }
      elseif ($verkkokauppa != "") {
        $tulossa_query = "SELECT IFNULL(MIN(toimaika),'') paivamaara
                          FROM tilausrivi
                          WHERE yhtio = '$kukarow[yhtio]'
                          AND tuoteno = '$tuoteno'
                          AND varattu > 0
                          AND tyyppi  = 'O'";
        $tulossa_result = pupe_query($tulossa_query);
        $tulossa_row = mysql_fetch_assoc($tulossa_result);

        if (mysql_num_rows($tulossa_result) > 0 and $tulossa_row["paivamaara"] != '') {
          $tulossalisa[] = t("Saapuu", $kieli)."!°!".tv1dateconv($tulossa_row['paivamaara']);
        }
        elseif ((float) $myytavissa <= 0) {
          $query = "SELECT toimitusaika
                    FROM tuotteen_toimittajat
                    WHERE yhtio      = '$kukarow[yhtio]'
                    and tuoteno      = '$tuoteno'
                    and toimitusaika > 0
                    LIMIT 1";
          $tulossa_result = pupe_query($query);
          $tulossa_row = mysql_fetch_assoc($tulossa_result);

          if ($tulossa_row["toimitusaika"] > 0) {
            $tulossalisa[] = t("Toimaika: %s pv.", $kieli, $tulossa_row["toimitusaika"]);
          }
        }
      }
    }
    else {
      // Normaalit saldolliset tuotteet (Normi)
      if (($tuote_status == 'A' or $tuote_status == 'T') and (!$loytyko or $yhtiorow['haejaselaa_saapumispvm'] == "A" or ($yhtiorow['haejaselaa_saapumispvm'] == "B" and !$loytyko_normivarastosta))) {

        // Jos suortoimituksia ei tehd‰, niin ei turhaan haeta niitten tietoja
        if ($yhtiorow['tee_osto_myyntitilaukselta'] == "") {
          $tulossa_query = "SELECT
                            tilausrivi.jaksotettu,
                            tilausrivi.toimaika paivamaara,
                            tilausrivi.yksikko yksikko,
                            sum(tilausrivi.varattu) tilattu
                             FROM tilausrivi
                            WHERE tilausrivi.yhtio  = '$kukarow[yhtio]'
                            AND tilausrivi.tuoteno  = '$tuoteno'
                            AND tilausrivi.varattu  > 0
                            AND tilausrivi.tyyppi   = 'O'
                            AND tilausrivi.toimaika >= curdate()
                            GROUP BY 1,2,3
                            ORDER BY 1,2,3";
        }
        else {
          $tulossa_query = "SELECT
                            t_myy.otunnus,
                            tli_myy.suoraan_laskutukseen,
                            l_myy.nimi,
                            tilausrivi.jaksotettu,
                            tilausrivi.toimaika paivamaara,
                            tilausrivi.yksikko yksikko,
                            sum(tilausrivi.varattu) tilattu
                             FROM tilausrivi
                            LEFT JOIN tilausrivin_lisatiedot tli_myy ON (tilausrivi.yhtio=tli_myy.yhtio AND tli_myy.tilausrivilinkki > 0 AND tli_myy.tilausrivilinkki=tilausrivi.tunnus)
                            LEFT JOIN tilausrivi t_myy ON (t_myy.yhtio = tli_myy.yhtio and t_myy.tunnus = tli_myy.tilausrivitunnus)
                            LEFT JOIN lasku l_myy ON (t_myy.yhtio = l_myy.yhtio and t_myy.otunnus = l_myy.tunnus)
                            WHERE tilausrivi.yhtio  = '$kukarow[yhtio]'
                            AND tilausrivi.tuoteno  = '$tuoteno'
                            AND tilausrivi.varattu  > 0
                            AND tilausrivi.tyyppi   = 'O'
                            AND tilausrivi.toimaika >= curdate()
                            GROUP BY 1,2,3,4,5,6
                            ORDER BY 1,2,3,4,5,6";
        }

        $tulossa_result = pupe_query($tulossa_query);

        if (mysql_num_rows($tulossa_result) > 0) {
          while ($tulossa_row = mysql_fetch_assoc($tulossa_result)) {

            $tulind = "";

            if (isset($tulossa_row["nimi"]) and $tulossa_row["nimi"] != '') {
              if ($tulossa_row["suoraan_laskutukseen"] != "") {
                $tulind = t("Suoratoimitus asiakkaalle", $kieli).":<br>$tulossa_row[nimi]";
              }
              else {
                $tulind = t("Tilattu asiakkaalle", $kieli).":<br>$tulossa_row[nimi]";
              }
            }
            else {
              $tulind = t("TULOSSA", $kieli);
            }

            $tulossalisa[] = "<hr>$tulind!°!<hr>$tulossa_row[tilattu]".t_avainsana("Y", "", " and avainsana.selite='$tulossa_row[yksikko]'", "", "", "selite");

            if ($tulossa_row["jaksotettu"] == '1') $tarkkuus = "Vahvistettu";
            else $tarkkuus = "Arvioitu";

            $tulossalisa[] = t("$tarkkuus saapumisp‰iv‰", $kieli)."!°!".tv1dateconv($tulossa_row['paivamaara']);
          }
        }

        if ($tuote_status == 'A' and mysql_num_rows($tulossa_result) == 0) {
          $tulossa_query = "SELECT DATE_ADD(curdate(), INTERVAL (if(tuotteen_toimittajat.toimitusaika > 0, tuotteen_toimittajat.toimitusaika, toimi.oletus_toimaika)+if(tuotteen_toimittajat.tilausvali > 0, tuotteen_toimittajat.tilausvali, toimi.oletus_tilausvali)) DAY) paivamaara,
                            if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) sorttaus
                             FROM tuotteen_toimittajat
                            JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus)
                            WHERE tuotteen_toimittajat.yhtio = '$kukarow[yhtio]'
                            AND tuotteen_toimittajat.tuoteno = '$tuoteno'
                            AND (tuotteen_toimittajat.toimitusaika+toimi.oletus_toimaika) > 0
                            AND (tuotteen_toimittajat.tilausvali+toimi.oletus_tilausvali) > 0
                            ORDER BY sorttaus
                            LIMIT 1";
          $tulossa_result = pupe_query($tulossa_query);
          $tulossa_row = mysql_fetch_assoc($tulossa_result);

          if (mysql_num_rows($tulossa_result) > 0) {
            $tulossalisa[] = "<hr>".t("EI TILAUKSESSA", $kieli)."!°!"."<hr>";
            $tulossalisa[] = t("Tilausrytmin mukainen")."<hr>";
            $tulossalisa[] = t("saapumisp‰iv‰", $kieli)."!°!".tv1dateconv($tulossa_row['paivamaara']);
          }
        }
      }

      if ($tuote_status == 'T' and (!$loytyko or $yhtiorow['haejaselaa_saapumispvm'] == "A" or ($yhtiorow['haejaselaa_saapumispvm'] == "B" and !$loytyko_normivarastosta))) {
        $query = "SELECT if(tuotteen_toimittajat.tehdas_saldo_toimaika != 0, tuotteen_toimittajat.tehdas_saldo_toimaika, if (tuotteen_toimittajat.toimitusaika != 0, tuotteen_toimittajat.toimitusaika, toimi.oletus_toimaika)) toimaika,
                  if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) sorttaus
                  FROM tuotteen_toimittajat
                  JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus)
                  WHERE tuotteen_toimittajat.yhtio = '$kukarow[yhtio]'
                  and tuotteen_toimittajat.tuoteno = '$tuoteno'
                  ORDER BY sorttaus
                  LIMIT 1";
        $tulossa_result = pupe_query($query);
        $tulossa_row = mysql_fetch_assoc($tulossa_result);

        if (mysql_num_rows($tulossa_result) > 0 and $tulossa_row["toimaika"] > 0) {
          $tulossalisa[] = "<hr><font color='orange'>".t("TILAUSTUOTE", $kieli)."</font>!°!<hr>";
          $tulossalisa[] = t("Arvioitu toimitusaika", $kieli)."!°!{$tulossa_row["toimaika"]} ".t("p‰iv‰‰", $kieli);
        }
      }
    }

    // Tehtaan saldo n‰ytet‰‰n vain jos $myytavissa < $yhtiorow['tehdas_saldo_alaraja'] sek‰ tuotteen_toimittajat.tehdas_saldo > 0
    if ($verkkokauppa == "" and $myytavissa < $yhtiorow['tehdas_saldo_alaraja'] and $yhtiorow['tehdas_saldo_alaraja'] > 0) {
      $query = "SELECT tuotteen_toimittajat.tehdas_saldo,
                tuote.yksikko,
                if(tuotteen_toimittajat.tehdas_saldo_toimaika != 0, tuotteen_toimittajat.tehdas_saldo_toimaika, if (tuotteen_toimittajat.toimitusaika != 0, tuotteen_toimittajat.toimitusaika, toimi.oletus_toimaika)) toimaika,
                if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) sorttaus
                FROM tuotteen_toimittajat
                JOIN tuote ON (tuotteen_toimittajat.yhtio=tuote.yhtio and tuotteen_toimittajat.tuoteno=tuote.tuoteno)
                JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus)
                WHERE tuotteen_toimittajat.yhtio      = '$kukarow[yhtio]'
                and tuotteen_toimittajat.tuoteno      = '$tuoteno'
                and tuotteen_toimittajat.tehdas_saldo > 0
                ORDER BY sorttaus";
      $tehdassaldo_res = pupe_query($query);

      while ($tehdassaldo_row = mysql_fetch_assoc($tehdassaldo_res)) {
        $tulossalisa[] = "<hr>".t("Tehtaalla", $kieli)."!°!<hr>".sprintf("%.2f", $tehdassaldo_row['tehdas_saldo'])." ".t_avainsana("Y", "", " and avainsana.selite='$tehdassaldo_row[yksikko]'", "", "", "selite");
        $tulossalisa[] = t("Arvioitu toimitusaika", $kieli)."!°!{$tehdassaldo_row['toimaika']} ".t("p‰iv‰‰", $kieli);
      }
    }

    return $tulossalisa;
  }
}

if (!function_exists("tee_tiliointi")) {
  function tee_tiliointi($parametrit) {
    global $kukarow, $yhtiorow;

    // Tarvitaan
    $tunnus   = (!empty($parametrit['tunnus'])) ? $parametrit['tunnus'] : 0;
    $tili     = (!empty($parametrit['tili'])) ? $parametrit['tili'] : '';
    $summa    = (!empty($parametrit['summa'])) ? $parametrit['summa'] : 0;
    $vero     = (!empty($parametrit['vero'])) ? $parametrit['vero'] : 0;
    $kustp    = (!empty($parametrit['kustp'])) ? $parametrit['kustp'] : 0;
    $kohde    = (!empty($parametrit['kohde'])) ? $parametrit['kohde'] : 0;
    $projekti = (!empty($parametrit['projekti'])) ? $parametrit['projekti'] : 0;
    $selite   = (!empty($parametrit['selite'])) ? $parametrit['selite'] : '';
    $liitostunnus    = (!empty($parametrit['liitostunnus'])) ? $parametrit['liitostunnus'] : '';
    $tapahtumatunnus = (!empty($parametrit['tapahtumatunnus'])) ? $parametrit['tapahtumatunnus'] : '';

    require 'inc/teetiliointi.inc';
  }
}

if (!function_exists("lisaa_rivi")) {
  function lisaa_rivi($parametrit) {
    global $kukarow, $yhtiorow, $lapsenlap_array;

    if (empty($kukarow['kesken'])) {
      echo "Kukarow kesken on pakollinen";
      exit;
    }

    if (empty($yhtiorow)) {
      echo "Yhtiorow on pakollinen";
      exit;
    }

    //TODO tee muut pakolliset yll‰olevan mukaisesti trow, laskurow, tuoteno, kpl,

    // Tarvitsemme:
    $trow               = (!empty($parametrit['trow']))               ? $parametrit['trow'] : '';                // tuote.*
    $rivinumero         = (!empty($parametrit['rivinumero']))         ? $parametrit['rivinumero'] : 0;           // joko tilaajan rivinumero tai konserninsis‰isiss‰ kaupoissa sis‰inen toimittajanumero
    $laskurow           = (!empty($parametrit['laskurow']))           ? $parametrit['laskurow'] : '';            // lasku.*
    $kpl                = (!empty($parametrit['kpl']))                ? $parametrit['kpl'] : 0;                  // --> tilattu kappalem‰‰r‰
    $tuoteno            = (!empty($parametrit['tuoteno']))            ? $parametrit['tuoteno'] : '';             // --> tilattava tuotenumero
    $toimaika           = (!empty($parametrit['toimaika']))           ? $parametrit['toimaika'] : '';            // --> arvioitu toimitusaika
    $kerayspvm          = (!empty($parametrit['kerayspvm']))          ? $parametrit['kerayspvm'] : '';           // --> toivottu ker‰ysaika
    $hinta              = (!empty($parametrit['hinta']))              ? $parametrit['hinta'] : '';               // --> k‰ytt‰j‰n syˆtt‰m‰ hinta
    $netto              = (!empty($parametrit['netto']))              ? $parametrit['netto'] : '';               // --> k‰ytt‰j‰n syˆtt‰m‰ netto
    $var                = (!empty($parametrit['var']))                ? $parametrit['var'] : '';                 // H,J,P varrit
    $varasto            = (!empty($parametrit['varasto']))            ? $parametrit['varasto'] : '';             // myyd‰‰n vain t‰st‰/n‰ist‰ varastosta
    $paikka             = (!empty($parametrit['paikka']))             ? $parametrit['paikka'] : '';              // myyd‰‰n vain t‰lt‰ paikalta
    $rivitunnus         = (!empty($parametrit['rivitunnus']))         ? $parametrit['rivitunnus'] : '';          // tietokannan tunnus jolle rivi lis‰t‰‰n
    $rivilaadittu       = (!empty($parametrit['rivilaadittu']))       ? $parametrit['rivilaadittu'] : '';        // vanhan rivin laadittuaika, s‰ilytet‰‰n se
    $korvaavakielto     = (!empty($parametrit['korvaavakielto']))     ? $parametrit['korvaavakielto'] : '';      // Jos erisuuri kuin tyhj‰ niin ei myyd‰ korvaavia
    $jtkielto           = (!empty($parametrit['jtkielto']))           ? $parametrit['jtkielto'] : '';            // Jos erisuuri kuin tyhj‰ niin ei laiteta JT:Seen
    $perhekielto        = (!empty($parametrit['perhekielto']))        ? $parametrit['perhekielto'] : '';         // Jos erisuuri kuin tyhj‰ niin ei etsit‰ ollenkaan perheit‰
    $varataan_saldoa    = (!empty($parametrit['varataan_saldoa']))    ? $parametrit['varataan_saldoa'] : '';     // Jos == (!empty(EI niin ei varata saldoa (tietyiss‰ keisseiss‰), tai siis ei ainakan tehd‰ saldotsekki‰
    $kutsuja            = (!empty($parametrit['kutsuja']))            ? $parametrit['kutsuja'] : '';             // Kuka t‰t‰ skripti‰ kutsuu
    $myy_sarjatunnus    = (!empty($parametrit['myy_sarjatunnus']))    ? $parametrit['myy_sarjatunnus'] : '';     // Jos halutaan automaattisesti linkata joku sarjanumero-olio tilausriviin
    $osto_sarjatunnus   = (!empty($parametrit['osto_sarjatunnus']))   ? $parametrit['osto_sarjatunnus'] : '';    // Jos halutaan automaattisesti linkata joku sarjanumero-olio tilausriviin
    $jaksotettu         = (!empty($parametrit['jaksotettu']))         ? $parametrit['jaksotettu'] : '';          // Kuuluuko tilausrivi mukaan jaksotukseen
    $perheid            = (!empty($parametrit['perheid']))            ? $parametrit['perheid'] : '';             // Tuoteperheen perheid
    $perheid2           = (!empty($parametrit['perheid2']))           ? $parametrit['perheid2'] : '';            // Lis‰varusteryhm‰n perheid2
    $orvoteikiinnosta   = (!empty($parametrit['orvoteikiinnosta']))   ? $parametrit['orvoteikiinnosta'] : '';    // Meit‰ ei kiinnosta orvot jos t‰m‰ ei ole tyhj‰.
    $osatoimkielto      = (!empty($parametrit['osatoimkielto']))      ? $parametrit['osatoimkielto'] : '';       // Jos saldo ei riit‰ koko riville niin ei lis‰t‰ rivi‰ ollenkaan
    $olpaikalta         = (!empty($parametrit['olpaikalta']))         ? $parametrit['olpaikalta'] : '';          // pakotetaan myym‰‰n oletuspaikalta
    $tuotenimitys       = (!empty($parametrit['tuotenimitys']))       ? $parametrit['tuotenimitys'] : '';        // tuotteen nimitys jos nimityksen syˆtˆ on yhtiˆll‰ sallittu
    $tuotenimitys_force = (!empty($parametrit['tuotenimitys_force'])) ? $parametrit['tuotenimitys_force'] : '';  // tuotteen nimitys muutetaan systemitasolla
    $kommentti          = (!empty($parametrit['kommentti']))          ? $parametrit['kommentti'] : '';           // rivikommentti
    $valmistuslinja     = (!empty($parametrit['valmistuslinja']))     ? $parametrit['valmistuslinja'] : '';      // valmistuslinja
    $alv                = (!empty($parametrit['alv']))                ? $parametrit['alv'] : '';                 // rivi alv
    $toim               = (!empty($parametrit['toim']))               ? $parametrit['toim'] : '';                // toim
    $rekisterinumero    = (!empty($parametrit['rekisterinumero']))    ? $parametrit['rekisterinumero'] : '';     // rekisterinumero

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      $ale_temp = str_replace(',', '.', $parametrit{'ale'.$alepostfix});
      ${'ale'.$alepostfix} = (!empty($ale_temp)) ? $ale_temp : "";
    }

    if (@include "tilauskasittely/lisaarivi.inc");
    elseif (@include "lisaarivi.inc");
    else {
      echo "Lisaarivi not found";
      exit;
    }

    return array($lisatyt_rivit1, $lisatyt_rivit2);

    // Palauttaa arrayn $lisatyt_rivit1 jossa on kaikkien rivien tunnukset jotka t‰‰ systeemi lis‰si myyntihaarassa
    // Palauttaa arrayn $lisatyt_rivit2 jossa on kaikkien rivien tunnukset jotka t‰‰ systeemi lis‰si puute-jt-osto-haarassa
  }
}

if (!function_exists("hae_kayttajaan_liitetyn_asiakkaan_extranet_tarjoukset")) {
  function hae_kayttajaan_liitetyn_asiakkaan_extranet_tarjoukset($oletus_asiakas) {
    global $kukarow, $yhtiorow;

    if (empty($oletus_asiakas)) {
      return 0;
    }

    $query = "SELECT count(*) as luku
              FROM lasku
              WHERE yhtio      = '{$kukarow['yhtio']}'
              AND tila         = 'T'
              AND alatila      = ''
              AND liitostunnus = '{$oletus_asiakas}'
              AND clearing     = 'EXTTARJOUS'";
    $result = pupe_query($query);

    $tarjousten_lukumaara = mysql_fetch_assoc($result);
    return $tarjousten_lukumaara['luku'];
  }
}

if (!function_exists("hae_kayttajaan_liitetyn_asiakkaan_extranet_ennakot")) {
  function hae_kayttajaan_liitetyn_asiakkaan_extranet_ennakot($oletus_asiakas) {
    global $kukarow, $yhtiorow;

    if (empty($oletus_asiakas)) {
      return 0;
    }

    $query = "SELECT count(*) as luku
              FROM lasku
              WHERE yhtio      = '{$kukarow['yhtio']}'
              AND tila         = 'N'
              AND alatila      = ''
              AND liitostunnus = '{$oletus_asiakas}'
              AND clearing     = 'EXTENNAKKO'";
    $result = pupe_query($query);

    $ennakoiden_lukumaara = mysql_fetch_assoc($result);
    return $ennakoiden_lukumaara['luku'];
  }
}

if (!function_exists("saako_myyda_private_label")) {
  function saako_myyda_private_label($asiakastunnus, $tuotenro, $alemaara = 1, $tarkistakaikkituotteet = FALSE) {
    //$tarkistakaikkituotteet muuttujalla voidaan funktio pakottaa tutkimaan onko asiakashintoja/alennuksia olemassa, vaikka tuote olisikin normaali hinnasto-tuote (eli tarkistetaan kaikki tuotteet)
    global $kukarow, $yhtiorow;

    // Jos param on "vain extranet" ja jos ei ole extranet niin saa myyd‰
    if ($yhtiorow['extranet_private_label'] == 'E' and $kukarow['extranet'] == '') return true;

    //haetaan ensin tutkittavan tuotteen tiedot
    $query = "SELECT *
              FROM tuote
              WHERE yhtio = '$kukarow[yhtio]'
              AND tuoteno = '$tuotenro'";
    $tuotetempres = pupe_query($query);
    $trow = mysql_fetch_assoc($tuotetempres);

    //katotaan kannattako edes tutkia - jos tuote ei ole private label sit‰ saa myyd‰ => ei kannata tutkia | eli tutkitaan jos on private label
    if ($trow["hinnastoon"] == "V" or $tarkistakaikkituotteet) {

      //haetaan asiakkaan tiedot
      $query = "SELECT tunnus liitostunnus,
                ytunnus,
                valkoodi,
                maa,
                ryhma,
                piiri,
                toimipaikka AS yhtio_toimipaikka
                FROM asiakas
                WHERE yhtio = '$kukarow[yhtio]'
                AND tunnus  = '$asiakastunnus'";
      $asiakasres = pupe_query($query);
      $asiakasrow = mysql_fetch_assoc($asiakasres);

      $haettavat_kentat = "hinta,hintaperuste,aleperuste";

      for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
        $haettavat_kentat .= ",ale{$alepostfix}";
      }

      $hinnat = alehinta($asiakasrow, $trow, $alemaara, '', '', '', $haettavat_kentat);

      $onko_asiakkaalla_alennuksia = FALSE;

      for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
        if (isset($hinnat["aleperuste"]["ale".$alepostfix]) and $hinnat["aleperuste"]["ale".$alepostfix] !== FALSE and $hinnat["aleperuste"]["ale".$alepostfix] < 13) {
          $onko_asiakkaalla_alennuksia = TRUE;
        }
      }

      // Jos tuote n‰ytet‰‰n vain jos asiakkaalla on asiakasalennus tai asiakahinta niin skipataan se jos alea tai hintaa ei lˆydy
      if (($hinnat["hintaperuste"] > 13 or $hinnat["hintaperuste"] === FALSE) and $onko_asiakkaalla_alennuksia === FALSE) {
        return FALSE;
      }
      else {
        return TRUE;
      }
    }
    else {
      //t‰nne tullaan, jos tuote ei ees oo private label => saa myyd‰!
      return TRUE;
    }
  }
}

if (!function_exists("tuotteen_toimittajat_tuotenumerot_haku")) {
  function tuotteen_toimittajat_tuotenumerot_haku($tuoteno, $laskuttajan_toimittajanumero, $kpl = 0) {
    global $kukarow, $yhtiorow;

    if ($kpl > 0) {
      $wildcard = "";
      for ($i = 0; $i<$kpl; $i++) {
        $wildcard .= "*";
      }
      $tuoteno = substr($tuoteno, 0, $kpl * -1).$wildcard;
    }

    $query = "SELECT tt.*
              FROM tuotteen_toimittajat_tuotenumerot AS ttt
              JOIN tuotteen_toimittajat AS tt ON (tt.yhtio = ttt.yhtio AND tt.tunnus = ttt.toim_tuoteno_tunnus)
              JOIN toimi ON (toimi.yhtio = tt.yhtio AND toimi.tunnus = tt.liitostunnus AND toimi.toimittajanro = '{$laskuttajan_toimittajanumero}' AND toimi.tyyppi != 'P')
              WHERE ttt.yhtio = '{$kukarow['yhtio']}'
              AND ttt.tuoteno = '$tuoteno'";
    $chk_res = pupe_query($query);

    if (mysql_num_rows($chk_res) == 0 and $kpl < strlen($tuoteno)) {
      $chk_res = tuotteen_toimittajat_tuotenumerot_haku($tuoteno, $laskuttajan_toimittajanumero, ($kpl+1));
    }

    return $chk_res;
  }
}

if (!function_exists('hae_kaikki_oletuspaikat_try_tai_status')) {
  function hae_kaikki_oletuspaikat_try_tai_status($try, $status) {
    global $kukarow, $yhtiorow;

    $query = "  /*Haetaan kaikki oletuspaikat joissa on mik‰ tahansa status ja mik‰ tahansa try*/
          (SELECT *
          FROM   avainsana as a1
          WHERE  yhtio = '{$kukarow['yhtio']}'
          AND laji = 'OLETUSPAIKKA'
          AND selitetark = 'X'
          AND selitetark_2 = '')

          UNION

          /*Haetaan kaikki oletuspaikat joissa status t‰sm‰‰ ja try on mit‰ tahansa*/
          (SELECT *
          FROM   avainsana as a2
          WHERE  yhtio = '{$kukarow['yhtio']}'
          AND laji = 'OLETUSPAIKKA'
          AND selitetark = '{$status}'
          AND selitetark_2 = '')

          UNION

          /*Haetaan kaikki oletuspaikat joissa status on mit‰ tahansa ja try t‰sm‰‰*/
          (SELECT *
          FROM   avainsana as a3
          WHERE  yhtio = '{$kukarow['yhtio']}'
          AND laji = 'OLETUSPAIKKA'
          AND selitetark = 'X'
          AND selitetark_2 = '{$try}')

          UNION

          /*Haetaan kaikki oletuspaikat joissa status ja try t‰sm‰‰*/
          (SELECT *
          FROM   avainsana as a4
          WHERE  yhtio = '{$kukarow['yhtio']}'
          AND laji = 'OLETUSPAIKKA'
          AND selitetark = '{$status}'
          AND selitetark_2 = '{$try}')";
    $result = pupe_query($query);

    $oletuspaikat = array();
    while ($oletuspaikka = mysql_fetch_assoc($result)) {
      $oletuspaikat[] = $oletuspaikka['selite'];
    }

    $yhtiorow["tuotteen_oletuspaikka"] = str_replace(' ', '', $yhtiorow["tuotteen_oletuspaikka"]);
    $yhtion_tuotteen_oletuspaikat = explode(",", $yhtiorow["tuotteen_oletuspaikka"]);
    $kaikki_oletuspaikat = array_merge($yhtion_tuotteen_oletuspaikat, $oletuspaikat);

    return $kaikki_oletuspaikat;
  }
}

if (!function_exists("hae_viivakoodilla")) {
  function hae_viivakoodilla($viivakoodi) {
    global $kukarow, $yhtiorow;

    // Haetaan eankoodilla tuotenumeroa kolmesta eri paikkaa
    $query = "(SELECT tuoteno, '' liitostunnus
               FROM tuote
               WHERE yhtio                                      = '{$kukarow['yhtio']}'
               AND eankoodi                                     = '{$viivakoodi}')
               UNION
               (SELECT tuoteno, liitostunnus
               FROM tuotteen_toimittajat
               WHERE yhtio                                      = '{$kukarow['yhtio']}'
               AND viivakoodi                                   = '{$viivakoodi}')
               UNION
               (SELECT tuotteen_toimittajat.tuoteno, tuotteen_toimittajat.liitostunnus
               FROM tuotteen_toimittajat_tuotenumerot
               JOIN tuotteen_toimittajat ON (tuotteen_toimittajat_tuotenumerot.yhtio = tuotteen_toimittajat.yhtio
               AND tuotteen_toimittajat.tunnus                  = tuotteen_toimittajat_tuotenumerot.toim_tuoteno_tunnus)
               WHERE tuotteen_toimittajat_tuotenumerot.yhtio    = '{$kukarow['yhtio']}'
               AND tuotteen_toimittajat_tuotenumerot.viivakoodi = '{$viivakoodi}')
               LIMIT 200";
    $chk_res = pupe_query($query);

    if (mysql_num_rows($chk_res) == 0) {
      $viivakooditark = substr($viivakoodi, 0 , -1);
      // Haetaan eankoodilla ilman tarkistusnumeroa tuotenumeroa kolmesta eri paikkaa
      $query = "(SELECT tuoteno, '' liitostunnus
                 FROM tuote
                 WHERE yhtio                                      = '{$kukarow['yhtio']}'
                 AND eankoodi                                     = '{$viivakooditark}')
                 UNION
                 (SELECT tuoteno, liitostunnus
                 FROM tuotteen_toimittajat
                 WHERE yhtio                                      = '{$kukarow['yhtio']}'
                 AND viivakoodi                                   = '{$viivakooditark}')
                 UNION
                 (SELECT tuotteen_toimittajat.tuoteno, tuotteen_toimittajat.liitostunnus
                 FROM tuotteen_toimittajat_tuotenumerot
                 JOIN tuotteen_toimittajat ON (tuotteen_toimittajat_tuotenumerot.yhtio = tuotteen_toimittajat.yhtio
                 AND tuotteen_toimittajat.tunnus                  = tuotteen_toimittajat_tuotenumerot.toim_tuoteno_tunnus)
                 WHERE tuotteen_toimittajat_tuotenumerot.yhtio    = '{$kukarow['yhtio']}'
                 AND tuotteen_toimittajat_tuotenumerot.viivakoodi = '{$viivakooditark}')
                 LIMIT 200";
      $chk_res = pupe_query($query);
    }
    while ($row = mysql_fetch_assoc($chk_res)) {
      $viivakoodit[$row['tuoteno']][] = $row['liitostunnus'];
    }

    return $viivakoodit;
  }
}

if (!function_exists("splittaa_valmistukset")) {
  function splittaa_valmistukset($tunnus) {
    global $yhtiorow, $kukarow;

    // Otetaan laskurow talteen, ja nollataan sielt‰ kent‰t jota ei monisteta
    $query = "SELECT *
              FROM lasku
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$tunnus}'";
    $laskures = pupe_query($query);
    $laskurow = mysql_fetch_assoc($laskures);

    unset($laskurow['tunnus']);
    unset($laskurow['muutospvm']);
    unset($laskurow['muuttaja']);
    unset($laskurow['luontiaika']);
    unset($laskurow['laatija']);
    unset($laskurow['toimaika']);
    unset($laskurow['kerayspvm']);
    unset($laskurow['kohde']);
    unset($laskurow['alatila']);

    // Haetaan kaikki valmisteet
    $query = "SELECT tilausrivi.*,
              tilausrivin_lisatiedot.positio
              FROM tilausrivi
              LEFT JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus)
              WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus = '{$tunnus}'
              AND tilausrivi.tyyppi  in ('W','M')
              ORDER BY tilausrivi.tunnus";
    $tilausrivi_split_result = pupe_query($query);

    $valmistuksen_splittaus_rivi = 0;
    $valmistus_tunnukset = array();

    while ($tilausrivi_split_row = mysql_fetch_assoc($tilausrivi_split_result)) {

      $_toimaika  = ($tilausrivi_split_row['toimaika'] == '0000-00-00') ? $laskurow['toimaika'] : $tilausrivi_split_row['toimaika'];
      $_kerayspvm = ($tilausrivi_split_row['kerayspvm'] == '0000-00-00') ? $laskurow['kerayspvm'] : $tilausrivi_split_row['kerayspvm'];
      $_kohde     = ($tilausrivi_split_row['positio'] == '') ? $laskurow['kohde'] : $tilausrivi_split_row['positio'];

      // J‰tet‰‰n ensimm‰inen rivi alkuper‰iselle otsikolle
      if ($valmistuksen_splittaus_rivi == 0) {
        $valmistus_tunnukset[] = $tilausrivi_split_row['otunnus'];
        $query = "UPDATE lasku
                  SET kohde = '{$_kohde}',
                  toimaika    = '{$_toimaika}',
                  kerayspvm   = '{$_kerayspvm}',
                  muutospvm   = now(),
                  muuttaja    = '{$kukarow['kuka']}'
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$tilausrivi_split_row['otunnus']}'";
        pupe_query($query);

        $valmistuksen_splittaus_rivi++;
        continue;
      }

      $query = "INSERT INTO lasku (
                ".implode(", ", array_keys($laskurow)).",
                luontiaika,
                laatija,
                muutospvm,
                muuttaja,
                toimaika,
                kerayspvm,
                kohde,
                alatila)
                VALUES (
                '".implode("', '", array_values($laskurow))."',
                now(),
                '{$kukarow['kuka']}',
                now(),
                '{$kukarow['kuka']}',
                '{$_toimaika}',
                '{$_kerayspvm}',
                '{$_kohde}',
                '')";
      pupe_query($query);
      $valmistus_tunnus = mysql_insert_id($GLOBALS["masterlink"]);
      $valmistus_tunnukset[] = $valmistus_tunnus;

      // Siirret‰‰n koko perhe uudelle otsikolle
      if (!empty($valmistus_tunnus)) {
        $query = "UPDATE tilausrivi SET otunnus = '{$valmistus_tunnus}'
                  WHERE yhtio  = '{$kukarow['yhtio']}'
                  AND otunnus  = '{$tunnus}'
                  AND perheid  = '{$tilausrivi_split_row['tunnus']}'
                  AND perheid != 0";
        pupe_query($query);
      }
    }

    return $valmistus_tunnukset;
  }
}

if (!function_exists('laske_ext_ennakko_hinta')) {
  function laske_ext_ennakko_hinta($trow, $laskurow) {
    global $kukarow, $yhtiorow;

    $kielilisa = "FI";

    if (strtoupper($laskurow["maa"]) == "SE") {
      $kielilisa = "SE";
    }

    $query = "SELECT selite AS ennakko_pros_a
              FROM tuotteen_avainsanat
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND tuoteno  = '{$trow['tuoteno']}'
              AND laji     = 'parametri_ennakkoale_a'
              AND kieli    = '{$kielilisa}'
              AND selite  != ''
              ORDER BY ennakko_pros_a DESC
              LIMIT 1";
    $result = pupe_query($query);

    // Haetaanko ruotsihinnat
    if (strtoupper($laskurow["valkoodi"]) != strtoupper($yhtiorow['valkoodi'])) {
      $query = "SELECT alv
                FROM tuotteen_alv
                WHERE tuoteno = '{$trow['tuoteno']}'
                AND maa       = '{$laskurow['maa']}'";
      $tuotteen_alv_resu = pupe_query($query);
      $tuotteen_alv_rivi = mysql_fetch_assoc($tuotteen_alv_resu);

      $alv = $tuotteen_alv_rivi['alv'];

      $trow['myyntihinta'] = tuotteen_myyntihinta($laskurow, $trow, $trow['varattu']);
    }

    $hinta = "";

    if (mysql_num_rows($result) == 1) {
      $tuotteen_hinta = mysql_fetch_assoc($result);
      $hinta = $trow['myyntihinta'] * (1 - ($tuotteen_hinta['ennakko_pros_a'] / 100));
    }

    return $hinta;
  }
}

if (!function_exists('vapauta_kateistasmaytys')) {
  function vapauta_kateistasmaytys($kassalipasrow, $paiva) {
    global $kukarow, $yhtiorow;

    // Katsotaan onko kassalippaan t‰m‰n p‰iv‰n kassa jo t‰sm‰ytetty
    $tasmays_query = "SELECT group_concat(distinct lasku.tunnus) ltunnukset,
                      group_concat(distinct tiliointi.selite) selite
                      FROM lasku
                      JOIN tiliointi ON (tiliointi.yhtio = lasku.yhtio AND tiliointi.ltunnus = lasku.tunnus AND tiliointi.selite LIKE '$kassalipasrow[nimi] %' AND tiliointi.korjattu = '')
                      WHERE lasku.yhtio = '$kukarow[yhtio]'
                      AND lasku.tila    = 'X'
                      AND lasku.alatila = 'K'
                      AND lasku.tapvm   = '$paiva'";
    $tasmays_result = pupe_query($tasmays_query);
    $tasmaysrow = mysql_fetch_assoc($tasmays_result);

    // Jos on, niin poistetaan t‰sm‰ytys
    if ($tasmaysrow["ltunnukset"] != "") {
      $query = "UPDATE tiliointi
                SET korjattu = '{$kukarow['kuka']}',
                korjausaika  = NOW()
                WHERE yhtio  = '{$kukarow['yhtio']}'
                AND ltunnus  IN ({$tasmaysrow['ltunnukset']})
                AND korjattu = ''";
      $result = pupe_query($query);

      $query = "UPDATE lasku
                SET tila = 'D',
                alatila     = 'X',
                comments    = CONCAT(comments, ' {$kukarow['kuka']} mit‰tˆi tositteen eikateinen.php ohjelmassa')
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  IN ({$tasmaysrow['ltunnukset']})";
      $result = pupe_query($query);

      echo "<font class='error'>".t("Vapautettiin kassojen %s p‰iv‰n %s tosite.", '', $kassalipasrow['nimi'], $paiva)."<br/><br/>";
      echo t("Sinun on t‰sm‰ytett‰v‰ p‰iv‰n k‰teismyynnit uudelleen k‰teismyynnit ohjelmasta") . "</font>";

      return true;
    }

    return false;
  }
}

if (!function_exists('hyllysiirto')) {
  function hyllysiirto($params) {
    global $kukarow, $yhtiorow;

    $error = false;

    if (!isset($params['kappaleet']) or !is_numeric($params['kappaleet'])) $error = true;
    else $kappaleet = $params['kappaleet'];

    if (!isset($params['lisavaruste'])) $error = true;
    else $lisavaruste = $params['lisavaruste'];

    if (!isset($params['tuoteno']) or trim($params['tuoteno']) == '') $error = true;
    else $tuoteno = $params['tuoteno'];

    if (!isset($params['tuotepaikat_tunnus_otetaan']) or (int) $params['tuotepaikat_tunnus_otetaan'] == 0) $error = true;
    else $tuotepaikat_tunnus_otetaan = (int) $params['tuotepaikat_tunnus_otetaan'];

    if (!isset($params['tuotepaikat_tunnus_siirretaan']) or (int) $params['tuotepaikat_tunnus_siirretaan'] == 0) $error = true;
    else $tuotepaikat_tunnus_siirretaan = (int) $params['tuotepaikat_tunnus_siirretaan'];

    // $mistarow = Mist‰ varastosta otetaan? (tuotepaikat)
    if (!isset($params['mistarow']) or !is_array($params['mistarow'])) $error = true;
    else $mistarow = $params['mistarow'];

    // $minnerow = Minne varastoon vied‰‰n? (tuotepaikat)
    if (!isset($params['minnerow']) or !is_array($params['minnerow'])) $error = true;
    else $minnerow = $params['minnerow'];

    if (!isset($params['sarjano_array']) or !is_array($params['sarjano_array'])) $error = true;
    else $sarjano_array = $params['sarjano_array'];

    if (!isset($params['selite'])) $error = true;
    else $selite = $params['selite'];

    if (!isset($params['tun'])) $error = true;
    else $tun = (int) $params['tun'];

    if (!isset($params['poikkeavalaskutuspvm'])) $_poikkeavalaskutuspvm = '';
    else $_poikkeavalaskutuspvm = $params['poikkeavalaskutuspvm'];

    if (!isset($params['kohdepaikasta_oletuspaikka'])) $kohdepaikasta_oletuspaikka = "";
    else $kohdepaikasta_oletuspaikka = $params['kohdepaikasta_oletuspaikka'];

    if ($error) return false;

    if ($lisavaruste == "LISAVARUSTE") {
      $lisavarlisa1 = " saldo_varattu = saldo_varattu - {$kappaleet}, ";
      $lisavarlisa2 = " saldo_varattu = saldo_varattu + {$kappaleet}, ";
    }
    else {
      $lisavarlisa1 = "";
      $lisavarlisa2 = "";
    }

    $uusi_paikka = false;
    $_chk = false;

    if ($yhtiorow['inventointi_siirron_yhteydessa'] == "K") {
      $query = "SELECT laji
                FROM tapahtuma
                WHERE yhtio   = '{$kukarow['yhtio']}'
                AND tuoteno   = '{$tuoteno}'
                AND hyllyalue = '{$minnerow['hyllyalue']}'
                AND hyllynro  = '{$minnerow['hyllynro']}'
                AND hyllyvali = '{$minnerow['hyllyvali']}'
                AND hyllytaso = '{$minnerow['hyllytaso']}'
                ORDER BY laadittu DESC
                LIMIT 1";
      $uusipaikka_chk_res = pupe_query($query);
      $uusipaikka_chk_row = mysql_fetch_assoc($uusipaikka_chk_res);

      $_laji_chk = strtolower($uusipaikka_chk_row['laji']);

      if ($_laji_chk == 'uusipaikka') {
        $_chk = true;
      }
      elseif ($_laji_chk == 'inventointi' and $minnerow['saldo'] == 0) {
        // Jos tapahtuma oli inventointi ja saldo oli 0
        $_chk = true;
      }

      if ($_chk) {
        $uusi_paikka = true;
        $lisavarlisa2 .= " inventointiaika = now(), ";
      }
    }

    // Mist‰ varastosta otetaan?
    $query = "UPDATE tuotepaikat
              set saldo = saldo - {$kappaleet},
              {$lisavarlisa1}
              saldoaika     = now(),
              muuttaja      = '{$kukarow['kuka']}',
              muutospvm     = now()
              WHERE tuoteno = '{$tuoteno}'
              and yhtio     = '{$kukarow['yhtio']}'
              and tunnus    = {$tuotepaikat_tunnus_otetaan}";
    $result = pupe_query($query);

    // Minne varastoon vied‰‰n?
    $query = "UPDATE tuotepaikat
              set saldo   = saldo + {$kappaleet},
              {$lisavarlisa2}
              saldoaika     = now(),
              muuttaja      = '{$kukarow['kuka']}',
              muutospvm     = now()
              WHERE tuoteno = '{$tuoteno}'
              and yhtio     = '{$kukarow['yhtio']}'
              and tunnus    = {$tuotepaikat_tunnus_siirretaan}";
    $result = pupe_query($query);

    if ($minnerow["hyllyalue"] == "!!M") {
      $asiakkaan_tunnus = (int) $minnerow["hyllynro"].$minnerow["hyllyvali"].$minnerow["hyllytaso"];
      $query = "SELECT if(nimi = toim_nimi OR toim_nimi = '', nimi, concat(nimi, ' / ', toim_nimi)) asiakkaan_nimi
                FROM asiakas
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$asiakkaan_tunnus}'";
      $asiakasresult = pupe_query($query);
      $asiakasrow = mysql_fetch_assoc($asiakasresult);
      $minne_texti = t("Myyntitili")." ".$asiakasrow["asiakkaan_nimi"];
    }
    else {
      $minne_texti = $minnerow['hyllyalue']." ".$minnerow['hyllynro']." ".$minnerow['hyllyvali']." ".$minnerow['hyllytaso'];
    }

    if ($mistarow["hyllyalue"] == "!!M") {
      $asiakkaan_tunnus = (int) $mistarow["hyllynro"].$mistarow["hyllyvali"].$mistarow["hyllytaso"];
      $query = "SELECT if(nimi = toim_nimi OR toim_nimi = '', nimi, concat(nimi, ' / ', toim_nimi)) asiakkaan_nimi
                FROM asiakas
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$asiakkaan_tunnus}'";
      $asiakasresult = pupe_query($query);
      $asiakasrow = mysql_fetch_assoc($asiakasresult);
      $mista_texti = t("Myyntitili")." ".$asiakasrow["asiakkaan_nimi"];
    }
    else {
      $mista_texti = $mistarow['hyllyalue']." ".$mistarow['hyllynro']." ".$mistarow['hyllyvali']." ".$mistarow['hyllytaso'];
    }

    $kehahin_query = "SELECT tuote.sarjanumeroseuranta,
                      round(if (tuote.epakurantti100pvm = '0000-00-00',
                          if (tuote.epakurantti75pvm = '0000-00-00',
                            if (tuote.epakurantti50pvm = '0000-00-00',
                              if (tuote.epakurantti25pvm = '0000-00-00',
                                tuote.kehahin,
                              tuote.kehahin * 0.75),
                            tuote.kehahin * 0.5),
                          tuote.kehahin * 0.25),
                        0),
                      6) kehahin,
                      tuotetyyppi
                      FROM tuote
                      WHERE yhtio = '{$kukarow['yhtio']}'
                      and tuoteno = '{$tuoteno}'";
    $kehahin_result = pupe_query($kehahin_query);
    $kehahin_row = mysql_fetch_array($kehahin_result);

    $keskihankintahinta = $kehahin_row['kehahin'];

    if ($kehahin_row['sarjanumeroseuranta'] == 'G') {
      $keskihankintahinta = sarjanumeron_ostohinta("tunnus", $sarjano_array[0]);
    }
    elseif ($kehahin_row['sarjanumeroseuranta'] == 'S') {
      $keskihankintahinta = 0;

      foreach ($sarjano_array as $sarjano) {
        $keskihankintahinta +=  sarjanumeron_ostohinta("tunnus", $sarjano);
      }

      $keskihankintahinta = round($keskihankintahinta / count($sarjano_array), 6);
    }

    if ($selite != '') {
      $selite = ": {$selite}";
    }
    else {
      $selite = "";
    }

    if ($_poikkeavalaskutuspvm != '') {
      $_laadittu = $_poikkeavalaskutuspvm." 23:59:59";
      $_tapvm = $_poikkeavalaskutuspvm;
    }
    else {
      $_laadittu = date("Y-m-d H:i:s");
      $_tapvm = date("Y-m-d");
    }

    $query = "INSERT into tapahtuma set
              yhtio      = '{$kukarow['yhtio']}',
              tuoteno    = '{$tuoteno}',
              kpl        = {$kappaleet} * -1,
              hinta      = '{$keskihankintahinta}',
              laji       = 'siirto',
              hyllyalue  = '{$mistarow['hyllyalue']}',
              hyllynro   = '{$mistarow['hyllynro']}',
              hyllyvali  = '{$mistarow['hyllyvali']}',
              hyllytaso  = '{$mistarow['hyllytaso']}',
              rivitunnus = {$tun},
              selite     = '".t("Paikalta")." {$mista_texti} ".t("v‰hennettiin")." {$kappaleet}{$selite}',
              laatija    = '{$kukarow['kuka']}',
              laadittu   = '$_laadittu'";
    $result = pupe_query($query);
    $mista_tapa_tunnus = mysql_insert_id($GLOBALS["masterlink"]);

    $query = "INSERT into tapahtuma set
              yhtio      = '{$kukarow['yhtio']}',
              tuoteno    = '{$tuoteno}',
              kpl        = '{$kappaleet}',
              hinta      = '{$keskihankintahinta}',
              laji       = 'siirto',
              hyllyalue  = '{$minnerow['hyllyalue']}',
              hyllynro   = '{$minnerow['hyllynro']}',
              hyllyvali  = '{$minnerow['hyllyvali']}',
              hyllytaso  = '{$minnerow['hyllytaso']}',
              rivitunnus = {$tun},
              selite     = '".t("Paikalle")." {$minne_texti} ".t("lis‰ttiin")." {$kappaleet}{$selite}',
              laatija    = '{$kukarow['kuka']}',
              laadittu   = '$_laadittu'";
    $result = pupe_query($query);
    $minne_tapa_tunnus = mysql_insert_id($GLOBALS["masterlink"]);

    if ($yhtiorow['inventointi_siirron_yhteydessa'] == "K" and $uusi_paikka) {
      $query = "INSERT into tapahtuma set
                yhtio     = '{$kukarow['yhtio']}',
                tuoteno   = '{$tuoteno}',
                kpl       = '0',
                kplhinta  = '{$keskihankintahinta}',
                hinta     = '{$keskihankintahinta}',
                laji      = 'Inventointi',
                hyllyalue = '{$minnerow['hyllyalue']}',
                hyllynro  = '{$minnerow['hyllynro']}',
                hyllyvali = '{$minnerow['hyllyvali']}',
                hyllytaso = '{$minnerow['hyllytaso']}',
                selite    = '".t("Saldo %d t‰sm‰si. Automaattinen inventointi siirron yhteydess‰", "", $kappaleet)."',
                laatija   = '{$kukarow['kuka']}',
                laadittu  = '$_laadittu'";
      $result = pupe_query($query);
    }

    // Tehd‰‰n kirjanpito
    if ($yhtiorow["tarkenteiden_prioriteetti"] == "T") {
      // L‰hett‰v‰ varasto
      $mistavarasto = kuuluukovarastoon($mistarow['hyllyalue'], $mistarow['hyllynro']);
      $minnevarasto = kuuluukovarastoon($minnerow['hyllyalue'], $minnerow['hyllynro']);

      $mista_kustp    = 0;
      $mista_kohde    = 0;
      $mista_projekti = 0;

      $query = "SELECT toimipaikka
                FROM varastopaikat
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '$mistavarasto'";
      $mistavarasto_res = pupe_query($query);
      $mistavarasto_row = mysql_fetch_assoc($mistavarasto_res);

      if ($mistavarasto_row['toimipaikka'] > 0) {
        $query = "SELECT kustp, kohde, projekti, tunnus
                  FROM yhtion_toimipaikat
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$mistavarasto_row['toimipaikka']}'";
        $mistatoimipaikka_res = pupe_query($query);
        $mistatoimipaikka_row = mysql_fetch_assoc($mistatoimipaikka_res);
      }

      $query = "SELECT toimi.tilino,
                toimi.kustannuspaikka AS kustp,
                toimi.kohde AS kohde,
                toimi.projekti AS projekti
                FROM tuotteen_toimittajat
                JOIN toimi ON (toimi.yhtio = tuotteen_toimittajat.yhtio AND toimi.tunnus = tuotteen_toimittajat.liitostunnus AND toimi.tyyppi != 'P')
                WHERE tuotteen_toimittajat.yhtio = '{$kukarow['yhtio']}'
                AND tuotteen_toimittajat.tuoteno = '{$tuoteno}'
                ORDER BY if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys), tuotteen_toimittajat.tunnus
                LIMIT 1";
      $result = pupe_query($query);
      $toimirow = mysql_fetch_assoc($result);

      if ($mistatoimipaikka_row['tunnus'] > 0) {
        if ($mista_kustp == 0)    $mista_kustp    = $mistatoimipaikka_row['kustp'];
        if ($mista_kohde == 0)    $mista_kohde    = $mistatoimipaikka_row['kohde'];
        if ($mista_projekti == 0) $mista_projekti = $mistatoimipaikka_row['projekti'];
      }
      else {
        if ($mista_kustp == 0)    $mista_kustp    = $toimirow['kustp'];
        if ($mista_kohde == 0)    $mista_kohde    = $toimirow['kohde'];
        if ($mista_projekti == 0) $mista_projekti = $toimirow['projekti'];
      }

      if ($mista_kustp > 0 or $mista_kohde > 0 or $mista_projekti > 0) {
        $minne_kustp    = 0;
        $minne_kohde    = 0;
        $minne_projekti = 0;

        if ($minnevarasto > 0) {
          $query = "SELECT toimipaikka
                    FROM varastopaikat
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '$minnevarasto'";
          $minnevarasto_res = pupe_query($query);
          $minnevarasto_row = mysql_fetch_assoc($minnevarasto_res);

          if ($minnevarasto_row['toimipaikka'] > 0) {
            $query = "SELECT kustp, kohde, projekti
                      FROM yhtion_toimipaikat
                      WHERE yhtio = '{$kukarow['yhtio']}'
                      AND tunnus  = '{$minnevarasto_row['toimipaikka']}'";
            $minnetoimipaikka_res = pupe_query($query);
            $minnetoimipaikka_row = mysql_fetch_assoc($minnetoimipaikka_res);

            if ($minne_kustp == 0)    $minne_kustp    = $minnetoimipaikka_row['kustp'];
            if ($minne_kohde == 0)    $minne_kohde    = $minnetoimipaikka_row['kohde'];
            if ($minne_projekti == 0) $minne_projekti = $minnetoimipaikka_row['projekti'];
          }
        }

        $mennaanko = FALSE;

        if ($mista_kustp > 0 and $minne_kustp > 0 and $mista_kustp != $minne_kustp) {
          $mennaanko = TRUE;
        }
        if ($mista_kohde > 0 and $minne_kohde > 0 and $mista_kohde != $minne_kohde) {
          $mennaanko = TRUE;
        }
        if ($mista_projekti > 0 and $minne_projekti > 0 and $mista_projekti != $minne_projekti) {
          $mennaanko = TRUE;
        }

        $varastonmuutos = round($kappaleet * $keskihankintahinta, 2);
        $varastonmuutos_neg = round(-1 * $kappaleet * $keskihankintahinta, 2);

        if ($varastonmuutos != 0 and $mennaanko) {

          $laskuid = 0;

          // Lˆytyykˆ sopiva tosite
          if ((int) $tun > 0) {
            $query = "SELECT lasku.tunnus
                      FROM tilausrivi
                      JOIN lasku ON (lasku.yhtio=tilausrivi.yhtio and lasku.tunnus=tilausrivi.otunnus and lasku.tila = 'G')
                      WHERE tilausrivi.tunnus = '$tun'
                      and tilausrivi.tyyppi   = 'G'
                      and tilausrivi.yhtio    = '$kukarow[yhtio]'";
            $result = pupe_query($query);

            if (mysql_num_rows($result) == 1) {
              $lasrow = mysql_fetch_assoc($result);
              $laskuid = $lasrow['tunnus'];
            }
          }

          if ($laskuid == 0) {
            $query = "SELECT tunnus
                      FROM lasku
                      WHERE tila  = 'X'
                      and alatila = 'G'
                      and tapvm   = '$_tapvm'
                      and yhtio   = '$kukarow[yhtio]'";
            $result = pupe_query($query);

            if (mysql_num_rows($result) == 1) {
              $lasrow = mysql_fetch_assoc($result);
              $laskuid = $lasrow['tunnus'];
            }
          }

          if ($laskuid == 0) {
            $query = "INSERT into lasku set
                      yhtio      = '$kukarow[yhtio]',
                      tapvm      = '$_tapvm',
                      tila       = 'X',
                      alatila    = 'G',
                      laatija    = '$kukarow[kuka]',
                      luontiaika = '$_laadittu'";
            $result = pupe_query($query);
            $laskuid = mysql_insert_id($GLOBALS["masterlink"]);
          }

          $varastotili = $yhtiorow["varasto"];
          $varastonmuutostili = $yhtiorow["varastonmuutos"];

          // Jos tiliˆid‰‰n raaka-ainemuutokset raaka-ainetileille ja kyseess‰ on raaka-aine
          if ($yhtiorow["raaka_aine_tiliointi"] == "Y") {
            if ($kehahin_row["tuotetyyppi"] == "R") {
              $varastotili = $yhtiorow["raaka_ainevarasto"];
              $varastonmuutostili = $yhtiorow["raaka_ainevarastonmuutos"];
            }
          }

          // Mist‰ varasto
          $query = "INSERT into tiliointi set
                    yhtio           = '$kukarow[yhtio]',
                    ltunnus         = '$laskuid',
                    tilino          = '{$varastotili}',
                    kustp           = '{$mista_kustp}',
                    kohde           = '{$mista_kohde}',
                    projekti        = '{$mista_projekti}',
                    tapvm           = '$_tapvm',
                    summa           = {$varastonmuutos_neg},
                    vero            = 0,
                    lukko           = '',
                    tapahtumatunnus = $mista_tapa_tunnus,
                    selite          = '".t("Paikalta")." {$mista_texti} ".t("v‰hennettiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                    laatija         = '$kukarow[kuka]',
                    laadittu        = now()";
          $result = pupe_query($query);

          // Mist‰ varastonmuutos
          $query = "INSERT into tiliointi set
                    yhtio           = '$kukarow[yhtio]',
                    ltunnus         = '$laskuid',
                    tilino          = '{$varastonmuutostili}',
                    kustp           = '{$mista_kustp}',
                    kohde           = '{$mista_kohde}',
                    projekti        = '{$mista_projekti}',
                    tapvm           = '$_tapvm',
                    summa           = {$varastonmuutos},
                    vero            = 0,
                    lukko           = '',
                    tapahtumatunnus = $mista_tapa_tunnus,
                    selite          = '".t("Paikalta")." {$mista_texti} ".t("v‰hennettiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                    laatija         = '$kukarow[kuka]',
                    laadittu        = now()";
          $result = pupe_query($query);

          // jos ostotili lˆytyy, tehd‰‰n sinne kirjaukset kanssa
          if ($toimirow['tilino'] != '') {
            // Mist‰ ostotili
            $query = "INSERT into tiliointi set
                      yhtio           = '$kukarow[yhtio]',
                      ltunnus         = '$laskuid',
                      tilino          = '{$toimirow['tilino']}',
                      kustp           = '{$mista_kustp}',
                      kohde           = '{$mista_kohde}',
                      projekti        = '{$mista_projekti}',
                      tapvm           = '$_tapvm',
                      summa           = {$varastonmuutos_neg},
                      vero            = 0,
                      lukko           = '',
                      tapahtumatunnus = $mista_tapa_tunnus,
                      selite          = '".t("Paikalta")." {$mista_texti} ".t("v‰hennettiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                      laatija         = '$kukarow[kuka]',
                      laadittu        = now()";
            $result = pupe_query($query);

            // Minne ostotili
            $query = "INSERT into tiliointi set
                      yhtio           = '$kukarow[yhtio]',
                      ltunnus         = '$laskuid',
                      tilino          = '{$toimirow['tilino']}',
                      kustp           = '{$minne_kustp}',
                      kohde           = '{$minne_kohde}',
                      projekti        = '{$minne_projekti}',
                      tapvm           = '$_tapvm',
                      summa           = {$varastonmuutos},
                      vero            = 0,
                      lukko           = '',
                      tapahtumatunnus = $minne_tapa_tunnus,
                      selite          = '".t("Paikalle")." {$minne_texti} ".t("lis‰ttiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                      laatija         = '$kukarow[kuka]',
                      laadittu        = now()";
            $result = pupe_query($query);
          }

          // Minne varasto
          $query = "INSERT into tiliointi set
                    yhtio           = '$kukarow[yhtio]',
                    ltunnus         = '$laskuid',
                    tilino          = '{$varastotili}',
                    kustp           = '{$minne_kustp}',
                    kohde           = '{$minne_kohde}',
                    projekti        = '{$minne_projekti}',
                    tapvm           = '$_tapvm',
                    summa           = {$varastonmuutos},
                    vero            = 0,
                    lukko           = '',
                    tapahtumatunnus = $minne_tapa_tunnus,
                    selite          = '".t("Paikalle")." {$minne_texti} ".t("lis‰ttiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                    laatija         = '$kukarow[kuka]',
                    laadittu        = now()";
          $result = pupe_query($query);

          // Minne varastonmuutos
          $query = "INSERT into tiliointi set
                    yhtio           = '$kukarow[yhtio]',
                    ltunnus         = '$laskuid',
                    tilino          = '{$varastonmuutostili}',
                    kustp           = '{$minne_kustp}',
                    kohde           = '{$minne_kohde}',
                    projekti        = '{$minne_projekti}',
                    tapvm           = '$_tapvm',
                    summa           = {$varastonmuutos_neg},
                    vero            = 0,
                    lukko           = '',
                    tapahtumatunnus = $minne_tapa_tunnus,
                    selite          = '".t("Paikalle")." {$minne_texti} ".t("lis‰ttiin")." ".t("tuotetta")." {$tuoteno} {$kappaleet}{$selite}',
                    laatija         = '$kukarow[kuka]',
                    laadittu        = now()";
          $result = pupe_query($query);
        }
      }
    }
  }
}

if (!function_exists('laske_siirrettava_maara')) {
  function laske_siirrettava_maara($row) {
    global $kukarow, $yhtiorow;

    $siirrettavat_rivit = array();

    // Lets lock up
    $query = "LOCK TABLES
              lasku READ,
              lasku AS l1 READ,
              tilausrivi READ,
              tilausrivi AS t1 READ,
              tilausrivi AS t2 READ,
              tuote READ,
              tuotepaikat READ,
              varastopaikat READ";
    $res = pupe_query($query);

    list($saldo, $hyllyssa, $siirrettava_yht, $devnull) = saldo_myytavissa($row['tuoteno'], '', 0, '', $row['hyllyalue'], $row['hyllynro'], $row['hyllyvali'], $row['hyllytaso']);

    $query = "(SELECT t1.tunnus, t1.otunnus, t1.varattu
               FROM lasku AS l1
               JOIN tilausrivi AS t1 ON (
                 t1.yhtio          = l1.yhtio AND
                 t1.otunnus        = l1.tunnus AND
                 t1.tuoteno        = '{$row['tuoteno']}' AND
                 t1.hyllyalue      = '{$row['hyllyalue']}' AND
                 t1.hyllynro       = '{$row['hyllynro']}' AND
                 t1.hyllyvali      = '{$row['hyllyvali']}' AND
                 t1.hyllytaso      = '{$row['hyllytaso']}' AND
                 t1.tyyppi         IN ('L','G') AND
                 t1.var            IN ('','H') AND
                 t1.keratty        = '' AND
                 t1.uusiotunnus    = 0 AND
                 t1.kpl            = 0 AND
                 t1.varattu        > 0
               )
               WHERE l1.yhtio      = '{$kukarow['yhtio']}'
               AND ((l1.tila = 'N' AND l1.alatila != 'X')
                 OR (l1.tila = 'G' AND l1.alatila IN ('', 'J'))))
               UNION
               (SELECT t2.tunnus, t2.otunnus, t2.jt + t2.varattu AS varattu
               FROM tilausrivi AS t2
               WHERE t2.yhtio      = '{$kukarow['yhtio']}'
               AND  t2.tuoteno     = '{$row['tuoteno']}'
               AND  t2.hyllyalue   = '{$row['hyllyalue']}'
               AND  t2.hyllynro    = '{$row['hyllynro']}'
               AND  t2.hyllyvali   = '{$row['hyllyvali']}'
               AND  t2.hyllytaso   = '{$row['hyllytaso']}'
               AND  t2.tyyppi      IN ('L','G')
               AND  t2.var         = 'J'
               AND  t2.keratty     = ''
               AND  t2.uusiotunnus = 0
               AND  t2.kpl         = 0
               AND  t2.jt + t2.varattu > 0)";
    $result = pupe_query($query);

    while ($saldorow = mysql_fetch_assoc($result)) {

      $siirrettava_yht += $saldorow['varattu'];
      $siirrettavat_rivit[] = $saldorow['tunnus'];
    }

    // poistetaan lukko
    $query = "UNLOCK TABLES";
    $res   = pupe_query($query);

    return array($siirrettava_yht, $siirrettavat_rivit);
  }
}

if (!function_exists('paivita_rahtikirjat_tulostetuksi_ja_toimitetuksi')) {
  function paivita_rahtikirjat_tulostetuksi_ja_toimitetuksi(array $params) {
    global $kukarow, $pupe_root_polku;

    $otunnukset = isset($params['otunnukset']) ? $params['otunnukset'] : '';
    $kilotyht = isset($params['kilotyht']) ? $params['kilotyht'] : '';

    if ($otunnukset == '') return false;

    // kotimaan myynti menee alatilaan D
    $query = "UPDATE lasku SET
              alatila       = 'D'
              WHERE tunnus  IN ({$otunnukset})
              AND vienti    = ''
              AND yhtio     = '{$kukarow['yhtio']}'
              AND alatila  != 'X'";
    $ures  = pupe_query($query);

    // vientilaskut menee alatilaan B
    $query = "UPDATE lasku SET
              alatila       = 'B'
              WHERE tunnus  IN ({$otunnukset})
              AND vienti   != ''
              AND yhtio     = '{$kukarow['yhtio']}'
              AND alatila  != 'X'";
    $ures  = pupe_query($query);

    // jos laskulla on maksupositioita, menee ne alatilaan J
    $query = "UPDATE lasku SET
              alatila         = 'J'
              WHERE tunnus    IN ({$otunnukset})
              AND jaksotettu != 0
              AND yhtio       = '{$kukarow['yhtio']}'
              AND alatila    != 'X'";
    $ures  = pupe_query($query);

    // verkkolaskutettavat EU-viennit menee alatilaan D, jos niill‰ on tarpeeksi lis‰tietoja
    $query = "UPDATE lasku SET
              alatila                      = 'D',
              bruttopaino                  = '{$kilotyht}'
              WHERE yhtio                  = '{$kukarow['yhtio']}'
              AND tunnus                   IN ({$otunnukset})
              AND vienti                   = 'E'
              AND chn                      IN ('020', '030')
              AND maa_maara               != ''
              AND kauppatapahtuman_luonne  > 0
              AND kuljetusmuoto           != ''
              AND alatila                 != 'X'";
    $ures  = pupe_query($query);

    // Etuk‰teen maksetut tilaukset pit‰‰ muuttaa takaisin "maksettu"-tilaan
    $query = "UPDATE lasku SET
              alatila      = 'X'
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND tunnus   IN ({$otunnukset})
              AND mapvm   != '0000-00-00'
              AND chn      = '999'";
    $ures  = pupe_query($query);

    // Etuk‰teen maksettu Magentotilaus laskutetaan, jos ei ole jo laskuttunut
    laskuta_magentojt($otunnukset);
  }
}

if (!function_exists('laskuta_magentojt')) {
  function laskuta_magentojt($tilausnumerot, $laskutus = true) {
    global $kukarow, $yhtiorow, $pupe_root_polku, $magento_api_tt_url, $magento_api_tt_usr, $magento_api_tt_pas;

    // Etuk‰teen maksettu Magentotilaus laskutetaan, jos ei ole jo laskuttunut
    // Haetaan ennen sit‰ verkkokaupan kassalipas
    $query = "SELECT *
              FROM lasku
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus   IN ({$tilausnumerot})
              AND alatila != 'X'
              AND ohjelma_moduli = 'MAGENTOJT'";
    $laskurow_result = pupe_query($query);

    if (mysql_num_rows($laskurow_result) == 0) {
      return "";
    }

    while ($laskurow = mysql_fetch_assoc($laskurow_result)) {
      // tarkistetaan ett‰ on k‰teismaksuehto
      // haetaan kassalipas jotta verkkokaupan tiliˆinnit menee n‰tisti
      // ja laskutetaan tilaus
      $query = "SELECT *
                FROM maksuehto
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$laskurow['maksuehto']}'";
      $maksuehto_result = pupe_query($query);
      $maksuehtorow = mysql_fetch_assoc($maksuehto_result);

      if ($maksuehtorow['kateinen'] != '') {

        $query = "SELECT tunnus
                  FROM kassalipas
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND nimi    = 'Verkkokauppa'";
        $kassalipas_res = pupe_query($query);

        if (mysql_num_rows($kassalipas_res) == 1) {
          $kassalipas_row = mysql_fetch_assoc($kassalipas_res);
          $kukarow["kassamyyja"] = $laskurow['kassalipas'] = $kassalipas_row["tunnus"];
        }

        // P‰ivitet‰‰n ohjelma_moduli takaisin magentoksi
        $query = "  UPDATE lasku
                    SET ohjelma_moduli = 'MAGENTO',
                    kassalipas = '{$laskurow['kassalipas']}'
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '{$laskurow['tunnus']}'";
        $res = pupe_query($query);

        $laskurow['ohjelma_moduli'] = "MAGENTO";
      }

      if ($laskutus) {

        $kateisohitus = "";
        $laskurow['eilahetetta'] = 'o';
        $mista = "";
        $tilausvalmiskutsuja = "";
        $kukarow["kesken"] = $laskurow['tunnus'];

        // Pupeasennuksen root
        require "{$pupe_root_polku}/tilauskasittely/tilaus-valmis.inc";
      }
      else {
        return array($kukarow["kassamyyja"], $laskurow['kassalipas'], $laskurow['ohjelma_moduli']);
      }
    }
  }
}

if (!function_exists('hae_tilauksen_rekisterinumerot')) {
  function hae_tilauksen_rekisterinumerot($tilausnumero, $tyhjat_rekkarit_pois = false) {
    global $kukarow, $yhtiorow;

    if ($tilausnumero == '') {
      return array();
    }

    $joinlisa = $tyhjat_rekkarit_pois ? "AND tl.rekisterinumero != ''" : "";

    $query = "SELECT tl.rekisterinumero
              FROM tilausrivi
              JOIN tilausrivin_lisatiedot AS tl ON (
                tl.yhtio             = tilausrivi.yhtio AND
                tl.tilausrivitunnus  = tilausrivi.tunnus
                {$joinlisa}
              )
              WHERE tilausrivi.yhtio = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus = '{$tilausnumero}'
              ORDER BY tilausrivi.tunnus DESC";
    $result = pupe_query($query);

    $rekisterinumerot = array();
    $onko_syotetty_muita_kuin_tyhjia = false;
    while ($rekisterinumero = mysql_fetch_assoc($result)) {
      if ($rekisterinumero['rekisterinumero'] != '') {
        $onko_syotetty_muita_kuin_tyhjia = true;
      }
      $rekisterinumerot[$rekisterinumero['rekisterinumero']] = $rekisterinumero;
    }

    if ($onko_syotetty_muita_kuin_tyhjia) {
      return $rekisterinumerot;
    }

    return array();
  }
}

if (!function_exists('paivita_ohjausmerkki')) {
  function paivita_ohjausmerkki($laskurow, $asiakkaan_ohjausmerkki = true) {
    global $kukarow;

    if ($asiakkaan_ohjausmerkki) {

      $query = "SELECT tarkenne
                FROM asiakkaan_avainsanat
                WHERE yhtio      = '{$kukarow['yhtio']}'
                AND laji         = 'OHJAUSMERKKI'
                AND liitostunnus = '{$laskurow['liitostunnus']}'
                AND avainsana    = '{$laskurow['toimitustapa']}'
                LIMIT 1";
      $ohjausmerkki_check_res = pupe_query($query);

      if (mysql_num_rows($ohjausmerkki_check_res) == 0) {
        $query = "SELECT tarkenne
                  FROM asiakkaan_avainsanat
                  WHERE yhtio      = '{$kukarow['yhtio']}'
                  AND laji         = 'OHJAUSMERKKI'
                  AND liitostunnus = '{$laskurow['liitostunnus']}'
                  AND avainsana    = 'OLETUS'
                  LIMIT 1";
        $ohjausmerkki_check_res = pupe_query($query);
      }

      $ohjausmerkki_check_row = mysql_fetch_assoc($ohjausmerkki_check_res);

      if ($ohjausmerkki_check_row['tarkenne'] != "") {

        // Tarkistetaan lˆytyykˆ kyseinen ohjausmerkkiteksti otsikolta
        // Ei haluta lis‰t‰ teksti‰ kahteen kertaan
        if (stripos($laskurow['ohjausmerkki'], $ohjausmerkki_check_row['tarkenne']) === FALSE) {

          if ($laskurow['ohjausmerkki'] != "") {
            $updlisa = " ohjausmerkki = CONCAT('{$ohjausmerkki_check_row['tarkenne']}', ' / ', ohjausmerkki)";
            $laskurow['ohjausmerkki'] = "{$ohjausmerkki_check_row['tarkenne']} / {$laskurow['ohjausmerkki']}";
          }
          else {
            $updlisa = " ohjausmerkki = '{$ohjausmerkki_check_row['tarkenne']}'";
            $laskurow['ohjausmerkki'] = $ohjausmerkki_check_row['tarkenne'];
          }

          $query = "UPDATE lasku SET
                    {$updlisa}
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '{$laskurow['tunnus']}'";
          $updres = pupe_query($query);
        }
      }
    }

    if ($laskurow['toimitustavan_lahto'] != 0) {

      $query = "SELECT ohjausmerkki
                FROM lahdot
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$laskurow['toimitustavan_lahto']}'";
      $chkres = pupe_query($query);
      $chkrow = mysql_fetch_array($chkres);

      if ($chkrow['ohjausmerkki'] != "") {

        // Tarkistetaan lˆytyykˆ kyseinen ohjausmerkkiteksti otsikolta
        // Ei haluta lis‰t‰ teksti‰ kahteen kertaan

        $updlisa = "";
        $laskurow['ohjausmerkki'] = trim($laskurow['ohjausmerkki']);

        if ($laskurow['ohjausmerkki'] != "") {

          $_lisataanko = true;

          $_ohjausmerkki = explode(" / ", $laskurow['ohjausmerkki']);

          if ($_ohjausmerkki[0] === $chkrow['ohjausmerkki']) {
            $_lisataanko = false;
          }

          if ($_lisataanko) {
            $updlisa = " ohjausmerkki = CONCAT('{$chkrow['ohjausmerkki']}', ' / ', ohjausmerkki)";
            $laskurow['ohjausmerkki'] = "{$chkrow['ohjausmerkki']} / {$laskurow['ohjausmerkki']}";
          }
        }
        else {
          $updlisa = " ohjausmerkki = '{$chkrow['ohjausmerkki']}'";
          $laskurow['ohjausmerkki'] = $chkrow['ohjausmerkki'];
        }

        if (trim($updlisa) != "") {
          $query = "UPDATE lasku SET
                    {$updlisa}
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND tunnus  = '{$laskurow['tunnus']}'";
          $updres = pupe_query($query);
        }
      }
    }

    return $laskurow['ohjausmerkki'];
  }
}

if (!function_exists("tsekit")) {
  function tsekit($row, $kaikkivarastossayhteensa, $kaikkiliitettyyhteensa) {

    global $kukarow, $yhtiorow, $rahti_ja_kulut;

    $tsekit = array();

    $query_ale_lisa = generoi_alekentta("O");

    // tutkitaan onko kaikilla tuotteilla on joku varastopaikka
    $query  = "SELECT tilausrivi.*,
               if(kpl!=0, rivihinta, 0) rivihinta,
               (kpl * hinta * {$query_ale_lisa}) rivihinta_vietyarvo,
               ((varattu+kpl) * hinta * {$query_ale_lisa}) rivihinta_liitetty
               FROM tilausrivi USE INDEX (uusiotunnus_index)
               WHERE yhtio     = '$kukarow[yhtio]'
               and uusiotunnus = '$row[tunnus]'
               and tyyppi      = 'O'";
    $tilres = pupe_query($query);

    $kplyhteensa   = 0;
    $kplvarasto    = 0;
    $eipaikkoja    = 0;
    $eituotteet    = "";
    $varastossaarvo = 0;
    $liitettyarvo  = 0;
    $uusiot     = array();
    if ($rahti_ja_kulut == '') $rahti_ja_kulut = 0;

    while ($rivirow = mysql_fetch_assoc($tilres)) {
      $query = "SELECT *
                FROM tuote
                WHERE tuoteno = '$rivirow[tuoteno]'
                and yhtio     = '$kukarow[yhtio]'";
      $tuore = pupe_query($query);
      $tuote = mysql_fetch_assoc($tuore);

      if (!in_array($rivirow["otunnus"], $uusiot)) {
        $uusiot[] = $rivirow["otunnus"];
      }

      $kplyhteensa++; // lasketaan montako tilausrivi‰ on kohdistettu

      $varastossaarvo       += $rivirow["rivihinta"];
      $rahti_ja_kulut       += $rivirow["rivihinta"] - $rivirow['rivihinta_vietyarvo'];
      $liitettyarvo        += $rivirow["rivihinta_liitetty"];
      $kaikkivarastossayhteensa   += $rivirow["rivihinta"];
      $kaikkiliitettyyhteensa   += $rivirow["rivihinta_liitetty"];

      if (($rivirow["kpl"] != 0 and $rivirow["varattu"] == 0) or ($rivirow["kpl"] == 0 and $rivirow["varattu"] == 0)) {
        $kplvarasto++; // lasketaan montako tilausrivi‰ on viety varastoon
      }

      // jos kyseess‰ on saldollinen tuote
      if ($tuote['ei_saldoa'] == "") {
        //jos rivi on jo viety varastoon niin ei en‰‰ katota sen paikkaa
        if ($rivirow["kpl"] == 0 and $rivirow["varattu"] != 0) {
          // katotaan lˆytyykˆ tuotteelta varastopaikka joka on tilausriville tallennettu
          $query = "SELECT *
                    from tuotepaikat use index (tuote_index)
                    where tuoteno = '$rivirow[tuoteno]'
                    and yhtio     = '$kukarow[yhtio]'
                    and hyllyalue = '$rivirow[hyllyalue]'
                    and hyllynro  = '$rivirow[hyllynro]'
                    and hyllytaso = '$rivirow[hyllytaso]'
                    and hyllyvali = '$rivirow[hyllyvali]'";
          $tpres = pupe_query($query);

          if (mysql_num_rows($tpres) == 0) {
            $eipaikkoja++;
          }
        }
      }
    }

    if ($varastossaarvo != 0) {
      $varastossaarvo = "(".round($varastossaarvo, 2).")";
    }
    else {
      $varastossaarvo = "";
    }

    if ($eipaikkoja == 0 and $kplyhteensa > 0) {
      $varok = 1;
      $varastopaikat = "<font class='ok'>".t("ok")."</font>";
    }
    else {
      $varok = 0;
      $varastopaikat = t("kesken");
    }

    // tutkitaan onko kaikki lis‰tiedot syˆtetty vai ei...
    $query = "SELECT *
              from lasku use index (PRIMARY)
              where yhtio                  = '$kukarow[yhtio]'
              and tunnus                   = '$row[tunnus]'
              and maa                     != '$yhtiorow[maa]'
              and (maa_maara = '' or maa_lahetys = '' or bruttopaino = '' or kauppatapahtuman_luonne <= 0 or kuljetusmuoto = '' or toimaika = '0000-00-00')
              and kauppatapahtuman_luonne != '999'";
    $okres = pupe_query($query);

    if (mysql_num_rows($okres) == 0) {
      $lisok = 1;
      $lisatiedot = "<font class='ok'>".t("ok")."</font>";
    }
    else {
      $lisok = 0;
      $lisatiedot = t("kesken");
    }

    // katotaan onko kohdistus tehty pennilleen
    if (($row["kohdistettu"] == 'K' and $yhtiorow['jalkilaskenta_kuluperuste'] != 'VS') or $yhtiorow['jalkilaskenta_kuluperuste'] == 'VS') {
      $kohok = 1;
      $kohdistus = "<font class='ok'>".t("ok")."</font>";
    }
    else {
      $kohok = 0;
      $kohdistus = t("kesken");
    }

    // katotaan onko kaikki sarjanumerot ok
    $query = "SELECT tilausrivi.tunnus, tilausrivi.tuoteno, tilausrivi.varattu+tilausrivi.kpl kpl, tuote.sarjanumeroseuranta, tilausrivi.uusiotunnus
              FROM tilausrivi use index (uusiotunnus_index)
              JOIN tuote on tuote.yhtio=tilausrivi.yhtio and tuote.tuoteno=tilausrivi.tuoteno and tuote.sarjanumeroseuranta NOT IN ('', 'T')
              WHERE tilausrivi.yhtio='$kukarow[yhtio]' and
              tilausrivi.uusiotunnus='$row[tunnus]' and
              tilausrivi.tyyppi='O'";
    $toimresult = pupe_query($query);

    $sarjanrook = 1;

    while ($toimrow = mysql_fetch_assoc($toimresult)) {

      if ($toimrow["kpl"] < 0) {
        $tunken = "sarjanumeroseuranta.myyntirivitunnus";
      }
      else {
        $tunken = "sarjanumeroseuranta.ostorivitunnus";
      }

      if ($toimrow["sarjanumeroseuranta"] == "S" or $toimrow["sarjanumeroseuranta"] == "V") {
        $query = "SELECT count(distinct sarjanumero) kpl, min(sarjanumero) sarjanumero
                  FROM sarjanumeroseuranta
                  WHERE yhtio = '$kukarow[yhtio]'
                  and tuoteno = '$toimrow[tuoteno]'
                  and $tunken = '$toimrow[tunnus]'";
      }
      else {
        $query = "SELECT sum(sarjanumeroseuranta.era_kpl*if(tilausrivi.tunnus is not null, if(tilausrivi.kpl+tilausrivi.varattu+tilausrivi.jt > 0 or tilausrivi.tyyppi = 'O', 1, -1), 1)) kpl, min(sarjanumeroseuranta.sarjanumero) sarjanumero
                  FROM sarjanumeroseuranta
                  LEFT JOIN tilausrivi ON (tilausrivi.yhtio = sarjanumeroseuranta.yhtio and tilausrivi.tunnus = sarjanumeroseuranta.myyntirivitunnus)
                  WHERE sarjanumeroseuranta.yhtio = '$kukarow[yhtio]'
                  and sarjanumeroseuranta.tuoteno = '$toimrow[tuoteno]'
                  and $tunken = '$toimrow[tunnus]'";
      }
      $sarjares = pupe_query($query);
      $sarjarow = mysql_fetch_assoc($sarjares);

      // pit‰‰ olla yht‰monta sarjanumeroa liitettyn‰ kun kamaa viety varastoon
      if ($sarjarow["kpl"] != abs($toimrow["kpl"])) {
        $sarjanrook++;
      }
    }

    // pit‰‰ olla yht‰monta sarjanumeroa liitettyn‰ kun kamaa viety varastoon
    if ($sarjanrook == 1) {
      $sarjanrook  = 1;
      $sarjanrot  = "<font class='ok'>".t("ok")."</font>";
    }
    else {
      $sarjanrook  = 0; // ei ole kaikilla tuotteilla sarjanumeroa
      $sarjanrot  = "kesken";
    }

    // katotaan onko liitettyj‰ laskuja
    // ('C','F','I','J','K','L') // vaihto-omaisuus ja raaka-aine
    // ('B','C','J','E','F','K','H','I','L') // kaikki
    $query = "SELECT count(*) num,
              sum(if(lasku.vienti in ('C','F','I','J','K','L'), 1, 0)) volasku,
              sum(if(ostores_lasku.tila != 'H' and lasku.vienti in ('C','F','I','J','K','L'), 1, 0)) volasku_ok,
              sum(if(lasku.vienti not in ('C','F','I','J','K','L'), 1, 0)) kulasku,
              sum(if(ostores_lasku.tila != 'H' and lasku.vienti not in ('C','F','I','J','K','L'), 1, 0)) kulasku_ok,
              round(sum(if(ostores_lasku.vienti in ('C','F','I','J','K','L'), lasku.arvo * lasku.vienti_kurssi, 0)), 2) vosumma,
              round(sum(if(ostores_lasku.vienti in ('C','F','I','J','K','L'), (lasku.osto_kulu + lasku.osto_rahti + lasku.osto_rivi_kulu), 0)), 2) vosumma_kulut,
              round(sum(if(ostores_lasku.vienti in ('C','F','I','J','K','L'), lasku.arvo, 0)), 2) vosumma_valuutassa,
              round(sum(if(ostores_lasku.vienti in ('C','F','I','J','K','L'), lasku.summa * lasku.vienti_kurssi, 0)), 2) voverosumma,
              round(sum(if(ostores_lasku.vienti in ('C','F','I','J','K','L'), lasku.summa, 0)), 2) voverosumma_valuutassa,
              round(sum(if(lasku.vienti not in ('C','F','I','J','K','L'), lasku.arvo * lasku.vienti_kurssi, 0)),2) kusumma,
              round(sum(if(lasku.vienti not in ('C','F','I','J','K','L'), (lasku.osto_kulu + lasku.osto_rahti + lasku.osto_rivi_kulu), 0)),2) kusumma_kulut,
              round(sum(if(lasku.vienti not in ('C','F','I','J','K','L'), lasku.arvo, 0)),2) kusumma_valuutassa
              FROM lasku use index (yhtio_tila_laskunro)
              JOIN lasku ostores_lasku ON (ostores_lasku.yhtio = lasku.yhtio AND ostores_lasku.tunnus = lasku.vanhatunnus)
              WHERE lasku.yhtio     = '$kukarow[yhtio]'
              AND lasku.tila        = 'K'
              AND lasku.vanhatunnus <> 0
              AND lasku.laskunro    = '$row[laskunro]'";
    $llres = pupe_query($query);
    $llrow = mysql_fetch_assoc($llres);

    if ((abs($row['rahti_etu']) > abs($llrow['vosumma_valuutassa'])) and $llrow['volasku'] > 0) {
      $lisok = 0;
      $lisatiedot = t("kesken");
    }

    return array($kaikkivarastossayhteensa, $kaikkiliitettyyhteensa, $kohdistus, $kohok, $kplvarasto, $kplyhteensa, $lisatiedot, $lisok, $llrow, $sarjanrook, $sarjanrot, $uusiot, $varastopaikat, $varastossaarvo, $liitettyarvo, $varok, $rahti_ja_kulut);
  }
}

if (!function_exists('hae_asiakas')) {
  function hae_asiakas($liitostunnus) {
    global $yhtiorow;

    if (empty($liitostunnus)) {
      return false;
    }

    $query = "SELECT *
              FROM asiakas
              WHERE yhtio = '{$yhtiorow['yhtio']}'
              AND tunnus  = {$liitostunnus}";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('hae_asiakasalennukset')) {
  function hae_asiakasalennukset($asiakasrow, $alehi_assegmenttirow, $asiakas_yhtio, $tuotecols, $tuotejoin, $tuotewhere, $tuotegroup, $order, $poistuvat = TRUE) {
    global $kukarow, $yhtiorow;

    if ($poistuvat) {
      $poislisa = " and (tuote.status not in ('P','X') or (SELECT sum(saldo) FROM tuotepaikat WHERE tuotepaikat.yhtio=tuote.yhtio and tuotepaikat.tuoteno=tuote.tuoteno and tuotepaikat.saldo > 0) > 0) ";
    }
    else {
      $poislisa = " and tuote.status not in ('P','X') ";
    }

    $query = "  /*  5. asiakas.tunnus tuote.tuotenumero aleprosentti (asiakkaan tuotteen alennus) */
            (  SELECT 1 prio,
                asiakasalennus.alennus,
                asiakasalennus.tuoteno,
                asiakasalennus.alennuslaji,
                tuote.nimitys tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas / tuote' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakasalennus.yhtio and tuote.tuoteno=asiakasalennus.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.asiakas = '$asiakasrow[tunnus]'
              and asiakasalennus.asiakas > 0
              and asiakasalennus.tuoteno != ''
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              {$poislisa}
            )
            UNION
            /*  5. asiakas.ytunnus tuote.tuotenumero aleprosentti (asiakkaan tuotteen alennus) */
            (  SELECT 2 prio,
                asiakasalennus.alennus,
                asiakasalennus.tuoteno,
                asiakasalennus.alennuslaji,
                tuote.nimitys tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Ytunnus / tuote' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakasalennus.yhtio and tuote.tuoteno=asiakasalennus.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.ytunnus = '$asiakasrow[ytunnus]'
              and asiakasalennus.ytunnus != ''
              and asiakasalennus.tuoteno != ''
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              {$poislisa}
            )
            UNION
            /* 6. asiakas.tunnus tuote.aleryhm‰ aleprosentti (asiakkaan tuotealeryhm‰n alennus) */
            (  SELECT 3 prio,
                asiakasalennus.alennus,
                '' tuoteno,
                asiakasalennus.alennuslaji,
                '' tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas / aleryhm‰' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              $tuotejoin
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.asiakas = '$asiakasrow[tunnus]'
              and asiakasalennus.asiakas > 0
              and asiakasalennus.ryhma != ''
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            UNION
            /* 6. asiakas.ytunnus tuote.aleryhm‰ aleprosentti (asiakkaan tuotealeryhm‰n alennus) */
            (  SELECT 4 prio,
                asiakasalennus.alennus,
                '' tuoteno,
                asiakasalennus.alennuslaji,
                '' tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Ytunnus / aleryhm‰' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              $tuotejoin
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.ytunnus = '$asiakasrow[ytunnus]'
              and asiakasalennus.ytunnus != ''
              and asiakasalennus.ryhma != ''
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            UNION
            /* 7. asiakas.segmentti tuote.tuoteno aleprosentti (asiakassegmentin tuotteen alennus) */
            (
              SELECT 5 prio,
                  asiakasalennus.alennus,
                  asiakasalennus.tuoteno,
                  asiakasalennus.alennuslaji,
                  tuote.nimitys tuoteno_nimi,
                  '' asiakasryhm‰,
                  '' asiakasryhm‰_nimi,
                  asiakasalennus.ryhma alennusryhm‰,
                  perusalennus.selite alennusryhm‰_nimi,
                  if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                  if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                  'Asiakas-segmentti / tuote' tyyppi
                  $tuotecols
                FROM asiakasalennus
                LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
                LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
                JOIN tuote ON tuote.yhtio=asiakasalennus.yhtio and tuote.tuoteno=asiakasalennus.tuoteno and tuote.hinnastoon != 'E'
                WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
                and asiakasalennus.asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
                and asiakasalennus.asiakas_segmentti != ''
                and asiakasalennus.tuoteno != ''
                and asiakasalennus.ytunnus = ''
                and asiakasalennus.asiakas = 0
                and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
                and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
                and asiakasalennus.alennus >= 0
                and asiakasalennus.alennus <= 100
                {$poislisa}
            )
            UNION
            /* 8. asiakas.ryhm‰ tuote.tuoteno aleprosentti (asiakasaleryhm‰n tuotteen alennus) */
            (  SELECT 6 prio,
                asiakasalennus.alennus,
                asiakasalennus.tuoteno,
                asiakasalennus.alennuslaji,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakasryhm‰ / tuote' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakasalennus.yhtio and tuote.tuoteno=asiakasalennus.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.asiakas_ryhma = '$asiakasrow[ryhma]'
              and asiakasalennus.asiakas_ryhma != ''
              and asiakasalennus.tuoteno != ''
              and asiakasalennus.ytunnus = ''
              and asiakasalennus.asiakas = 0
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              {$poislisa}
            )
            UNION
            /* 9. asiakas.piiri tuote.tuoteno aleprosentti (asiakaspiirin tuotteen alennus) */
            (  SELECT 7 prio,
                asiakasalennus.alennus,
                asiakasalennus.tuoteno,
                asiakasalennus.alennuslaji,
                tuote.nimitys tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakaspiiri / tuote' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakasalennus.yhtio and tuote.tuoteno=asiakasalennus.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.piiri = '$asiakasrow[piiri]'
              and asiakasalennus.piiri != ''
              and asiakasalennus.tuoteno != ''
              and asiakasalennus.ytunnus = ''
              and asiakasalennus.asiakas = 0
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              {$poislisa}
            )
            UNION
            /* 10. asiakas.segmentti tuote.aleryhm‰ aleprosentti (asiakassegmentin tuotealeryhm‰n alennus) */
            (  SELECT 8 prio,
                asiakasalennus.alennus,
                '' tuoteno,
                asiakasalennus.alennuslaji,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas-segmentti / aleryhm‰' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              $tuotejoin
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
              and asiakasalennus.asiakas_segmentti != ''
              and asiakasalennus.ryhma != ''
              and asiakasalennus.ytunnus = ''
              and asiakasalennus.asiakas = 0
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            UNION
            /* 11. asiakas.ryhm‰ tuote.aleryhm‰ aleprosentti (asiakasaleryhm‰n tuotealeryhm‰n alennus) */
            (  SELECT 9 prio,
                asiakasalennus.alennus,
                '' tuoteno,
                asiakasalennus.alennuslaji,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakasryhm‰ / aleryhm‰' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              $tuotejoin
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.asiakas_ryhma = '$asiakasrow[ryhma]'
              and asiakasalennus.asiakas_ryhma != ''
              and asiakasalennus.ryhma != ''
              and asiakasalennus.ytunnus = ''
              and asiakasalennus.asiakas = 0
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            UNION
            /* 12. asiakas.piiri tuote.aleryhm‰ aleprosentti (asiakaspiirin tuotealeryhm‰n alennus) */
            (  SELECT 10 prio,
                asiakasalennus.alennus,
                '' tuoteno,
                asiakasalennus.alennuslaji,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakasalennus.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakaspiiri / aleryhm‰' tyyppi
                $tuotecols
              FROM asiakasalennus
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakasalennus.yhtio and perusalennus.ryhma=asiakasalennus.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakasalennus.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              $tuotejoin
              WHERE asiakasalennus.yhtio = '$asiakas_yhtio'
              and asiakasalennus.piiri = '$asiakasrow[piiri]'
              and asiakasalennus.piiri != ''
              and asiakasalennus.ryhma != ''
              and asiakasalennus.ytunnus = ''
              and asiakasalennus.asiakas = 0
              and (asiakasalennus.minkpl <= '1' or asiakasalennus.minkpl = 0)
              and ((asiakasalennus.alkupvm <= current_date and if (asiakasalennus.loppupvm = '0000-00-00','9999-12-31',asiakasalennus.loppupvm) >= current_date) or (asiakasalennus.alkupvm='0000-00-00' and asiakasalennus.loppupvm='0000-00-00'))
              and asiakasalennus.alennus >= 0
              and asiakasalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            UNION
            /* 13. tuote.aleryhm‰ aleprosentti (tuotealeryhm‰n perusalennus) */
            (  SELECT 11 prio,
                alennus,
                '' tuoteno,
                '1' alennuslaji,
                '' tuoteno_nimi,
                '' asiakasryhm‰,
                '' asiakasryhm‰_nimi,
                ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                '' alkupvm,
                '' loppupvm,
                'Perusalennus' tyyppi
                $tuotecols
              FROM perusalennus
              $tuotejoin
              WHERE perusalennus.yhtio = '$asiakas_yhtio'
              and perusalennus.ryhma != ''
              # Huom. perualennus > 0
              and perusalennus.alennus > 0
              and perusalennus.alennus <= 100
              $tuotewhere
              $tuotegroup
            )
            ORDER BY $order";
    $result = pupe_query($query);

    $asiakas_alennukset = array();
    while ($asiakas_alennus = mysql_fetch_assoc($result)) {
      $asiakas_alennukset[] = $asiakas_alennus;
    }

    return $asiakas_alennukset;
  }
}

if (!function_exists('hae_asiakashinnat')) {
  function hae_asiakashinnat($asiakasrow, $alehi_assegmenttirow, $asiakas_yhtio, $tyyppi = 'poistuvat') {
    global $kukarow, $yhtiorow;

    $segmentti_where = "";

    if (!empty($alehi_assegmenttirow['tunnukset'])) {
      $segmentti_where = " and asiakashinta.asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])";
    }

    if ($tyyppi == 'poistuvat') {
      $poislisa = " and (tuote.status not in ('P','X') or (SELECT sum(saldo) FROM tuotepaikat WHERE tuotepaikat.yhtio=tuote.yhtio and tuotepaikat.tuoteno=tuote.tuoteno and tuotepaikat.saldo > 0) > 0) ";
    }
    elseif ($tyyppi == 'kaikki') {
      $poislisa = "";
    }
    else {
      $poislisa = " and tuote.status not in ('P','X') ";
    }

    $query = "  /* 2B. asiakas.tunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) yhtiˆn valuutassa */
            (  SELECT 1 prio,
                hinta,
                tuote.tuoteno,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas / tuote' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.tuoteno=asiakashinta.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.asiakas = '$asiakasrow[tunnus]'
              and asiakashinta.asiakas > 0
              and asiakashinta.tuoteno != ''
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 2B. asiakas.ytunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) yhtiˆn valuutassa */
            (  SELECT 2 prio,
                hinta,
                tuote.tuoteno,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Ytunnus / tuote' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.tuoteno=asiakashinta.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.ytunnus = '$asiakasrow[ytunnus]'
              and asiakashinta.ytunnus != ''
              and asiakashinta.tuoteno != ''
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 3B. asiakas.tunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) yhtiˆn valuutassa */
            (  SELECT 3 prio,
                hinta,
                '' tuoteno,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas / aleryhm‰' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.aleryhma=asiakashinta.ryhma and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.asiakas = '$asiakasrow[tunnus]'
              and asiakashinta.asiakas > 0
              and asiakashinta.ryhma != ''
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 3B. asiakas.ytunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) yhtiˆn valuutassa */
            (  SELECT 4 prio,
                hinta,
                '' tuoteno,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Ytunnus / aleryhm‰' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.aleryhma=asiakashinta.ryhma and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.ytunnus = '$asiakasrow[ytunnus]'
              and asiakashinta.ytunnus != ''
              and asiakashinta.ryhma != ''
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 4B. asiakas.segmentti tuote.tuoteno nettohinta (asiakassegmentin tuotteen hinta) yhtiˆn valuutassa */
            (  SELECT 5 prio,
                hinta,
                tuote.tuoteno,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas-segmentti / tuote' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.tuoteno=asiakashinta.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              {$segmentti_where}
              and asiakashinta.asiakas_segmentti !=''
              and asiakashinta.tuoteno != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 5B. asiakas.ryhm‰ tuote.tuoteno nettohinta (asiakasaleryhm‰n tuotteen hinta) yhtiˆn valuutassa */
            (  SELECT 6 prio,
                hinta,
                tuote.tuoteno,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakasryhm‰ / tuote' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.tuoteno=asiakashinta.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.asiakas_ryhma = '$asiakasrow[ryhma]'
              and asiakashinta.asiakas_ryhma != ''
              and asiakashinta.tuoteno != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 6B. asiakas.piiri tuote.tuoteno nettohinta (asiakaspiirin tuotteen hinta) yhtiˆn valuutassa */
            (  SELECT 7 prio,
                hinta,
                tuote.tuoteno,
                tuote.nimitys tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakaspiiri / tuote' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.tuoteno=asiakashinta.tuoteno and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.piiri = '$asiakasrow[piiri]'
              and asiakashinta.piiri != ''
              and asiakashinta.tuoteno != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 7B. asiakas.segmentti tuote.aleryhma nettohinta (asiakassegmentin tuotealeryhm‰n hinta) yhtiˆn valuutassa */
            (  SELECT 8 prio,
                hinta,
                '' tuoteno,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakas-segmentti / aleryhm‰' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.aleryhma=asiakashinta.ryhma and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              {$segmentti_where}
              and asiakashinta.asiakas_segmentti != ''
              and asiakashinta.ryhma != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 8B. asiakas.ryhm‰ tuote.aleryhm‰ nettohinta (asiakasaleryhm‰n tuotealeryhm‰n hinta) yhtiˆn valuutassa */
            (  SELECT 9 prio,
                hinta,
                '' tuoteno,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakasryhm‰ / aleryhm‰' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.aleryhma=asiakashinta.ryhma and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.asiakas_ryhma = '$asiakasrow[ryhma]'
              and asiakashinta.asiakas_ryhma != ''
              and asiakashinta.ryhma != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            UNION
            /* 9B. asiakas.piiri tuote.aleryhma nettohinta (asiakaspiirin tuotealeryhm‰n hinta) yhtiˆn valuutassa */
            (  SELECT 10 prio,
                hinta,
                '' tuoteno,
                '' tuoteno_nimi,
                asiakas_ryhma asiakasryhm‰,
                avainsana.selitetark asiakasryhm‰_nimi,
                asiakashinta.ryhma alennusryhm‰,
                perusalennus.selite alennusryhm‰_nimi,
                if (alkupvm='0000-00-00','',alkupvm) alkupvm,
                if (loppupvm='0000-00-00','',loppupvm) loppupvm,
                'Asiakaspiiri / aleryhm‰' tyyppi
              FROM asiakashinta
              LEFT JOIN perusalennus ON perusalennus.yhtio=asiakashinta.yhtio and perusalennus.ryhma=asiakashinta.ryhma
              LEFT JOIN avainsana ON avainsana.yhtio=asiakashinta.yhtio and avainsana.selite=asiakas_ryhma and avainsana.laji='ASIAKASRYHMA'
              JOIN tuote ON tuote.yhtio=asiakashinta.yhtio and tuote.aleryhma=asiakashinta.ryhma and tuote.hinnastoon != 'E'
              WHERE asiakashinta.yhtio = '$asiakas_yhtio'
              and asiakashinta.piiri = '$asiakasrow[piiri]'
              and asiakashinta.piiri != ''
              and asiakashinta.ryhma != ''
              and asiakashinta.ytunnus = ''
              and asiakashinta.asiakas = 0
              and asiakashinta.valkoodi in ('$yhtiorow[valkoodi]','')
              and (asiakashinta.minkpl <= '1' or asiakashinta.minkpl = 0)
              and ((asiakashinta.alkupvm <= current_date and if (asiakashinta.loppupvm = '0000-00-00','9999-12-31',asiakashinta.loppupvm) >= current_date) or (asiakashinta.alkupvm='0000-00-00' and asiakashinta.loppupvm='0000-00-00'))
              {$poislisa}
            )
            ORDER BY alennusryhm‰+0, tuoteno, prio, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999)";
    $result = pupe_query($query);

    $tuote_hinnat = array();

    while ($tuote_hinta = mysql_fetch_assoc($result)) {
      $tuote_hinnat[] = $tuote_hinta;
    }

    return $tuote_hinnat;
  }
}

if (!function_exists('hae_ostolaskun_tyypin_oletustili')) {
  function hae_ostolaskun_tyypin_oletustili($ostolasku_tyyppi, $toimittaja_tunnus = '') {
    global $kukarow, $yhtiorow;

    $oletustili = false;

    if ($toimittaja_tunnus != '') {
      $toimittajarow = hae_toimittaja($toimittaja_tunnus);

      if ($toimittajarow['oletus_vienti'] == $ostolasku_tyyppi) {
        $oletustili = $toimittajarow['tilino'];
      }
    }

    if ($toimittaja_tunnus == '' or ($toimittaja_tunnus != '' and !$oletustili)) {
      switch ($ostolasku_tyyppi) {
      case 'A':
        //Kotimaa
        $oletustili = $yhtiorow['ostolasku_kotimaa_kulu'];
        break;
      case 'B':
        //Kotimaa huolinta/rahti
        $oletustili = $yhtiorow['ostolasku_kotimaa_rahti'];
        break;
      case 'C':
        //Kotimaa vaihto-omaisuus
        $oletustili = $yhtiorow['ostolasku_kotimaa_vaihto_omaisuus'];
        break;
      case 'J':
        //Kotimaa raaka-aine
        $oletustili = $yhtiorow['ostolasku_kotimaa_raaka_aine'];
        break;
      case 'D':
        //EU
        $oletustili = $yhtiorow['ostolasku_eu_kulu'];
        break;
      case 'E':
        //EU huolinta/rahti
        $oletustili = $yhtiorow['ostolasku_eu_rahti'];
        break;
      case 'F':
        //EU vaihto-omaisuus
        $oletustili = $yhtiorow['ostolasku_eu_vaihto_omaisuus'];
        break;
      case 'K':
        //EU raaka-aine
        $oletustili = $yhtiorow['ostolasku_eu_raaka_aine'];
        break;
      case 'G':
        //ei-EU
        $oletustili = $yhtiorow['ostolasku_ei_eu_kulu'];
        break;
      case 'H':
        //ei-EU huolinta/rahti
        $oletustili = $yhtiorow['ostolasku_ei_eu_rahti'];
        break;
      case 'I':
        //ei-EU vaihto-omaisuus
        $oletustili = $yhtiorow['ostolasku_ei_eu_vaihto_omaisuus'];
        break;
      case 'L':
        //ei-EU raaka-aine
        $oletustili = $yhtiorow['ostolasku_ei_eu_raaka_aine'];
        break;
      default:
        //ERROR
        break;
      }
    }

    return $oletustili;
  }
}

if (!function_exists("tuotteen_budjetoitu_myynti")) {
  function tuotteen_budjetoitu_myynti(array $parametrit) {
    global $yhtiorow, $kukarow;

    // Tuotenumero, pakollinen
    $tuoteno = isset($parametrit['tuoteno']) ? $parametrit['tuoteno'] : die('pakollinen parametri puuttuu');

    // Alku ja loppup‰iv‰t, pakollisia
    $nykyinen_alku =  isset($parametrit['pvm_alku'])  ? $parametrit['pvm_alku']  : die('pakollinen parametri puuttuu');
    $nykyinen_loppu = isset($parametrit['pvm_loppu']) ? $parametrit['pvm_loppu'] : die('pakollinen parametri puuttuu');

    // Tilaustuotteiden k‰sittely, jos ei anneta oletetaan ett‰ huomioidaan vaan JT rivit
    $tilaustuotteiden_kasittely = isset($parametrit['tilaustuotteiden_kasittely']) ? $parametrit['tilaustuotteiden_kasittely'] : 'A';

    // Tuotteen status, t‰m‰n voi v‰litt‰‰. Jos ei tule parametriss‰ niin haetaan
    $tuote_status = isset($parametrit['tuote_status']) ? trim($parametrit['tuote_status']) : null;

    // Tehd‰‰n kaudet p‰iv‰m‰‰rist‰
    $alku_kausi  = substr(str_replace("-", "", $nykyinen_alku), 0, 6);
    $loppu_kausi = substr(str_replace("-", "", $nykyinen_loppu), 0, 6);

    // Annetun alku- ja loppukauden p‰iv‰
    $alku_kausi_pp  = substr(str_replace("-", "", $nykyinen_alku), 6, 2);
    $loppu_kausi_pp = substr(str_replace("-", "", $nykyinen_loppu), 6, 2);

    // Edellinen kausi
    $edellinen_alku  = date("Y-m-d", strtotime("-1 year", strtotime($nykyinen_alku)));
    $edellinen_loppu = date("Y-m-d", strtotime("-1 year", strtotime($nykyinen_loppu)));

    // Haetaan status jos sit‰ ei ole passattu
    if (!isset($tuote_status)) {
      // Haetaan tuotteen status
      $query = "SELECT tuote.status
                FROM tuote
                WHERE tuote.yhtio = '{$kukarow["yhtio"]}'
                AND tuote.tuoteno = '{$tuoteno}'";
      $result = pupe_query($query);
      $row = mysql_fetch_assoc($result);
      $tuote_status = $row['status'];
    }

    // T‰m‰ palautetaan, lasketaan budjetoitu myynti
    $budjetoitu_myynti = 0;
    $budjetin_peruste = array();

    // Status P budjetoitu myynti aina nolla
    if ($tuote_status == "P") {
      $budjetin_peruste[] = array(
        "tuote" => $tuoteno,
        "status" => $tuote_status,
        "budjetoitu_myynti" => $budjetoitu_myynti,
        "syy" => "Puute"
      );

      return array($budjetoitu_myynti, $budjetin_peruste);
    }

    // Status T, eli tilaustuote, niin budjetoitu myynti on tuotteen JT-rivit
    if ($tuote_status == "T" and ($tilaustuotteiden_kasittely == 'A' or $tilaustuotteiden_kasittely == 'C')) {
      // Haetaan JT-rivit
      $query = "SELECT ifnull(sum(tilausrivi.varattu + tilausrivi.jt), 0) jt
                FROM tilausrivi
                JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio
                  AND lasku.tunnus     = tilausrivi.otunnus
                  AND lasku.toimaika   >= '{$nykyinen_alku}'
                  AND lasku.toimaika   <= '{$nykyinen_loppu}')
                WHERE tilausrivi.yhtio = '{$kukarow["yhtio"]}'
                AND tilausrivi.tyyppi  = 'L'
                AND tilausrivi.var     = 'J'
                AND tilausrivi.tuoteno = '{$tuoteno}'";
      $result = pupe_query($query);
      $row = mysql_fetch_assoc($result);
      $budjetoitu_myynti += $row['jt'];

      $budjetin_peruste[] = array(
        "tuote" => $tuoteno,
        "status" => $tuote_status,
        "budjetoitu_myynti" => $row['jt'],
        "syy" => "JT-rivit"
      );

    }

    // Kaikki muut, katsotaan joko budjetti tai myynti
    if ($tuote_status != 'T' or $tilaustuotteiden_kasittely == 'B' or $tilaustuotteiden_kasittely == 'C') {
      // Haetaan budjetoitu myynti
      $query = "SELECT budjetti_tuote.kausi kausi,
                ifnull(sum(budjetti_tuote.maara), 0) budjetti,
                DAY(LAST_DAY(concat(budjetti_tuote.kausi, '01'))) paivia_kuussa,
                ifnull(sum(budjetti_tuote.maara), 0) / DAY(LAST_DAY(concat(budjetti_tuote.kausi, '01'))) paivabudjetti
                FROM budjetti_tuote
                WHERE budjetti_tuote.yhtio = '{$kukarow["yhtio"]}'
                AND budjetti_tuote.kausi   >= '{$alku_kausi}'
                AND budjetti_tuote.kausi   <= '{$loppu_kausi}'
                AND budjetti_tuote.tuoteno = '{$tuoteno}'
                GROUP BY 1";
      $result = pupe_query($query);

      $budjetti_erikseen = 0;

      // Jos budjetti lˆytyi, lasketaan budjetoitu myynti
      if (mysql_num_rows($result) > 0) {

        // Loopataan kaudet l‰pi
        while ($row = mysql_fetch_assoc($result)) {

          // Montako p‰iv‰‰ t‰lt‰ kaudelta on otettu raporttiin
          $paivien_maara = $row['paivia_kuussa'];

          if ($row['kausi'] == $alku_kausi) {
            $paivien_maara -= $alku_kausi_pp - 1;
          }

          if ($row['kausi'] == $loppu_kausi) {
            $paivien_maara -= $row['paivia_kuussa'] - $loppu_kausi_pp;
          }

          $budjetoitu_myynti += $paivien_maara * $row['paivabudjetti'];
          $budjetti_erikseen += $paivien_maara * $row['paivabudjetti'];
        }

        $budjetin_peruste[] = array(
          "tuote" => $tuoteno,
          "status" => $tuote_status,
          "budjetoitu_myynti" => $budjetti_erikseen,
          "syy" => "Budjetti {$alku_kausi}{$alku_kausi_pp} - {$loppu_kausi}{$loppu_kausi_pp}"
        );

      }
      else {
        // Jos ei ole budjettia, otetaan edellisen kauden myynti ja k‰ytet‰‰n sit‰
        $query = "SELECT ifnull(sum(tilausrivi.kpl), 0) myynti
                  FROM tilausrivi
                  WHERE tilausrivi.yhtio        = '{$kukarow["yhtio"]}'
                  AND tilausrivi.tyyppi         = 'L'
                  AND tilausrivi.tuoteno        = '{$tuoteno}'
                  AND tilausrivi.laskutettuaika >= '{$edellinen_alku}'
                  AND tilausrivi.laskutettuaika <= '{$edellinen_loppu}'";
        $result = pupe_query($query);
        $row = mysql_fetch_assoc($result);
        $budjetoitu_myynti += $row['myynti'];

        $budjetin_peruste[] = array(
          "tuote" => $tuoteno,
          "status" => $tuote_status,
          "budjetoitu_myynti" => $row['myynti'],
          "syy" => "Edellinen kausi {$edellinen_alku} - {$edellinen_loppu}",
        );
      }
    }

    return array($budjetoitu_myynti, $budjetin_peruste);
  }
}

if (!function_exists('hae_lahetetyt_saldovahvistukset')) {

  function hae_lahetetyt_saldovahvistukset($request = array()) {
    global $kukarow, $yhtiorow;

    if ($request['ryhmittely_tyyppi'] == 'ytunnus' and $request['ryhmittely_arvo'] != '') {
      $asiakas_join = "  AND asiakas.ytunnus = '{$request['ryhmittely_arvo']}'";
    }
    elseif ($request['ryhmittely_tyyppi'] == 'asiakasnro' and $request['ryhmittely_arvo'] != '') {
      $asiakas_join = "  AND asiakas.asiakasnro = '{$request['ryhmittely_arvo']}'";
    }
    elseif ($request['ryhmittely_tyyppi'] == 'nimi' and $request['ryhmittely_arvo'] != '') {
      $asiakas_join = "  AND asiakas.nimi LIKE '%{$request['ryhmittely_arvo']}%'";
    }

    $saldovahvistus_where = "";
    if (isset($request['alku_paiva']) and isset($request['loppu_paiva'])) {
      $saldovahvistus_where .= "  AND saldovahvistukset.lahetys_pvm >= '{$request['alku_paiva']}'
                    AND saldovahvistukset.lahetys_pvm <= '{$request['loppu_paiva']}'";
    }

    if (isset($request['saldovahvistus_tunnus'])) {
      $saldovahvistus_where .= "  AND saldovahvistukset.tunnus = '{$request['saldovahvistus_tunnus']}'";
    }

    //Ensin haetaan saldovahvistus otsikot ja niiden ryhmittely tyypit,
    //jotka osuvat hakuehtoihin.
    //T‰m‰ sen takia, ett‰ enne t‰t‰ hakua emme tied‰ mink‰lainen ryhmittely kullakin saldovahvistuksella on.
    $query = "SELECT saldovahvistukset.tunnus,
              saldovahvistukset.ryhmittely_tyyppi,
              asiakas.ytunnus
              FROM saldovahvistukset
              JOIN saldovahvistusrivit
              ON ( saldovahvistusrivit.yhtio = saldovahvistukset.yhtio
                AND saldovahvistusrivit.saldovahvistus_tunnus = saldovahvistukset.tunnus
                AND saldovahvistusrivit.tyyppi                = 'L' )
              JOIN lasku
              ON ( lasku.yhtio = saldovahvistusrivit.yhtio
                AND lasku.tunnus                              = saldovahvistusrivit.lasku_tunnus )
              JOIN asiakas
              ON ( asiakas.yhtio = lasku.yhtio
                AND asiakas.tunnus                            = lasku.liitostunnus
                {$asiakas_join} )
              WHERE saldovahvistukset.yhtio                   = '{$kukarow['yhtio']}'
              {$saldovahvistus_where}
              GROUP BY saldovahvistukset.tunnus,
              saldovahvistukset.ryhmittely_tyyppi,
              asiakas.ytunnus";
    $result = pupe_query($query);

    $lahetetyt_saldovahvistukset = array();
    while ($saldovahvistus = mysql_fetch_assoc($result)) {
      if ($saldovahvistus['ryhmittely_tyyppi'] == 'ytunnus') {
        //Jos ryhmittely on ytunnus, pit‰‰ hakea ytunnuksella kaikki muut asiakkaat,
        //saldovahvistusrivien haku query palauttaa kaikkien asiakkaiden rivit.
        $query = "SELECT GROUP_CONCAT(tunnus) AS asiakas_tunnukset
                  FROM asiakas
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND ytunnus = '{$saldovahvistus['ytunnus']}'";
        $asiakas_result = pupe_query($query);
        $asiakasrow = mysql_fetch_assoc($asiakas_result);

        $asiakas_join = "  AND asiakas.tunnus IN (".$asiakasrow['asiakas_tunnukset'].")";
      }

      //Jos ryhmittely tyyppi on saldovahvistuksella jotain muuta kuin ytunnus niin voidaan k‰ytt‰‰ funktion alussa setatttua $asiakas_join muuttujaa, koska $saldovahvistus['tunnus'] ja $asiakas_join yhdess‰ rajaavat resulttia

      //K tyypilliset saldovahvistusrivit hoidetaan eri queryll‰, koska ne eiv‰t liity mihink‰‰n laskuun ja l‰hetettyj‰ saldovahvistuksia pit‰‰ pysty‰ rajaamaan asiakkaan tiedoilla eli JOIN lasku --> JOIN asiakas
      $query = "SELECT *,
                lasku.tunnus AS lasku_tunnus,
                asiakas.tunnus AS asiakas_tunnus,
                asiakas.asiakasnro AS asiakasnumero,
                saldovahvistukset.tunnus AS saldovahvistus_tunnus,
                saldovahvistukset.lahetys_pvm AS lahetys_paiva,
                saldovahvistusrivit.tyyppi AS saldovahvistusrivi_tyyppi,
                saldovahvistusrivit.summa AS avoin_saldo,
                saldovahvistukset.liitostunnus AS saldovahvistus_liitostunnus
                FROM saldovahvistukset
                JOIN saldovahvistusrivit
                ON ( saldovahvistusrivit.yhtio = saldovahvistukset.yhtio
                  AND saldovahvistusrivit.saldovahvistus_tunnus = saldovahvistukset.tunnus
                  AND saldovahvistusrivit.tyyppi                = 'L' )
                JOIN lasku
                ON ( lasku.yhtio = saldovahvistusrivit.yhtio
                  AND lasku.tunnus                              = saldovahvistusrivit.lasku_tunnus )
                JOIN asiakas
                ON ( asiakas.yhtio = lasku.yhtio
                  AND asiakas.tunnus                            = lasku.liitostunnus
                  {$asiakas_join} )
                WHERE saldovahvistukset.yhtio                   = '{$kukarow['yhtio']}'
                AND saldovahvistukset.tunnus                    = '{$saldovahvistus['tunnus']}'";
      $saldovahvistukset_result = pupe_query($query);

      while ($lahetetty_saldovahvistus = mysql_fetch_assoc($saldovahvistukset_result)) {
        $lahetys_paiva_temp = $lahetetty_saldovahvistus['lahetys_paiva'];
        $saldovahvistus_tunnus_temp = $lahetetty_saldovahvistus['saldovahvistus_tunnus'];

        if ($lahetetty_saldovahvistus['ryhmittely_tyyppi'] == 'ytunnus') {
          $ryhmittely = $lahetetty_saldovahvistus['ytunnus'];
        }
        else {
          $ryhmittely = $lahetetty_saldovahvistus['asiakasnro'];
        }
        keraa_saldovahvistusrivit_ktunnus_ytunnus($lahetetyt_saldovahvistukset, $lahetetty_saldovahvistus, $ryhmittely);
      }
    }

    $t = $request["t"]["kohdistamaton"];
    $lahetetyt_saldovahvistukset = keraa_kohdistamattomat_lahetetyista($lahetetyt_saldovahvistukset, $t);

    //Jos saldovahvistus_tunnus setattu niin halutaan tietty saldovahvistus pdf:n‰.
    if (isset($request['saldovahvistus_tunnus'])) {
      return $lahetetyt_saldovahvistukset[$lahetys_paiva_temp][$saldovahvistus_tunnus_temp][$ryhmittely];
    }

    return $lahetetyt_saldovahvistukset;
  }

}

/**
 * Hakee laskuja joilla on avoin saldo
 *
 * $request = array(
 * 'ryhmittely_tyyppi'     => $ryhmittely_tyyppi,
 * 'ryhmittely_arvo'     => $ryhmittely_arvo,
 * 'paiva'           => $paiva,
 * 'lasku_tunnukset'     => $lasku_tunnukset,
 * 'lahetetyt'         => $lahetetyt (boolean)
 * );
 *
 * @global array $kukarow
 * @global array $yhtiorow
 * @param array   $request
 * @param boolean $valitut
 * @return array
 */
if (!function_exists('hae_myyntilaskuja_joilla_avoin_saldo')) {

  function hae_myyntilaskuja_joilla_avoin_saldo($request, $valitut = false) {
    global $kukarow, $yhtiorow;

    $asiakas_join = "";
    if (!$valitut) {
      if ($request['ryhmittely_tyyppi'] == 'ytunnus' and $request['ryhmittely_arvo'] != '') {
        $asiakas_join = "  AND asiakas.ytunnus = '{$request['ryhmittely_arvo']}'";
      }
      elseif ($request['ryhmittely_tyyppi'] == 'asiakasnro' and $request['ryhmittely_arvo'] != '') {
        $asiakas_join = "  AND asiakas.asiakasnro = '{$request['ryhmittely_arvo']}'";
      }
      elseif ($request['ryhmittely_tyyppi'] == 'nimi' and $request['ryhmittely_arvo'] != '') {
        $asiakas_join = "  AND asiakas.nimi LIKE '%{$request['ryhmittely_arvo']}%'";
      }
    }

    $lasku_where = "";
    if (!empty($request['lasku_tunnukset'])) {
      $lasku_where = " AND lasku.tunnus IN ('".implode("','", $request['lasku_tunnukset'])."')";
    }

    //lasku.tunnus ASC koska sessioon tallennetaan implode tunnus ja tunnukset pit‰‰ olla tietyss‰ j‰rjestyksess‰, koska muuten rivi‰ ei lˆydy.
    $query = "SELECT lasku.tunnus AS lasku_tunnus,
              'L' AS saldovahvistusrivi_tyyppi,
              asiakas.ytunnus,
              asiakas.toim_ovttunnus,
              lasku.nimi,
              lasku.liitostunnus,
              lasku.laskunro,
              lasku.tapvm,
              lasku.erpcm,
              lasku.valkoodi,
              asiakas.asiakasnro AS asiakasnumero,
              asiakas.tunnus AS asiakas_tunnus,
              asiakas.kieli AS kieli,
              lasku.summa,
              ROUND(SUM(tiliointi.summa), 2) AS avoin_saldo
              FROM lasku
              JOIN asiakas
              ON ( asiakas.yhtio = lasku.yhtio
                AND asiakas.tunnus                   = lasku.liitostunnus
                AND asiakas.kauppatapahtuman_luonne != 21
                {$asiakas_join} )
              JOIN tiliointi USE INDEX (tositerivit_index)
              ON ( tiliointi.yhtio = lasku.yhtio
                AND tiliointi.ltunnus                = lasku.tunnus
                AND tiliointi.korjattu               = ''
                AND tiliointi.tapvm                  <= '{$request['paiva']}'
                AND tiliointi.tilino                 IN ('{$yhtiorow['myyntisaamiset']}', '{$yhtiorow['factoringsaamiset']}', '{$yhtiorow['konsernimyyntisaamiset']}') )
              WHERE lasku.yhtio                      = '{$kukarow['yhtio']}'
              {$lasku_where}
              AND (
                  lasku.mapvm                        > '{$request['paiva']}'
                  OR lasku.mapvm                     = '0000-00-00'
                )
              AND lasku.tapvm                        <= '{$request['paiva']}'
              AND lasku.tapvm                        > '0000-00-00'
              AND lasku.tila                         = 'U'
              AND lasku.alatila                      = 'X'
              GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14
              ORDER BY asiakas.toim_ovttunnus ASC,
              asiakas.ytunnus ASC,
              lasku.tunnus ASC";
    $result = pupe_query($query);

    $laskut = array();
    while ($lasku = mysql_fetch_assoc($result)) {
      if (!$valitut) {
        if ($request['ryhmittely_tyyppi'] == 'ytunnus') {
          $lasku['ryhmittely_tyyppi'] = 'ytunnus';
          $ryhmittely = $lasku['ytunnus'];
        }
        else {
          $lasku['ryhmittely_tyyppi'] = 'asiakasnro';
          $ryhmittely = $lasku['asiakasnumero'];
        }
      }
      else {
        if (!isset($request['ryhmittely_tyyppi_temp']) and isset($request['saldovahvistus_rivi_ryhmittely_tyyppi'])) {
          $lasku['ryhmittely_tyyppi'] = $request['saldovahvistus_rivi_ryhmittely_tyyppi'];
        }
        else {
          $lasku['ryhmittely_tyyppi'] = $request['ryhmittely_tyyppi_temp'];
        }

        if ($lasku['ryhmittely_tyyppi'] == 'ytunnus') {
          $ryhmittely = $lasku['ytunnus'];
        }
        else {
          $ryhmittely = $lasku['asiakasnumero'];
        }
      }

      keraa_saldovahvistusrivit_ytunnus($laskut, $lasku, $ryhmittely);
    }

    $laskut = keraa_kohdistamattomat($request, $laskut, false);

    //Purkahko. Jos lasku_tunnukset on annettu, halutaan n‰ytt‰‰ tietyn asiakkaan(ytunnus) saldovahvistus pdf:n‰.
    if (!empty($request['lasku_tunnukset'])) {
      return $laskut[$ryhmittely];
    }

    return $laskut;
  }

}

if (!function_exists('keraa_saldovahvistusrivit_ytunnus')) {
  function keraa_saldovahvistusrivit_ytunnus(&$laskut, $lasku, $ryhmittely) {
    global $kukarow;

    if (!isset($laskut[$ryhmittely]['avoin_saldo_summa'])) {
      $laskut[$ryhmittely]['avoin_saldo_summa'] = 0;
    }
    if (!isset($laskut[$ryhmittely]['asiakas_nimi'])) {
      //asiakkaan nimeen tulee ensimm‰isen laskun asiakkaan nimi, eli p‰‰asiakkaan nimi
      $laskut[$ryhmittely]['asiakas_nimi'] = $lasku['nimi'];
      $laskut[$ryhmittely]['asiakas'] = hae_asiakas($lasku['liitostunnus']);

      if (!empty($laskut[$ryhmittely]['asiakas']['ytunnus'])) {

        $query = "SELECT *
                  FROM asiakas
                  JOIN asiakkaan_avainsanat AS aa ON (
                    aa.yhtio           = asiakas.yhtio AND
                    aa.laji            = 'PƒƒASIAKAS' AND
                    aa.avainsana      != '' AND
                    aa.liitostunnus    = asiakas.tunnus
                  )
                  WHERE asiakas.yhtio  = '{$kukarow['yhtio']}'
                  AND asiakas.ytunnus  = '{$laskut[$ryhmittely]['asiakas']['ytunnus']}'
                  LIMIT 1";
        $chkres = pupe_query($query);

        while ($chkrow = mysql_fetch_assoc($chkres)) {
          if ($lasku['ryhmittely_tyyppi'] == 'ytunnus') {
            $laskut[$ryhmittely]['asiakas'] = hae_asiakas($chkrow['liitostunnus']);
            $laskut[$ryhmittely]['asiakas_nimi'] = $laskut[$ryhmittely]['asiakas']['nimi'];
          }
          else {
            $laskut[$ryhmittely]['paaasiakas'] = hae_asiakas($chkrow['liitostunnus']);
            $laskut[$ryhmittely]['asiakas']['talhal_email'] = $laskut[$ryhmittely]['paaasiakas']['talhal_email'];
          }
        }
      }
    }

    $asiakasnumerot = search_array_key_for_value_recursive($laskut[$ryhmittely]['asiakasnumerot'], 'asiakasnumero', $lasku['asiakasnumero']);
    if (!is_array($laskut[$ryhmittely]['asiakasnumerot']) or empty($asiakasnumerot)) {
      $laskut[$ryhmittely]['asiakasnumerot'][] = array(
        'asiakasnumero'   => $lasku['asiakasnumero'],
        'asiakas_tunnus' => $lasku['asiakas_tunnus'],
      );
    }

    $laskut[$ryhmittely]['lasku_tunnukset'][] = $lasku['lasku_tunnus'];
    $laskut[$ryhmittely]['avoin_saldo_summa'] += $lasku['avoin_saldo'];
    $laskut[$ryhmittely]['ytunnus'] = $lasku['ytunnus'];
    $laskut[$ryhmittely]['valkoodi'] = $lasku['valkoodi'];
    $laskut[$ryhmittely]['ryhmittely_tyyppi'] = $lasku['ryhmittely_tyyppi'];
    $laskut[$ryhmittely]['laskut'][] = $lasku;
  }
}

if (!function_exists('keraa_saldovahvistusrivit_ktunnus_ytunnus')) {
  function keraa_saldovahvistusrivit_ktunnus_ytunnus(&$laskut, $lasku, $ryhmittely) {
    global $kukarow;

    if (!isset($laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['avoin_saldo_summa'])) {
      $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['avoin_saldo_summa'] = 0;
    }
    if (!isset($laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakas_nimi'])) {
      //asiakkaan nimeen tulee ensimm‰isen laskun asiakkaan nimi, eli p‰‰asiakkaan nimi
      $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakas_nimi'] = $lasku['nimi'];
      $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakas'] = hae_asiakas($lasku['liitostunnus']);

      $_ytunnus_chk = $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakas']['ytunnus'];
      $_ryhmittely_tyyppi = $lasku['ryhmittely_tyyppi'];

      if (!empty($lasku['saldovahvistus_liitostunnus']) or !empty($_ytunnus_chk)) {

        if (!empty($lasku['saldovahvistus_liitostunnus'])) {
          $query = "SELECT *
                    FROM asiakas
                    WHERE asiakas.yhtio = '{$kukarow['yhtio']}'
                    AND asiakas.tunnus  = '{$lasku['saldovahvistus_liitostunnus']}'";
        }
        else {
          $query = "SELECT asiakas.*
                    FROM asiakas
                    JOIN asiakkaan_avainsanat AS aa ON (
                      aa.yhtio           = asiakas.yhtio AND
                      aa.laji            = 'PƒƒASIAKAS' AND
                      aa.avainsana      != '' AND
                      aa.liitostunnus    = asiakas.tunnus
                    )
                    WHERE asiakas.yhtio  = '{$kukarow['yhtio']}'
                    AND asiakas.ytunnus  = '{$_ytunnus_chk}'
                    LIMIT 1";
        }

        $chkres = pupe_query($query);

        while ($chkrow = mysql_fetch_assoc($chkres)) {

          $_arr = &$laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely];

          if ($_ryhmittely_tyyppi == 'ytunnus') {
            $_arr['asiakas'] = hae_asiakas($chkrow['tunnus']);
            $_arr['asiakas_nimi'] = $_arr['asiakas']['nimi'];
          }
          else {
            $_arr['paaasiakas'] = hae_asiakas($chkrow['tunnus']);
            $_arr['asiakas']['talhal_email'] = $_arr['paaasiakas']['talhal_email'];
          }
        }
      }
    }

    $asiakasnumerot = search_array_key_for_value_recursive($laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakasnumerot'], 'asiakasnumero', $lasku['asiakasnumero']);
    if (!is_array($laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakasnumerot']) or empty($asiakasnumerot)) {
      $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['asiakasnumerot'][] = array(
        'asiakasnumero'   => $lasku['asiakasnumero'],
        'asiakas_tunnus' => $lasku['asiakas_tunnus'],
      );
    }

    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['saldovahvistus_tunnus'] = $lasku['saldovahvistus_tunnus'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['lahetys_paiva'] = $lasku['lahetys_paiva'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['saldovahvistus_viesti'] = $lasku['saldovahvistus_viesti'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['avoin_saldo_pvm'] = $lasku['avoin_saldo_pvm'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['lasku_tunnukset'][] = $lasku['lasku_tunnus'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['avoin_saldo_summa'] += $lasku['avoin_saldo'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['ytunnus'] = $lasku['ytunnus'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['valkoodi'] = $lasku['valkoodi'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['ryhmittely_tyyppi'] = $lasku['ryhmittely_tyyppi'];
    $laskut[$lasku['lahetys_paiva']][$lasku['saldovahvistus_tunnus']][$ryhmittely]['laskut'][] = $lasku;
  }
}

if (!function_exists('hae_kohdistamattomat_suoritukset')) {
  function hae_kohdistamattomat_suoritukset($asiakas_tunnukset, $pvm, $t) {
    global $kukarow, $yhtiorow;

    if (empty($asiakas_tunnukset)) {
      return false;
    }

    $query = "SELECT '' AS laskunro,
              'K' AS saldovahvistusrivi_tyyppi,
              maksupvm AS erpcm,
              summa * -1 AS avoin_saldo,
              valkoodi
              FROM suoritus
              WHERE suoritus.yhtio        = '{$kukarow['yhtio']}'
              AND (
                suoritus.kohdpvm          = '0000-00-00'
                OR suoritus.kohdpvm       > '{$pvm}'
                )
              AND suoritus.kirjpvm        <= '{$pvm}'
              AND suoritus.ltunnus        > 0
              AND suoritus.asiakas_tunnus IN (".implode(', ', $asiakas_tunnukset).")";
    $result = pupe_query($query);

    $kohdistamattomat_suoritukset = array();

    while ($kohdistamaton_suoritus = mysql_fetch_assoc($result)) {
      $kohdistamaton_suoritus['laskunro'] = $t;
      $kohdistamattomat_suoritukset[] = $kohdistamaton_suoritus;
    }

    return $kohdistamattomat_suoritukset;
  }
}

if (!function_exists('hae_lahetetyt_kohdistamattomat_suoritukset')) {

  function hae_lahetetyt_kohdistamattomat_suoritukset($saldovahvistus_tunnus, $t) {
    global $kukarow, $yhtiorow;

    $query = "SELECT saldovahvistusrivit.tyyppi AS saldovahvistusrivi_tyyppi,
              saldovahvistusrivit.era_pvm AS erpcm,
              saldovahvistusrivit.summa AS avoin_saldo
              FROM saldovahvistusrivit
              WHERE saldovahvistusrivit.yhtio               = '{$kukarow['yhtio']}'
              AND saldovahvistusrivit.saldovahvistus_tunnus = '{$saldovahvistus_tunnus}'
              AND saldovahvistusrivit.tyyppi                = 'K'";
    $result = pupe_query($query);

    $saldovahvistusrivit = array();

    while ($saldovahvistusrivi = mysql_fetch_assoc($result)) {
      $saldovahvistusrivi['laskunro'] = $t;
      $saldovahvistusrivit[] = $saldovahvistusrivi;
    }

    return $saldovahvistusrivit;
  }

}

if (!function_exists('keraa_kohdistamattomat')) {

  function keraa_kohdistamattomat($request, $laskut) {
    global $kukarow, $yhtiorow;

    $t = $request["t"]["kohdistamaton"];

    foreach ($laskut as &$lasku) {
      $pvm = $request['paiva'];
      $asiakasnumerot_ja_tunnukset = $lasku['asiakasnumerot'];

      $asiakas_tunnukset = search_array_key_recursive($asiakasnumerot_ja_tunnukset, 'asiakas_tunnus');
      $kohdistamattomat_suoritukset = hae_kohdistamattomat_suoritukset($asiakas_tunnukset, $pvm, $t);

      if (!empty($kohdistamattomat_suoritukset)) {
        $params = array(
          'direction'   => 'y',
          'key'     => 'avoin_saldo'
        );
        $kohdistamattomien_summa = sum_array($kohdistamattomat_suoritukset, $params);
        $lasku['laskut'] = array_merge($lasku['laskut'], $kohdistamattomat_suoritukset);
        $lasku['avoin_saldo_summa'] += $kohdistamattomien_summa;
      }
    }

    return $laskut;
  }

}

if (!function_exists('keraa_kohdistamattomat_lahetetyista')) {

  function keraa_kohdistamattomat_lahetetyista($lahetetyt_saldovahvistukset, $t) {

    foreach ($lahetetyt_saldovahvistukset as $lahetys_paiva => &$lasku_saldovahvistus) {
      foreach ($lasku_saldovahvistus as $saldovahvistus_tunnus => &$lasku_ytunnus) {
        foreach ($lasku_ytunnus as $ryhmittely => &$saldovahvistus) {
          $lahetetyt_kohdistamattomat_suoritukset = hae_lahetetyt_kohdistamattomat_suoritukset($saldovahvistus_tunnus, $t);

          if (!empty($lahetetyt_kohdistamattomat_suoritukset)) {
            $params = array(
              'direction'   => 'y',
              'key'     => 'avoin_saldo'
            );
            $kohdistamattomien_summa = sum_array($lahetetyt_kohdistamattomat_suoritukset, $params);

            $laskut_temp = array_merge($saldovahvistus['laskut'], $lahetetyt_kohdistamattomat_suoritukset);
            $saldovahvistus['laskut'] = $laskut_temp;
            $saldovahvistus['avoin_saldo_summa'] += $kohdistamattomien_summa;
          }
        }
      }
    }

    return $lahetetyt_saldovahvistukset;
  }

}

if (!function_exists('sum_array')) {
  function sum_array($array, $params = array('direction' => 'x', 'key' => 'xxx'), $exclusions = array()) {
    if (!empty($array)) {

      $sum = 0;

      if ($params['direction'] == 'x') {

        $keys = array_keys($array);

        for ($x = 0; $x < count($keys); $x++) {

          if (!in_array($keys[$x], $exclusions)) {
            $sum += $array[$keys[$x]];
          }
        }

        return $sum;
      }
      elseif ($params['direction'] == 'y') {

        $keys = array_keys($array);

        if (array_key_exists($params['key'], $array[$keys[0]])) {
          for ($x = 0; $x < count($keys); $x++) {
            if (!in_array($keys[$x], $exclusions)) {
              $sum += $array[$keys[$x]][$params['key']];
            }
          }

          return $sum;
        }
        else {
          return false;
        }
      }
      else {
        return false;
      }
    }
    else {
      return false;
    }
  }

}

if (!function_exists('hae_saldovahvistus_viestit')) {
  function hae_saldovahvistus_viestit($kieli = "") {
    global $kukarow, $yhtiorow;

    if ($kieli == "") {
      $kieli = $yhtiorow["kieli"];
    }

    $result = t_avainsana('SALDOVAHVISTUS', $kieli);
    $saldovahvistus_viestit = array();
    while ($saldovahvistus_viesti = mysql_fetch_assoc($result)) {
      $saldovahvistus_viestit[] = $saldovahvistus_viesti;
    }

    return $saldovahvistus_viestit;
  }
}

if (!function_exists('hae_kayttajan_kirjoitin')) {
  function hae_kayttajan_kirjoitin() {
    global $kukarow, $yhtiorow;

    //Haetaan kirjoitin
    $query = "SELECT *
              FROM kirjoittimet
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$kukarow['kirjoitin']}'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('generoi_saldovahvistus_sahkopostit')) {
  function generoi_saldovahvistus_sahkopostit($request, $lahetetyt = false) {
    global $kukarow, $yhtiorow;

    if ($lahetetyt) {
      //uusi_saldovahvistus k‰yttˆliittym‰st‰ voi antaa monta saldovahvistusta ja l‰hetetyt_saldovahvistukset n‰kym‰st‰ vain yhden. T‰st‰ syyst‰ pit‰‰ antaa arrayn sis‰ll‰
      $valitut_saldovahvistukset = array($request['saldovahvistus']);
    }
    else {
      $valitut_saldovahvistukset = $request['lahetettavat_laskut'];
    }

    $lahetetyt_count = 0;
    $ei_lahetetty_count = 0;

    $ei_lahetetyt = array();

    foreach ($valitut_saldovahvistukset as $valittu_saldovahvistus) {

      if ($lahetetyt) {
        $request['ryhmittely_tyyppi_temp'] = $valittu_saldovahvistus['ryhmittely_tyyppi'];
        $request['saldovahvistus_tunnus'] = $valittu_saldovahvistus['saldovahvistus_tunnus'];
        $saldovahvistus = hae_lahetetyt_saldovahvistukset($request);

        //Valittu saldovahvistusviesti
        $saldovahvistus['saldovahvistus_viesti'] = search_array_key_for_value_recursive($request['saldovahvistus_viestit'], 'selite', $valittu_saldovahvistus['saldovahvistus_viesti']);
        $saldovahvistus['saldovahvistus_viesti'] = $saldovahvistus['saldovahvistus_viesti'][0];
        $saldovahvistus['laskun_avoin_paiva'] = $valittu_saldovahvistus['laskun_avoin_paiva'];
      }
      else {
        $saldovahvistus = $request['valitut_laskut'][$valittu_saldovahvistus];

        //Valittu saldovahvistusviesti
        $saldovahvistus['saldovahvistus_viesti'] = search_array_key_for_value_recursive($request['saldovahvistus_viestit'], 'selite', $request["valitut_laskut"][$valittu_saldovahvistus]["saldovahvistus_viesti"]);
        $saldovahvistus['saldovahvistus_viesti'] = $saldovahvistus['saldovahvistus_viesti'][0];
      }

      if ($saldovahvistus['asiakas']['talhal_email'] != '') {

        $saldovahvistus['tiliotepvm'] = "{$request['vv']}-{$request['kk']}-{$request['pp']}";

        if ($saldovahvistus['ryhmittely_tyyppi'] == 'ytunnus') {
          $boss = true;
        }
        else {
          $boss = false;
        }

        $pdf_filepath = hae_saldovahvistus_pdf($saldovahvistus, $boss);

        $params = array(
          "to"       => $saldovahvistus['asiakas']['talhal_email'],
          "subject"     => t('Saldovahvistus', $saldovahvistus['asiakas']['kieli']),
          "ctype"       => "text",
          "body"       => t('Oheessa avoinsaldotilanteenne pdf-liitteen‰', $saldovahvistus['asiakas']['kieli']),
          "attachements"   => array(
            array(
              "filename"     => $pdf_filepath,
              "newfilename"   => t('Saldovahvistus', $saldovahvistus['asiakas']['kieli']).".pdf",
              "ctype"       => "pdf"
            )
          )
        );

        $onko_sahkoposti_lahetetty = pupesoft_sahkoposti($params);

        if ($onko_sahkoposti_lahetetty) {
          merkkaa_saldovahvistus_lahetetyksi($saldovahvistus);
          $lahetetyt_count++;

          if (!$lahetetyt) {
            unset($_SESSION['valitut_laskut'][$valittu_saldovahvistus]);
          }
        }
        else {
          $ei_lahetetty_count++;
          $ei_lahetetyt[$saldovahvistus['asiakas']['nimi']] = $saldovahvistus['asiakas']['nimi'];
        }
      }
      else {
        $ei_lahetetty_count++;
        $ei_lahetetyt[$saldovahvistus['asiakas']['nimi']] = $saldovahvistus['asiakas']['nimi'];
      }
    }

    return array($lahetetyt_count, $ei_lahetetty_count, $ei_lahetetyt);
  }
}

if (!function_exists('merkkaa_saldovahvistus_lahetetyksi')) {
  function merkkaa_saldovahvistus_lahetetyksi($saldovahvistus) {
    global $kukarow, $yhtiorow;

    if ($saldovahvistus['ryhmittely_tyyppi'] == 'ytunnus') {
      $_liitostunnus = $saldovahvistus['asiakas']['tunnus'];
    }
    elseif (!empty($saldovahvistus['paaasiakas'])) {
      $_liitostunnus = $saldovahvistus['paaasiakas']['tunnus'];
    }
    else {
      $_liitostunnus = 0;
    }

    $_date = date('Y-m-d', strtotime($saldovahvistus['laskun_avoin_paiva']));

    $query = "INSERT INTO saldovahvistukset
              SET lahetys_pvm = CURRENT_DATE,
              saldovahvistus_viesti = '{$saldovahvistus['saldovahvistus_viesti']['selite']}',
              avoin_saldo_pvm       = '{$_date}',
              ryhmittely_tyyppi     = '{$saldovahvistus['ryhmittely_tyyppi']}',
              liitostunnus          = '{$_liitostunnus}',
              yhtio                 = '{$kukarow['yhtio']}'";
    pupe_query($query, $GLOBALS["masterlink"]);
    $saldovahvistus_tunnus = mysql_insert_id($GLOBALS["masterlink"]);

    foreach ($saldovahvistus['laskut'] as $lasku) {
      if ($lasku['saldovahvistusrivi_tyyppi'] == 'K') {
        //Noticet pois
        $lasku['laskunro'] = 0;
        $lasku['lasku_tunnus'] = 0;
        $lasku['tapvm'] = null;
      }

      $query = "INSERT INTO saldovahvistusrivit
                SET saldovahvistus_tunnus = {$saldovahvistus_tunnus},
                tyyppi        = '{$lasku['saldovahvistusrivi_tyyppi']}',
                lasku_tunnus  = '{$lasku['lasku_tunnus']}',
                laskunro      = '{$lasku['laskunro']}',
                tapahtuma_pvm = '{$lasku['tapvm']}',
                era_pvm       = '{$lasku['erpcm']}',
                summa         = {$lasku['avoin_saldo']},
                yhtio         = '{$kukarow['yhtio']}'";
      pupe_query($query, $GLOBALS["masterlink"]);
    }
  }
}

if (!function_exists('hae_mahdolliset_siirto_varastot')) {
  function hae_mahdolliset_siirto_varastot($kohde_varastot = array(), $tuoteno = '') {
    global $kukarow, $yhtiorow;

    if (!empty($kohde_varastot)) {
      $avainsana_where = "  AND a.selitetark IN (".implode(', ', $kohde_varastot).")";
    }
    else {
      return array();
    }

    $query = "SELECT a.*,
              v_lahde.yhtio AS lahde_yhtio,
              v_lahde.nimitys AS lahde_nimi,
              v_lahde.tunnus AS lahde_tunnus,
              v_lahde.alkuhyllyalue AS lahde_alkuhyllyalue,
              v_lahde.alkuhyllynro AS lahde_alkuhyllynro,
              v_kohde.nimitys AS kohde_nimi,
              v_kohde.tunnus AS kohde_tunnus,
              v_kohde.alkuhyllyalue AS kohde_alkuhyllyalue,
              v_kohde.alkuhyllynro AS kohde_alkuhyllynro,
              toimitustapa.selite AS toimitustapa_selite
              FROM avainsana AS a
              JOIN varastopaikat AS v_lahde
              ON ( v_lahde.yhtio = a.yhtio
                AND v_lahde.tunnus      = a.selite )
              JOIN varastopaikat AS v_kohde
              ON ( v_kohde.yhtio = a.yhtio
                AND v_kohde.tunnus      = a.selitetark )
              JOIN toimitustapa
              ON ( toimitustapa.yhtio = a.yhtio
                AND toimitustapa.tunnus = a.selitetark_2 )
              WHERE a.yhtio             = '{$kukarow['yhtio']}'
              AND a.laji                = 'SIIRTOVARASTOT'
              {$avainsana_where}
              ORDER BY a.jarjestys ASC";
    $result = pupe_query($query);

    $varastosiirto_linkit = array();
    while ($varastosiirto_linkki = mysql_fetch_assoc($result)) {
      $varastosiirto_linkki['tuote'] = array();
      if ($tuoteno != '') {
        list($saldo, $hyllyssa, $myytavissa) = saldo_myytavissa($tuoteno, '', $varastosiirto_linkki['lahde_tunnus'], $varastosiirto_linkki['lahde_yhtio']);
        if (empty($saldo)) {
          $saldo = 0;
        }
        if (empty($hyllyssa)) {
          $hyllyssa = 0;
        }
        if (empty($myytavissa)) {
          $myytavissa = 0;
        }
        $varastosiirto_linkki['tuote'] = array(
          'tuoteno' => $tuoteno,
          'saldo' => $saldo,
          'hyllyssa' => $hyllyssa,
          'myytavissa' => $myytavissa
        );
      }
      $varastosiirto_linkit[] = $varastosiirto_linkki;
    }

    return $varastosiirto_linkit;
  }
}

if (!function_exists('varaston_tuotepaikkojen_saldo')) {
  function varaston_tuotepaikkojen_saldo($tuoteno, $varastot = array()) {
    global $kukarow, $yhtiorow;

    $varastopaikat = "";
    if (!empty($varastot)) {
      $varastopaikat = "  AND tuotepaikat.varasto IN ('".implode("','", $varastot)."')";
    }

    if (!empty($yhtiorow["saldo_kasittely"])) {
      $saldoaikalisa = date("Y-m-d");
    }
    else {
      $saldoaikalisa = "";
    }

    $query = "SELECT tuote.yhtio,
              tuote.tuoteno,
              tuote.ei_saldoa,
              varastopaikat.tunnus AS varasto,
              varastopaikat.tyyppi AS varastotyyppi,
              varastopaikat.maa AS varastomaa,
              tuotepaikat.oletus,
              tuotepaikat.hyllyalue,
              tuotepaikat.hyllynro,
              tuotepaikat.hyllyvali,
              tuotepaikat.hyllytaso,
              concat(rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'),lpad(upper(hyllyvali), 5, '0'),lpad(upper(hyllytaso), 5, '0')) AS sorttauskentta,
              varastopaikat.nimitys,
              if (varastopaikat.tyyppi!='', concat('(',varastopaikat.tyyppi,')'), '') AS tyyppi
              FROM tuote
              JOIN tuotepaikat ON (tuotepaikat.yhtio = tuote.yhtio
                AND tuotepaikat.tuoteno  = tuote.tuoteno
                $varastopaikat)
              JOIN varastopaikat ON (varastopaikat.yhtio = tuotepaikat.yhtio
                AND varastopaikat.tunnus = tuotepaikat.varasto)
              WHERE tuote.yhtio          = '{$kukarow['yhtio']}'
              AND tuote.tuoteno          = '{$tuoteno}'
              ORDER BY tuotepaikat.oletus DESC,
              varastopaikat.nimitys,
              sorttauskentta";
    $result = pupe_query($query);

    $tuotepaikat = array();
    while ($tuotepaikka = mysql_fetch_assoc($result)) {
      list($tuotepaikka['saldo'], $tuotepaikka['hyllyssa'], $tuotepaikka['myytavissa']) = saldo_myytavissa($tuotepaikka["tuoteno"], '', '', $tuotepaikka["yhtio"], $tuotepaikka["hyllyalue"], $tuotepaikka["hyllynro"], $tuotepaikka["hyllyvali"], $tuotepaikka["hyllytaso"], '', $saldoaikalisa);

      $tuotepaikat[] = $tuotepaikka;
    }

    return $tuotepaikat;
  }
}

if (!function_exists('tuotteen_oletuspaikka')) {
  function tuotteen_oletuspaikka($tuoteno, $varasto) {
    global $kukarow, $yhtiorow;

    if (empty($tuoteno) or empty($varasto)) {
      return false;
    }

    $query = "SELECT tuotepaikat.*,
              varastopaikat.tunnus AS varasto_tunnus,
              varastopaikat.nimitys AS varasto_nimitys
              FROM tuotepaikat
              JOIN varastopaikat ON (varastopaikat.yhtio = tuotepaikat.yhtio
                AND varastopaikat.tunnus  = tuotepaikat.varasto)
              WHERE tuotepaikat.yhtio     = '{$kukarow['yhtio']}'
              AND tuotepaikat.oletus     != ''
              AND tuotepaikat.tuoteno     = '{$tuoteno}'
              AND tuotepaikat.varasto     = {$varasto}";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('aseta_tilausrivien_var')) {
  function aseta_tilausrivien_var($tilausrivi_tunnukset, $var) {
    global $kukarow, $yhtiorow;

    if (empty($tilausrivi_tunnukset)) {
      return false;
    }

    $query = "UPDATE tilausrivi
              SET var = '{$var}'
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  IN (".implode(",", $tilausrivi_tunnukset).")";
    pupe_query($query);

    return true;
  }
}

/**
 * Hakee $array:st‰ annettujen arvojen mukaiset rivit
 *
 * $values = array(
 * 'lahdevarasto_tunnus' => 139,
 * 'kohdevarasto_tunnus' => 155
 * );
 *
 * @param array   $array
 * @param array   $values
 * @return array
 */
if (!function_exists('array_find')) {
  function array_find($array, $values) {
    $result = array();
    foreach ($array as $a) {
      $element_ok = true;
      foreach ($values as $key => $v) {
        if (isset($a[$key]) and $a[$key] != $v) {
          $element_ok = false;
          break;
        }
      }

      if ($element_ok) {
        $result[] = $a;
      }
    }

    return $result;
  }
}

/**
 * Hakee $array:st‰ uniikit kombinaatiot annetuilla key:ll‰
 * $keys = array(
 * 'lahdevarasto_tunnus',
 * 'kohdevarasto_tunnus'
 * );
 *
 * @param array   $array
 * @param array   $keys
 * @return array
 */
if  (!function_exists('array_find_unique_values')) {
  function array_find_unique_values($array, $keys) {
    $result = array();
    foreach ($array as $a) {
      $array_temp2 = array();
      foreach ($keys as $k) {
        $array_temp2[$k] = $a[$k];
      }
      if (empty($result)) {
        array_push($result, $array_temp2);
      }
      else {
        $unique = true;
        foreach ($result as $a2) {
          $diff = array_diff_assoc($a2, $array_temp2);
          if (empty($diff)) {
            $unique = false;
          }
        }
        if ($unique) {
          array_push($result, $array_temp2);
        }
      }
    }

    return $result;
  }
}

if (!function_exists("korvaavat_kiellot")) {
  function korvaavat_kiellot($ytunnus, $osasto, $try, $laji='') {
    global $kukarow;

    $lajilisa = "";

    if ($laji != "") {
      $lajilisa = " AND laji = '$laji' ";
    }

    // ytunnus osasto try
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '$ytunnus'
              AND osasto  = '$osasto'
              AND try     = '$try'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // ytunnus * try
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '$ytunnus'
              AND osasto  = '*'
              AND try     = '$try'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // ytunnus osasto *
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '$ytunnus'
              AND osasto  = '$osasto'
              AND try     = '*'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // ytunnus * *
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '$ytunnus'
              AND osasto  = '*'
              AND try     = '*'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // * osasto try
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '*'
              AND osasto  = '$osasto'
              AND try     = '$try'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // * * try
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '*'
              AND osasto  = '*'
              AND try     = '$try'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // * osasto *
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '*'
              AND osasto  = '$osasto'
              AND try     = '*'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    // ***
    $query = "SELECT laji
              FROM korvaavat_kiellot
              WHERE yhtio = '$kukarow[yhtio]'
              AND ytunnus = '*'
              AND osasto  = '*'
              AND try     = '*'
              {$lajilisa}";
    $kkres = pupe_query($query);

    if ($kk_row = mysql_fetch_assoc($kkres)) {
      return $kk_row['laji'];
    }

    return "";
  }
}

if (!function_exists('hae_yhtion_toimipaikan_varastot')) {
  function hae_yhtion_toimipaikan_varastot($yhtio_toimipaikka) {
    global $kukarow, $yhtiorow;

    // haetaan kaikki paitsi poistetut varastot annetulta toimipaikalta
    // sortataan tyypin ja nimityksen mukaan varastot
    $query = "SELECT *
              FROM varastopaikat
              WHERE yhtio          = '{$kukarow['yhtio']}'
                  AND toimipaikka  = '{$yhtio_toimipaikka}'
                  AND tyyppi      != 'P'
                  ORDER BY if(tyyppi = '', 0, if(tyyppi = 'V', 1, 2)), nimitys";
    $varastopaikat_result = pupe_query($query);
    $varastopaikat = array();

    while ($varastopaikka = mysql_fetch_assoc($varastopaikat_result)) {
      $varastopaikat[] = $varastopaikka;
    }

    return $varastopaikat;
  }
}

/**
 * This file is part of the array_column library
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @copyright Copyright (c) 2013 Ben Ramsey <http://benramsey.com>
 * @license http://opensource.org/licenses/MIT MIT
 */
if (!function_exists('array_column')) {


  /**
   * Returns the values from a single column of the input array, identified by
   * the $columnKey.
   *
   * Optionally, you may provide an $indexKey to index the values in the returned
   * array by the values from the $indexKey column in the input array.
   *
   * @param array   $input     A multi-dimensional array (record set) from which to pull
   *                     a column of values.
   * @param mixed   $columnKey The column of values to return. This value may be the
   *                         integer key of the column you wish to retrieve, or it
   *                         may be the string key name for an associative array.
   * @param mixed   $indexKey  (Optional.) The column to use as the index/keys for
   *                        the returned array. This value may be the integer key
   *                        of the column, or it may be the string key name.
   * @return array
   */
  function array_column($input = null, $columnKey = null, $indexKey = null) {
    // Using func_get_args() in order to check for proper number of
    // parameters and trigger errors exactly as the built-in array_column()
    // does in PHP 5.5.
    $argc = func_num_args();
    $params = func_get_args();

    if ($argc < 2) {
      trigger_error("array_column() expects at least 2 parameters, {$argc} given", E_USER_WARNING);
      return null;
    }

    if (!is_array($params[0])) {
      trigger_error('array_column() expects parameter 1 to be array, '.gettype($params[0]).' given', E_USER_WARNING);
      return null;
    }

    if (!is_int($params[1]) && !is_float($params[1]) && !is_string($params[1]) && $params[1] !== null && !(is_object($params[1]) && method_exists($params[1], '__toString'))
    ) {
      trigger_error('array_column(): The column key should be either a string or an integer', E_USER_WARNING);
      return false;
    }

    if (isset($params[2]) && !is_int($params[2]) && !is_float($params[2]) && !is_string($params[2]) && !(is_object($params[2]) && method_exists($params[2], '__toString'))
    ) {
      trigger_error('array_column(): The index key should be either a string or an integer', E_USER_WARNING);
      return false;
    }

    $paramsInput = $params[0];
    $paramsColumnKey = ($params[1] !== null) ? (string)$params[1] : null;

    $paramsIndexKey = null;
    if (isset($params[2])) {
      if (is_float($params[2]) || is_int($params[2])) {
        $paramsIndexKey = (int)$params[2];
      }
      else {
        $paramsIndexKey = (string)$params[2];
      }
    }

    $resultArray = array();

    foreach ($paramsInput as $row) {

      $key = $value = null;
      $keySet = $valueSet = false;

      if ($paramsIndexKey !== null && array_key_exists($paramsIndexKey, $row)) {
        $keySet = true;
        $key = (string)$row[$paramsIndexKey];
      }

      if ($paramsColumnKey === null) {
        $valueSet = true;
        $value = $row;
      }
      elseif (is_array($row) && array_key_exists($paramsColumnKey, $row)) {
        $valueSet = true;
        $value = $row[$paramsColumnKey];
      }

      if ($valueSet) {
        if ($keySet) {
          $resultArray[$key] = $value;
        }
        else {
          $resultArray[] = $value;
        }
      }
    }

    return $resultArray;
  }

}

if (!function_exists('tee_kirjanpidollinen_varastosiirto')) {
  function tee_kirjanpidollinen_varastosiirto($myyntitilaus_tunnus, $_poikkeavalaskutuspvm) {
    global $kukarow, $yhtiorow;

    if ($yhtiorow['kirjanpidollinen_varastosiirto_myyntitilaukselta'] == '') {
      return false;
    }

    $myyntitilaus = hae_lasku($myyntitilaus_tunnus);
    $varastot       = hae_yhtion_toimipaikan_varastot($myyntitilaus['yhtio_toimipaikka']);
    $varastot       = array_column($varastot, 'tunnus');

    // Yhtiˆn toimipaikalla voi olla monta varastoa.
    if ($myyntitilaus['varasto'] != 0 and count($varastot) > 0 and !in_array($myyntitilaus['varasto'], $varastot)) {
      require 'tilauskasittely/tilauksesta_varastosiirto.inc';

      //Myyntitilaukselle valittu varasto ei ole yhtion toimipaikan varastoissa. T‰llˆin tehd‰‰n kirjanpidollinen varastosiirto
      tilauksesta_varastosiirto($myyntitilaus_tunnus, 'K', $_poikkeavalaskutuspvm);
    }
  }
}

if (!function_exists('luo_tapahtuma')) {
  function luo_tapahtuma($tuoteno, $laji, $hyllyalue, $hyllynro, $hyllytaso, $hyllyvali, $kpl = 0.00, $hinta = 0.00, $kplhinta = 0.00, $selite = '', $tilausrivitunnus = 0) {
    global $kukarow, $yhtiorow;

    $query = "INSERT INTO tapahtuma
              SET yhtio = '{$kukarow['yhtio']}',
              tuoteno    = '{$tuoteno}',
              laji       = '{$laji}',
              kpl        = {$kpl},
              hinta      = {$hinta},
              kplhinta   = {$kplhinta},
              selite     = '{$selite}',
              laatija    = '{$kukarow['yhtio']}',
              laadittu   = NOW(),
              rivitunnus = {$tilausrivitunnus},
              hyllyalue  = '{$hyllyalue}',
              hyllynro   = '{$hyllynro}',
              hyllyvali  = '{$hyllyvali}',
              hyllytaso  = '{$hyllytaso}'";
    pupe_query($query);
  }
}

if (!function_exists('hae_tuotepaikat')) {
  function hae_tuotepaikat($tuoteno, $hyllyalue, $hyllynro, $hyllytaso = false, $hyllyvali = false) {
    global $kukarow, $yhtiorow;

    $tuotepaikka_where = "";
    if (!empty($hyllytaso)) {
      $tuotepaikka_where .= "  AND hyllytaso = '{$hyllytaso}'";
    }

    if (!empty($hyllyvali)) {
      $tuotepaikka_where .= "  AND hyllyvali = '{$hyllyvali}'";
    }

    $query = "SELECT *
              FROM tuotepaikat
              WHERE yhtio   = '{$kukarow['yhtio']}'
              AND tuoteno   = '{$tuoteno}'
              AND hyllyalue = '{$hyllyalue}'
              AND hyllynro  = '{$hyllynro}'
              {$tuotepaikka_where}";
    $result = pupe_query($query);

    $tuotepaikat = array();
    while ($tuotepaikka = mysql_fetch_assoc($result)) {
      $tuotepaikat[] = $tuotepaikka;
    }

    return $tuotepaikat;
  }

}

if (!function_exists('hae_tuotteen_tuotepaikat')) {
  function hae_tuotteen_tuotepaikat($tuoteno, $varasto = 0) {
    global $kukarow, $yhtiorow;

    if (empty($tuoteno)) {
      return array();
    }

    $varastojoin = '';

    if (!empty($varasto)) {
      $varastojoin = "AND tuotepaikat.varasto = {$varasto}";
    }

    $query = "SELECT tuotepaikat.*
              FROM tuotepaikat
              WHERE tuotepaikat.yhtio = '{$kukarow['yhtio']}'
              AND tuotepaikat.tuoteno = '{$tuoteno}'
              $varastojoin
              ORDER BY tuotepaikat.oletus desc";
    $result = pupe_query($query);

    $tuotepaikat = array();

    while ($tuotepaikka = mysql_fetch_assoc($result)) {
      $tuotepaikat[] = $tuotepaikka;
    }

    return $tuotepaikat;
  }
}

if (!function_exists('hae_varasto')) {
  function hae_varasto($tunnus) {
    global $kukarow, $yhtiorow;

    if (empty($tunnus)) {
      return false;
    }

    $query = "SELECT *
              FROM varastopaikat
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = {$tunnus}";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists("onkotapahtumajariveja")) {
  function onkotapahtumajariveja($tuoteno) {
    global $kukarow, $poistolukko;

    // Tuotteen saa poistaa mik‰li sill‰ ei ole yht‰‰n tapahtumaa
    $query = "SELECT yhtio
              FROM tapahtuma USE INDEX (yhtio_laji_tuoteno)
              WHERE yhtio = '$kukarow[yhtio]'
              and laji    in ('ep‰kurantti','inventointi','kulutus','laskutus','siirto','tulo','valmistus')
              and tuoteno = '{$tuoteno}'
              LIMIT 1";
    $sdtres = pupe_query($query);

    if (mysql_num_rows($sdtres) == 0) {
      // Ei saa olla myˆsk‰‰n yht‰‰n tilausrivi‰ (Puuterivit sallitaan)
      $query = "SELECT yhtio
                FROM tilausrivi USE INDEX (yhtio_tyyppi_tuoteno_laadittu)
                WHERE yhtio   = '$kukarow[yhtio]'
                and tyyppi    in ('0','B','E','F','G','L','M','N','O','T','V','W','Z')
                and tuoteno   = '{$tuoteno}'
                and laadittu  > '0000-00-00 00:00:00'
                and var      != 'P'
                LIMIT 1";
      $sdtres = pupe_query($query);

      if (mysql_num_rows($sdtres) == 0) {
        $query  = "SELECT tunnus
                   FROM tuotepaikat
                   WHERE yhtio  = '$kukarow[yhtio]'
                   AND tuoteno  = '{$tuoteno}'
                   AND saldo   != 0";
        $sdtres = pupe_query($query);

        if (mysql_num_rows($sdtres) == 0) {
          // Ei Tapahtumia, ei rivej‰ eik‰ saldoa
          $poistolukko = "";
          return;
        }
      }
    }

    // Tapahtumia tai rivej‰ on
    $poistolukko = "TSEKATTU";
  }
}

if (!function_exists('saako_palauttaa_siirtovarastoon')) {
  function saako_palauttaa_siirtovarastoon($tuoteno) {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM tuotteen_avainsanat
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tuoteno = '{$tuoteno}'
              AND laji    = 'varastopalautus'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      return true;
    }

    $row = mysql_fetch_assoc($result);

    if ($row['selite'] == 'K') {
      return true;
    }

    return false;
  }
}

if (!function_exists('hae_toimipaikat')) {
  function hae_toimipaikat() {
    global $kukarow, $yhtiorow;

    $query   = "SELECT *
                FROM yhtion_toimipaikat
                WHERE yhtio = '{$kukarow['yhtio']}'
                ORDER BY nimi";
    $result   = pupe_query($query);

    $toimipaikat = array();
    while ($toimipaikka = mysql_fetch_assoc($result)) {
      $toimipaikat[] = $toimipaikka;
    }

    return $toimipaikat;
  }
}

if (!function_exists('hae_asiakkaan_toimitustavat')) {
  function hae_asiakkaan_toimitustavat($asiakas_tunnus) {
    global $kukarow, $yhtiorow;

    if (empty($asiakas_tunnus)) {
      return array();
    }

    $toimitustavat = array();

    $query = "SELECT toimitustapa.*,
              'M' AS extranet,
              if (toimitustapa.jarjestys = 0, 9999, toimitustapa.jarjestys) AS jarjestys
              FROM asiakkaan_avainsanat
              JOIN toimitustapa ON (toimitustapa.yhtio = asiakkaan_avainsanat.yhtio
                AND toimitustapa.selite             = asiakkaan_avainsanat.avainsana )
              WHERE asiakkaan_avainsanat.yhtio      = '{$kukarow['yhtio']}'
              AND asiakkaan_avainsanat.laji         IN ('editilaus_toimitustapa', 'toimitustapa')
              AND asiakkaan_avainsanat.liitostunnus = '{$asiakas_tunnus}'";
    $result = pupe_query($query);

    while ($toimitustapa = mysql_fetch_assoc($result)) {
      $toimitustavat["t{$toimitustapa['tunnus']}"] = $toimitustapa;
    }

    $query = "SELECT toimitustapa.*,
              if (toimitustapa.jarjestys = 0, 9999, toimitustapa.jarjestys) AS jarjestys
              FROM asiakas
              JOIN toimitustapa
              ON (toimitustapa.yhtio = asiakas.yhtio
                AND toimitustapa.selite = asiakas.toimitustapa )
              WHERE asiakas.yhtio       = '{$kukarow['yhtio']}'
              AND asiakas.tunnus        = '{$asiakas_tunnus}'";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 1) {
      $toimitustapa = mysql_fetch_assoc($result);
      $toimitustavat["t{$toimitustapa['tunnus']}"] = $toimitustapa;
    }

    return $toimitustavat;
  }
}

if (!function_exists('hae_toimitustavan_toimipaikat')) {
  function hae_toimitustavan_toimipaikat($toimitustapa_tunnus) {
    global $kukarow, $yhtiorow;

    if (empty($toimitustapa_tunnus)) {
      return array();
    }

    $query   = "SELECT yt.*,
                tt.toimitustapa_tunnus AS toimitustapa_tunnus,
                tt.toimipaikka_tunnus AS toimipaikka_tunnus,
                tt.tunnus AS toimitustavat_toimipaikat_tunnus
                FROM yhtion_toimipaikat AS yt
                JOIN toimitustavat_toimipaikat AS tt
                ON ( tt.yhtio = yt.yhtio
                  AND tt.toimipaikka_tunnus  = yt.tunnus
                  AND tt.toimitustapa_tunnus = '{$toimitustapa_tunnus}')
                WHERE yt.yhtio               = '{$kukarow['yhtio']}'";
    $result   = pupe_query($query);

    $toimipaikat = array();
    while ($toimipaikka = mysql_fetch_assoc($result)) {
      $toimipaikat[] = $toimipaikka;
    }

    return $toimipaikat;
  }
}

if (!function_exists('hae_toimipaikan_toimitustavat')) {
  function hae_toimipaikan_toimitustavat($toimipaikka_tunnus) {
    global $kukarow, $yhtiorow;

    //toimipaikka_tunnus = 0 = ei toimipaikkaa = p‰‰kallopaikka
    if (empty($toimipaikka_tunnus) and !is_numeric($toimipaikka_tunnus)) {
      return array();
    }

    $toimitustavat = array();

    //Ensin haetaan kaikki toimitustavat, jotka ei kuulu mihink‰‰n toimipaikkaan taakse yhteensopivuuden takia
    $query   = "SELECT t.*,
                if (t.jarjestys = 0, 9999, t.jarjestys) AS jarjestys
                FROM toimitustapa AS t
                LEFT JOIN toimitustavat_toimipaikat AS tt
                ON ( tt.yhtio = t.yhtio
                  AND tt.toimitustapa_tunnus = t.tunnus )
                WHERE t.yhtio                = '{$kukarow['yhtio']}'
                AND tt.tunnus IS NULL";
    $result   = pupe_query($query);

    while ($toimitustapa = mysql_fetch_assoc($result)) {
      $toimitustavat["t{$toimitustapa['tunnus']}"] = $toimitustapa;
    }

    $query = "SELECT t.*,
              tt.toimitustapa_tunnus AS toimitustapa_tunnus,
              tt.toimipaikka_tunnus AS toimipaikka_tunnus,
              if (t.jarjestys = 0, 9999, t.jarjestys) AS jarjestys
              FROM toimitustapa AS t
              JOIN toimitustavat_toimipaikat AS tt
              ON ( tt.yhtio = t.yhtio
                AND tt.toimitustapa_tunnus = t.tunnus
                AND tt.toimipaikka_tunnus  = {$toimipaikka_tunnus})
              WHERE t.yhtio                = '{$kukarow['yhtio']}'";

    $result = pupe_query($query);

    while ($toimitustapa = mysql_fetch_assoc($result)) {
      $toimitustavat["t{$toimitustapa['toimitustapa_tunnus']}"] = $toimitustapa;
    }

    return $toimitustavat;
  }
}

if (!function_exists('hae_toimitustavat')) {
  function hae_toimitustavat(array $params) {
    global $kukarow, $yhtiorow;

    $asiakas_tunnus = $params['asiakas_tunnus'];
    $lasku_toimipaikka = $params['lasku_toimipaikka'];
    $varasto_toimipaikka = $params['varasto_toimipaikka'];

    if (isset($varasto_toimipaikka) and $varasto_toimipaikka != '') {
      $toimipaikka = $varasto_toimipaikka;
    }
    else {
      $toimipaikka = $lasku_toimipaikka;
    }

    $asiakkaan_toimitustavat = hae_asiakkaan_toimitustavat($asiakas_tunnus);

    $toimipaikan_toimitustavat   = hae_toimipaikan_toimitustavat($toimipaikka);

    // kohde- ja l‰hdevaraston v‰liset oletustoimitustavat
    if (isset($params['kohdevarasto']) and isset($params['lahdevarasto'])) {

      $lv = (int) $params['lahdevarasto'];
      $kv = (int) $params['kohdevarasto'];

      $ott_qry = "SELECT tpa.*,
                  if (tpa.jarjestys = 0, 9999, tpa.jarjestys) AS jarjestys
                  FROM avainsana AS ana
                  JOIN toimitustapa AS tpa
                  ON ( ana.yhtio = tpa.yhtio AND ana.selitetark_2 = tpa.tunnus )
                  WHERE ana.yhtio = '$kukarow[yhtio]'
                  AND ana.laji    = 'SIIRTOVARASTOT'
                  AND ana.selite  = $lv
                  AND selitetark  = $kv";
      $ott_result = pupe_query($ott_qry);

      $oletus_toimitustavat = array();
      while ($toimitustapa = mysql_fetch_assoc($ott_result)) {
        $oletus_toimitustavat[] = $toimitustapa;
      }
      $toimipaikan_toimitustavat = array_merge($toimipaikan_toimitustavat, $asiakkaan_toimitustavat, $oletus_toimitustavat);
    }
    else {
      $toimipaikan_toimitustavat = array_merge($toimipaikan_toimitustavat, $asiakkaan_toimitustavat);
    }

    $sort = array();
    foreach ($toimipaikan_toimitustavat as $index => $toimipaikan_toimitustapa) {
      $sort[$index] = $toimipaikan_toimitustapa['jarjestys'];
      $lower[$index] = strtolower($toimipaikan_toimitustapa['selite']);
    }

    array_multisort($sort, SORT_NUMERIC, $lower, SORT_STRING, SORT_ASC, $toimipaikan_toimitustavat);

    return $toimipaikan_toimitustavat;
  }
}

if (!function_exists('hae_kaikki_toimitustavat')) {
  function hae_kaikki_toimitustavat() {
    global $kukarow, $yhtiorow;

    $query = "SELECT *
              FROM toimitustapa
              WHERE yhtio = '{$kukarow['yhtio']}'";
    $result = pupe_query($query);

    $toimitustavat = array();
    while ($toimitustapa = mysql_fetch_assoc($result)) {
      $toimitustavat[] = $toimitustapa;
    }

    return $toimitustavat;
  }
}

if (!function_exists('sallitut_varastot')) {
  function sallitut_varastot(array $params) {
    global $kukarow, $yhtiorow;

    // Palaitetaan t‰m‰ array
    $kukarow_varasto = array();

    // Parametrit
    $asiakas_tunnus     = isset($params['asiakas_tunnus']) ? (int)$params['asiakas_tunnus'] : 0;
    $toimipaikka_tunnus = isset($params['toimipaikka_tunnus']) ? (int)$params['toimipaikka_tunnus'] : 0;
    $toimitus_maa       = isset($params['toimitus_maa']) ? $params['toimitus_maa'] : '';
    $varastotyyppi      = isset($params['varastotyyppi']) ? $params['varastotyyppi'] : '';
    $toim               = isset($params['toim']) ? $params['toim'] : '';
    $tilaustyyppi       = isset($params['tilaustyyppi']) ? $params['tilaustyyppi'] : '';

    if ($toim == "OSTO") {
      $query = "SELECT *
                FROM varastopaikat
                WHERE yhtio = '{$kukarow["yhtio"]}'
                  AND tyyppi <> 'P'
                ORDER BY tyyppi, nimitys";
      $varastoresult = pupe_query($query);

      while ($varastorow = mysql_fetch_array($varastoresult)) {
        if (
          $varastorow["tyyppi"] == '' or
          $kukarow["varasto"] == $varastorow["tunnus"] or
          $varastorow['tunnus'] == $srow["varasto"] or
          $kukarow['oletus_ostovarasto'] == $varastorow['tunnus'] or
          in_array($varastorow["tunnus"], explode(',', $kukarow["varasto"]))
        ) {
          $kukarow_varasto[] = $varastorow;
        }
      }

      return $kukarow_varasto;
    }

    if ($toim == "REKLAMAATIO" and $tilaustyyppi == 'U' and $yhtiorow['takuuvarasto'] != 0) {
      return array($yhtiorow['takuuvarasto']);
    }

    if ($toim == "REKLAMAATIO" and $tilaustyyppi == 'R' and $yhtiorow['reklamaation_vastaanottovarasto'] != 0) {
      return array($yhtiorow['reklamaation_vastaanottovarasto']);
    }

    if ($varastotyyppi == 'kaikki_varastot') {
      $varastotyyppi_lisa = "";
    }
    else {
      $varastotyyppi_lisa = "AND varastopaikat.tyyppi IN ('', 'V')";
    }

    // Katsotaan saako t‰lle asiakkaalle myyd‰ vain jostain varastoista
    if ($yhtiorow['myyntitilauksen_toimipaikka'] == 'A' and $asiakas_tunnus != 0) {
      $query     = "SELECT asiakkaan_avainsanat.avainsana
                    FROM asiakkaan_avainsanat
                    WHERE asiakkaan_avainsanat.yhtio      = '$kukarow[yhtio]'
                    AND asiakkaan_avainsanat.laji         = 'oletusmyyntivarasto'
                    AND asiakkaan_avainsanat.liitostunnus = {$asiakas_tunnus}";
      $aov_result   = pupe_query($query);

      // Jos asiakkaalta lˆytyy varastoja
      while ($aov_row = mysql_fetch_assoc($aov_result)) {
        $kukarow_varasto[] = $aov_row['avainsana'];
      }

      if (count($kukarow_varasto) > 0) {
        return $kukarow_varasto;
      }
    }

    if ($yhtiorow["myyntitilauksen_toimipaikka"] == "A" and $toimipaikka_tunnus != 0) {
      // Haetaan varastot joita toimipaikka saa k‰ytt‰‰
      $query   = "SELECT varastopaikat.tunnus
                  FROM avainsana
                  JOIN varastopaikat
                  ON (varastopaikat.yhtio = avainsana.yhtio
                    AND varastopaikat.tunnus           = avainsana.selitetark
                    AND (varastopaikat.sallitut_maat LIKE '%$toimitus_maa%'
                       OR varastopaikat.sallitut_maat  = '')
                    AND varastopaikat.tyyppi          != 'P')
                  WHERE avainsana.yhtio                = '{$kukarow['yhtio']}'
                  AND avainsana.laji                   = 'TOIMMYYNTI'
                  AND avainsana.selite                 = {$toimipaikka_tunnus}
                  ORDER BY avainsana.jarjestys ASC";
      $result   = pupe_query($query);

      while ($varasto = mysql_fetch_assoc($result)) {
        $kukarow_varasto[] = $varasto['tunnus'];
      }

      if (count($kukarow_varasto) > 0) {
        return $kukarow_varasto;
      }

      // Etsit‰‰n onko t‰ll‰ toimipaikalla jotain varastoja
      $query     = "SELECT varastopaikat.tunnus
                    FROM varastopaikat
                    WHERE varastopaikat.yhtio          = '$kukarow[yhtio]'
                    AND varastopaikat.toimipaikka      = {$toimipaikka_tunnus}
                    AND (varastopaikat.sallitut_maat LIKE '%$toimitus_maa%'
                       OR varastopaikat.sallitut_maat  = '')
                    AND varastopaikat.tyyppi          != 'P'";
      $tlv_result   = pupe_query($query);

      while ($tlv_row = mysql_fetch_assoc($tlv_result)) {
        $kukarow_varasto[] = $tlv_row['tunnus'];
      }

      if (count($kukarow_varasto) > 0) {
        return $kukarow_varasto;
      }
    }

    // Ei lˆytynyt viel‰ yht‰‰n varastoa, otetaan varastot k‰ytt‰j‰n tiedoista
    if (trim($kukarow['varasto']) != "" and strpos($kukarow['varasto'], ',') !== false) {
      return explode(",", $kukarow["varasto"]);
    }
    elseif (!empty($kukarow['varasto'])) {
      return array($kukarow['varasto']);
    }

    // Ilman rajausta saa myyd‰ kaikista normaalivarastoista
    $query     = "SELECT varastopaikat.tunnus
                  FROM varastopaikat
                  WHERE varastopaikat.yhtio         = '$kukarow[yhtio]'
                  AND (varastopaikat.sallitut_maat LIKE '%$toimitus_maa%'
                     OR varastopaikat.sallitut_maat = '')
                  {$varastotyyppi_lisa}";
    $result   = pupe_query($query);

    while ($tlv_row = mysql_fetch_assoc($result)) {
      $kukarow_varasto[] = $tlv_row['tunnus'];
    }

    if (count($kukarow_varasto) > 0) {
      return $kukarow_varasto;
    }

    return array(0);
  }
}

if (!function_exists('valitse_oletusvarasto')) {
  function valitse_oletusvarasto($args) {
    global $kukarow, $yhtiorow;

    $varasto = (isset($args['varasto']) and is_numeric($args['varasto'])) ? (int) $args['varasto'] : null;

    $asiakas_tunnus     = isset($args['asiakas_tunnus']) ? (int) $args['asiakas_tunnus'] : 0;
    $toimipaikka_tunnus = isset($args['toimipaikka']) ? (int) $args['toimipaikka'] : 0;
    $toimitus_maa       = isset($args['toimitus_maa']) ? $args['toimitus_maa'] : '';

    if (isset($args['varastot']) and is_array($args['varastot'])) {
      $varastot = $args['varastot'];
    }
    else {
      $varastot = array();
    }

    // Jos ollaan valittu varasto k‰yttˆliittym‰st‰
    if (!is_null($varasto) and (in_array($varasto, $varastot) or $varasto === 0)) {
      return $varasto;
    }

    // Jos k‰ytt‰j‰ll‰ on tilaus kesken
    if ($kukarow['kesken'] != 0) {
      $query = "SELECT *
                FROM lasku
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$kukarow['kesken']}'";
      $laskures = pupe_query($query);
      $laskurow = mysql_fetch_assoc($laskures);

      // Meill‰ on varasto kannassa
      if ($laskurow["varasto"] != 0 and in_array($laskurow["varasto"], $varastot)) {
        return $laskurow["varasto"];
      }
    }

    // Jos varastolistassa on vain yksi
    if (count($varastot) == 1) {
      return $varastot[0];
    }

    // asiakkaan_avainsanat.tarkenne = oletusruksi
    if ($yhtiorow['myyntitilauksen_toimipaikka'] == 'A' and $asiakas_tunnus != 0) {
      $query = "SELECT asiakkaan_avainsanat.avainsana,
                asiakkaan_avainsanat.tarkenne
                FROM asiakkaan_avainsanat
                WHERE asiakkaan_avainsanat.yhtio       = '{$kukarow['yhtio']}'
                AND asiakkaan_avainsanat.laji          = 'oletusmyyntivarasto'
                AND asiakkaan_avainsanat.liitostunnus  = {$asiakas_tunnus}
                AND asiakkaan_avainsanat.tarkenne     != ''";
      $aov_result = pupe_query($query);

      if (mysql_num_rows($aov_result) > 0) {
        $aov_row = mysql_fetch_assoc($aov_result);

        if (in_array($aov_row['avainsana'], $varastot)) {
          return $aov_row['avainsana'];
        }
      }
    }

    // avainsana.selitetark_2 = oletusruksi
    if ($toimipaikka_tunnus != 0) {
      // Haetaan varastot joita toimipaikka saa k‰ytt‰‰
      $query = "SELECT varastopaikat.tunnus
                FROM avainsana
                JOIN varastopaikat
                ON (varastopaikat.yhtio = avainsana.yhtio
                  AND varastopaikat.tunnus           = avainsana.selitetark
                  AND (varastopaikat.sallitut_maat LIKE '%{$toimitus_maa}%'
                     OR varastopaikat.sallitut_maat  = '')
                  AND varastopaikat.tyyppi          != 'P')
                WHERE avainsana.yhtio                = '{$kukarow['yhtio']}'
                AND avainsana.laji                   = 'TOIMMYYNTI'
                AND avainsana.selite                 = {$toimipaikka_tunnus}
                AND avainsana.selitetark_2          != ''
                ORDER BY avainsana.jarjestys ASC";
      $result = pupe_query($query);

      if (mysql_num_rows($result) > 0) {
        $varastorow = mysql_fetch_assoc($result);

        if (in_array($varastorow['tunnus'], $varastot)) {
          return $varastorow['tunnus'];
        }
      }
    }

    // jos "Esivalitaan myyntitilaukselle k‰ytt‰j‰n oletusvarasto"
    if ($yhtiorow['oletusvarasto_tilaukselle'] == 'O' and in_array($kukarow['oletus_varasto'], $varastot)) {
      return $kukarow['oletus_varasto'];
    }

    // Jos k‰ytt‰j‰tiedoissa on sallittu varastoja
    if ($kukarow['varasto'] != "" and strpos($kukarow['varasto'], ',') !== false) {
      $kayttajan_varastot = explode(',', $kukarow['varasto']);
    }
    else {
      $kayttajan_varastot = array($kukarow['varasto']);
    }

    // Jos on vain yksi, se on oletus
    if (count($kayttajan_varastot) == 1 and in_array($kayttajan_varastot, $varastot)) {
      return $kayttajan_varastot[0];
    }

    return 0;
  }
}

if (!function_exists('palauta_varasto')) {
  function palauta_varasto($args) {
    global $kukarow, $yhtiorow;

    $asiakas_tunnus = isset($args['asiakas_tunnus']) ? (int) $args['asiakas_tunnus'] : 0;
    $toimipaikka = isset($args['toimipaikka_tunnus']) ? (int) $args['toimipaikka_tunnus'] : 0;
    $toim = isset($args['toim']) ? $args['toim'] : '';
    $tilaustyyppi = isset($args['tilaustyyppi']) ? $args['tilaustyyppi'] : '';
    $varasto = isset($args['varasto']) ? $args['varasto'] : '';
    $toimitus_maa = isset($args['toimitus_maa']) ? $args['toimitus_maa'] : '';

    $args = array(
      'asiakas_tunnus' => $asiakas_tunnus,
      'toimipaikka_tunnus' => $toimipaikka,
      'toim' => $toim,
      'tilaustyyppi' => $tilaustyyppi,
      'toimitus_maa' => $toimitus_maa,
    );

    $varastot = sallitut_varastot($args);

    $args = array(
      'varasto' => $varasto,
      'varastot' => $varastot,
      'asiakas_tunnus' => $asiakas_tunnus,
      'toimitus_maa' => $toimitus_maa,
      'toimipaikka' => $toimipaikka,
    );

    $varasto = valitse_oletusvarasto($args);

    return array($varasto, $varastot);
  }
}

if (!function_exists('hae_varaston_toimipaikka')) {
  function hae_varaston_toimipaikka($varasto_tunnus) {
    global $kukarow, $yhtiorow;

    if (empty($varasto_tunnus)) {
      return false;
    }

    $varasto_tunnus = (int)$varasto_tunnus;

    $query = "SELECT *
              FROM varastopaikat AS v
              WHERE v.yhtio = '{$kukarow['yhtio']}'
              AND v.tunnus  = {$varasto_tunnus}";
    $result = pupe_query($query);

    $varasto = mysql_fetch_assoc($result);

    if (empty($varasto)) {
      return false;
    }

    if ($varasto['toimipaikka'] == 0) {
      //Pit‰isi palauttaa p‰‰kallopaikka eli oletustoimipaikka
      return array('tunnus' => 0);
    }

    $query = "SELECT yt.*
              FROM yhtion_toimipaikat AS yt
              WHERE yt.yhtio = '{$kukarow['yhtio']}'
              AND yt.tunnus  = {$varasto['toimipaikka']}";

    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists('tilausrivien_varastot')) {
  function tilausrivien_varastot($lasku_tunnus) {
    global $kukarow, $yhtiorow;

    if (empty($lasku_tunnus)) {
      return array();
    }

    // Haetaan kaikkien tilausrivien varastopaikat
    $query = "SELECT DISTINCT tilausrivi.hyllyalue, tilausrivi.hyllynro
              FROM tilausrivi
              WHERE tilausrivi.yhtio    = '{$kukarow['yhtio']}'
              AND tilausrivi.otunnus    = '{$lasku_tunnus}'
              AND tilausrivi.tyyppi    != 'D'
              AND tilausrivi.hyllyalue != ''
              AND tilausrivi.varattu    > 0
              AND tilausrivi.var        not in ('P','J','O','S')";
    $chk_res = pupe_query($query);

    $tilausrivit = array();

    while ($tilausrivi = mysql_fetch_assoc($chk_res)) {
      // Mihin varastoon
      $varasto = kuuluukovarastoon($tilausrivi["hyllyalue"], $tilausrivi["hyllynro"]);

      $tilausrivit[$varasto] = $varasto;
    }

    return $tilausrivit;
  }
}

if (!function_exists('tilauksen_toimipaikka')) {
  function tilauksen_toimipaikka(array $args) {
    global $kukarow, $yhtiorow;

    // Jos t‰‰ll‰ k‰ytet‰‰n yhtiˆn parametreja,
    // niin ne parametrit eiv‰t voi olla toimipaikkakohtaisia.

    $asiakasid = isset($args['asiakasid']) ? (int) $args['asiakasid'] : 0;
    $maa = isset($args['maa']) ? trim($args['maa']) : '';

    $_onko_toimipaikkaa = (isset($args['toimipaikka']) and trim($args['toimipaikka']) != '');
    $toimipaikka = $_onko_toimipaikkaa ? (int) $args['toimipaikka'] : null;

    if ($maa != "") {
      // tutkitaan ollaanko siell‰ alv-rekisterˆity
      $query = "SELECT tunnus
                FROM yhtion_toimipaikat
                WHERE yhtio     = '{$kukarow['yhtio']}'
                AND maa         = '{$maa}'
                AND vat_numero != ''";
      $yhtion_toimipaikat_res = pupe_query($query);

      if (mysql_num_rows($yhtion_toimipaikat_res) == 1) {
        $yhtion_toimipaikat_row = mysql_fetch_assoc($yhtion_toimipaikat_res);

        return $yhtion_toimipaikat_row['tunnus'];
      }
    }

    if (!is_null($toimipaikka)) {
      return $toimipaikka;
    }

    if ($kukarow['kesken'] != 0) {
      $query = "SELECT *
                FROM lasku
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$kukarow['kesken']}'";
      $laskures = pupe_query($query);
      $laskurow = mysql_fetch_assoc($laskures);

      return $laskurow['yhtio_toimipaikka'];
    }

    if ($yhtiorow['myyntitilauksen_toimipaikka'] == 'A' and $asiakasid != 0) {
      $asiakasrow = hae_asiakas($asiakasid);

      if ($asiakasrow['toimipaikka'] != 0) {
        return $asiakasrow['toimipaikka'];
      }
    }

    if ($kukarow['toimipaikka'] != 0) {
      return $kukarow['toimipaikka'];
    }

    return 0;
  }
}

if (!function_exists('eilahetetta')) {
  function eilahetetta(array $args) {
    global $kukarow, $yhtiorow, $toim;

    $srow = isset($args['srow']) ? $args['srow'] : array();
    $toimtapa_apuro = isset($args['toimtapa_apuro']) ? $args['toimtapa_apuro'] : array();
    $poikkeava_yhtiorow = isset($args['poikkeava_yhtiorow']) ? $args['poikkeava_yhtiorow'] : array();

    $_yhtiorow = $yhtiorow;
    if (!empty($poikkeava_yhtiorow)) {
      $_yhtiorow = $poikkeava_yhtiorow;
    }

    if (!empty($srow)) {
      $_eilahetetta_valmistus = (
        !isset($srow['eilahetetta'])
        and $_yhtiorow["kerataanko_valmistukset"] == "E"
        and $toim == "VALMISTAASIAKKAALLE"
      );
      $_eilahetetta_tulostustapa = (
        !isset($srow['eilahetetta'])
        and $_yhtiorow['lahetteen_tulostustapa'] == 'I'
      );
      $_eilahetetta_nouto = (
        !isset($srow['eilahetetta'])
        and in_array($toim, array("RIVISYOTTO", "PIKATILAUS"))
        and $toimtapa_apuro['nouto'] != ''
        and $_yhtiorow['nouto_suoraan_laskutukseen'] == 'K'
      );

      if ($srow['eilahetetta'] != ''
        or $_eilahetetta_valmistus
        or $_eilahetetta_tulostustapa
        or $_eilahetetta_nouto) {
        return true;
      }
    }
    else {
      $_eilahetetta_valmistus = (
        $_yhtiorow["kerataanko_valmistukset"] == "E"
        and $toim == "VALMISTAASIAKKAALLE"
      );
      $_eilahetetta_tulostustapa = (
        $_yhtiorow['lahetteen_tulostustapa'] == 'I'
      );
      $_eilahetetta_nouto = (
        in_array($toim, array("RIVISYOTTO", "PIKATILAUS"))
        and $toimtapa_apuro['nouto'] != ''
        and $_yhtiorow['nouto_suoraan_laskutukseen'] == 'K'
      );

      if ($srow['eilahetetta'] != ''
        or $_eilahetetta_valmistus
        or $_eilahetetta_tulostustapa
        or $_eilahetetta_nouto) {
        return true;
      }
    }

    return false;
  }
}

if (!function_exists('osatoimitus')) {
  function osatoimitus(array $args) {
    global $kukarow, $yhtiorow, $toim;

    $srow = isset($args['srow']) ? $args['srow'] : array();
    $oletus = isset($args['oletus']) ? $args['oletus'] : array();
    $poikkeava_yhtiorow = isset($args['poikkeava_yhtiorow']) ? $args['poikkeava_yhtiorow'] : array();
    $huomioidaanko_kukarow_kesen = isset($args['huomioidaanko_kukarow_kesen']) ? $args['huomioidaanko_kukarow_kesen'] : false;

    $_yhtiorow = $yhtiorow;
    if (!empty($poikkeava_yhtiorow)) {
      $_yhtiorow = $poikkeava_yhtiorow;
    }

    // Tarjouksia ei oletuksena osatoimiteta
    $_osatoimitus_oletus = (
      (in_array($toim, array("TARJOUS", "EXTTARJOUS", "PROJEKTI")) or $oletus["osatoimitus"] != "")
      and $kukarow["kesken"] == 0
    );

    if ($huomioidaanko_kukarow_kesen) {
      $_osatoimitus_myyntitilaus = (
        $_yhtiorow['myyntitilaus_osatoimitus'] == 'E'
        and $kukarow["kesken"] == 0
        and in_array($toim, array("RIVISYOTTO", "PIKATILAUS", "TYOMAARAYS", "TYOMAARAYS_ASENTAJA"))
      );
    }
    else {
      $_osatoimitus_myyntitilaus = (
        $_yhtiorow['myyntitilaus_osatoimitus'] == 'E'
        and in_array($toim, array("RIVISYOTTO", "PIKATILAUS", "TYOMAARAYS", "TYOMAARAYS_ASENTAJA"))
      );
    }

    if (!empty($srow)) {
      if ($srow['osatoimitus'] != '' or $_osatoimitus_oletus or $_osatoimitus_myyntitilaus) {
        return true;
      }
    }
    else {
      if ($_osatoimitus_oletus or $_osatoimitus_myyntitilaus) {
        return true;
      }
    }

    return false;
  }
}

if (!function_exists('paivita_siirtolistan_toimipaikka')) {
  function paivita_siirtolistan_toimipaikka($tunnus) {
    global $kukarow, $yhtiorow;

    $tunnus = (int) $tunnus;

    if ($tunnus == 0) {
      return false;
    }

    $query = "SELECT tila, clearing
              FROM lasku
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$tunnus}'";
    $laskres = pupe_query($query);
    $laskrow = mysql_fetch_assoc($laskres);

    // Siirtolistan clearing-kent‰ss‰ on kohdevarasto
    if ($laskrow['tila'] == 'G' and $laskrow['clearing'] != '' and is_numeric($laskrow['clearing'])) {

      $query = "SELECT toimipaikka
                FROM varastopaikat
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$laskrow['clearing']}'";
      $var_tp_res = pupe_query($query);

      if (mysql_num_rows($var_tp_res) != 0) {

        $var_tp_row = mysql_fetch_assoc($var_tp_res);

        $query = "UPDATE lasku SET
                  yhtio_toimipaikka = '{$var_tp_row['toimipaikka']}'
                  WHERE yhtio       = '{$kukarow['yhtio']}'
                  AND tunnus        = '{$tunnus}'";
        $updres = pupe_query($query);
      }
    }
  }
}

if (!function_exists("tilausrivin_tarkistus_riveittain")) {
  function tilausrivin_tarkistus_riveittain($parametrit, $jarjestys = false) {
    global $kukarow, $yhtiorow;

    $ryhmitetty_array = array();
    $tuote_temp = FALSE;

    if ($yhtiorow['kulujen_laskeminen_hintoihin'] == 'K' and $kukarow['kulujen_laskeminen_hintoihin'] == 'K') {
      $tuote_temp = TRUE;
    }

    mysql_data_seek($parametrit['result'], 0);

    while ($row = mysql_fetch_assoc($parametrit['result'])) {

      $ryhmitys = '';

      foreach ($parametrit['group_by'] as $value) {
        if (isset($row[$value])) {
          $ryhmitys .= $row[$value];
        }
      }

      if (array_key_exists($ryhmitys, $ryhmitetty_array)) {
        foreach ($parametrit['sum'] as $k) {

          if (!isset($ryhmitetty_array[$ryhmitys][$k])) {
            $ryhmitetty_array[$ryhmitys][$k] = 0;
          }

          if (    isset($row[$k])
            and $tuote_temp) {

            if (in_array($k, $parametrit['laske_kate'])) {

              $b = str_replace('kate', 'myynti', $k);
              $hinta = $row[$b];

              $row[$k] = kate_kuluineen($row['tuoteno'], $hinta, $row[$k]);

            }

          }

          if (isset($row[$k])) {
            $ryhmitetty_array[$ryhmitys][$k] = $row[$k] + $ryhmitetty_array[$ryhmitys][$k];
          }

        }
      }
      else {
        foreach ($parametrit['sum'] as $k) {

          if (    isset($row[$k])
            and $tuote_temp) {

            if (in_array($k, $parametrit['laske_kate'])) {

              $b = str_replace('kate', 'myynti', $k);
              $hinta = $row[$b];

              $row[$k] = kate_kuluineen($row['tuoteno'], $hinta, $row[$k]);

            }

          }

          if (isset($row[$k])) {
            $ryhmitetty_array[$ryhmitys][$k] =  $row[$k];
          }

        }
      }

      foreach ($parametrit['select'] as $k) {
        if (isset($row[$k])) {
          $ryhmitetty_array[$ryhmitys][$k] = $row[$k];
        }
        else {
          $ryhmitetty_array[$ryhmitys][$k] = '';
        }
      }

      if ($jarjestys) {
        $apu1 = array();
        $apu2 = array();
        $apu3 = array();
        $order = $parametrit['group_by'];

        foreach ($order as $value) {
          $apu3[$value] = $value;
        }

        $order = $apu3;

        foreach ($ryhmitetty_array[$ryhmitys] as $key => $value) {
          if (array_key_exists($key, $order)) {
            $apu1[$order[$key]] = $ryhmitetty_array[$ryhmitys][$key];
          }
          else {
            $apu2[$key] = $ryhmitetty_array[$ryhmitys][$key];
          }
        }
        $ryhmitetty_array[$ryhmitys] = array_merge($apu1, $apu2);
      }
    }

    $ryhmitetty_array = array_values($ryhmitetty_array);

    $sorttaajat = $parametrit['order_by'];

    function sorttaajat($a, $b) {
      foreach ($sorttaajat as $sorttaaja) {
        if ($a[$sorttaaja] > $b[$sorttaaja]) return 1;
        if ($a[$sorttaaja] < $b[$sorttaaja]) return -1;
      }
      return 0;
    }

    usort($ryhmitetty_array, "sorttaajat");

    return $ryhmitetty_array;
  }
}

if (!function_exists("hinnan_kuluprosentti")) {
  function hinnan_kuluprosentti($tuotenumero) {
    global $kukarow, $yhtiorow;

    if (empty($yhtiorow['kulujen_laskeminen_hintoihin']) or empty($kukarow['kulujen_laskeminen_hintoihin'])) {
      return false;
    }

    $query = "SELECT toimi.kulujen_laskeminen_hintoihin
              FROM tuotteen_toimittajat
              JOIN toimi ON ( toimi.yhtio = tuotteen_toimittajat.yhtio
              AND toimi.tunnus                 = tuotteen_toimittajat.liitostunnus )
              WHERE tuotteen_toimittajat.yhtio =  '{$kukarow['yhtio']}'
              AND tuotteen_toimittajat.tuoteno = '{$tuotenumero}'
              ORDER BY
              if(tuotteen_toimittajat.jarjestys = 0, 9999, tuotteen_toimittajat.jarjestys) ASC,
              tuotteen_toimittajat.tunnus ASC
              LIMIT 1";
    $result = pupe_query($query);
    $row = mysql_fetch_assoc($result);

    if (empty($row['kulujen_laskeminen_hintoihin'])) {
      return false;
    }

    return $yhtiorow['kuluprosentti'];
  }
}

if (!function_exists("hinta_kuluineen")) {
  function hinta_kuluineen($tuotenumero, $hinta) {
    global $kukarow, $yhtiorow;

    $kuluprosentti = hinnan_kuluprosentti($tuotenumero);

    if ($kuluprosentti === false) {
      return $hinta;
    }

    $tulos = $hinta / ((100 - $kuluprosentti) / 100);

    return $tulos;
  }
}

if (!function_exists("kate_kuluineen")) {
  function kate_kuluineen($tuoteno, $hinta, $kate) {
    global $kukarow, $yhtiorow;

    $ostohinta = $hinta - $kate;
    $uusi_ostohinta = hinta_kuluineen($tuoteno, $ostohinta);
    $uusi_kate = $hinta - $uusi_ostohinta;

    return $uusi_kate;
  }
}

// Etsii tuotteelle varastoonvientip‰iv‰n avoimelta tilikaudelta edelt‰m‰‰n hetke‰
// jolloin tuotteen saldo on mennyt miinukselle, muuten palauttaa nykyhetken
if (!function_exists("etsi_tuotteelle_korjaava_varastoonvientipaiva")) {
  function etsi_tuotteelle_korjaava_varastoonvientipaiva($tuotenumero) {
    global $kukarow, $yhtiorow;

    $siirtopaivamaara = date("Y-m-d H:i:s");

    // haetaan saldo kaikilta tuotepaikoilta
    $query = "SELECT tuote.tuoteno, tuote.kehahin, sum(tuotepaikat.saldo) saldo
              FROM tuotepaikat
              JOIN tuote USING (yhtio,tuoteno)
              WHERE tuotepaikat.yhtio = '$kukarow[yhtio]'
              and tuote.tuoteno       = '$tuotenumero'
              GROUP BY 1,2
              ORDER BY 1";
    $result = pupe_query($query);

    while ($trow = mysql_fetch_assoc($result)) {

      $saldo_nyt   = $saldo_nyt_alkup = $trow["saldo"];

      $query = "SELECT tunnus, tuoteno, kpl, kplhinta, hinta, laji, if (laji in ('tulo','valmistus'), kplhinta, hinta)*kpl arvo, laadittu
                FROM tapahtuma
                WHERE yhtio  = '$kukarow[yhtio]'
                and tuoteno  = '$trow[tuoteno]'
                and laadittu >= '{$yhtiorow['tilikausi_alku']}'
                ORDER BY laadittu desc";
      $tresult = pupe_query($query);

      $rivit       = array();
      $varastoonvienti_siirto = array();
      $lask        = 0;

      while ($tarow = mysql_fetch_assoc($tresult)) {

        $rivit[$lask] = $tarow;

        // Ep‰kuranteissa saldo ei muutu
        if ($tarow["laji"] != "Ep‰kurantti") {
          $saldo_nyt -= $tarow["kpl"];
        }

        if ($saldo_nyt < 0 and $tarow["laadittu"] < $yhtiorow['tilikausi_loppu']) {
          // Varastoonvientip‰iv‰ pit‰‰ siirt‰‰
          $varastoonvienti_siirto[] = array($tarow["tunnus"], ($saldo_nyt+$tarow["kpl"]), $lask, $tarow["laadittu"]);
        }

        $lask++;
      }

      if (count($varastoonvienti_siirto) > 0) {
        krsort($varastoonvienti_siirto);

        foreach ($varastoonvienti_siirto as $tulo) {

          $saldo_nyt  = $tulo[1];
          $ind    = $tulo[2];

          ksort($rivit);

          foreach ($rivit as $lask => $tarow) {

            // Loopataan haluttuun kohtaan
            if ($lask < $ind) {
              continue;
            }

            // Ep‰kuranteissa saldo ei muutu
            if ($tarow["laji"] != "Ep‰kurantti") {
              $saldo_nyt -= $tarow["kpl"];
            }

            // Varastoonvienti pit‰‰ siirt‰‰ t‰h‰n
            if ($saldo_nyt >= 0) {
              $siirtopaivamaara = $tarow['laadittu'] < $siirtopaivamaara ? date("Y-m-d H:i:s", strtotime($tarow['laadittu']." - 1 second ")) : $siirtopaivamaara;
              array_splice($rivit, $lask+1, 0, array(0 => $rivit[$ind]));
              unset($rivit[$ind]);
              break;
            }
          }
        }
      }
    }

    return $siirtopaivamaara;
  }
}

if (!function_exists("tallenna_tiliote_viite")) {
  function tallenna_tiliote_viite($filenimi, $forceta = false) {
    global $kukarow, $yhtiorow;

    $php_cli = (php_sapi_name() == 'cli');

    // Otetaan talteen, koska t‰‰ll‰ muutellaan
    $kukarow_talteen = $kukarow;

    // Muutetaan oikeaan merkistˆˆn
    $encoding = exec("file -b --mime-encoding '$filenimi'");

    if (!PUPE_UNICODE and $encoding != "" and mb_strtoupper($encoding) != 'ISO-8859-15') {
      exec("recode -f $encoding..ISO-8859-15 '$filenimi'");
    }
    elseif (PUPE_UNICODE and $encoding != "" and mb_strtoupper($encoding) != 'UTF-8') {
      exec("recode -f $encoding..UTF8 '$filenimi'");
    }

    // Otetaan koko aineisto muuttujaan jotta voidaan vertailla onko t‰m‰ jo koneella
    // koska joskus voi tulla esim kaksi LMP aineistoa samalle p‰iv‰lle mutta eri sis‰llˆll‰
    $kokoaineisto = file_get_contents($filenimi);

    $fd = fopen($filenimi, "r");

    if ($fd === false) {
      echo "<font class='message'>Tiedosto '$filenimi' ei auennut!</font>";
      return false;
    }

    $tietue = fgets($fd);

    // T‰m‰ oli tiliote tai viiteaineisto
    $query = "LOCK TABLE tiliotedata WRITE, yriti READ, yhtio READ, sanakirja WRITE";
    $tiliotedataresult = pupe_query($query);

    // Etsit‰‰n aineistonumero
    $query = "SELECT ifnull(max(aineisto), 0) + 1 AS aineisto
              FROM tiliotedata";
    $aineistores = pupe_query($query);
    $aineistorow = mysql_fetch_assoc($aineistores);

    $xlmpmaa = 0;
    $xtyyppi = 0;
    $virhe = 0;
    $td_perheid = 0;
    $insert_count = 0;
    $onko_ppg = FALSE;
    $serc = array("{", "|", "}", "[", "\\", "]", "'");
    $repl = array("‰", "ˆ", "Â", "ƒ", "÷" , "≈", " ");

    while (!feof($fd)) {

      if (!PUPE_UNICODE and mb_detect_encoding($tietue, 'UTF-8', true) !== FALSE) {
        $tietue = utf8_decode($tietue);
      }

      $tietue      = str_replace($serc, $repl, $tietue);
      $tietue_type = substr($tietue, 0, 3);
      $tietue_eka  = substr($tietue, 0, 1);

      if ($tietue_type == 'T00' or $tietue_type == 'T03' or $tietue_eka == '0') {

        // Konekielinen tiliote
        if ($tietue_type == 'T00') {
          $xtyyppi = 1;
          $alkupvm = dateconv(substr($tietue, 26, 6));
          $loppupvm = dateconv(substr($tietue, 32, 6));
          $tilino = substr($tietue, 9, 14);
        }

        // Laskujen maksupalvelu LMP
        if ($tietue_type == 'T03') {
          $xtyyppi = 2;
          $alkupvm = substr($tietue, 38, 6);
          $loppupvm = $alkupvm;
          $tilino = substr($tietue, 9, 14);

          // LMP aineistojen m‰‰r‰ tiedostossa
          $xlmpmaa++;
        }

        // Saapuvat viitemaksut
        if ($tietue_eka == '0') {
          $xtyyppi = 3;
          $alkupvm = "20".dateconv(substr($tietue, 1, 6));
          $loppupvm = $alkupvm;

          // Luetaan tilinumero seuraavalta rivilt‰ ja siirret‰‰n pointteri takaisin nykypaikkaan
          $pointterin_paikka = ftell($fd);
          $tilino = fgets($fd);

          // Tunnistetaan Danske Bank VIPN-factoringaineisto, koska tiedostossa ei tule tilinumeroa
          $onko_vipn = (substr($tilino, 0, 1) == 'S') ? 1 : 0;
          $tilino = substr($tilino, 1, 14);
          fseek($fd, $pointterin_paikka);

          $ppg_uusitilino = trim(substr($tietue, 16, 6));

          if ($onko_vipn) {
            $query = "SELECT tilino
                      FROM yriti
                      WHERE bic      = 'DABAFIHH'
                      AND factoring != ''
                      LIMIT 1";
            $f_result = pupe_query($query);

            // jos t‰m‰ ep‰onnistuu, virheilmoitus tulee alempana kun tilinumeroa ei lˆydy
            if (mysql_num_rows($f_result) == 1) {
              $f_row = mysql_fetch_assoc($f_result);
              $tilino = $f_row['tilino'];
            }
          }
          elseif (!empty($ppg_uusitilino)) {
            // Kokeillaan onko kyse PPG:n factoring-aineistosta
            $query = "SELECT tilino
                      FROM yriti
                      WHERE tilino = '$ppg_uusitilino'
                      AND kaytossa = ''
                      LIMIT 1";
            $fp_result = pupe_query($query);

            // jos t‰m‰ ep‰onnistuu, virheilmoitus tulee alempana kun tilinumeroa ei lˆydy
            if (mysql_num_rows($fp_result) == 1) {
              $fp_row = mysql_fetch_assoc($fp_result);
              $tilino = $fp_row['tilino'];
              $onko_ppg = TRUE;
            }
          }
        }

        $query = "SELECT *
                  FROM yriti
                  WHERE tilino = '$tilino'
                  and kaytossa = ''";
        $yritiresult = pupe_query($query);

        if (mysql_num_rows($yritiresult) != 1) {
          // Kokeillaan 14 vikalla merkill‰ (Virossa esim on 18 merkkisi‰ tilinumeroita)
          $query = "SELECT *
                    FROM yriti
                    WHERE right(tilino, 14) = '$tilino'
                    and kaytossa = ''";
          $yritiresult = pupe_query($query);
        }

        if (mysql_num_rows($yritiresult) != 1) {
          echo "<font class='error'>".t("Tili‰ %s ei lˆytynyt", "", $tilino)."!</font>";
          echo "<br>";
          $xtyyppi = 0;
          $virhe++;

          // Setataan yritirow-yhtiˆ
          $yritirow["yhtio"] = $kukarow['yhtio'];
          $yritirow['oletus_rahatili'] = "";
          $yritirow['oletus_kulutili'] = "";
        }
        else {
          $yritirow = mysql_fetch_assoc($yritiresult);

          // Korjataan viel‰ t‰m‰ jos ne jostain syyst‰ on eri
          $tilino = $yritirow['tilino'];

          // Setataan kukarow-yhtiˆ
          $kukarow["yhtio"] = $yritirow["yhtio"];
        }

        // Tarkistetaan tilit
        if (strlen($yritirow['oletus_rahatili']) == 0 or strlen($yritirow['oletus_kulutili']) == 0) {
          echo "<font class='error'>".t("Tililt‰ puuttuu kulu tai rahatili")."</font>";
          echo "<br>";
          $xtyyppi=0;
          $virhe++;
        }

        $query = "SELECT myyntireskontrakausi_alku,
                  myyntireskontrakausi_loppu,
                  ostoreskontrakausi_alku,
                  ostoreskontrakausi_loppu,
                  tilikausi_alku,
                  tilikausi_loppu
                  FROM yhtio
                  WHERE yhtio = '{$yritirow['yhtio']}'";
        $yhtio_tsekres = pupe_query($query);
        $yhtio_tsekrow = mysql_fetch_assoc($yhtio_tsekres);

        //vertaillaan tilikauteen
        list($vv1, $kk1, $pp1) = explode("-", $yhtio_tsekrow["myyntireskontrakausi_alku"]);
        list($vv2, $kk2, $pp2) = explode("-", $yhtio_tsekrow["myyntireskontrakausi_loppu"]);

        $myrealku  = (int) date('Ymd', mktime(0, 0, 0, (int) $kk1, (int) $pp1, (int) $vv1));
        $myreloppu = (int) date('Ymd', mktime(0, 0, 0, (int) $kk2, (int) $pp2, (int) $vv2));

        list($vv1, $kk1, $pp1) = explode("-", $yhtio_tsekrow["ostoreskontrakausi_alku"]);
        list($vv2, $kk2, $pp2) = explode("-", $yhtio_tsekrow["ostoreskontrakausi_loppu"]);

        $oresalku  = (int) date('Ymd', mktime(0, 0, 0, (int) $kk1, (int) $pp1, (int) $vv1));
        $oresloppu = (int) date('Ymd', mktime(0, 0, 0, (int) $kk2, (int) $pp2, (int) $vv2));

        list($vv1, $kk1, $pp1) = explode("-", $yhtio_tsekrow["tilikausi_alku"]);
        list($vv2, $kk2, $pp2) = explode("-", $yhtio_tsekrow["tilikausi_loppu"]);

        $tikaalku  = (int) date('Ymd', mktime(0, 0, 0, (int) $kk1, (int) $pp1, (int) $vv1));
        $tikaloppu = (int) date('Ymd', mktime(0, 0, 0, (int) $kk2, (int) $pp2, (int) $vv2));

        // Onko t‰m‰ aineisto jo ajettu?
        $query = "SELECT *
                  FROM tiliotedata
                  WHERE tilino = '$tilino'
                  AND alku     = '$alkupvm'
                  AND loppu    = '$loppupvm'
                  AND tyyppi   = '$xtyyppi'";
        $tiliotedatares = pupe_query($query);

        if (mysql_num_rows($tiliotedatares) > 0) {
          $tiliotedatarow = mysql_fetch_assoc($tiliotedatares);

          // OP-pankki toimittaa useita LMP aineistoja per p‰iv‰,
          // eli tarkistetaan onko juuri t‰m‰ aineisto ajettu koneelle
          // Koodataan t‰ss‰ vaiheessa vain LMP:lle, mutta mik‰‰n ei est‰ etteikˆ saman tsekin vois
          // tehd‰ myˆs vaikka tiliotteille jos joku pankki toimittaisi yhden p‰iv‰n otteet useassa osassa.
          //
          // Sama tsekki toteutettu nyt myˆs viiteaineistolle, sill‰ Nordealta tulee silloin t‰llˆin n‰it‰
          // useassa osassa
          if (in_array($xtyyppi, array(2, 3))) {
            // Group concatissa tulee kaikki t‰n p‰iv‰n tiliotedata
            $query = "SELECT group_concat(tieto SEPARATOR '') AS kanta_aineisto
                      FROM tiliotedata
                      WHERE tilino = '$tilino'
                      AND alku     = '$alkupvm'
                      AND loppu    = '$loppupvm'
                      AND tyyppi   = '$xtyyppi'";
            $tiliotedatares = pupe_query($query);
            $tiliotedatarow = mysql_fetch_assoc($tiliotedatares);

            switch ($xtyyppi) {
            // LMP
            case 2:
              // Otetaan kaikki failissa olevat LMP:t arrayseen. (Nollaindeksiss‰ tyhj‰‰...)
              $distinct_aineistot = explode("T03", str_replace($serc, $repl, $kokoaineisto));
              $_to_aineitso = trim($tiliotedatarow["kanta_aineisto"]);

              if ($_to_aineitso != "") {
                for ($xlmpmaa_i = $xlmpmaa; $xlmpmaa_i < count($distinct_aineistot); $xlmpmaa_i++) {

                  $_aineisto = trim($distinct_aineistot[$xlmpmaa_i]);

                  if ($_aineisto != "" and strpos($_to_aineitso, $_aineisto) !== false) {
                    echo "<font class='error'>";
                    echo "VIRHE: T‰m‰ aineisto on jo aiemmin k‰sitelty!";
                    echo "<br>";
                    echo "Tili: $tilino<br>";
                    echo "Ajalta: $alkupvm - $loppupvm<br>";
                    echo "Yritys: $yritirow[yhtio]";
                    echo "</font>";
                    echo "<br>";

                    $xtyyppi=0;
                    $virhe++;
                  }
                }
              }

              // Tutkitaan, ettei sama aineisto ole montaa kertaa t‰ss‰ failissa
              if (count($distinct_aineistot) != count(array_unique($distinct_aineistot))) {
                echo "<font class='error'>";
                echo "VIRHE: Aineisto esiintyy tiedostossa moneen kertaan.<br>";
                echo "Tiedosto viallinen, ei voida jatkaa, ota yhteytt‰ helpdeskiin!<br>";
                echo "Tili: $tilino / Pvm: $alkupvm / Yhtiˆ: $yritirow[yhtio]";
                echo "</font>";
                echo "<br>";

                $xtyyppi=0;
                $virhe++;
              }
              break;
            // Viiteaineisto
            case 3:
              $_aineisto      = trim(str_replace($serc, $repl, $kokoaineisto));
              $kanta_aineisto = trim($tiliotedatarow["kanta_aineisto"]);

              if ($kanta_aineisto != "" && $_aineisto != "" && strpos($kanta_aineisto, $_aineisto) !== false) {
                echo "<font class='error'>";
                echo "VIRHE: T‰m‰ aineisto on jo aiemmin k‰sitelty!";
                echo "<br>";
                echo "Tili: $tilino<br>";
                echo "Ajalta: $alkupvm - $loppupvm<br>";
                echo "Yritys: $yritirow[yhtio]";
                echo "</font>";
                echo "<br>";

                $xtyyppi = 0;
                $virhe++;
              }
              break;
            }
          }
          else {
            if ($tiliotedatarow["aineisto"] == $aineistorow["aineisto"]) {
              echo "<font class='error'>";
              echo "VIRHE: Aineisto esiintyy tiedostossa moneen kertaan.<br>";
              echo "Tiedosto viallinen, ei voida jatkaa, ota yhteytt‰ helpdeskiin!<br>";
              echo "Tili: $tilino / Pvm: $alkupvm / Yhtiˆ: $yritirow[yhtio]";
              echo "</font>";
              echo "<br>";

              $xtyyppi=0;
              $virhe++;
            }
            elseif (!$forceta) {
              echo "<font class='error'>";
              echo "VIRHE: T‰m‰ aineisto on jo aiemmin k‰sitelty!<br>";
              echo "Tili: $tilino / Pvm: $alkupvm / Yhtiˆ: $yritirow[yhtio]";
              echo "</font>";
              echo "<br>";

              $_pankkiyhteys = (strpos($_SERVER['SCRIPT_NAME'], "pankkiyhteys.php") !== false);

              if (!$php_cli and !$_pankkiyhteys) {
                list($usec, $sec) = explode(' ', microtime());
                mt_srand((float) $sec + ((float) $usec * 100000));
                $tmpfile = md5(uniqid(mt_rand(), true)).".txt";

                file_put_contents("/tmp/".$tmpfile, $kokoaineisto);
                $_sub = t("K‰sittele aineisto vaikka kyseisen p‰iv‰n/tilin aineisto on jo k‰sitelty");

                echo "<form method='post' onSubmit='return verify();'>";
                echo "<input type='hidden' name='virhe_file' value='$tmpfile'>";
                echo "<input type='submit' value='{$_sub}'>";
                echo "</form>";
                echo "<br>";
              }

              $xtyyppi=0;
              $virhe++;
            }
          }
        }
      }

      // Tsekataan tiliotteen duplikaatit ja tsekataan ettei kirjata suljetuille kausille
      if ($xtyyppi == 1 and $tietue_type == "T10") {

        // VVKKPP
        $tsekpvm = (int) "20".substr($tietue, 30, 6);

        // P‰iv‰m‰‰r‰ pit‰‰ olla kaikkien kausien sis‰ll‰
        $_tarkistus  = ($tsekpvm < $oresalku);
        $_tarkistus &= ($tsekpvm > $oresloppu);
        $_tarkistus &= ($tsekpvm < $myrealku);
        $_tarkistus &= ($tsekpvm > $myreloppu);
        $_tarkistus &= ($tsekpvm < $tikaalku);
        $_tarkistus &= ($tsekpvm > $tikaloppu);

        if ($_tarkistus) {
          echo "<font class='error'>";
          echo "VIRHE: Aineistossa on tapahtuma suljetulle kaudelle!<br>";
          echo "Tili: $tilino / Pvm: $tsekpvm / Yhtiˆ: $yritirow[yhtio]";
          echo "</font>";
          echo "<br>";

          $xtyyppi=0;
          $virhe++;
        }

        $arkistotunnari = substr($tietue, 12, 18);
        $taso = substr($tietue, 187, 1);

        $_string = (!is_numeric($arkistotunnari) and trim($arkistotunnari) != "");
        $_number = (is_numeric($arkistotunnari) and (int) $arkistotunnari != 0);

        if ($taso == ' ' and ($_string or $_number)) {
          // Katsotaan lˆytyykˆ t‰ll‰ tunnuksella suoritus
          $query = "SELECT alku
                    FROM tiliotedata
                    WHERE yhtio = '$yritirow[yhtio]'
                    AND tilino  = '$tilino'
                    AND tyyppi  = '$xtyyppi'
                    AND tieto   = '$tietue'
                    AND substring(tieto, 13, 18) = '$arkistotunnari'";
          $vchkres = pupe_query($query);

          if (mysql_num_rows($vchkres) > 0) {
            $vchkrow = mysql_fetch_assoc($vchkres);

            echo "<font class='error'>";
            echo "VIRHE: Tiliotetapahtuma arkistointitunnuksella: ";
            echo "'$arkistotunnari' lˆytyy jo j‰rjestelm‰st‰!<br>";
            echo "Tili: $tilino / Pvm: $vchkrow[alku] / Yhtiˆ: $yritirow[yhtio]";
            echo "</font>";
            echo "<br>";

            $xtyyppi=0;
            $virhe++;
          }
        }
      }

      // Tsekataan LMP-aineiston duplikaatit ja tsekataan ettei kirjata suljetuille kausille
      if ($xtyyppi == 2 and $tietue_type == "T10") {
        // VVKKPP
        $taso = substr($tietue, 187, 1);
        $tsekpvm = substr($tietue, 42, 6);

        if ($taso == '0') $turvapvm = $tsekpvm; // Osuuspankki ei l‰het‰ p‰iv‰yst‰ kuin t‰‰ll‰
        if ($pvm == '000000') $tsekpvm = $turvapvm;

        if ($tsekpvm < $oresalku or $tsekpvm > $oresloppu) {
          echo "<font class='error'>";
          echo "VIRHE: Aineistossa on tapahtuma suljetulle kaudelle!<br>";
          echo "Tili: $tilino / Pvm: $tsekpvm / Yhtiˆ: $yritirow[yhtio]";
          echo "</font>";
          echo "<br>";

          $xtyyppi=0;
          $virhe++;
        }
      }

      // Tsekataan, ettei mene duplikaattiviitesuortiuksia ja tsekataan ettei kirjata suljetuille kausille
      if ($xtyyppi == 3 and ($tietue_eka == "3" or $tietue_eka == "S" )) {

        // VVKKPP
        $tsekpvm = (int) "20".substr($tietue, 15, 6);

        if ($tsekpvm < $myrealku or $tsekpvm > $myreloppu) {
          echo "<font class='error'>";
          echo "VIRHE: Aineistossa on viitesuoritus suljetulle kaudelle!<br>";
          echo "Tili: $tilino / Pvm: $tsekpvm / Yhtiˆ: $yritirow[yhtio]";
          echo "</font>";
          echo "<br>";

          $xtyyppi=0;
          $virhe++;
        }

        $arkistotunnari = substr($tietue, 27, 16);

        $_string = (!is_numeric($arkistotunnari) and trim($arkistotunnari) != "");
        $_number = (is_numeric($arkistotunnari) and (int) $arkistotunnari != 0);

        if ($_string or $_number) {
          // Katsotaan lˆytyykˆ t‰ll‰ tunnuksella suoritus
          $query = "SELECT alku
                    FROM tiliotedata
                    WHERE yhtio = '$yritirow[yhtio]'
                    and tilino  = '$tilino'
                    and tyyppi  = '$xtyyppi'
                    and tieto   = '$tietue'
                    and substring(tieto, 28, 16) = '$arkistotunnari'";
          $vchkres = pupe_query($query);

          if (mysql_num_rows($vchkres) > 0) {
            $vchkrow = mysql_fetch_assoc($vchkres);

            echo "<font class='error'>";
            echo "VIRHE: Viitesuoritus arkistointitunnuksella: ";
            echo "'$arkistotunnari' lˆytyy jo j‰rjestelm‰st‰!<br>";
            echo "Tili: $tilino / Pvm: $vchkrow[alku] / Yhtiˆ: $yritirow[yhtio]";
            echo "</font>";
            echo "<br>";

            $xtyyppi=0;
            $virhe++;
          }
        }
      }

      if ($xtyyppi > 0 and $xtyyppi <= 3) {
        // Kirjoitetaan tiedosto kantaan
        if (substr($tietue, 0, 1) == 3 and $tilino != substr($tietue, 2, 14) and $onko_ppg) {
          $tietue = substr($tietue, 0, 1).str_pad($tilino, 14, ' ').substr($tietue, 15);
        }
        $query = "INSERT into tiliotedata set
                  yhtio    = '$yritirow[yhtio]',
                  aineisto = '$aineistorow[aineisto]',
                  tilino   = '$tilino',
                  alku     = '$alkupvm',
                  loppu    = '$loppupvm',
                  tyyppi   = '$xtyyppi',
                  tieto    = '$tietue'";
        $tiliotedataresult = pupe_query($query);
        $tiliote_id = mysql_insert_id($GLOBALS["masterlink"]);

        // P‰ivitet‰‰n perheid
        if ($tietue_type != "T11" and $tietue_type != "T81") {
          $td_perheid = $tiliote_id;
        }

        if ($td_perheid > 0) {
          $query = "UPDATE tiliotedata SET
                    perheid      = $td_perheid
                    WHERE tunnus = $tiliote_id";
          $updateperheid = pupe_query($query);
        }

        $insert_count++;
      }

      $tietue = fgets($fd);
    }

    fclose($fd);

    // Palautetan kukarow
    $kukarow = $kukarow_talteen;

    // Jos meill‰ tuli virheit‰ ja ei olla pakottamassa
    if ($forceta === false and ($virhe > 0 or $insert_count == 0)) {
      echo "<font class='error'>";
      echo t("Aineistoa ei tallennettu j‰rjestelm‰‰n");
      echo ".</font>";
      echo "<br>";

      //Poistetaan aineistot tiliotedatasta
      $query = "DELETE FROM tiliotedata
                WHERE aineisto = '$aineistorow[aineisto]'";
      $tiliotedataresult = pupe_query($query);

      $query = "UNLOCK TABLES";
      $tiliotedataresult = pupe_query($query);

      return false;
    }

    $query = "UNLOCK TABLES";
    $tiliotedataresult = pupe_query($query);

    echo "<font class='message'>";
    echo t("Aineisto tallennettu j‰rjestelm‰‰n");
    echo ". ({$aineistorow["aineisto"]})";
    echo "</font>";
    echo "<br>";

    return $aineistorow["aineisto"];
  }
}

if (!function_exists("kasittele_tiliote_viite")) {
  function kasittele_tiliote_viite($aineistotunnus) {
    global $kukarow, $yhtiorow, $palvelin2, $lopp_pvm, $lopp_tilino, $lopp_tyyppi, $kuitattu_checked;

    $tee_selvittely = false;
    $tee_viitemaksu_kohdistus = false;
    $vastavienti = 0;
    $vastavienti_valuutassa = 0;

    $tilioteselailu_oikrow = tarkista_oikeus("tilioteselailu.php", "%", "", "OK");

    // Otetaan talteen, koska t‰‰ll‰ muutellaan
    $kukarow_talteen = $kukarow;

    // K‰sitell‰‰n uudet tietueet
    $query = "SELECT *
              FROM tiliotedata
              WHERE aineisto = {$aineistotunnus}
              ORDER BY aineisto, tunnus";
    $tiliotedataresult = pupe_query($query);

    $tilioterivilaskuri = 1;
    $tilioterivimaara = mysql_num_rows($tiliotedataresult);

    // Haetaan kannan isoin lasku.tunnus, nin voidaan tehd‰n sanity-checki EndToEndId:lle.
    $query = "SELECT max(tunnus) maxEndToEndId
              FROM lasku";
    $meteidres = pupe_query($query);
    $meteidrow = mysql_fetch_assoc($meteidres);

    $tiliotedatarow = mysql_fetch_assoc($tiliotedataresult);
    mysql_data_seek($tiliotedataresult, 0);

    $query = "SELECT *
              FROM yriti
              WHERE tilino = '{$tiliotedatarow['tilino']}'";
    $yriti_result = pupe_query($query);
    $yritirow = mysql_fetch_assoc($yriti_result);
    $yhtiorow = hae_yhtion_parametrit($yritirow['yhtio']);

    while ($tiliotedatarow = mysql_fetch_assoc($tiliotedataresult)) {
      $tietue = $tiliotedatarow['tieto'];

      // Setataan kukarow-yhtiˆ
      $kukarow["yhtio"] = $yritirow["yhtio"];

      if ($tiliotedatarow['tyyppi'] == 1) {
        $tee_selvittely = true;
        require "inc/tiliote.inc";
      }
      if ($tiliotedatarow['tyyppi'] == 2) {
        $tee_selvittely = true;
        require "inc/LMP.inc";
      }
      if ($tiliotedatarow['tyyppi'] == 3) {
        $tee_viitemaksu_kohdistus = true;
        require "inc/viitemaksut.inc";
      }

      // merkataan t‰m‰ tiliotedatarivi k‰sitellyksi
      $query = "UPDATE tiliotedata
                SET kasitelty = now()
                WHERE tunnus = '$tiliotedatarow[tunnus]'";
      $updatekasitelty = pupe_query($query);

      $tilioterivilaskuri++;
    }

    if ($tee_selvittely) {
      $tkesken = 0;
      $maara = $vastavienti;
      $kohdm = $vastavienti_valuutassa;

      echo "<tr><td colspan = '6'>";
      require "inc/teeselvittely.inc";
      echo "</td></tr>";
      echo "</table><br>\n<br>\n";
    }

    if ($tee_viitemaksu_kohdistus) {
      // T‰ss‰ tarvitaan kukarow[yhtio], joten ajetaan t‰m‰ kaikille firmoille
      $query = "SELECT yhtio from yhtio";
      $yhtiores = pupe_query($query);

      while ($yhtiorow = mysql_fetch_assoc($yhtiores)) {
        // Setataan yhtiorow
        $yhtiorow = hae_yhtion_parametrit($yhtiorow['yhtio']);

        // Setataan kukarow-yhtiˆ
        $kukarow["yhtio"] = $yhtiorow["yhtio"];

        require "inc/viitemaksut_kohdistus.inc";
        require "myyntires/suoritus_asiakaskohdistus_kaikki.php";
      }

      echo "<br><br>";
    }

    // Palautetan kukarow
    $kukarow = $kukarow_talteen;
  }
}

if (!function_exists("cron_log")) {
  function cron_log($file = "") {
    global $argv, $pupesoft_commandlinelog;

    if (isset($pupesoft_commandlinelog) and substr($pupesoft_commandlinelog, -23) == "pupesoft-commanline.log") {
      $_msg  = microtime(TRUE)."|$file|".serialize($argv)."\n";
      file_put_contents($pupesoft_commandlinelog, $_msg, FILE_APPEND);
    }
  }
}

if (!function_exists("kohdista_lasku_ja_suoritus")) {
  function kohdista_lasku_ja_suoritus($lasku_tunnus, $suoritus_tunnus) {
    global $kukarow, $yhtiorow;

    $tila = 'tee_kohdistus';
    $lasku_tunnukset = array($lasku_tunnus);
    $ohjelma_kutsuja = 'tee_viitemaksu_kohdistus_functio';

    require 'myyntires/manuaalinen_suoritusten_kohdistus.php';
  }
}

if (!function_exists("cron_aikaleima")) {
  function cron_aikaleima($aikaleima, $uusileima = 0) {
    global $kukarow, $yhtiorow;

    // Yll‰pidet‰‰n avainsanoissa aika jolloin tietty skripti on ajettu viimeksi

    if (strlen($aikaleima) > 15) {
      echo "Aikaleiman tunnus on liian pitk‰!<br>";
      return;
    }

    if (substr($aikaleima, -5) != "_CRON") {
      echo "Aikaleiman tunnus on p‰‰tytt‰v‰ '_CRON'!<br>";
      return;
    }

    pupemaster_start();

    $datetime_checkpoint_res = t_avainsana($aikaleima);

    if (mysql_num_rows($datetime_checkpoint_res) != 1) {
      $query = "DELETE FROM avainsana
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND laji    = '$aikaleima'";
      pupe_query($query);

      $query = "INSERT INTO avainsana SET
                yhtio = '{$kukarow['yhtio']}',
                laji  = '$aikaleima'";
      pupe_query($query);

      $datetime_checkpoint = "";
    }

    if (!empty($uusileima)) {
      // Tallennetaan timestamppi
      $query = "UPDATE avainsana SET
                selite      = '{$uusileima}'
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND laji    = '$aikaleima'";
      pupe_query($query);

      $datetime_checkpoint = $uusileima;
    }
    else {
      // Haetaan tallennettu aikaleima
      $datetime_checkpoint_row = mysql_fetch_assoc($datetime_checkpoint_res);
      $datetime_checkpoint = pupesoft_cleanstring($datetime_checkpoint_row['selite']);
    }

    pupemaster_stop();

    return $datetime_checkpoint;
  }
}

if (!function_exists("paivita_sopimusrivit")) {
  function paivita_sopimusrivit(array $sopimusrivitunnukset = array()) {
    global $kukarow;

    // Jos on annettu sopimusrivitunnukset p‰ivitet‰‰n vain niit‰ rivej‰, muuten p‰ivitet‰‰n kaikki
    if (is_array($sopimusrivitunnukset) and count($sopimusrivitunnukset) > 0) {

      foreach ($sopimusrivitunnukset as $muokattu_sopimusrivi) {
        // P‰ivitet‰‰n sopimusriville oikea kappalem‰‰r‰ mutta ei ikin‰ nollata
        $query = "SELECT
                  count(*) lkm
                  FROM laitteen_sopimukset
                  WHERE sopimusrivin_tunnus = '{$muokattu_sopimusrivi}'";
        $res = pupe_query($query);
        $laiterivi = mysql_fetch_assoc($res);

        $paivitettava_kpl = $laiterivi['lkm'] > 0 ? $laiterivi['lkm'] : 1;

        // Jos tuote on asetettu avainsanalla ohittamaan rivikohtaisuus niin p‰ivitet‰‰n kappalem‰‰r‰
        $query = "UPDATE tilausrivi
                  SET
                  tilkpl           = '{$paivitettava_kpl}',
                  varattu          = '{$paivitettava_kpl}'
                  WHERE tunnus     = '{$muokattu_sopimusrivi}'
                  AND yhtio        = '{$kukarow['yhtio']}'
                  AND EXISTS (SELECT *
                    FROM tuotteen_avainsanat
                    WHERE yhtio    = '{$kukarow['yhtio']}'
                    AND tuoteno    = tilausrivi.tuoteno
                    AND laji       = 'laatuluokka'
                    AND selitetark = 'rivikohtainen')";
        pupe_query($query);
      }
    }
    else {

      $query = "SELECT
                group_concat(DISTINCT sopimusrivin_tunnus) kaikki_rivitunnukset
                FROM laitteen_sopimukset
                WHERE yhtio              = '{$kukarow['yhtio']}'
                AND sopimusrivin_tunnus != 0";
      $kaikkiresult = pupe_query($query);
      $kaikkirivi = mysql_fetch_assoc($kaikkiresult);
      $kaikki_sopimusrivit = explode(",", $kaikkirivi['kaikki_rivitunnukset']);

      foreach ($kaikki_sopimusrivit as $muokattu_sopimusrivi) {
        // P‰ivitet‰‰n sopimusriville oikea kappalem‰‰r‰ mutta ei ikin‰ nollata
        $query = "SELECT
                  count(*) lkm
                  FROM laitteen_sopimukset
                  WHERE sopimusrivin_tunnus = '{$muokattu_sopimusrivi}'";
        $res = pupe_query($query);
        $laiterivi = mysql_fetch_assoc($res);

        $paivitettava_kpl = $laiterivi['lkm'] > 0 ? $laiterivi['lkm'] : 1;

        // Jos tuote on asetettu avainsanalla ohittamaan rivikohtaisuus niin p‰ivitet‰‰n kappalem‰‰r‰
        $query = "UPDATE tilausrivi
                  SET
                  tilkpl           = '{$paivitettava_kpl}',
                  varattu          = '{$paivitettava_kpl}'
                  WHERE tunnus     = '{$muokattu_sopimusrivi}'
                  AND yhtio        = '{$kukarow['yhtio']}'
                  AND EXISTS (SELECT *
                    FROM tuotteen_avainsanat
                    WHERE yhtio    = '{$kukarow['yhtio']}'
                    AND tuoteno    = tilausrivi.tuoteno
                    AND laji       = 'laatuluokka'
                    AND selitetark = 'rivikohtainen')";
        pupe_query($query);
      }
    }

    return "";
  }
}

if (!function_exists("sanitoi_javascript_id")) {
  function sanitoi_javascript_id($value) {
    // ID and NAME tokens must begin with a letter ([A-Za-z])
    // and may be followed by any number of letters, digits ([0-9]),
    // hyphens ("-"), underscores ("_"), colons (":"), and periods (".").
    return preg_replace("/[^a-zˆ‰ÂA-Z÷ƒ≈0-9\-\:\_]/i", "", $value);
  }
}

if (!function_exists("poista_osakeyhtio_lyhenne")) {
  function poista_osakeyhtio_lyhenne($nimi) {

    // strtolower ei osaa pienent‰‰ t‰mmˆisi‰ erikoismerkkej‰
    $old = array("‹", "é", "ƒ", "÷", "≈");
    $new = array("¸", "û", "‰", "ˆ", "Â");
    $nimi = str_replace($old, $new, $nimi);
    $nimi = strtolower($nimi);

    $replace = "oy|ab|as|o¸|ou|mt¸|t¸|tt¸";

    // Nimen edest‰
    $nimi = preg_replace("/^($replace) /", "", $nimi);

    // Nimen takaa
    $nimi = preg_replace("/ ($replace)$/", "", $nimi);

    return trim($nimi);
  }
}

if (!function_exists("poista_osakeyhtio_lyhenne_mysql")) {
  function poista_osakeyhtio_lyhenne_mysql($kentta = "nimi") {
    return "TRIM(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        REPLACE(
                          REPLACE(
                            REPLACE(LOWER({$kentta}), 'oy', ''),
                          'ab', ''),
                        'as', ''),
                      'o¸', ''),
                    'ou', ''),
                  'mt¸', ''),
                't¸', ''),
              'tt¸', ''))";
  }
}

if (!function_exists("rakenna_relex_tuote_parametrit")) {
  function rakenna_relex_tuote_parametrit() {
    global $yhtiorow, $kukarow;

    // haetaan avainsanoissa m‰‰ritellyt RELEX_TUOTEPAR avainsanat
    // ja rakennetaan niist‰ valmis sql-lause tuote-taulun
    // rajauksiksi

    $sql_where_lisa = '';
    $oper_array = array('on'              => '=',
      'not'             => '!=',
      'in'              => 'in',
      'not in'          => 'not in',
      'like_pre'        => '%like',
      'like_post'       => 'like%',
      'like_both'       => '%like%',
      'gt'              => '>',
      'lt'              => '<',
      'gte'             => '>=',
      'lte'             => '<=',
    );

    $query = "SELECT *
              FROM avainsana
              WHERE yhtio = '{$yhtiorow['yhtio']}'
              AND laji    = 'RELEX_TUOTEPAR'";
    $res = pupe_query($query);

    while ($row = mysql_fetch_assoc($res)) {

      $kentta = "tuote.".$row['selite'];
      $arvo = $row['selitetark_2'];
      $oper = $row['selitetark'];

      if (in_array($oper, array('in', 'not in'))) {

        $arvo_array = explode(",", $arvo);

        // jos ei oo mit‰‰ arvoa, ni hyp‰t‰‰ t‰n yli
        if (count($arvo_array) == 0) continue;

        $operaattori = $oper_array[$oper];
        $arvo = "(";

        foreach ($arvo_array as $_arvo) {
          $arvo .= "'".trim($_arvo)."',";
        }

        $arvo = substr($arvo, 0, -1).")";
      }
      elseif (in_array($oper, array('like_pre', 'like_post', 'like_both'))) {

        $arvo = str_replace("%", "", $arvo);

        switch ($oper) {
        case "like_pre":
          $arvo = "'%$arvo'";
          break;
        case "like_post":
          $arvo = "'$arvo%'";
          break;
        case "like_both":
          $arvo = "'%$arvo%'";
          break;
        }

        $operaattori = 'like';
      }
      else {
        $operaattori = $oper_array[$oper];
        $arvo = "'$arvo'";
      }

      $sql_where_lisa .= " AND {$kentta} {$operaattori} {$arvo}";
    }

    return $sql_where_lisa;
  }
}

if (!function_exists('tuotteen_toimittajat_pakkauskoot')) {
  function tuotteen_toimittajat_pakkauskoot($tt_tunnus, $ehto = '') {
    global $yhtiorow, $kukarow;

    $pakkaukset = array();

    if ($ehto == 'suurin') {
      $orderby_limit = 'ORDER BY abs(tuotteen_toimittajat_pakkauskoot.pakkauskoko) desc LIMIT 1';
    }
    elseif ($ehto == 'desc') {
      $orderby_limit = 'ORDER BY abs(tuotteen_toimittajat_pakkauskoot.pakkauskoko) desc';
    }
    else {
      $orderby_limit = 'ORDER BY abs(tuotteen_toimittajat_pakkauskoot.pakkauskoko) asc';
    }

    if (isset($tt_tunnus)) {

      $query = "SELECT tuotteen_toimittajat_pakkauskoot.*
                FROM tuotteen_toimittajat
                JOIN tuotteen_toimittajat_pakkauskoot ON (
                  tuotteen_toimittajat_pakkauskoot.yhtio                   = tuotteen_toimittajat.yhtio
                  AND tuotteen_toimittajat_pakkauskoot.toim_tuoteno_tunnus = tuotteen_toimittajat.tunnus)
                WHERE tuotteen_toimittajat.yhtio                           = '$kukarow[yhtio]'
                AND tuotteen_toimittajat.tunnus= '$tt_tunnus'
                $orderby_limit";
      $result = pupe_query($query);

      while ($trow = mysql_fetch_assoc($result)) {
        $pakkaukset[] = array($trow['pakkauskoko'], $trow['yksikko']);
      }

      return $pakkaukset;
    }
    else {
      return array();
    }
  }
}

if (!function_exists('aseta_kukarow_kesken')) {
  function aseta_kukarow_kesken($kesken) {
    global $kukarow, $yhtiorow;

    if ($kesken === '' or $kesken === null) {
      return false;
    }

    $query = "UPDATE kuka
              SET kesken = {$kesken}
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND kuka    = '{$kukarow['kuka']}'";
    pupe_query($query);

    $kukarow["kesken"] = $kesken;

    if (mysql_affected_rows() == 1) {
      return true;
    }

    return false;
  }
}

if (!function_exists('ei_huomioida_tuotepaikkoja_avainsanoista')) {
  function ei_huomioida_tuotepaikkoja_avainsanoista($huomioidaanko = false, $taulu) {

    global $kukarow, $yhtiorow;

    $ei_huomioida_lisa = "";

    if ($huomioidaanko) {

      $chk_res = t_avainsana('INVASTEPAIKKA');

      if (mysql_num_rows($chk_res) > 0) {

        $ei_huomioida_lisa = array();

        while ($chk_row = mysql_fetch_assoc($chk_res)) {
          $ei_huomioida_lisa[] = $chk_row['selite'];
        }

        $ei_huomioida_lisa = " AND CONCAT_WS('-', {$taulu}.hyllyalue, {$taulu}.hyllynro, {$taulu}.hyllyvali, {$taulu}.hyllytaso) NOT IN ('".implode("','", $ei_huomioida_lisa)."') ";
      }
    }

    return $ei_huomioida_lisa;
  }
}

if (!function_exists("hae_saldo")) {
  function hae_saldo($tuote, $tyyppi = '') {
    global $kukarow, $yhtiorow, $maa;

    $saldo = 0;

    if ($tuote["tuoteperhe"] == $tuote["tuoteno"]) {
      // Tuoteperheen is‰
      $saldot = tuoteperhe_myytavissa($tuote["tuoteno"], 'KAIKKI', $tyyppi, 0, '', '', '', '', '', $maa);

      foreach ($saldot as $varasto => $myytavissa) {
        $saldo += $myytavissa;
      }
      return $saldo;

    }
    elseif ($tuote['ei_saldoa'] != '') {
      $saldo = 1;
      return $saldo;
    }
    else {
      list($a, $b, $myytavissa) = saldo_myytavissa($tuote["tuoteno"], $tyyppi, 0, '', '', '', '', '', $maa);
      $saldo = $myytavissa;

      return $saldo;
    }
  }
}

if (!function_exists("mb_str_pad")) {
  function mb_str_pad($input, $pad_length, $pad_string = ' ', $pad_type = STR_PAD_RIGHT) {
    // T‰ss‰ on "//NO_MB_OVERLOAD"-kommentti
    // jotta UTF8-konversio ei osu t‰h‰n riviin
    $diff = strlen($input) - mb_strlen($input); //NO_MB_OVERLOAD
    return str_pad($input, $pad_length + $diff, $pad_string, $pad_type); //NO_MB_OVERLOAD
  }
}

if (!function_exists("mb_str_split")) {
  function mb_str_split($string, $string_length = 1, $string_min_length = 1) {
    $parts = array();

    if (mb_strlen($string) > $string_length or !$string_length) {
      do {
        $c = mb_strlen($string);
        $parts[] = mb_substr($string, 0, $string_length);
        $string  = mb_substr($string, $string_length, $c-$string_length);

      } while (!empty($string));

      // Tsekataan, ett‰ vika stringi ei ole liian lyhyt jos meill‰ on minimipituus annettu
      if ($string_min_length > 1 and mb_strlen(end($parts)) < $string_min_length and count($parts) > 1) {
        $vika = array_pop($parts);
        $tokavika = array_pop($parts);

        // montako merkki‰ tarvitaan tokavikasta vikaan, jotta se ei olisi liian lyhyt
        $vikapituus = mb_strlen($vika);

        $ero = ($string_min_length - $vikapituus);
        $siiretaan_vikaan = mb_substr($tokavika, -$ero);

        $parts[] = mb_substr($tokavika, 0, -$ero);
        $parts[] = $siiretaan_vikaan.$vika;
      }
    }
    else {
      $parts[] = $string;
    }

    return $parts;
  }
}

if (!function_exists("jt_saapumisaika_tilausvahvistus")) {
  function jt_saapumisaika_tilausvahvistus($tilausrivi, $status, $kieli = "") {
    global $yhtiorow;

    if ($yhtiorow["jt_rivien_saapumisajan_nayttaminen"] == "K" and
      ($tilausrivi["jtsort"] > 0 or $tilausrivi["jt"] > 0)
    ) {
      $myytavissa = saldo_myytavissa($tilausrivi["tuoteno"]);
      $myytavissa = $myytavissa[2];
      $saapumisaika = hae_tuotteen_saapumisaika($tilausrivi["tuoteno"],
        $status, $myytavissa, false, false, $kieli);
      if (count($saapumisaika > 0)) {
        $saapumisaika = $saapumisaika[1];

        list($teksti, $paivamaara) = explode("!°!", $saapumisaika);
        $saapumisaika = "{$teksti} " . strip_tags($paivamaara);

        return trim($saapumisaika);
      }

      return "";
    }

    return "";
  }
}

if (!function_exists('luo_temp_tiedosto')) {
  function luo_temp_tiedosto($liitetiedosto) {
    global $kukarow, $yhtiorow;

    if (empty($liitetiedosto)) {
      return '';
    }

    $fileparts = explode('.', $liitetiedosto['filename']);
    $kpl = count($fileparts);
    $extension = $fileparts[$kpl - 1];

    $filepath = "/tmp/" . uniqid() . ".{$extension}";
    file_put_contents($filepath, $liitetiedosto['data']);

    return $filepath;
  }
}

if (!function_exists('xml_to_array')) {
  function xml_to_array($xml) {
    $xml_string = $xml;
    if ($xml instanceof SimpleXMLElement) {
      $xml_string = $xml->asXML();
    }

    if (empty($xml_string)) {
      return array();
    }

    $xml_string = str_replace(array("\n", "\r", "\t"), '', $xml_string);

    //@TODO t‰‰ on xml:lle joka sis‰lt‰‰ CDATA nodeissa jos xml ei sis‰ll‰ CDATAA niin t‰m‰ ei toimi
    //Korjaa jossain vaiheessa
    $xml = simplexml_load_string($xml_string, null, LIBXML_NOCDATA);
    $json = json_encode($xml);
    $array = json_decode($json, TRUE);

    return $array;
  }
}

if (!function_exists("vapauta_maksusopimus_kysely")) {
  function vapauta_maksusopimus_kysely($maksusoppari) {
    global $yhtiorow, $kukarow, $palvelin2, $pupe_root_polku;

    $query = "SELECT maksupositio.otunnus,
              sum(if(ifnull(uusiolasku_ux.mapvm, '0000-00-00') != '0000-00-00', 1, 0)) laskutettu_ux_kpl,
              count(*) yhteensa_kpl
              FROM maksupositio
              LEFT JOIN lasku uusiolasku ON (maksupositio.yhtio = uusiolasku.yhtio
                  AND maksupositio.uusiotunnus = uusiolasku.tunnus)
              LEFT JOIN lasku uusiolasku_ux ON (uusiolasku_ux.yhtio = uusiolasku.yhtio
                  AND uusiolasku_ux.tila       = 'U'
                  AND uusiolasku_ux.alatila    = 'X'
                  AND uusiolasku_ux.laskunro   = uusiolasku.laskunro)
              WHERE maksupositio.yhtio         = '{$kukarow['yhtio']}'
              AND maksupositio.otunnus         = '{$maksusoppari}'
              GROUP BY 1
              HAVING (yhteensa_kpl - laskutettu_ux_kpl) = 1
              ORDER BY 1, maksupositio.tunnus";
    $posres = pupe_query($query);

    return mysql_num_rows($posres);
  }
}

if (!function_exists("vapauta_maksusopimus")) {
  function vapauta_maksusopimus($maksusoppari) {
    global $yhtiorow, $kukarow, $palvelin2, $pupe_root_polku;

    // Vapautetaan holdissa oleva tilaus, jos/kun ennakkolaskut on maksettu
    if (vapauta_maksusopimus_kysely($maksusoppari)) {
      $silent = 'Nyt hiljaa, hiljaa hiivit‰‰n n‰in Kardemumman yˆss‰';
      $vapauta_tilaus_keraykseen = true;

      $query = "SELECT *
                FROM lasku
                WHERE yhtio    = '{$kukarow['yhtio']}'
                AND jaksotettu = '{$maksusoppari}'
                AND tila       = 'N'
                AND alatila    = 'B'";
      $laskures = pupe_query($query);

      while ($laskurow = mysql_fetch_assoc($laskures)) {
        $query = "UPDATE lasku SET
                  alatila     = ''
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND tunnus  = '{$laskurow['tunnus']}'";
        pupe_query($query);

        $kukarow['kesken'] = $laskurow['tunnus'];
        $laskurow['alatila'] = '';

        require 'tilauskasittely/tilaus-valmis.inc';
      }
    }
  }
}


if (!function_exists("tee_ennakkolasku")) {
  function tee_ennakkolasku($jaks_alkup_tilaus, $sisainen = FALSE) {
    global $yhtiorow, $kukarow, $palvelin2, $pupe_root_polku, $force_web;

    // Otetaan sopparin tiedot talteen jos sellanen on olemassa.
    $jaksquery = "SELECT *
                  FROM maksupositio
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND otunnus = '$jaks_alkup_tilaus'";
    $sopres = pupe_query($jaksquery);
    $soprow = mysql_fetch_assoc($sopres);

    // Poistetaan k‰sin syˆtetty, tai vanha, soppari.
    $jaksquery = "DELETE
                  FROM maksupositio
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND otunnus = '$jaks_alkup_tilaus'";
    pupe_query($jaksquery);

    // P‰ivitet‰‰n tilaukselle "jaksotettu" maksuehto
    $jaksquery = "SELECT *
                  FROM maksuehto
                  WHERE yhtio     = '$kukarow[yhtio]'
                  AND jaksotettu != ''
                  AND kaytossa    = ''
                  ORDER BY tunnus
                  LIMIT 1";
    $jaksres = pupe_query($jaksquery);

    if (mysql_num_rows($jaksres) == 0) {
      echo t("VIRHE: Jaksotettavaa maksuehtoa ei lˆydy")."!<br>";
      return 0;
    }

    $jaksrow = mysql_fetch_assoc($jaksres);

    // Luodaan maksusoppari jos sit‰ ei viel‰ ole:
    $query  = "SELECT *
               FROM lasku
               WHERE yhtio = '$kukarow[yhtio]'
               AND tunnus  = '{$jaks_alkup_tilaus}'";
    $laskures = pupe_query($query);
    $laskurow = mysql_fetch_assoc($laskures);

    $maksusoppari_silent = TRUE;
    require_once "{$pupe_root_polku}/tilauskasittely/maksusopimus.inc";

    // Lis‰t‰‰n kaksi positiota
    list($laskurow, $ennakko) = maksusopimus_uusi($laskurow);
    list($laskurow, $loppu)   = maksusopimus_uusi($laskurow);

    // Liitet‰‰n kaikki rivit maksusoppariin
    maksusopimus_lisaa_kaikki_jaksotukseen($laskurow);

    // Haetaan laskujen kuvaukset
    $kuvares = t_avainsana("LASKUKUVAUS");

    $ennakkokuvaus = mysql_fetch_assoc($kuvares);

    mysql_data_seek($kuvares, mysql_num_rows($kuvares) -1);
    $loppukuvaus = mysql_fetch_assoc($kuvares);

    if (!empty($soprow["maksuehto"])) {
      $mehto = $soprow["maksuehto"];
    }
    else {
      $mehto = $laskurow["maksuehto"];
    }

    maksusopimus_tallenna($laskurow, $ennakko, "", 100, $mehto, "", $ennakkokuvaus["selitetark"], "", "", "",  "");
    maksusopimus_tallenna($laskurow, $loppu, "", 0, $mehto, "", $loppukuvaus["selitetark"], "", "", "",  "");

    require_once "{$pupe_root_polku}/maksusopimus_laskutukseen.php";

    $ennakkolasku = ennakkolaskuta($jaks_alkup_tilaus);

    $kasiviite = "";

    if ($ennakkolasku > 0) {

      // Ennakkolasku on sis‰inen, ei l‰hetet‰ asiakkaalle
      if ($sisainen) {
        $query  = "UPDATE lasku
                   SET sisainen = 'o'
                   WHERE tunnus = '{$ennakkolasku}'";
        pupe_query($query);
      }

      // Jos alkuper‰isell‰ tilauksella on k‰sinsyˆtetty viite tai viesti niin kopsataan se ennakkolaskulle
      if (!empty($laskurow["viite"])) {
        $query  = "UPDATE lasku
                   SET viite = '{$laskurow["viite"]}'
                   WHERE tunnus = '{$ennakkolasku}'";
        pupe_query($query);

        $kasiviite = ", viite = '' ";
      }

      $tee              = "TARKISTA";
      $laskutakaikki    = "KYLLA";
      $silent           = "VIENTI";
      $laskutettavat    = $ennakkolasku;
      $valittu_tulostin = "AUTOMAAGINEN_VALINTA";

      require "{$pupe_root_polku}/tilauskasittely/verkkolasku.php";
    }

    // P‰ivitet‰‰n alkuper‰iselle tilaukselle "jaksotettu" maksuehto
    $jaksquery = "UPDATE lasku
                  SET maksuehto = '{$jaksrow['tunnus']}'
                  {$kasiviite}
                  WHERE yhtio = '$kukarow[yhtio]'
                  AND tunnus  = '{$jaks_alkup_tilaus}'";
    pupe_query($jaksquery);

    return $jaksrow['tunnus'];
  }
}

if (!function_exists("tiliointi_tarkistus")) {
  function tiliointi_tarkistus($tiliointi_tarkistus, $kustp_tark, $kohde_tark, $projekti_tark) {

    /*
    0 = Ei pakollisia kentti‰
    1 = pakollisia kentti‰ tiliˆinniss‰ on kustannuspaikka
    2 = pakollisia kentti‰ tiliˆinniss‰ on kustannuspaikka, kohde
    3 = pakollisia kentti‰ tiliˆinniss‰ on kustannuspaikka, projekti
    4 = pakollisia kentti‰ tiliˆinniss‰ on kustannuspaikka, kohde ja projekti
    5 = pakollisia kentti‰ tiliˆinniss‰ on kohde
    6 = pakollisia kentti‰ tiliˆinniss‰ on kohde, projekti
    7 = pakollisia kentti‰ tiliˆinniss‰ on projekti
    */

    $virhe = "";

    $kustp_tark    = trim($kustp_tark);
    $kohde_tark    = trim($kohde_tark);
    $projekti_tark = trim($projekti_tark);

    if (!empty($tiliointi_tarkistus)) {

      if ($tiliointi_tarkistus == 1) {
        if (empty($kustp_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kustannuspaikka")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 2) {
        if (empty($kustp_tark) or empty($kohde_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kustannuspaikka ja kohde")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 3) {
        if (empty($kustp_tark) or empty($projekti_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kustannuspaikka ja projekti")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 4) {
        if (empty($kustp_tark) or empty($kohde_tark) or empty($projekti_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kustannuspaikka ja kohde sek‰ projekti")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 5) {
        if (empty($kohde_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kohde")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 6) {
        if (empty($kohde_tark) or empty($projekti_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ kohde sek‰ projekti")."!<br />";
        }
      }

      if ($tiliointi_tarkistus == 7) {
        if (empty($projekti_tark)) {
          $virhe .= t("Tositteeseen on liitett‰v‰ projekti")."!<br />";
        }
      }
    }

    return $virhe;
  }
}

if (!function_exists('hae_lahete_printteri')) {
  function hae_lahete_printteri($varasto = 0, $toimipaikka = 0, $tilaus = 0, $valittu_tulostin = '', $printterinro = 1) {

    global $kukarow, $yhtiorow;

    $komento = "";

    //tulostetaan faili ja valitaan sopivat printterit
    if ($varasto == 0) {
      $query = "SELECT *
                from varastopaikat
                WHERE yhtio  = '{$kukarow['yhtio']}'
                AND tyyppi  != 'P'
                order by alkuhyllyalue,alkuhyllynro
                limit 1";
    }
    else {
      $query = "SELECT *
                from varastopaikat
                where yhtio = '{$kukarow['yhtio']}'
                and tunnus  = '{$varasto}'";
    }
    $prires = pupe_query($query);

    if (mysql_num_rows($prires) > 0) {
      $prirow = mysql_fetch_assoc($prires);

      $apuprintteri = $prirow["printteri{$printterinro}"]; // l‰heteprintteri tai haluttu printteri

      require "tilauskasittely/varaston_tulostusalue.inc";

      if (isset($kirjoitin) and $kirjoitin != '') {
        $apuprintteri = $kirjoitin;
      }

      // Katsotaan onko avainsanoihin m‰‰ritelty varaston toimipaikan l‰heteprintteri‰
      if (!empty($toimipaikka)) {
        $avainsana_where = " and avainsana.selite       = '{$varasto}'
                             and avainsana.selitetark   = '{$toimipaikka}'
                             and avainsana.selitetark_2 = 'printteri{$printterinro}'";

        $tp_tulostin = t_avainsana("VARTOIMTULOSTIN", '', $avainsana_where, '', '', "selitetark_3");

        if (!empty($tp_tulostin)) {
          $apuprintteri = $tp_tulostin;
        }
      }

      // k‰sinvalittu printteri
      if (!empty($valittu_tulostin)) {
        $apuprintteri = $valittu_tulostin;
      }

      //haetaan l‰hetteen tulostuskomento
      $query = "SELECT komento
                FROM kirjoittimet
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = '{$apuprintteri}'";
      $kirres = pupe_query($query);
      $kirrow = mysql_fetch_assoc($kirres);

      $komento = $kirrow['komento'];
    }

    return $komento;
  }
}

if (!function_exists('varaston_lapsivarastot')) {
  function varaston_lapsivarastot($varasto, $tuoteno) {
    global $kukarow, $yhtiorow;

    // katsotaan onko vastaanottavalla varastolla lapsivarastoja
    $lv_query =  "SELECT GROUP_CONCAT(tunnus) lapsivarastot
                  FROM varastopaikat
                  WHERE yhtio      = '{$kukarow['yhtio']}'
                  AND isa_varasto  = '{$varasto}'
                  AND isa_varasto != 0";
    $lv_res = pupe_query($lv_query);
    $lv_row = mysql_fetch_assoc($lv_res);

    if (!empty($lv_row['lapsivarastot'])) {

      // katsotaan onko tuotepaikallisia lapsivarastoja
      $tlv_query = "SELECT GROUP_CONCAT(DISTINCT varasto) varastot
                    FROM tuotepaikat
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND varasto IN ({$lv_row['lapsivarastot']})
                    AND tuoteno = '{$tuoteno}'
                    GROUP BY yhtio";
      $tlv_res = pupe_query($tlv_query);
      $tlv_lista = mysql_fetch_assoc($tlv_res);

      if (empty($tlv_lista['varastot'])) {

        $tlvlisa = '';

        $lvlisa = " UNION
                    SELECT tunnus, 'x','x','x','x', 's3' AS status, nimitys
                    FROM varastopaikat
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND isa_varasto = '{$varasto}'";
      }
      else {

        $tlvlisa="UNION
                  SELECT tp.tunnus,
                  tp.hyllyalue,
                  tp.hyllynro,
                  tp.hyllyvali,
                  tp.hyllytaso,
                  's2' AS status,
                  'x' AS nimitys
                  FROM tuotepaikat AS tp
                  JOIN varastopaikat AS vp ON vp.yhtio = tp.yhtio AND vp.tunnus = tp.varasto
                  WHERE tp.yhtio = '{$kukarow['yhtio']}'
                  AND vp.isa_varasto = '{$varasto}'
                  AND tp.tuoteno = '{$tuoteno}'";

        $lvlisa= "UNION
                  SELECT tunnus, 'x','x','x','x', 's3' AS status, vp.nimitys
                  FROM varastopaikat AS vp
                  WHERE vp.yhtio = '{$kukarow['yhtio']}'
                  AND vp.isa_varasto = '{$varasto}'
                  AND vp.tunnus NOT IN ({$tlv_lista['varastot']})";
      }
    }
    else {
      $lvlisa = $tlvlisa = '';
    }

    $query = "SELECT tunnus, hyllyalue, hyllynro, hyllyvali, hyllytaso, 's1' AS status, 'x' AS nimitys
              FROM tuotepaikat
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tuoteno = '{$tuoteno}'
              AND varasto = '{$varasto}'
              $lvlisa
              $tlvlisa
              ORDER BY status, nimitys";
    return pupe_query($query);
  }
}

if (!function_exists("hae_viimeiset_hyvaksyjat")) {
  function hae_viimeiset_hyvaksyjat($laskurow) {
    $hyvaksyja_kentat = array();
    $kentat = array("hyvak1", "hyvak2", "hyvak3", "hyvak4", "hyvak5");

    foreach ($kentat as $kentta) {
      if (!empty($laskurow[$kentta])) {
        array_push($hyvaksyja_kentat, $kentta);
      }
    }

    $viimeinen_hyvaksyja = array_pop($hyvaksyja_kentat);
    $viimeinen_hyvaksyja = substr($viimeinen_hyvaksyja, -1);
    $viimeinen_hyvaksyja_time = "h{$viimeinen_hyvaksyja}time";

    $tokaviimeinen_hyvaksyja = array_pop($hyvaksyja_kentat);

    if ($tokaviimeinen_hyvaksyja) {
      $tokaviimeinen_hyvaksyja = substr($tokaviimeinen_hyvaksyja, -1);
      $tokaviimeinen_hyvaksyja_time = "h{$tokaviimeinen_hyvaksyja}time";
    }
    else {
      $tokaviimeinen_hyvaksyja_time = false;
    }

    return array($viimeinen_hyvaksyja_time, $tokaviimeinen_hyvaksyja_time);
  }
}

if (!function_exists('tee_palautustilaus')) {
  function tee_palautustilaus($laskurow) {
    global $kukarow, $yhtiorow;

    // Katotaan lˆytyykˆ tilausrivej‰
    $query = "SELECT tilausrivi.*, tilausrivin_lisatiedot.asiakkaan_positio
              FROM tilausrivi
              LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
              WHERE tilausrivi.yhtio  = '$kukarow[yhtio]'
              AND tilausrivi.otunnus  = '$laskurow[tunnus]'
              AND tilausrivi.tyyppi  != 'D'
              ORDER BY tilausrivin_lisatiedot.asiakkaan_positio";
    $keres = pupe_query($query);

    // Yht‰‰n rivi‰ ei ole
    if (mysql_num_rows($keres) == 0) {
      return false;
    }
    else {

      // Luodaan toimittajalle palautettavat jos niit‰ on
      $palautettavat = array();

      while ($kerow = mysql_fetch_assoc($keres)) {
        if ($kerow['asiakkaan_positio'] > 0) $palautettavat[$kerow['asiakkaan_positio']] .= $kerow['tunnus'].",";
      }

      if (count($palautettavat) > 0) {
        require "tilauskasittely/tilauksesta_myyntitilaus.inc";

        foreach ($palautettavat as $asiakas => $rivit) {
          $rivitlisa = " AND tilausrivi.tunnus in (".substr($rivit, 0, -1).")";

          $tilauksesta_myyntitilaus = tilauksesta_myyntitilaus($kukarow["kesken"], $rivitlisa, '', '', '', 'KOPSAAPAIKAT', "REKLAMAATIO#$asiakas");
          if ($tilauksesta_myyntitilaus != '') echo "$tilauksesta_myyntitilaus<br><br>";

          // P‰ivitet‰‰n rivit tilatuiksi
          $query  = "UPDATE tilausrivin_lisatiedot
                     SET asiakkaan_positio = asiakkaan_positio*-1
                     WHERE yhtio          = '$kukarow[yhtio]'
                     AND tilausrivitunnus in (".substr($rivit, 0, -1).")";
          $result = pupe_query($query);
        }
      }
    }

    return true;
  }
}

if (!function_exists("paata_kvartaali")) {
  function paata_kvartaali() {
    $tama_vuosi = date('Y');
    $kvartaalit = array(
      4 => array(
        "start_date" => "$tama_vuosi-01-01",
        "end_date"   => "$tama_vuosi-03-31"
      ),
      1 => array(
        "start_date" => "$tama_vuosi-04-01",
        "end_date"   => "$tama_vuosi-06-30"
      ),
      2 => array(
        "start_date" => "$tama_vuosi-07-01",
        "end_date"   => "$tama_vuosi-09-30"
      ),
      3 => array(
        "start_date" => "$tama_vuosi-10-01",
        "end_date"   => "$tama_vuosi-12-31"
      ),
    );

    //tarkisteaan mik‰ kvartaali on menossa.
    foreach ($kvartaalit as $kvartaali) {
      $now = date('Y-m-d');
      if ($now >= $kvartaali['start_date'] and $now <= $kvartaali['end_date']) {
        $nykyinen_kvartaali = $kvartaali;
        break;
      }
    }

    return $nykyinen_kvartaali;
  }
}

if (!function_exists("laske_tilausrivin_kate")) {


  /**
   *
   * @param array   $tilausrivi        Tilausrivi
   * @param unknown $kotisumma_alviton
   * @param unknown $kehahinta         Tuoteen keh‰hinta
   * @param string  $kpl               Kappalem‰‰r‰, jota tarvitaan, jos k‰ytˆss‰ on sarjanumeroseuranta, muuten se
   *   otetaan tilausrivist‰
   * @param array   $arow
   *
   * @return string Kate
   */
  function laske_tilausrivin_kate($tilausrivi, $kotisumma_alviton, $kehahinta, $kpl = "",
    $arow = "") {
    global $kukarow, $yhtiorow;

    if ($kukarow['extranet'] == '' and
      ($tilausrivi["sarjanumeroseuranta"] == "S")
    ) {
      if ($kpl > 0) {
        //Jos tuotteella yll‰pidet‰‰n in-out varastonarvo ja kyseess‰ on myynti‰
        $ostohinta = sarjanumeron_ostohinta("myyntirivitunnus", $tilausrivi["tunnus"]);

        // Kate = Hinta - Ostohinta
        if ($kotisumma_alviton != 0) {
          $ostohinta = hinta_kuluineen($tilausrivi["tuoteno"], $ostohinta);
          $kate =
            sprintf('%.2f', 100 * ($kotisumma_alviton - ($ostohinta * $kpl)) / $kotisumma_alviton);
        }
        elseif (($ostohinta * $kpl) != 0) {
          $kate = "-100.00";
        }
      }
      elseif ($kpl < 0 and $tilausrivi["osto_vai_hyvitys"] == "O") {
        //Jos tuotteella yll‰pidet‰‰n in-out varastonarvo ja kyseess‰ on OSTOA

        // Kate = 0
        $kate = "0";
      }
      elseif ($kpl < 0 and $tilausrivi["osto_vai_hyvitys"] == "" and !empty($arow)) {
        //Jos tuotteella yll‰pidet‰‰n in-out varastonarvo ja kyseess‰ on HYVITYSTƒ

        //T‰h‰n hyvitysriviin liitetyt sarjanumerot
        $query = "SELECT sarjanumero, kaytetty
                  FROM sarjanumeroseuranta
                  WHERE yhtio        = '{$kukarow["yhtio"]}'
                  AND ostorivitunnus = '{$tilausrivi["tunnus"]}'";

        $sarjares = pupe_query($query);

        $ostohinta = 0;

        while ($sarjarow = mysql_fetch_assoc($sarjares)) {

          // Haetaan hyvitett‰vien myyntirivien kautta alkuper‰iset ostorivit
          $query = "SELECT tilausrivi.rivihinta/tilausrivi.kpl ostohinta
                    FROM sarjanumeroseuranta
                    JOIN tilausrivi use index (PRIMARY) ON (tilausrivi.yhtio=sarjanumeroseuranta.yhtio
                      AND tilausrivi.tunnus=sarjanumeroseuranta.ostorivitunnus)
                    WHERE sarjanumeroseuranta.yhtio          = '{$kukarow["yhtio"]}'
                    AND sarjanumeroseuranta.tuoteno          = '{$tilausrivi["tuoteno"]}'
                    AND sarjanumeroseuranta.sarjanumero      = '{$sarjarow["sarjanumero"]}'
                    AND sarjanumeroseuranta.kaytetty         = '{$sarjarow["kaytetty"]}'
                    AND sarjanumeroseuranta.myyntirivitunnus > 0
                    AND sarjanumeroseuranta.ostorivitunnus   > 0
                    ORDER BY sarjanumeroseuranta.tunnus
                    LIMIT 1";

          $sarjares1 = pupe_query($query);
          $sarjarow1 = mysql_fetch_assoc($sarjares1);

          $oh = hinta_kuluineen($tilausrivi['tuoteno'], $sarjarow1['ostohinta']);
          $ostohinta += $oh;
        }

        // Kate = Hinta - Alkuper‰inen ostohinta
        if ($kotisumma_alviton != 0) {
          $kate =
            sprintf('%.2f', 100 * ($kotisumma_alviton * -1 - $ostohinta) / $kotisumma_alviton);
        }
        else {
          $kate = "100.00";
        }
      }
      else {
        $kate = "N/A";
      }
    }
    elseif ($kukarow['extranet'] == '') {
      if ($kotisumma_alviton != 0) {
        $khh = hinta_kuluineen($tilausrivi['tuoteno'], $kehahinta);
        $kate = sprintf('%.2f', 100 * ($kotisumma_alviton - ($khh * ($tilausrivi["varattu"] +
                $tilausrivi["jt"]))) /
          $kotisumma_alviton);
      }
      elseif ($kehahinta != 0 and ($tilausrivi["varattu"] + $tilausrivi["jt"]) > 0) {
        $kate = "-100.00";
      }
      elseif ($kehahinta != 0 and ($tilausrivi["varattu"] + $tilausrivi["jt"]) < 0) {
        $kate = "100.00";
      }
    }

    return $kate;
  }
}

if (!function_exists('paivita_saapumisen_summa')) {
  function paivita_saapumisen_summa($laskurow, $kulurow, $toimittajaid, $otunnus) {

    global $kukarow, $yhtiorow;

    // jos ollaan liitetty jo vaihto-omaisuuslasku, k‰ytet‰‰n sen vientikentt‰‰
    if ($kulurow["vienti"] != "") $laskurow["vienti"] = $kulurow["vienti"];

    $alvti = " if(tuotteen_toimittajat.osto_alv >= 0, tuotteen_toimittajat.osto_alv, tuote.alv) ";

    // jos kysess‰ on kotimainen vaihto-omaisuuslasku, pit‰‰ lis‰t‰ tuotteen hintaan alvi, jos ostolaskuilla on alvia!
    if ($laskurow['vienti'] == 'C' or $laskurow['vienti'] == 'J') {

      // Lasketaan verokanta
      if ($kulurow["arvo"] != 0) $simualv = round(100 * (($kulurow["summa"]/$kulurow["arvo"])-1), 2);
      else $simualv = 0;

      if ($kulurow["arvo"] > 0 and $simualv == 0) {
        $alvti = 0;
        $alvit = 0;
      }
      // Onko miell‰ oletuksista poikkeava alvi. Verokantoja ennen viimeisint‰ alv-muutosta.
      elseif (in_array($simualv, array(23, 13, 9))) {
        $alvti = $simualv;
        $alvit = $simualv;
      }
      else {
        $alvit = "if(tuotteen_toimittajat.osto_alv >= 0, tuotteen_toimittajat.osto_alv, tuote.alv)";
      }

      if ($laskurow["maa"] != "" and $laskurow["maa"] != $yhtiorow["maa"]) {
        // tutkitaan ollaanko siell‰ alv-rekisterˆity
        $alhqur = "SELECT *
                   FROM yhtion_toimipaikat
                   WHERE yhtio     = '$kukarow[yhtio]'
                   AND maa         = '$laskurow[maa]'
                   AND vat_numero != ''";
        $alhire = pupe_query($alhqur);

        // ollaan alv-rekisterˆity
        if (mysql_num_rows($alhire) == 1) {
          $alvit = "tuotteen_alv.alv";
          $alvti = " ifnull(tuotteen_alv.alv, 0) ";
        }
      }
    }
    else {
      $alvit = 0;
    }

    $query_ale_lisa = generoi_alekentta('O');

    $query = "SELECT sum((tilausrivi.varattu+tilausrivi.kpl)*if (tuotteen_toimittajat.tuotekerroin<=0 or tuotteen_toimittajat.tuotekerroin is null,1,tuotteen_toimittajat.tuotekerroin) * tilausrivi.hinta * {$query_ale_lisa} *
              (1+(if ((SELECT max(kaytetty) kaytetty
                  FROM sarjanumeroseuranta
                  WHERE sarjanumeroseuranta.yhtio=tilausrivi.yhtio
                  and sarjanumeroseuranta.tuoteno=tilausrivi.tuoteno
                  and ((tilausrivi.varattu+tilausrivi.kpl < 0 and sarjanumeroseuranta.myyntirivitunnus=tilausrivi.tunnus) or (tilausrivi.varattu+tilausrivi.kpl > 0 and sarjanumeroseuranta.ostorivitunnus=tilausrivi.tunnus))) = 'K', 0, $alvit)/100))) hinta
              FROM tilausrivi use index (uusiotunnus_index)
              JOIN tuote use index (tuoteno_index) ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno and tuote.ei_saldoa = '')
              LEFT JOIN tuotteen_toimittajat ON (tuotteen_toimittajat.yhtio = tilausrivi.yhtio AND tuotteen_toimittajat.tuoteno = tilausrivi.tuoteno AND tuotteen_toimittajat.liitostunnus = '$toimittajaid')
              LEFT JOIN tuotteen_alv ON (tuotteen_alv.yhtio = tilausrivi.yhtio AND tuotteen_alv.tuoteno = tilausrivi.tuoteno AND tuotteen_alv.maa = '$laskurow[maa]')
              WHERE tilausrivi.yhtio      = '$kukarow[yhtio]'
              AND tilausrivi.uusiotunnus  = '$otunnus'
              AND tilausrivi.tyyppi      != 'D'
              AND tilausrivi.kpl+tilausrivi.varattu != 0";
    $result   = pupe_query($query);
    $hintarow = mysql_fetch_assoc($result);

    // p‰ivitet‰‰n samantien t‰m‰ tieto laskulle
    $query   = "UPDATE lasku set summa='$hintarow[hinta]', kohdistettu='' where yhtio ='$kukarow[yhtio]' and tunnus='$otunnus'";
    $hinresu = pupe_query($query);

    return array($hintarow, mysql_num_rows($result), $alvit, $alvti);
  }
}

if (!function_exists('saapumisen_laskut')) {
  function saapumisen_laskut($laskurow) {
    global $kukarow;

    // katsotaan onko t‰lle keikalle jo liitetty vaihto-omaisuuslaskuja (kotimaa, eu tai ei-eu)
    $query = "SELECT sum(summa) summa, sum(arvo) arvo, sum(abs(summa)) abssumma, sum(osto_kulu + osto_rahti + osto_rivi_kulu) as osto_kulut, valkoodi, vienti, GROUP_CONCAT(DISTINCT lasku.vanhatunnus) laskut
              FROM lasku
              WHERE yhtio     = '$kukarow[yhtio]'
              and tila        = 'K'
              and laskunro    = '$laskurow[laskunro]'
              and vanhatunnus <> 0
              and vienti      in ('C','F','I','J','K','L')
              GROUP BY valkoodi, vienti";
    $result = pupe_query($query);

    // jos on, haetaan liitettyjen laskujen
    if (mysql_num_rows($result) == 1) {
      $kulurow = mysql_fetch_assoc($result);
    }
    else {
      $kulurow = array(
        "vienti" => "",
        "summa" => 0,
        "arvo" => 0,
        "valkoodi" => "",
        "osto_kulut" => 0,
        "laskut" => ""
      ); // muuten tyhj‰‰
    }

    return $kulurow;
  }
}

if (!function_exists("choose_correct_date")) {
  function choose_correct_date($date) {
    global $kukarow, $yhtiorow;

    if (trim($date) == "") {
      return '';
    }

    // P‰iv‰m‰‰r‰ oli ymm‰rrett‰v‰ss‰ muodossa
    if (strtotime($date) !== false) {
      // Palautetaan Y-m-d
      return date('Y-m-d', strtotime($date));
    }

    // Exceliss‰ date voi tulla integerin‰
    if (is_numeric($date)) {
      /*  the date fields have integers that are the amount of days from 1900-00-00 */
      return date('Y-m-d', mktime(0, 0, 0, 1, $date - 1, 1900));
    }

    // Ei osattu valita sopivaa p‰iv‰‰
    echo "<font class='error'>";
    echo t("Virheellinen p‰iv‰m‰‰r‰");
    echo " \"{$date}\"";
    echo "</font><br>";

    return '';
  }
}

if (!function_exists("piirra_maksupaate_formi")) {
  function piirra_maksupaate_formi($laskurow, $kaikkiyhteensa, $kateinen, $maksettavaa_jaljella,
    $loytyy_maksutapahtumia, $kateismaksu, $kateista_annettu,
    $korttimaksutapahtuman_status, $piirra_keraysnappula = true) {
    global $kukarow, $mista, $valittu_kopio_tulostin, $kertakassa, $toim, $orig_tila, $orig_alatila,
    $kassalipas, $kieli, $valittu_tulostin;

    $query_maksuehto = "SELECT *
                        FROM maksuehto
                        WHERE yhtio='{$kukarow["yhtio"]}'
                        AND kateinen                 != ''
                        AND kaytossa                  = ''
                        AND (maksuehto.sallitut_maat = ''
                          OR maksuehto.sallitut_maat  LIKE '%{$laskurow["maa"]}%')";

    $maksuehtores = pupe_query($query_maksuehto);
    $maksuehtorow = mysql_fetch_assoc($maksuehtores);

    echo "<div id='dialog' title='" . t("K‰teislaskuri") . "'>
          <form id='kateisFormi' class='multisubmit'>
            <ul class='list-unstyled'>
              <li class='text-medium'>" . t("Summa") . ":</li>
              <li>
                <span id='jaljella' class='text-large'>{$maksettavaa_jaljella}</span>
                <span class='text-large'>{$laskurow["valkoodi"]}</span>
              </li>
              <li class='text-medium'>" . t("Annettu") . ":</li>
              <li><input id='annettu' type='number' min='0.01' step='0.01' class='text-large'></li>
              <li id='takaisinTeksti' class='text-medium'>" . t("Takaisin") . ":</li>
              <li>
                <span id='takaisin' class='text-large'></span>
                <span class='text-large'>{$laskurow["valkoodi"]}</span>
              </li>
            </ul>
          </form>
        </div>";

    echo "<form name='maksupaate' id='maksupaate' method='post'>";

    echo "<input type='hidden' name='kassamyyja_kesken' value='ei'>";
    echo "<input type='hidden' name='tilausnumero' value='{$laskurow["tunnus"]}'>";
    echo "<input type='hidden' name='mista' value='{$mista}'>";
    echo "<input type='hidden' name='tee' id='laskuriTee' value=''>";
    echo "<input type='hidden' name='maksutapa' value='{$maksuehtorow["tunnus"]}'>";
    echo "<input type='hidden' name='kaikkiyhteensa' value='{$kaikkiyhteensa}'>";
    echo "<input type='hidden' name='valittu_kopio_tulostin' value='{$valittu_kopio_tulostin}'>";
    echo "<input type='hidden' name='kateinen' value='{$kateinen}'>";
    echo "<input type='hidden' name='kertakassa' value='{$kertakassa}'>";
    echo "<input type='hidden' name='toim' value='{$toim}'>";
    echo "<input type='hidden' name='seka' id='seka' value='X'>";
    echo "<input type='hidden' name='orig_tila' value='{$orig_tila}'>";
    echo "<input type='hidden' name='orig_alatila' value='{$orig_alatila}'>";
    echo "<input type='hidden' name='kateisohitus'>";
    echo "<input type='hidden' name='toimitustapa' value='{$laskurow["toimitustapa"]}'>";
    echo "<input type='hidden' name='maksupaatetapahtuma' id='maksupaatetapahtuma' value=''>";
    echo "<input type='hidden' id='peruutus' name='peruutus' value>";
    echo "<input type='hidden' name='kateismaksu[kateinen]' id='kateinen' value='{$kateismaksu["kateinen"]}'>";
    echo "<input type='hidden' name='kateista_annettu' id='kateistaAnnettu' value='{$kateista_annettu}'>";
    echo "<input type='hidden' name='kassalipas' value='{$kassalipas}'>";
    echo "<input type='hidden' name='kieli' value='{$kieli}'>";
    echo "<input type='hidden' name='valittu_tulostin' value='{$valittu_tulostin}'>";

    echo "<table style='width: 100%; margin-top: 20px;'>";
    echo "<tr><td class='back'><font class='head'>" . t("Maksutapa") . "</font></td></tr>";
    echo "<tr>";
    echo "<td><label for='korttimaksu'>" . t("Summa") . "</label>";
    echo "<input type='text' name='korttimaksu' id='korttimaksu' value='{$maksettavaa_jaljella}'
               size='7' autocomplete='off'>";
    echo "<span class='error'>" . t($korttimaksutapahtuman_status) . "</span>";
    echo "</td></tr>";

    echo "<tr>
          <td>
            <input type='button'
                   name='kateismaksunappi'
                   id='kateismaksunappi'
                   value='" . t("K‰teinen") . " (Alt+C)'
                   accesskey='c'>
            <input type='button'
                   name='korttimaksunappi'
                   id='korttimaksunappi'
                   value='" . t("Kortti") . " (Alt+K)'
                   accesskey='k'>";

    if ($loytyy_maksutapahtumia) {
      echo "<input type='button' class='margin-left-20' name='peruuta_viimeisin'
                 id='peruuta_viimeisin' value='" . t("Peruuta viimeisin maksu") . "'>";
    }

    if ($piirra_keraysnappula) {
      echo "<input name='keraykseen' id='keraykseen' type='button' class='margin-left-20'
                 value='" . t("Ei viel‰ laskuteta, siirr‰ tilaus ker‰ykseen") . "'>";
    }

    echo "</td></tr>";
    echo "</table></form>";
  }
}

if (!function_exists("maksa_maksupaatteella")) {
  function maksa_maksupaatteella($laskurow, $kaikkiyhteensa, $korttimaksu, $peruutus) {
    global $yhtiorow, $kukarow;

    $tilausnumero = $laskurow["tunnus"];

    if (!empty($tilausnumero)) {
      if ($peruutus == "X") {
        $korttimaksu = 0;
      }
      else {
        $korttimaksu = str_replace(",", ".", $korttimaksu);
        $korttimaksu = number_format($korttimaksu, $yhtiorow['hintapyoristys'], '.', '');
      }

      require "rajapinnat/lumo_handler.inc";
    }

    $korttimaksutapahtuman_status =
      isset($korttimaksutapahtuman_status) ? $korttimaksutapahtuman_status : "";

    return $korttimaksutapahtuman_status;
  }
}

if (!function_exists("jaljella_oleva_maksupaatesumma")) {
  function jaljella_oleva_maksupaatesumma($tilausnumero, $kaikkiyhteensa) {
    global $kukarow, $yhtiorow;

    $loytyy = false;

    // Tarkistetaan onko onnistuneita suorituksia (K)-korttimaksut
    $query = "SELECT *
              FROM maksupaatetapahtumat
              WHERE yhtio       = '{$kukarow['yhtio']}'
              AND tilausnumero  = '{$tilausnumero}'
              AND maksutapa    != ''
              AND tila          IN ('K', 'H')";

    $result = pupe_query($query);

    $maksettu_pkortilla = 0;
    $maksettu_lkortilla = 0;

    while ($ruutu = mysql_fetch_assoc($result)) {
      if ($ruutu['maksutapa'] == "LUOTTOKORTTI") {
        $maksettu_lkortilla += $ruutu['summa_valuutassa'];
      }
      else {
        $maksettu_pkortilla += $ruutu['summa_valuutassa'];
      }
    }

    $maksupaate_maksetut['luottokortti'] = $maksettu_lkortilla;
    $maksupaate_maksetut['pankkikortti'] = $maksettu_pkortilla;

    $valisumma = 0;

    foreach ($maksupaate_maksetut as $maksettu) {
      $valisumma += $maksettu;
    }

    if ($valisumma != 0) {
      $loytyy = true;
    }

    if ($kaikkiyhteensa) {
      $totaalisumma =
        number_format($kaikkiyhteensa - $valisumma, $yhtiorow['hintapyoristys'], '.', '');
      $palautettava = array($loytyy, $totaalisumma, $maksettu_lkortilla, $maksettu_pkortilla);
    }
    else {
      $palautettava = array($loytyy, false, $maksettu_lkortilla, $maksettu_pkortilla);
    }

    return $palautettava;
  }
}

if (!function_exists("hae_eka_ja_vika_tilausrivi")) {


  /**
   *
   * @param array   $params
   *
   * @return array Ensimm‰inen ja viimeinen tilausrivi annetulla tuotenumerolla kyseisess‰ tilauksella
   */
  function hae_eka_ja_vika_tilausrivi($params) {
    global $kukarow;

    $tilausnumero = $params['tilausnumero'];
    $tuoteno      = $params['tuoteno'];

    $query = "SELECT min(tunnus) AS eka,
              max(tunnus)        AS vika
              FROM tilausrivi
              WHERE yhtio     = '{$kukarow["yhtio"]}'
              AND otunnus     = '{$tilausnumero}'
              AND tuoteno     = '{$tuoteno}'
              AND uusiotunnus = 0
              AND laskutettu  = ''
              AND tyyppi      = 'O'";

    $result = pupe_query($query);

    $tunnukset = mysql_fetch_assoc($result);

    return array($tunnukset["eka"], $tunnukset["vika"]);
  }
}

if (!function_exists("hae_tuoteperhe")) {


  /**
   * Hakee tuoteperheen kaikkine lapsineen rekursiivisesti
   *
   * @param int|string $tuoteno  Is‰tuotteen tuoteno
   * @param string  $tyyppi   Tuoteperheen tyyppi, defaulttaa reseptiin
   * @param array   $tuotenot Jo haetut reseptit
   *
   * @return array Tuoteperhe lapsineen. Rakenne on seuraavanlainen:
   *   array(
   *     100 => array(
   *       "lapset" => array(
   *         101 => array(
   *           "lapset => array(etc),
   *           "nimitys" => "Kissa"
   *         )
   *       ),
   *       "nimitys" => "Kala"
   *     )
   *   );
   */
  function hae_tuoteperhe($tuoteno, $tyyppi = "R", $tuotenot = array()) {
    global $kukarow;

    $query = "SELECT tuote.tuoteno,
              tuote.nimitys,
              tuote.status,
              lapsi.tuoteno AS lapsi_tuoteno
              FROM tuote
              LEFT JOIN tuoteperhe AS lapsi ON (lapsi.yhtio = tuote.yhtio
                AND lapsi.isatuoteno = tuote.tuoteno
                AND lapsi.tyyppi     = '{$tyyppi}')
              WHERE tuote.yhtio      = '{$kukarow["yhtio"]}'
              AND tuote.tuoteno      = '{$tuoteno}'";
    $result = pupe_query($query);

    $tuoteperhe = array();

    while ($row = mysql_fetch_assoc($result)) {
      $tuoteno = $row["tuoteno"];
      $nimitys = $row["nimitys"];
      $status  = $row["status"];

      if (!in_array($row["lapsi_tuoteno"], $tuotenot)) {
        array_push($tuotenot, $tuoteno);
        $lapsi = hae_tuoteperhe($row["lapsi_tuoteno"], $tyyppi, $tuotenot);
      }

      if (empty($lapsi)) {
        $tuoteperhe[$tuoteno]["lapset"] = array();
      }
      else {
        $tuoteperhe[$tuoteno]["lapset"][$row["lapsi_tuoteno"]] = reset($lapsi);
      }
    }

    if (!empty($nimitys)) {
      $tuoteperhe[$tuoteno]["nimitys"] = $nimitys;
    }

    if (!empty($status)) {
      $tuoteperhe[$tuoteno]["status"] = $status;
    }

    return $tuoteperhe;
  }
}

if (!function_exists('pupesoft_toimitusvahvistus')) {
  // Tarvitaan $otunnukset jossa on tilauksien tunnukset
  // Tarvitaan $tunnukset jossa on rahtikirjojen tunnukset
  // Tarvitaan $rahtikirjanro jossa on rahtikirjan rahtikirjanro (desadvia varten)

  function pupesoft_toimitusvahvistus($otunnukset, $tunnukset = 0, $rahtikirjanro = 0) {
    global $kukarow, $yhtiorow, $toim, $desadv_host, $desadv_user, $desadv_pass, $desadv_path, $pupe_root_polku;

    if (empty($otunnukset)) {
      return;
    }

    // Haetaan tarvittavat tiedot
    $query = "SELECT lasku.*, laskun_lisatiedot.*,
              lasku.tunnus laskutunnus,
              lasku.toim_ovttunnus asiakastoim_ovttunnus,
              lasku.toim_nimi asiakastoim_nimi,
              lasku.toim_nimitark asiakastoim_nimitark,
              lasku.toim_osoite asiakastoim_osoite,
              lasku.toim_postitp asiakastoim_postitp,
              lasku.toim_postino asiakastoim_postino,
              lasku.toim_maa asiakastoim_maa,
              asiakas.nimi asiakasnimi,
              asiakas.nimitark asiakasnimitark,
              asiakas.osoite asiakasosoite,
              asiakas.postitp asiakaspostitp,
              asiakas.postino asiakaspostino,
              asiakas.maa asiakasmaa,
              asiakas.ovttunnus asiakasovttunnus,
              rahtikirjat.merahti,
              rahtikirjat.rahtisopimus,
              if(maksuehto.jv is null,'',maksuehto.jv) jv,
              rahtisopimukset.muumaksaja,
              asiakas.toimitusvahvistus,
              asiakas.kieli,
              IF(lasku.toim_email != '', lasku.toim_email, IF(asiakas.keraysvahvistus_email != '', asiakas.keraysvahvistus_email, asiakas.email)) AS asiakas_email,
              IF(lasku.toim_puh != '', lasku.toim_puh, IF(asiakas.gsm != '', asiakas.gsm, IF(asiakas.tyopuhelin != '', asiakas.tyopuhelin, IF(asiakas.puhelin != '', asiakas.puhelin, '')))) puhelin
              FROM lasku
              LEFT JOIN laskun_lisatiedot ON (lasku.yhtio=laskun_lisatiedot.yhtio and lasku.tunnus=laskun_lisatiedot.otunnus)
              LEFT JOIN rahtikirjat ON (lasku.tunnus = rahtikirjat.otsikkonro and lasku.yhtio = rahtikirjat.yhtio)
              LEFT JOIN asiakas ON (asiakas.yhtio = lasku.yhtio AND asiakas.tunnus = lasku.liitostunnus)
              LEFT JOIN maksuehto ON (lasku.yhtio = maksuehto.yhtio and lasku.maksuehto = maksuehto.tunnus)
              LEFT JOIN rahtisopimukset ON (lasku.ytunnus = rahtisopimukset.ytunnus and rahtikirjat.toimitustapa = rahtisopimukset.toimitustapa and rahtikirjat.rahtisopimus = rahtisopimukset.rahtisopimus)
              WHERE lasku.yhtio = '$kukarow[yhtio]'
              AND lasku.tunnus in ({$otunnukset})";
    $toimv_laskures = pupe_query($query);

    if (mysql_num_rows($toimv_laskures) == 0) {
      return;
    }

    $rakir_row = $laskurow = mysql_fetch_assoc($toimv_laskures);

    if (empty($laskurow['toimitusvahvistus'])) {
      return;
    }

    // haetaan toimitustavan tiedot
    $query = "SELECT *
              FROM toimitustapa
              WHERE yhtio = '$kukarow[yhtio]'
              AND selite  = '{$laskurow['toimitustapa']}'";
    $toitares = pupe_query($query);
    $toitarow = mysql_fetch_assoc($toitares);

    if ($laskurow["toimitusvahvistus"] == "toimitusvahvistus_desadv_una.inc") {
      $desadv_version = "una";
      $laskurow["toimitusvahvistus"] = "toimitusvahvistus_desadv.inc";
    }
    elseif ($laskurow["toimitusvahvistus"] == "toimitusvahvistus_desadv_fi0089.inc") {
      $desadv_version = "fi0089";
      $laskurow["toimitusvahvistus"] = "toimitusvahvistus_desadv.inc";
    }
    else {
      $desadv_version = "";
    }

    if ($laskurow["toimitusvahvistus"] == "editilaus_out_futur.inc") {
      $myynti_vai_osto = 'M';
    }

    if ($laskurow['toimitusvahvistus'] == 'toimitusvahvistus_lahete') {
      $params = array(
        'laskurow'                 => $laskurow,
        'sellahetetyyppi'          => "",
        'extranet_tilausvahvistus' => "",
        'naytetaanko_rivihinta'    => "",
        'tee'                      => "",
        'toim'                     => "",
        'komento'                  => "asiakasemail".$laskurow['asiakas_email'],
        'lahetekpl'                => "",
        'kieli'                    => ""
      );
      pupesoft_tulosta_lahete($params);
    }
    else {
      @include "tilauskasittely/$laskurow[toimitusvahvistus]";
    }
  }
}

if (!function_exists('generoi_hinnastot')) {


  /**
   * Generoi annetulle tuottelle hinnaston valuutoille, joilta lˆytyy hinnastokurssi
   *
   * @param int     $tuote_tunnus Tuotteen tunnus
   *
   * @return bool Luotiinko tai p‰ivitettinkˆ hinnasto
   */
  function generoi_hinnastot($tuote_tunnus) {
    global $kukarow;

    if (!is_numeric($tuote_tunnus)) {
      return false;
    }

    $query = "SELECT myyntihinta, tuoteno
              FROM tuote
              WHERE yhtio = '{$kukarow["yhtio"]}'
              AND tunnus  = '{$tuote_tunnus}'";
    $tuote = pupe_query($query);

    if (mysql_num_rows($tuote) != 1) {
      return false;
    }

    $tuote = mysql_fetch_assoc($tuote);

    if ($tuote["myyntihinta"] == 0) {
      return false;
    }

    $query = "SELECT hinnastokurssi, nimi
              FROM valuu
              WHERE yhtio        = '{$kukarow["yhtio"]}'
              AND hinnastokurssi > 0";
    $valuu_result = pupe_query($query);

    while ($valuu = mysql_fetch_assoc($valuu_result)) {
      $query = "SELECT hinta
                FROM hinnasto
                WHERE tuoteno = '{$tuote["tuoteno"]}'
                AND yhtio     = '{$kukarow["yhtio"]}'
                AND valkoodi  = '{$valuu["nimi"]}'
                AND ((alkupvm <= current_date AND if(loppupvm = '0000-00-00', '9999-12-31', loppupvm) >= current_date) OR (alkupvm = '0000-00-00' AND loppupvm = '0000-00-00'))
                ORDER BY IFNULL(TO_DAYS(current_date) - TO_DAYS(alkupvm), 9999999999999), maa DESC
                LIMIT 1";
      $result = pupe_query($query);
      $hinnastorow = mysql_fetch_assoc($result);

      $hinta = round($tuote["myyntihinta"] * $valuu["hinnastokurssi"], 6);

      if ($hinnastorow["hinta"] == $hinta) continue;

      $query = "INSERT INTO hinnasto SET
                alkupvm    = NOW(),
                hinta      = '{$hinta}',
                laatija    = '{$kukarow["kuka"]}',
                luontiaika = NOW(),
                muutospvm  = NOW(),
                muuttaja   = '{$kukarow["kuka"]}',
                selite     = 'Generoitu hinnasto',
                tuoteno    = '{$tuote["tuoteno"]}',
                valkoodi   = '{$valuu["nimi"]}',
                yhtio      = '{$kukarow["yhtio"]}'";
      return pupe_query($query);
    }

    return false;
  }
}

if (!function_exists("loppulaskuta")) {
  function loppulaskuta($tunnus) {
    global $kukarow, $yhtiorow;

    ///* Tutkitaan alkuper‰isten tilausten tiloja *///
    $query = "SELECT SUM(IF(tila = 'L' AND alatila = 'J', 1, 0)) toimitus_valmis,
              SUM(IF(tila = 'R', 1, 0)) rojekti,
              COUNT(*) kaikki
              FROM lasku
              WHERE yhtio    = '{$kukarow['yhtio']}'
              and jaksotettu = '{$tunnus}'
              and tila       IN ('L','N','R')";
    $stresult = pupe_query($query);

    if (mysql_num_rows($stresult) == 0) {
      echo "<font class='error'>", t("Otsikkoa '%d' ei lˆytynyt, tai se on v‰‰r‰ss‰ tilassa.", "", $tunnus), "</font><br><br>";
      return 0;
    }
    else {
      $row = mysql_fetch_assoc($stresult);

      if ($row["kaikki"] - ($row["toimitus_valmis"] + $row["rojekti"]) <> 0) {
        echo "<font class='error'>", t("Laskutussopimuksella on kaikki tilaukset oltava toimitettuna ennen loppulaskutusta."), "</font><br><br>";
        return 0;
      }
    }

    $query = "SELECT *, if(lasku.vienti_kurssi = 0, 1, lasku.vienti_kurssi) vienti_kurssi
              FROM lasku
              WHERE yhtio = '{$kukarow['yhtio']}'
              and tunnus  = '{$tunnus}'";
    $rahres = pupe_query($query);
    $laskurow = mysql_fetch_assoc($rahres);

    // tarkistetaan ett‰ meill‰ on jotain j‰rkev‰‰ laskutettavaa
    $query = "SELECT *
              FROM maksupositio
              WHERE yhtio     = '{$kukarow['yhtio']}'
              and otunnus     = '{$tunnus}'
              and uusiotunnus = ''
              ORDER BY tunnus
              LIMIT 1";
    $posres = pupe_query($query);

    if (mysql_num_rows($posres) == 1) {
      $posrow = mysql_fetch_assoc($posres);
    }
    else {
      echo "<font class='error'>";
      echo t("VIRHE: Viimeinen maksupositio puuttuu! Loppulaskutus ei onnistu.");
      echo "</font><br><br>";
      return 0;
    }

    if ($debug == 1) {
      echo t("Lˆydettiin maksupositio");
      echo " {$posrow['tunnus']}, {$posrow['osuus']} %, {$posrow['maksuehto']}<br>";
    }

    // Tilausrivin kommentti-kentt‰‰n menev‰ kommentti
    $query = "SELECT
              SUM(IF(uusiotunnus > 0, 1, 0)) laskutettu,
              COUNT(*) yhteensa
              FROM maksupositio
              WHERE yhtio = '{$kukarow['yhtio']}'
              and otunnus = '{$tunnus}'";
    $abures = pupe_query($query);
    $aburow = mysql_fetch_assoc($abures);

    $lahteva_lasku = ($aburow["laskutettu"] + 1)."/".$aburow["yhteensa"];

    // varmistetaan ett‰ laskutus n‰ytt‰isi olevan OK!!
    if ($aburow["yhteensa"] - $aburow["laskutettu"] > 1) {
      echo "<font class='error'>";
      echo t("VIRHE: Loppulaskutus ei onnistu koska positioita on j‰ljell‰ enemm‰n kuin yksi!");
      echo "</font><br><br>";
      return 0;
    }

    //  Tarkastetaan ett‰ meill‰ on ok maksuehto loppulaskutukseen!!!
    $apuqu = "SELECT *
              from maksuehto
              where yhtio    = '{$kukarow['yhtio']}'
              and tunnus     = '{$posrow['maksuehto']}'
              and jaksotettu = ''";
    $meapu = pupe_query($apuqu);

    $erlisa = "";

    if (mysql_num_rows($meapu) == 1) {
      $meapurow = mysql_fetch_assoc($meapu);
    }
    else {
      echo "<font class='error'>".t("VIRHE: Maksuposition maksuehto puuttuu!")." $apuqu</font><br><br>";
      return 0;
    }

    if ($meapurow["erapvmkasin"] != "" and $posrow["erpcm"] == "0000-00-00") {
      echo "<font class='error'>";
      echo t("VIRHE: Loppulaskun maksuehdon er‰p‰iv‰ puuttuu");
      echo "!!!</font><br><br>";
      return 0;
    }
    elseif ($meapurow["erapvmkasin"] != "") {
      $erlisa = " erpcm = '{$posrow['erpcm']}',";
    }

    echo "<font class = 'message'>".t("Loppulaskutetaan tilaus")." {$tunnus}<br></font><br>";

    $query_ale_lisa = generoi_alekentta('M');

    // Lasketaan paljonko ollaan jo laskutettu ja mill‰ verokannoilla
    $query = "SELECT
              sum(round(tilausrivi.hinta * tilausrivi.kpl * {$query_ale_lisa}, 2)) laskutettu,
              sum(round((tilausrivi.hinta / lasku.vienti_kurssi) * tilausrivi.kpl * {$query_ale_lisa}, 2)) laskutettu_valuutassa,
              tilausrivi.alv
              FROM lasku
              JOIN tilausrivi ON (
                tilausrivi.yhtio            = lasku.yhtio
                AND tilausrivi.otunnus      = lasku.tunnus
                AND tilausrivi.kpl         != 0
                AND tilausrivi.uusiotunnus  > 0
                AND tilausrivi.tuoteno      = '{$yhtiorow['ennakkomaksu_tuotenumero']}'
              )
              WHERE lasku.yhtio             = '{$kukarow['yhtio']}'
              AND lasku.jaksotettu          = '".($tunnus * -1)."'
              GROUP BY alv";
    $sresult = pupe_query($query);

    //  Haetaan asiakkaan kieli niin hekin ymm‰rt‰v‰t..
    $query = "SELECT kieli
              FROM asiakas
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$laskurow['liitostunnus']}'";
    $kielires = pupe_query($query);
    $kielirow = mysql_fetch_assoc($kielires);

    if ($kielirow["kieli"] == "") {
      $kielirow["kieli"] = $yhtiorow["kieli"];
    }

    $nimitys = t($posrow["kuvaus"], $kielirow["kieli"]);
    $rivikommentti = t("Ennakkolaskutuksen hyvitys", $kielirow["kieli"])." {$lahteva_lasku}. ";

    if ($posrow["lisatiedot"] != "") {
      $rivikommentti .= "\n ".$posrow["lisatiedot"];
    }

    // Tarkistetaan ett‰ ennakkolaskun hyvitysrivi menee kunnolliselle otsikolle
    // (Voi olla case jossa ennakon kaikki rivit ovat olleet JT-rivej‰ ja otsikko on mit‰tˆitynyt)
    $query = "SELECT tunnus, if(lasku.vienti_kurssi = 0, 1, lasku.vienti_kurssi) vienti_kurssi
              FROM lasku
              WHERE yhtio     = '{$kukarow['yhtio']}'
              AND jaksotettu  = '{$tunnus}'
              AND tunnus     != '{$tunnus}'
              AND tila        = 'L'
              AND alatila    != 'X'
              ORDER BY tunnus DESC
              LIMIT 1";
    $tunnus_chk_res = pupe_query($query);
    $tunnus_chk_row = mysql_fetch_assoc($tunnus_chk_res);

    if (!empty($tunnus_chk_row['tunnus'])) {
      $ennakkolaskun_hyvitys_otunnus = $tunnus_chk_row['tunnus'];
      $vientikurssi = $tunnus_chk_row["vienti_kurssi"];
    }
    else {
      $ennakkolaskun_hyvitys_otunnus = $tunnus;
      $vientikurssi = $laskurow["vienti_kurssi"];
    }

    while ($row = mysql_fetch_assoc($sresult)) {

      $laskutettu = $row['laskutettu'];

      if ($vientikurssi != 1) {
        $laskutettu = round($row['laskutettu_valuutassa'] * $vientikurssi, 6);
      }

      $query  = "INSERT INTO tilausrivi (
                 hinta, netto, varattu, tilkpl, otunnus, tuoteno, nimitys, yhtio, tyyppi, alv,
                 kommentti, keratty, kerattyaika, toimitettu, toimitettuaika, laatija, laadittu
                 )
                 VALUES (
                 '{$laskutettu}', 'N', '-1', '-1', '{$ennakkolaskun_hyvitys_otunnus}',
                 '{$yhtiorow['ennakkomaksu_tuotenumero']}', '{$nimitys}', '{$kukarow['yhtio']}', 'L',
                 '{$row['alv']}', '{$rivikommentti}', '{$kukarow['kuka']}', now(), '{$kukarow['kuka']}',
                 now(), '{$kukarow['kuka']}', now()
                 )";
      $addtil = pupe_query($query);

      if ($debug == 1) {
        echo t("Loppulaskuun lis‰ttiin ennakkolaskun hyvitys");
        echo " -{$row['laskutettu']} alv {$row['alv']}% otunnus {$ennakkolaskun_hyvitys_otunnus}<br>";
      }
    }

    // P‰ivitet‰‰n positiolle laskutustunnus
    $query = "UPDATE maksupositio SET
              uusiotunnus  = '{$ennakkolaskun_hyvitys_otunnus}'
              WHERE tunnus = '{$posrow['tunnus']}'";
    pupe_query($query);

    // Alkuper‰inen tilaus/tilaukset menee laskutukseen
    $query = "UPDATE lasku SET
              maksuehto       = '{$posrow['maksuehto']}',
              clearing        = 'loppulasku',
              ketjutus        = 'o',
              {$erlisa}
              alatila         = 'D'
              WHERE yhtio     = '{$kukarow['yhtio']}'
              and jaksotettu  = '{$tunnus}'
              and tila       != 'R'";
    pupe_query($query);

    //  Merkataan projekti valmiiksi
    $query = "UPDATE lasku SET
              alatila        = 'B'
              WHERE yhtio    = '{$kukarow['yhtio']}'
              and jaksotettu = '{$tunnus}'
              and tila       = 'R'";
    pupe_query($query);

    $query = "SELECT GROUP_CONCAT(DISTINCT tunnus) tunnukset
              FROM lasku
              WHERE yhtio    = '{$kukarow['yhtio']}'
              and jaksotettu = '{$tunnus}'";
    $lres = pupe_query($query);
    $lrow = mysql_fetch_assoc($lres);

    return $lrow["tunnukset"];
  }
}

if (!function_exists('sort_array_of_arrays')) {
  function sort_array_of_arrays(&$array, $subfield) {
    $sortarray = array();

    foreach ($array as $key => $row) {
      $sortarray[$key] = $row[$subfield];
    }

    array_multisort($sortarray, SORT_ASC, $array);
  }
}

if (!function_exists('pupesoft_log')) {
  function pupesoft_log($log_file, $log_message) {
    // tehd‰‰n full path tiedostoon
    $log_path  = is_dir('/home/devlab/logs') ? '/home/devlab/logs/' : '/tmp/';
    $full_path = $log_path . basename($log_file, '.log') . '.log';

    if (file_exists($full_path) and !is_writable($full_path)) {
      // echo "Tiedostoon {$full_path} ei pystynyt kirjoittamaan.";
      return;
    }

    // kirjoitetaan message logiiun
    $file_handle = fopen($full_path, 'a');

    if ($file_handle === false) {
      // echo "Tiedostoa {$full_path} ei pystynyt avaamaan.";
      return;
    }

    // varmistetaan tiedoston kirjotusoikeudet
    @chown($full_path, 'devlab');
    @chgrp($full_path, 'apache');
    @chmod($full_path, 0777);

    // tehd‰‰n full message, timestampilla
    $timestamp = date('d.m.y H:i:s');
    $full_message = "[{$timestamp}] " . $log_message . PHP_EOL;
    $full_message = utf8_encode($full_message);

    if (fwrite($file_handle, $full_message) === false) {
      // echo "Lokiviestin kirjoitus tiedostoon {$full_path} ep‰onnistui.";
      // ei returnia t‰ss‰, koska halutaan sulkea file_handle
    }

    fclose($file_handle);
  }
}

if (!function_exists('tilaus_aktiivinen_kayttajalla')) {
  function tilaus_aktiivinen_kayttajalla($tunnus) {
    global $kukarow;

    $query = "SELECT *
              FROM kuka
              WHERE yhtio  = '{$kukarow['yhtio']}'
              AND kesken   = '{$tunnus}'
              AND kesken  != 0";
    $result = pupe_query($query);

    return $result;
  }
}

if (!function_exists('tuoteperheen_lapsien_kertoimet')) {
  function tuoteperheen_lapsien_kertoimet($params) {
    global $yhtiorow, $kukarow;

    $isa_tuoteno = isset($params['isa_tuoteno']) ? $params['isa_tuoteno'] : null;
    $tyyppi      = isset($params['tyyppi'])      ? $params['tyyppi']      : 'P';
    $override    = isset($params['override'])    ? $params['override']    : false;

    $response = array();

    if (!$isa_tuoteno) return $response;


    $query = "SELECT
              tuote.kehahin,
              tuoteperhe.alekerroin,
              tuoteperhe.hintakerroin,
              tuoteperhe.hintatyyppi,
              tuoteperhe.kerroin,
              tuoteperhe.tuoteno
              FROM tuoteperhe
              JOIN tuote USING (yhtio, tuoteno)
              WHERE tuoteperhe.yhtio    = '{$kukarow['yhtio']}'
              AND tuoteperhe.tyyppi     = '{$tyyppi}'
              AND tuoteperhe.isatuoteno = '{$isa_tuoteno}'
              ORDER BY hintatyyppi DESC";
    $result = pupe_query($query);

    if (mysql_num_rows($result) == 0) {
      return $response;
    }

    // haetaan eka rivi
    $row = mysql_fetch_assoc($result);

    // onko meill‰ is‰tuotteeseen perustuva hinnoittelu
    $hinnoittelu_isatuotteella = $row['hintatyyppi'];

    // resultti alkuun
    mysql_data_seek($result, 0);

    $kokonaisarvo = 0;

    // lasketaan koko tuoteperheen kokonaisarvo, t‰t‰ tarvitaan arvokertoimen laskentaan
    // arvokerrointa k‰ytet‰‰n, mik‰li k‰ytˆss‰ on is‰tuotteen hintaan perustuva hinnoittelu
    if (!empty($hinnoittelu_isatuotteella) || $override) {
      while ($row = mysql_fetch_assoc($result)) {
        $kokonaisarvo += $row['kerroin'] * $row['kehahin'];
      }

      // resultti alkuun
      mysql_data_seek($result, 0);
    }

    while ($row = mysql_fetch_assoc($result)) {
      // jos hinnoitellaan is‰tuotteella
      // hintakerroin on lapsituotteen osuus kokonaisarvosta ja alekerroin ei ole k‰ytˆss‰
      if (!empty($hinnoittelu_isatuotteella) || $override) {
        $alekerroin   = 1;
        $hintakerroin = $row['kehahin'] / $kokonaisarvo;
      }
      else {
        $alekerroin   = $row['alekerroin'];
        $hintakerroin = $row['hintakerroin'];
      }

      $response[] = array(
        "alekerroin"   => (float) $alekerroin,
        "hintakerroin" => (float) $hintakerroin,
        "hintatyyppi"  => $hinnoittelu_isatuotteella,
        "kerroin"      => (float) $row['kerroin'],
        "tuoteno"      => $row['tuoteno'],
      );
    }

    return $response;
  }
}

if (!function_exists('url_or_text')) {
  function url_or_text($str) {
    $array = array("http://", "https://");

    foreach ($array as $a) {
      if (stripos($str, $a) !== false) {
        return "<a href='{$str}' target='_blank'>".t("Linkki")."</a>";
      }
    }

    return $str;
  }
}

if (!function_exists('poista_rivin_yhteensakommentti')) {
  function poista_rivin_yhteensakommentti($kommentti) {

    $sanakirja_kielet = array("fi" => "Suomi",
      "en" => "Englanti",
      "se" => "Ruotsi",
      "ee" => "Viro",
      "de" => "Saksa",
      "dk" => "Tanska",
      "no" => "Norja",
      "ru" => "Ven‰j‰");

    // Otetaan "yhteens‰kommentti" pois rivin kommentista
    foreach ($sanakirja_kielet as $sanakirja_kieli => $sanakirja_kieli_nimi) {
      $kommentti = preg_replace("/".t("yhteens‰", $sanakirja_kieli).": [0-9\.]* [A-Z]{3}\./", "", $kommentti);
    }

    return $kommentti;
  }
}

if (!function_exists('osaluettelo_hinta_tarkistus')) {
  function osaluettelo_hinta_tarkistus($tilausnumero, $rivitunnus = 0) {
    global $kukarow, $yhtiorow;

    $ale_query_select_lisa = generoi_alekentta_select('yhteen', 'M');
    $query_ale_lisa = generoi_alekentta('M');

    $rivilisa = "";

    if (!empty($rivitunnus)) {
      $rivilisa = " and tilausrivi.tunnus = $rivitunnus ";
    }

    $osaluettelovirhe = "";

    $query = "SELECT *,
              $ale_query_select_lisa aleyhteensa,
              (tilausrivi.varattu+tilausrivi.jt+tilausrivi.kpl) kpl,
              round(tilausrivi.hinta * (tilausrivi.varattu+tilausrivi.jt+tilausrivi.kpl) * {$query_ale_lisa},$yhtiorow[hintapyoristys]) rivihinta
              FROM tilausrivi
              WHERE yhtio = '$kukarow[yhtio]'
              and otunnus = '$tilausnumero'
              {$rivilisa}
              and tyyppi  != 'D'";
    $osare = pupe_query($query);

    while ($osarow = mysql_fetch_assoc($osare)) {
      $query = "SELECT sum(round(tuoteperhe.hintakerroin / if ('$yhtiorow[alv_kasittely]' = '' and {$osarow['alv']} < 500, (1+{$osarow['alv']}/100), 1) * tuoteperhe.kerroin * {$osarow['kpl']} * (1-{$osarow['aleyhteensa']}/100), $yhtiorow[hintapyoristys])) rivihinta
                FROM tuoteperhe
                JOIN tuote ON (tuoteperhe.yhtio=tuote.yhtio and tuoteperhe.tuoteno=tuote.tuoteno)
                WHERE tuoteperhe.yhtio    = '$kukarow[yhtio]'
                AND tuoteperhe.isatuoteno = '$osarow[tuoteno]'
                AND tuoteperhe.tyyppi     = 'O'
                ORDER BY tuote.tuoteno";
      $tuoteperhe_result = pupe_query($query);
      $tuoteperhe_row = mysql_fetch_assoc($tuoteperhe_result);

      if ($tuoteperhe_row["rivihinta"] !== NULL and $osarow["rivihinta"] != $tuoteperhe_row["rivihinta"]) {
        $osaluettelovirhe .= "&nbsp;<font class='error'>".t("HUOM: Tuotteen %s hinta (%s) on eri kuin osaluettelon summa (%s)!", "", $osarow["tuoteno"], $osarow["rivihinta"], $tuoteperhe_row["rivihinta"])."</font><br>";
      }
    }

    return $osaluettelovirhe;
  }
}

if (!function_exists('laskutettu_myyntitilaus_tulostusjonoon')) {
  function laskutettu_myyntitilaus_tulostusjonoon($tilausnumero) {
    global $kukarow, $yhtiorow, $pupe_root_polku;

    // Haetaan yrityksen ensimm‰inen normivarasto. Tallennetaan tilaus t‰h‰n varastoon
    $varasto_query = "SELECT tunnus
                      from varastopaikat
                      where yhtio = '$kukarow[yhtio]'
                      and tyyppi  = ''
                      order by alkuhyllyalue
                      limit 1";
    $varasto_res = pupe_query($varasto_query);
    $varasto_row = mysql_fetch_assoc($varasto_res);

    $query = "SELECT hyllyalue, hyllynro
              FROM tilausrivi
              WHERE yhtio    = '$kukarow[yhtio]'
              AND hyllyalue != ''
              AND hyllynro  != ''
              AND otunnus    = '$tilausnumero'";
    $edi_varastopaikka_res = pupe_query($query);
    $edi_varastopaikka_row = mysql_fetch_assoc($edi_varastopaikka_res);

    $tulostusalue = onkotulostusalueita(
      $edi_varastopaikka_row["hyllyalue"],
      $edi_varastopaikka_row["hyllynro"],
      $varasto_row['tunnus'],
      $kukarow['yhtio']
    );

    // Palautetaan tilaus takaisin "myyntitilaus ker‰ysjonossa"-tilaan,
    // lis‰t‰‰n p‰‰lle laskutuskielto varmuuden vuoksi
    $query = "UPDATE lasku SET
              mapvm        = now(),
              tila         = 'N',
              alatila      = 'A',
              chn          = '999',
              varasto      = '$varasto_row[tunnus]',
              sisviesti2   = trim(concat_ws('\n', 'Verkkokauppatilaus! Tilauksen tietoja ei saa muuttaa.', sisviesti2)),
              tulostusalue = '$tulostusalue'
              WHERE yhtio  = '$kukarow[yhtio]'
              AND tunnus   = '$tilausnumero'";
    $magento_maksettu_res = pupe_query($query);

    // haetaan tilauksen tiedot
    $query = "SELECT *
              FROM lasku
              WHERE tunnus = '$tilausnumero'
              AND yhtio = '$kukarow[yhtio]'";
    $result = pupe_query($query);
    $laskurow = mysql_fetch_assoc($result);

    // pit‰‰ nollata toimitettuaika riveille
    $query = "UPDATE tilausrivi SET
              toimitettu = '',
              toimitettuaika = ''
              WHERE yhtio = '$kukarow[yhtio]'
              AND otunnus = '$tilausnumero'";
    $result = pupe_query($query);

    // pit‰‰ nollata kerattyaika kaikille saldollisille tuotteille
    $query = "UPDATE tilausrivi SET
              keratty = '',
              kerattyaika  = ''
              WHERE yhtio  = '$kukarow[yhtio]'
              AND otunnus  = '$tilausnumero'
              AND keratty != 'saldoton'";
    $result = pupe_query($query);

    // ei haluta k‰sitell‰ t‰t‰ toista kertaa kassamyyntin‰, koska se est‰‰ splittauksen
    $kukarow["kassamyyja"] = "";
    $editilaus_kassalipas = "";

    // kutsutaan uudestaan tilaukselle tilaus-valmis, niin saadaan splitattua se varastoihin
    $silent = "SILENT";
    $tilausvalmiskutsuja = "EDITILAUS";

    require "tilaus-valmis.inc";
  }
}

if (!function_exists('tuoteperheiden_hintojen_paivitys')) {
  function tuoteperheiden_hintojen_paivitys($params) {
    global $yhtiorow, $kukarow;

    $isatunnukset = isset($params['isatunnukset']) ? $params['isatunnukset'] : array();
    $tyyppi       = isset($params['tyyppi'])       ? $params['tyyppi']       : 'P';
    $override     = isset($params['override'])     ? $params['override']     : false;

    // tutkittavat rivitunnukset pit‰‰ olla array
    if (!is_array($isatunnukset) or count($isatunnukset) == 0) {
      return;
    }

    foreach ($isatunnukset as $isa => $perhe) {

      $tunnukset = implode(", ", $perhe);

      // Haetaan kaikki is‰tuotteet
      $query = "SELECT *
                FROM tilausrivi
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = $isa
                AND perheid = tunnus";
      $result = pupe_query($query);
      $row = mysql_fetch_assoc($result);

      // katsotaan lapsien kertoimet
      $_params = array(
        'isa_tuoteno' => $row['tuoteno'],
        'tyyppi'      => $tyyppi,
        'override'    => $override,
      );
      $kertoimet = tuoteperheen_lapsien_kertoimet($_params);
      $laskettu_hinta = 0;

      $hinnoittelu_isatuotteella = (in_array($kertoimet[0]['hintatyyppi'], array('I', 'L')));

      // Jos meill‰ ei ole is‰tuotteeseen perustuva hinnoitelu, ei tarvitse tehd‰ mit‰‰n,
      // jos asetusta ei ole yliajettu parametreiss‰
      if ($hinnoittelu_isatuotteella === false && $override === false) {
        continue;
      }

      foreach ($kertoimet as $lapsituote) {
        // lasketaan lapsituotteen hinta is‰n hinnasta
        $hinta = round($row['hinta'] * $lapsituote['hintakerroin'], $yhtiorow['hintapyoristys']);
        $laskettu_hinta += ($hinta * $row['tilkpl'] * $lapsituote['kerroin']);

        // p‰ivitet‰‰n lapsituotteen hinta
        $query = "UPDATE tilausrivi SET
                  ale1         = '{$row['ale1']}',
                  ale2         = '{$row['ale2']}',
                  ale3         = '{$row['ale3']}',
                  erikoisale   = '{$row['erikoisale']}',
                  hinta        = '{$hinta}',
                  netto        = '{$row['netto']}'
                  WHERE yhtio  = '{$kukarow['yhtio']}'
                  AND tuoteno  = '{$lapsituote['tuoteno']}'
                  AND perheid  = '{$row['perheid']}'
                  AND tilkpl   = {$row['tilkpl']} * {$lapsituote['kerroin']}
                  AND tunnus  != perheid
                  AND tunnus   in ({$tunnukset})";
        pupe_query($query);
      }

      // p‰ivitet‰‰n is‰tuote nollaksi
      $query = "UPDATE tilausrivi SET
                ale1        = 0,
                ale2        = 0,
                ale3        = 0,
                erikoisale  = 0,
                hinta       = 0,
                netto       = ''
                WHERE yhtio = '{$kukarow['yhtio']}'
                AND tunnus  = {$row['tunnus']}";
      pupe_query($query);

      // katsotaan pyˆristysero
      $pyoristysero = $laskettu_hinta - ($row['hinta'] * $row['tilkpl']);

      // jos on pyˆristyseroa
      if ($pyoristysero != 0) {
          $nquery = "SELECT tunnus
                    FROM tilausrivi
                    WHERE yhtio = '{$kukarow['yhtio']}'
                    AND otunnus  = {$row['otunnus']}
                    AND perheid = '{$row['perheid']}'
                    AND hinta > 0 LIMIT 1";
          $nresult = pupe_query($nquery);
          $nrow = mysql_fetch_assoc($nresult);

        // Lis‰t‰‰n pyˆristys t‰m‰n perheen vikalle lapselle
        $query = "UPDATE tilausrivi SET
                  hinta       = round(hinta - ({$pyoristysero} / tilkpl), {$yhtiorow['hintapyoristys']})
                  WHERE yhtio = '{$kukarow['yhtio']}'
                  AND perheid = '{$row['perheid']}'
                  AND tunnus  = {$nrow['tunnus']}";
        pupe_query($query);
      }
    }
  }
}

if (!function_exists('pupesoft_a2ps')) {
  function pupesoft_a2ps($params) {

    $borders  = empty($params['borders'])  ? '0'        : $params['borders'];
    $chars    = empty($params['chars'])    ? '80'       : $params['chars'];
    $columns  = empty($params['columns'])  ? '1'        : $params['columns'];
    $filename = empty($params['filename']) ? ''         : $params['filename'];
    $major    = empty($params['major'])    ? 'rows'     : $params['major'];
    $margin   = empty($params['margin'])   ? '1'        : $params['margin'];
    $medium   = empty($params['medium'])   ? 'A4'       : $params['medium']; // a2ps --list=media
    $mode     = empty($params['mode'])     ? 'portrait' : $params['mode'];   // landscape or portrait

    if (empty($filename)) {
      return false;
    }

    // Tehd‰‰n kopio tiedostosta, ett‰ ei yliajeta alkuper‰ist‰
    $temp_file = tempnam("/tmp", "postscript");
    copy($filename, $temp_file);

    // Varmistetaan, ett‰ tiedosto on ISO formaatissa, koska a2ps ei tue UTF8 encoodausta
    if (PUPE_UNICODE) {
      exec("recode -f UTF-8..ISO-8859-15 '$temp_file'");
    }

    // konertoidaan postscriptiksi
    $out_file = tempnam("/tmp", "postscript") . ".ps";
    exec("a2ps -o {$out_file} --{$mode} --no-header --major={$major} --medium={$medium} --chars-per-line={$chars} --columns={$columns} --margin={$margin} --borders={$borders} $temp_file");

    // poistetaan sis‰inen temp file
    unlink($temp_file);

    // palautetaan polku uuteen .ps tiedostoon
    return $out_file;
  }
}

if (!function_exists('finvoice_pankki')) {
  function finvoice_pankki() {
    global $kukarow, $yhtiorow;

    switch ($yhtiorow["finvoice_senderintermediator"]) {
    case 'NDEAFIHH':
      $pankki = 'nordea';
      break;
    case 'DABAFIHH':
      $pankki = 'danske';
      break;
    case 'OKOYFIHH':
      $pankki = 'op';
      break;
    default:
      $pankki = null;
      break;
    }

    return $pankki;
  }
}

if (!function_exists('hae_toimitustapa')) {
  function hae_toimitustapa($toimitustapa_tunnus) {
    global $kukarow, $yhtiorow;

    $toimitustapa_tunnus = (int) $toimitustapa_tunnus;

    if (empty($toimitustapa_tunnus)) {
      return false;
    }

    $query = "SELECT *
              FROM toimitustapa
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND tunnus  = '{$toimitustapa_tunnus}'";
    $result = pupe_query($query);

    return mysql_fetch_assoc($result);
  }
}

if (!function_exists("pura_osaluettelot")) {
  function pura_osaluettelot($laskurow, $row, $laskutyyppi=0) {
    global $kukarow, $yhtiorow;

    $osaluettelo = array();

    if (!empty($row['laskutettu'])) {
      $maara = $row['kpl'];
    }
    else {
      $maara = $row['varattu']+$row['jt']+$row['kpl'];
    }

    // Korvataanko tilauksella oleva rivi osaluettelolla
    $query = "SELECT tuote.tuoteno, tuote.yksikko, tuote.nimitys,
              tuoteperhe.kerroin,
              tuoteperhe.hintakerroin myyntihinta,
              tuoteperhe.hintakerroin hinta,
              round(tuoteperhe.hintakerroin / if ('$yhtiorow[alv_kasittely]' = '' and {$row['alv']} < 500, (1+{$row['alv']}/100), 1) * tuoteperhe.kerroin * {$maara} * (1-{$row['aleyhteensa']}/100), $yhtiorow[hintapyoristys]) rivihinta,
              round(tuoteperhe.hintakerroin * if ('$yhtiorow[alv_kasittely]' != '' and {$row['alv']} < 500, (1+{$row['alv']}/100), 1) * tuoteperhe.kerroin * {$maara} * (1-{$row['aleyhteensa']}/100), $yhtiorow[hintapyoristys]) rivihinta_verollinen,
              ((tuoteperhe.hintakerroin / {$laskurow["vienti_kurssi"]}) / if ('$yhtiorow[alv_kasittely]'  = '' and {$row['alv']} < 500, (1+{$row['alv']}/100), 1) * tuoteperhe.kerroin * {$maara} * (1-{$row['aleyhteensa']}/100)) rivihinta_valuutassa,
              ((tuoteperhe.hintakerroin / {$laskurow["vienti_kurssi"]}) * if ('$yhtiorow[alv_kasittely]' != '' and {$row['alv']} < 500, (1+{$row['alv']}/100), 1) * tuoteperhe.kerroin * {$maara} * (1-{$row['aleyhteensa']}/100)) rivihinta_valuutassa_verollinen
              FROM tuoteperhe
              JOIN tuote ON (tuoteperhe.yhtio=tuote.yhtio and tuoteperhe.tuoteno=tuote.tuoteno)
              WHERE tuoteperhe.yhtio    = '$kukarow[yhtio]'
              AND tuoteperhe.isatuoteno = '$row[tuoteno]'
              AND tuoteperhe.tyyppi     = 'O'
              ORDER BY tuote.tuoteno";
    $tuoteperhe_result = pupe_query($query);

    if (mysql_num_rows($tuoteperhe_result) > 0) {
      while ($tuoteperhe_row = mysql_fetch_assoc($tuoteperhe_result)) {

        $lisarow = $row;

        $lisarow["tuoteno"] = $tuoteperhe_row["tuoteno"];
        $lisarow["nimitys"] = $tuoteperhe_row["nimitys"];
        $lisarow["yksikko"] = $tuoteperhe_row["yksikko"];

        $lisarow["hinta"] = $tuoteperhe_row["hinta"];
        $lisarow["myyntihinta"] = $tuoteperhe_row["myyntihinta"];
        $lisarow["rivihinta"] = $tuoteperhe_row["rivihinta"];
        $lisarow["rivihinta_verollinen"] = $tuoteperhe_row["rivihinta_verollinen"];
        $lisarow["rivihinta_valuutassa"] = $tuoteperhe_row["rivihinta_valuutassa"];
        $lisarow["rivihinta_valuutassa_verollinen"] = $tuoteperhe_row["rivihinta_valuutassa_verollinen"];

        $lisarow["tilkpl"] = $tuoteperhe_row["kerroin"]*$row["tilkpl"];
        $lisarow["varattu"] = $tuoteperhe_row["kerroin"]*$row["varattu"];
        $lisarow["jt"] = $tuoteperhe_row["kerroin"]*$row["jt"];
        $lisarow["kpl"] = $tuoteperhe_row["kerroin"]*$row["kpl"];

        if ($laskutyyppi == 21 or $laskutyyppi == 22) {
          $lisarow['kpl'] = $lisarow['kpl'] * 1;
          $lisarow['tilkpl'] = $lisarow['tilkpl'] * 1;
        }

        $osaluettelo[] = $lisarow;
      }
    }
    else {
      $osaluettelo[] = $row;
    }

    return $osaluettelo;
  }
}

if (!function_exists('product_statuses')) {
  function product_statuses() {
    return array(
      "A" => t("Aktiivi"),
      "E" => t("Ehdokastuote"),
      "P" => t("Poistettu"),
      "T" => t("Tilaustuote"),
      "X" => t("Poistuva tuote"),
    );
  }
}

if (!function_exists('product_status_options')) {
  function product_status_options($select = null) {
    $defaults = array();
    foreach (product_statuses() as $key => $value) {
      $defaults[$key] = "";
    }

    // jos k‰ytet‰‰n multiple-selecti‰, voidaan passata array, jossa esivalitut optionit
    if (is_array($select)) {
      $sel = $select + $defaults;
    }
    else {
      $sel = array($select => ' selected') + $defaults;
    }

    $options = "";
    foreach (product_statuses() as $key => $value) {
      $options .= "<option value='{$key}'{$sel[$key]}>{$value}</option>";
    }

    return $options;
  }
}

if (!function_exists("lisaa_vaihtoehtoinen_rahti_merkkijonoon")) {
  function lisaa_vaihtoehtoinen_rahti_merkkijonoon($merkkijono) {
    global $kukarow;

    $query = "SELECT group_concat(distinct concat('\'',selite,'\'')) vaihtoehtoinenrahti
              FROM avainsana
              WHERE yhtio = '{$kukarow['yhtio']}'
              AND laji    = 'VEHT_RAHTI'";
    $res = pupe_query($query);
    $row = mysql_fetch_assoc($res);

    if (!empty($row['vaihtoehtoinenrahti'])) {
      $merkkijono .= ", {$row['vaihtoehtoinenrahti']}";
    }

    return $merkkijono;
  }
}

if (!function_exists('humanize_ohjelma_moduli')) {
  function humanize_ohjelma_moduli($ohjelma_moduli) {
    $map = array(
      'pupesoft' => '',
      'magento'  => 'Verkkokauppa',
      'extranet' => 'Extranet',
    );

    if (!isset($map[strtolower($ohjelma_moduli)])) return '';

    return $map[strtolower($ohjelma_moduli)];
  }
}

if (!function_exists('tilausrivin_esisyotto')) {
  function tilausrivin_esisyotto($params) {
    global $kukarow, $yhtiorow;
    /*
    ###PARAMS###
    $tilausnumero
    $tuoteno
    $hinta_ajax
    $hintaesisyotetty
    $kpl
    $ale1
    $ale2
    $ale3
    $tilausrivi_alvillisuus
    netto
    alv
    */

    if (!isset($params['tilausnumero'])) return false;
    if (!isset($params['tuoteno'])) return false;
    if (!isset($params['hinta_ajax'])) return false;
    if (!isset($params['kpl'])) return false;

    $tilausnumero           = $params['tilausnumero'];
    $tuoteno                = $params['tuoteno'];
    $hinta_ajax             = str_replace(",", ".", $params['hinta_ajax']);
    $hinta_esisyotetty      = $params['hinta_esisyotetty'];
    $kpl                    = $params['kpl'];
    $ale1                   = $params['ale1'];
    $ale2                   = $params['ale2'];
    $ale3                   = $params['ale3'];
    $netto                  = $params['netto'];
    $alv                    = $params['alv'];
    $tilausrivi_alvillisuus = $params['tilausrivi_alvillisuus'];

    $lquery = "SELECT *
               FROM lasku
               WHERE yhtio = '{$kukarow['yhtio']}'
               AND tunnus  = '{$tilausnumero}'";
    $lresult  = pupe_query($lquery);
    $laskurow = mysql_fetch_assoc($lresult);

    $query = "SELECT *
              FROM tuote
              WHERE yhtio  = '{$kukarow['yhtio']}'
              and  tuoteno = '{$tuoteno}'";
    $aresult = pupe_query($query);
    $tuoterow = mysql_fetch_assoc($aresult);

    // Tutkitaan onko t‰m‰ myyty ulkomaan alvilla
    list($hinta_alehinta, $netto, $ale, $alehinta_alv, $alehinta_val) = alehinta($laskurow, $tuoterow, $kpl);

    if ($laskurow["valkoodi"] != '' and trim(strtoupper($laskurow["valkoodi"])) != trim(strtoupper($yhtiorow["valkoodi"])) and $laskurow["vienti_kurssi"] != 0) {
      $hinta_alehinta = hintapyoristys(laskuval($hinta_alehinta, $laskurow["vienti_kurssi"]));
    }

    if (trim($hinta_ajax) != '') {
      $hinta = $hinta_ajax;
    }
    elseif(trim($hinta_ajax) == '' and strpos($hinta_esisyotetty, "esisyotetty") === FALSE) {
      $hinta = $hinta_alehinta;
    }

    $ale_arr = array();

    for ($alepostfix = 1; $alepostfix <= $yhtiorow['myynnin_alekentat']; $alepostfix++) {
      $alename = 'ale'.$alepostfix;
      if (!empty($$alename)) {
        $ale_arr[$alename] = str_replace(',', '.', $$alename);
      }
    }

    // Rakennetaan syˆtetyist‰ aleista array,
    // jotta saadaan syˆtetyt alet talteen
    // ja osataan laskea niist‰ yksikkˆhinta ja rivihinta oikein
    $_ale = array();

    if ($ale1 != "") {
      $_ale["ale1"] = $ale1;
    }

    if ($ale2 != "") {
      $_ale["ale2"] = $ale2;
    }

    if ($ale3 != "") {
      $_ale["ale3"] = $ale3;
    }

    $ale_arr = !empty($_ale) ? $_ale : $ale;
    $ale_arr['netto'] = $netto;
    $ale_arr['erikoisale'] = 0;
    $ale_arr['erikoisale_saapuminen'] = 0;

    if ($yhtiorow['alv_kasittely'] == '') {
      $alv = trim($alv) == '' ? $tuoterow['alv'] : $alv;

      $alvillisuus = $hinta / (1 + $alv / 100);
    }
    else {
      $alvillisuus = $hinta;
    }

    // lis‰t‰‰n alvit (jos hintamuunnos p‰‰ll‰)
    if ($tuoterow['alv'] < 500 and isset($tilausrivi_alvillisuus) and $tilausrivi_alvillisuus == "E" and $yhtiorow["alv_kasittely"] == '' and $yhtiorow["alv_kasittely_hintamuunnos"] == 'o') {
      $alvillisuus = round($alvillisuus * (1+$tuoterow['alv']/100), 6);
    }
    // poistetaan alvit (jos hintamuunnos p‰‰ll‰)
    if ($tuoterow['alv'] < 500 and isset($tilausrivi_alvillisuus) and $tilausrivi_alvillisuus == "K" and $yhtiorow["alv_kasittely"] == 'o' and $yhtiorow["alv_kasittely_hintamuunnos"] == 'o') {
      $alvillisuus = round($alvillisuus / (1+$tuoterow['alv']/100), 6);
    }

    $kotisumma      = $hinta * $kpl * generoi_alekentta_php($ale_arr, 'M', 'kerto', 'ei_erikoisale');
    $kotisumma_kate = $alvillisuus * $kpl * generoi_alekentta_php($ale_arr, 'M', 'kerto', 'ei_erikoisale');
    $ykshinta       = $hinta * generoi_alekentta_php($ale_arr, 'M', 'kerto', 'ei_erikoisale');

    $arr = array(
      'sarjanumeroseuranta' => '',
      'tuoteno' => $tuoteno,
      'varattu' => $kpl,
      'jt' => 0,
    );

    $kate = laske_tilausrivin_kate($arr, $kotisumma_kate, $tuoterow['kehahin']);

    return array(
        'hinta' => $hinta,
        'netto' => $netto,
        'ale' => $ale_arr,
        'kate' => $kate,
        'ykshinta' => round($ykshinta, $yhtiorow['hintapyoristys']),
        'rivihinta' => round($kotisumma, $yhtiorow['hintapyoristys'])
    );
  }
}

if (!function_exists("laskun_hyvaksyjia")) {
  function laskun_hyvaksyjia() {
    global $kukarow, $yhtiorow;

    $query = " SELECT count(*) kpl
               FROM kuka
               WHERE yhtio = '$kukarow[yhtio]'
               AND hyvaksyja != ''
               AND extranet = ''";
    $hyv_res = pupe_query($query);
    $hyv_row = mysql_fetch_assoc($hyv_res);

    if ($hyv_row['kpl'] > 0) {
      return true;
    }
    else {
      return false;
    }
  }
}

if (!function_exists("viennin_lisatiedot")) {
  function viennin_lisatiedot($otunnus, $viennin_lisatietojen_automsyotto) {
    global $kukarow, $yhtiorow;

    $from_viennin_lisatiedot_funktio = True;
    $tee = 'L';

    $query = "SELECT *
              FROM lasku
              WHERE tunnus = $otunnus
              and tila = 'L'
              AND vienti  in ('K','E')
              and yhtio = '$kukarow[yhtio]'";
    $result = pupe_query($query);
    $laskurow = mysql_fetch_assoc($result);

    if (empty($laskurow)) {
      return;
    }

    $query = "SELECT sum(kollit) kollit, sum(kilot) kilot
              FROM rahtikirjat
              WHERE otsikkonro = $otunnus
              and yhtio = '$kukarow[yhtio]'";
    $result = pupe_query($query);
    $rahtirow = mysql_fetch_assoc($result);

    if ($laskurow["bruttopaino"] == 0) $laskurow["bruttopaino"] = $rahtirow["kilot"];

    $query = "SELECT *
              from asiakas
              WHERE yhtio = '$kukarow[yhtio]'
              and tunnus = '$laskurow[liitostunnus]'";
    $result = pupe_query($query);
    $asiakasrow = mysql_fetch_assoc($result);

    if (!$viennin_lisatietojen_automsyotto or ($viennin_lisatietojen_automsyotto and ($asiakasrow["vientitietojen_autosyotto"] == "K" or
      $yhtiorow["vientitietojen_autosyotto"]  == "K"))) {
      // otetaan defaultit asiakkaalta jos laskulla ei ole mit‰‰n
      if ($laskurow["poistumistoimipaikka_koodi"]       == "") $laskurow["poistumistoimipaikka_koodi"]       = $asiakasrow["poistumistoimipaikka_koodi"];
      if ($laskurow["kuljetusmuoto"]                    ==  0) $laskurow["kuljetusmuoto"]                    = $asiakasrow["kuljetusmuoto"];
      if ($laskurow["kauppatapahtuman_luonne"]          ==  0) $laskurow["kauppatapahtuman_luonne"]          = $asiakasrow["kauppatapahtuman_luonne"];
      if ($laskurow["aktiivinen_kuljetus_kansallisuus"] == "") $laskurow["aktiivinen_kuljetus_kansallisuus"] = $asiakasrow["aktiivinen_kuljetus_kansallisuus"];
      if ($laskurow["aktiivinen_kuljetus"]              == "") $laskurow["aktiivinen_kuljetus"]              = $asiakasrow["aktiivinen_kuljetus"];
      if ($laskurow["kontti"]                           ==  0) $laskurow["kontti"]                           = $asiakasrow["kontti"];
      if ($laskurow["sisamaan_kuljetusmuoto"]           ==  0) $laskurow["sisamaan_kuljetusmuoto"]           = $asiakasrow["sisamaan_kuljetusmuoto"];
      if ($laskurow["sisamaan_kuljetus_kansallisuus"]   == "") $laskurow["sisamaan_kuljetus_kansallisuus"]   = $asiakasrow["sisamaan_kuljetus_kansallisuus"];
      if ($laskurow["sisamaan_kuljetus"]                == "") $laskurow["sisamaan_kuljetus"]                = $asiakasrow["sisamaan_kuljetus"];
      if ($laskurow["maa_maara"]                        == "") $laskurow["maa_maara"]                        = $asiakasrow["maa_maara"];

      $maa_maara = $laskurow["maa_maara"];

      if ($laskurow["vienti"] == "K") {
        $sisamaan_kuljetus = $laskurow["sisamaan_kuljetus"];
        $sisamaan_kuljetus_kansallisuus = $laskurow["sisamaan_kuljetus_kansallisuus"];
        $sisamaan_kuljetusmuoto = $laskurow["sisamaan_kuljetusmuoto"];
        $kontti = $laskurow["kontti"];
        $aktiivinen_kuljetus = $laskurow["aktiivinen_kuljetus"];
        $aktiivinen_kuljetus_kansallisuus = $laskurow["aktiivinen_kuljetus_kansallisuus"];
      }

      $kauppatapahtuman_luonne = $laskurow["kauppatapahtuman_luonne"];
      $kuljetusmuoto = $laskurow["kuljetusmuoto"];

      if ($laskurow["vienti"] == "K") {
        $vresult = t_avainsana("TULLI");

        while ($vrow = mysql_fetch_assoc($vresult)) {
          if ($laskurow["poistumistoimipaikka_koodi"] == $vrow["selite"]) {
            $poistumistoimipaikka = "$vrow[selitetark]##$vrow[selite]";
          }
        }

        if ($laskurow["lisattava_era"] == 0) {
          $laskurow["lisattava_era"] = $yhtiorow["tulli_lisattava_era"];
        }
        if ($laskurow["vahennettava_era"] == 0) {
          $laskurow["vahennettava_era"] = $yhtiorow["tulli_vahennettava_era"];
        }

        $vahennettava_era = $laskurow["vahennettava_era"];
        $lisattava_era = $laskurow["lisattava_era"];
      }

      $bruttopaino = $laskurow["bruttopaino"];
      $lomake_lisatiedot = $laskurow["comments"];
      $aiotut_rajatoimipaikat = $laskurow["aiotut_rajatoimipaikat"];
      $maaratoimipaikka = $laskurow["maaratoimipaikka"];

      # P‰ivitet‰‰n viennin lis‰tiedot
      require "tilauskasittely/vientitilauksen_lisatiedot.php";

      $query = "SELECT alatila
                FROM lasku
                WHERE tunnus = $otunnus
                and tila = 'L'
                AND vienti  in ('K','E')
                and yhtio = '$kukarow[yhtio]'";
      $result = pupe_query($query);
      $alatila = mysql_fetch_assoc($result);
    }

    return $alatila['alatila'];
  }
}

if (!function_exists('kpl_ruudulle')) {
  function kpl_ruudulle($row, $laskurow, $asiakasrow) {
    global $kukarow, $yhtiorow;

    // $row = tilausrivi
    if (in_array($row["var"], array('S', 'U', 'T', 'R', 'J'))) {
      if ($yhtiorow["varaako_jt_saldoa"] == "") {
        $kpl_ruudulle = $row['jt'] * 1;
      }
      else {
        $kpl_ruudulle = ($row['jt']+$row['varattu']) * 1;
      }
    }
    elseif ($row["var"] == 'P' or
      ($kukarow['extranet'] != '' and $row['positio'] == 'Ei varaa saldoa') or
      ((($asiakasrow['extranet_tilaus_varaa_saldoa'] == "" and
            $yhtiorow["extranet_tilaus_varaa_saldoa"] == "E") or
          $asiakasrow["extranet_tilaus_varaa_saldoa"] == "E") and
        ($laskurow["tilaustyyppi"] == "H"))
    ) {
      $kpl_ruudulle = $row['tilkpl'] * 1;
    }
    else {
      $kpl_ruudulle = $row['varattu'] * 1;
    }

    return $kpl_ruudulle;
  }
}

if (!function_exists("laske_korko")) {
  function laske_korko(Array $params) {
    global $kukarow, $yhtiorow;

    $tunnukset    = empty($params['tunnukset'])    ? null : $params['tunnukset'];
    $liitostunnus = empty($params['liitostunnus']) ? null : $params['liitostunnus'];
    $tapvm        = empty($params['tapvm'])        ? null : $params['tapvm'];

    if (isset($liitostunnus) and isset($tapvm)) {
      $where_lisa = "AND l.liitostunnus in ({$liitostunnus})
                     AND t.tapvm <= '{$tapvm}'
                     AND l.olmapvm = '{$tapvm}'
                     AND l.mapvm > '0000-00-00'";
    }
    elseif (isset($tunnukset)) {
      $where_lisa = "AND l.tunnus in ({$tunnukset})";
    }
    else {
      return array();
    }

    $query = "SELECT l.tunnus,
              l.liitostunnus,
              t.summa * -1 as summa,
              l.erpcm,
              l.yhtio_toimipaikka,
              l.laskunro,
              t.tapvm as mapvm,
              l.tapvm as tapvm,
              l.viikorkopros,
              to_days(t.tapvm) - to_days(l.erpcm) as ika,
              round(l.viikorkopros * t.summa * -1 * (to_days(t.tapvm) - to_days(l.erpcm)) / 36500, 2) as korkosumma,
              l.maksuehto
              FROM lasku l
              JOIN tiliointi t on (t.yhtio = l.yhtio AND t.ltunnus = l.tunnus)
              WHERE l.yhtio = '{$kukarow['yhtio']}'
              AND l.tila = 'U'
              AND t.tilino in ('{$yhtiorow['myyntisaamiset']}', '{$yhtiorow['factoringsaamiset']}')
              AND t.tapvm > l.erpcm
              {$where_lisa}
              ORDER BY l.laskunro, t.tapvm";
    $result = pupe_query($query);

    $korkorivit = array();

    while ($korkorow = mysql_fetch_assoc($result)) {
      $korkorivit[] = $korkorow;
    }

    return $korkorivit;
  }
}

if (!function_exists("tilauksen_seurantalinkit")) {
  function tilauksen_seurantalinkit(Array $lasku_ids) {
    global $kukarow, $yhtiorow;
    global $unifaun_url_key, $dpdtun, $dpdss;

    // kaikki arrayn elementit tulee olla numeerisia
    $tunnukset = array_filter($lasku_ids, 'is_numeric');

    if (count($tunnukset) < 1) {
      return array();
    }

    // funktio palauttaa vastaukseksi array of arrays
    $seurantakoodit = array(
      // array(
      //   'id'   => rahtikirjan numero,
      //   'link' => linkki rahtikirjan seurantaan,
      // ),
    );

    $tunnukset = implode(',', $tunnukset);

    // haetaan tilauksien rahtikirjat
    $query = "SELECT
              lasku.toimitustapa,
              lasku.tunnus as tilausnumero,
              rahtikirjat.rahtikirjanro,
              rahtikirjat.sscc_ulkoinen,
              toimitustapa.rahtikirja,
              toimitustapa.virallinen_selite,
              asiakas.kieli,
              sum(rahtikirjat.kollit) as kollit
              FROM rahtikirjat
              JOIN lasku on (lasku.tunnus = rahtikirjat.otsikkonro)
              JOIN asiakas on (asiakas.tunnus = lasku.liitostunnus)
              JOIN toimitustapa on (toimitustapa.yhtio = rahtikirjat.yhtio
                AND toimitustapa.selite = lasku.toimitustapa)
              WHERE rahtikirjat.yhtio = '{$kukarow['yhtio']}'
              AND rahtikirjat.otsikkonro IN ({$tunnukset})
              GROUP BY 1,2,3,4,5,6,7";
    $result = pupe_query($query);

    while ($row = mysql_fetch_assoc($result)) {
      $kieli             = strtolower($kukarow['kieli']);
      $kollit            = $row['kollit'];
      $rahtikirja        = strtolower($row['rahtikirja']);
      $rahtikirjanro     = empty($row['sscc_ulkoinen']) ? $row['rahtikirjanro'] : $row['sscc_ulkoinen'];
      $tilausnumero      = $row['tilausnumero'];
      $toimitustapa      = strtolower($row['toimitustapa']);
      $virallinen_selite = strtolower($row['virallinen_selite']);

      // ei rahtikirjanumeroa, ei tehd‰ mit‰‰n
      if (empty($rahtikirjanro)) {
        continue;
      }

      // selvitet‰‰n rahtikirjan tyyppi
      $delisprint = (!empty($dpdtun) and empty($dpdss) and ($rahtikirja == 'rahtikirja_dpd_siirto.inc' or $rahtikirja == 'rahtikirja_dpd.inc'));
      $dpd        = (stripos($virallinen_selite, "dpd") !== false);
      $posti      = (stripos($rahtikirjanro, 'jjfi') !== false);
      $postnord   = (preg_match("/(mypack|postnord)/i", $toimitustapa) === 1);
      $schenker   = (stripos($virallinen_selite, "klgrp") !== false);
      $unifaun    = (stripos($rahtikirja, "unifaun") !== false and !empty($unifaun_url_key));
      $ups        = (stripos($rahtikirjanro, 'ups') !== false);
      $kaukokiito = (strtoupper($virallinen_selite) == "KKSTD");
      $matkahuolto  = (stripos($virallinen_selite, "MH") !== false);

      // dpd unifaunin kautta
      if ($dpd and $unifaun) {
        foreach (explode("\n", $rahtikirjanro) as $rakirno) {
          if (empty($rakirno)) {
            continue;
          }

          if ($kukarow["extranet"] == "" and $dpdtun != '' and $dpdss != '') {
            $link = "https://{$dpdtun}:{$dpdss}@extranet.dpd.de/cgi-bin/delistrack?typ=2&lang={$kieli}&pknr={$rakirno}";
          }
          else {
            $link = "https://extranet.dpd.de/cgi-bin/delistrack?typ=2&lang={$kieli}&pknr={$rakirno}";
          }

          $seurantakoodit[] = array(
            "id" => $rakirno,
            "link" => $link,
          );
        }
      }
      // posti
      elseif ($posti) {
        preg_match_all("/JJFI ?[0-9]{6} ?[0-9]{11}/", $rahtikirjanro, $match);

        foreach ($match[0] as $nro) {
          $nro = str_replace(' ', '', $nro);
          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "http://www.posti.fi/henkiloasiakkaat/seuranta/#/lahetys/{$nro} \n",
          );
        }
      }
      // postnord
      elseif ($postnord) {
        foreach (explode(' ', $rahtikirjanro) as $nro) {
          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "http://www.postnord.fi/asiakaspalvelu/sahkoinen-asiointi/lahetysten-seuranta#dynamicloading=true&shipmentid={$nro}",
          );
        }
      }
      // UPS
      elseif ($ups) {
        preg_match_all("/UPS:([0-9A-Z]+)/", $rahtikirjanro, $match);

        foreach ($match[1] as $nro) {
          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "http://wwwapps.ups.com/etracking/tracking.cgi?InquiryNumber1={$nro}&TypeOfInquiryNumber=T&AcceptUPSLicenseAgreement=yes&submit=Trac&loc={$kieli}_{$kieli}",
          );
        }
      }
      // delisprint
      elseif ($delisprint) {
        for ($dpdi = 1; $dpdi < $kollit + 1; $dpdi++) {
          $sscc = 1;
          $sscc .= sprintf("%08.8s", $yhtiorow["ytunnus"]);
          $sscc .= sprintf('%06.6s', substr($rahtikirjanro, -6));
          $sscc .= sprintf('%02.2s', $dpdi);
          $sscc .= sscc_tarkiste($sscc);

          $seurantakoodit[] = array(
            "id" => $sscc,
            "link" => "http://{$dpdtun}:{$dpdss}@tracking.dpd.de/cgi-bin/delistrack.acl?typ=4&pknr={$sscc}",
          );
        }
      }
      // schenker kotimaankuljetukset
      elseif ($schenker) {
        foreach (explode("\n", $rahtikirjanro) as $nro) {
          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "https://was.schenker.nu/ctts-a/com.dcs.servicebroker.http.HttpXSLTServlet?request.service=CTTSTYPEA&request.method=search&clientid=&language={$kieli}&country=FI&reference_type=*PKG&reference_number={$nro}"
          );
        }
      }
      elseif ($kaukokiito) {
        $_i = 0;
        foreach (explode("\n", $row['rahtikirjanro']) as $nro) {

          $_i++;
          // skipataan ensimm‰inen (Pupen generoima numero)
          if ($_i == 1) continue;

          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "http://kaukoputki.kaukokiito.fi/kaukokiito/ordermonitor?findOrders=&searchId={$nro}"
          );
        }
      }
      elseif ($matkahuolto) {
        $_i = 0;
        foreach (explode("\n", $row['rahtikirjanro']) as $nro) {

          $_i++;
          // skipataan ensimm‰inen (Pupen generoima numero)
          if ($_i == 1) continue;

          $seurantakoodit[] = array(
            "id" => $nro,
            "link" => "https://www.matkahuolto.fi/seuranta/tilanne/?package_code={$nro}"
          );
        }
      }
      // unifaun ja mittoihin perustuvat ker‰yser‰t ei ole k‰ytˆss‰
      elseif ($unifaun and $yhtiorow['kerayserat'] != 'K') {

        if (strpos($_SERVER['SCRIPT_NAME'], "asiakkaantilaukset.php") !== FALSE) {
          $row['kieli'] = $kukarow['kieli'];
        }

        if ($row['kieli'] == 'en') {
          $_kieli = "gb.";
        }
        elseif ($row['kieli'] == 'se') {
          $_kieli = "se.";
        }
        else {
          $_kieli = "fi.";
        }

        foreach (explode("\n", $rahtikirjanro) as $rakirno) {
          if (empty($rakirno)) {
            continue;
          }

          $seurantakoodit[] = array(
            "id" => $rakirno,
            "link" => "https://www.unifaunonline.com/ext.uo.fi.{$_kieli}track?key={$unifaun_url_key}&order={$tilausnumero}",
          );
        }
      }
      // meill‰ ei ole t‰lle rahtikirjalle seurantalinkki‰
      else {
        $seurantakoodit[] = array(
          "id" => $rahtikirjanro,
          "link" => "",
        );
      }
    }

    // palautetaan seurantakoodit
    return $seurantakoodit;
  }
}

if (!function_exists('sscc_tarkiste')) {
  function sscc_tarkiste($sscc) {
    $kerroin = 3; // kerroin aluks 3
    $summa   = 0; // summa nolla tietty

    // loopataan luvut oikeelta vasemmalle
    for ($i = 16; $i >= 0; $i--) {
      $summa += $kerroin * (ord($sscc{$i})-48); // lis‰t‰‰n summaan ko. luku * kerroin (t‰‰ hanskaa kirjaimet )
      $kerroin = 4 - $kerroin; // kerroin on vuorotellen 3 tai 1
    }

    $sscc = ceil($summa / 10) * 10 - $summa; // tarkiste on luku mik‰ pit‰‰ lis‰t‰, ett‰ p‰‰st‰‰n seuraavaan tasakymmeneen

    return $sscc;
  }
}

/**
 * Hakee kaikki yhtion pankkiyhteydet tietokannasta ja lisaa pankin nimen palautettavaan arrayhyn
 *
 * @return array
 */
if (!function_exists('hae_pankkiyhteydet')) {
  function hae_pankkiyhteydet() {
    global $kukarow, $yhtiorow;

    $luodut_pankkiyhteydet = array();
    $tuetut_pankit = tuetut_pankit();

    $query = "SELECT *
              FROM pankkiyhteys
              WHERE yhtio = '{$kukarow['yhtio']}'";
    $result = pupe_query($query);

    while ($rivi = mysql_fetch_assoc($result)) {
      $rivi["pankin_nimi"] = $tuetut_pankit[$rivi["pankki"]]["nimi"];
      array_push($luodut_pankkiyhteydet, $rivi);
    }

    return $luodut_pankkiyhteydet;
  }
}

/**
 * Palauttaa arrayn tuetuista pankeista muodossa BIC => [lyhyt_nimi, pitka_nimi]
 *
 * @return array
 */
if (!function_exists('tuetut_pankit')) {
  function tuetut_pankit() {
    return array(
      "NDEAFIHH" => array(
        "nimi"       => "Nordea",
        "lyhyt_nimi" => "nordea"
      ),
      "DABAFIHH" => array(
        "nimi"       => "Danske Bank",
        "lyhyt_nimi" => "danske"
      ),
      "OKOYFIHH" => array(
        "nimi"       => "OP",
        "lyhyt_nimi" => "op",
      ),
      "HELSFIHH" => array(
        "nimi"       => "Aktia",
        "lyhyt_nimi" => "aktia",
      ),
      "ITELFIHH" => array(
        "nimi"       => "S‰‰stˆpankki",
        "lyhyt_nimi" => "sp",
      ),
      "POPFFI22" => array(
        "nimi"       => "POP Pankki",
        "lyhyt_nimi" => "pop",
      ),
      "HANDFIHH" => array(
        "nimi"       => "Handelsbanken",
        "lyhyt_nimi" => "shb",
      ),
    );
  }
}

if (!function_exists('finvoice_myyntilaskuksi_valitse_maksuehto')) {
  function finvoice_myyntilaskuksi_valitse_maksuehto($laskun_maksuehtoteksti, $laskun_erapaiva, $laskun_lapvm) {
    global $kukarow, $yhtiorow;

    $maksuaika_sek = strtotime($laskun_lapvm) - strtotime($laskun_erapaiva);

    if (!empty($maksuaika_sek)) {
      $maksuaika = round($maksuaika_sek/86400);

      $query = "SELECT *
                FROM maksuehto
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND rel_pvm = '$maksuaika'
                AND kassa_relpvm = '0'";
      $maksuehtores = pupe_query($query);

      if (mysql_num_rows($maksuehtores) == 0) {
        $query = "SELECT *
                  FROM maksuehto
                  WHERE yhtio = '{$yhtiorow['yhtio']}'
                  AND rel_pvm = '0'
                  AND kassa_relpvm = '0'";
        $maksuehtores = pupe_query($query);
      }

      if (mysql_num_rows($maksuehtores) == 1) {
        return mysql_fetch_assoc($maksuehtores);
      }
      return False;
    }
    else {
      // Haetaan maksuehdon nimell‰
      $query = "SELECT *
                FROM maksuehto
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND teksti = '$laskun_maksuehtoteksti'";
      $maksuehtores = pupe_query($query);

      if (mysql_num_rows($maksuehtores) == 1) {
        return mysql_fetch_assoc($maksuehtores);
      }
    }
  }
}

if (!function_exists('finvoice_myyntilaskuksi_valitse_asiakas')) {
  function finvoice_myyntilaskuksi_valitse_asiakas($toim_asiakkaantiedot, $ostaja_asiakkaantiedot, $laskun_asiakaspupetunnus) {
    global $kukarow, $yhtiorow;

    if (!empty($laskun_asiakaspupetunnus)) {
      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND tunnus = '{$laskun_asiakaspupetunnus}'";
      $result = pupe_query($query);
      #echo "$query\n\n";
    }
    else {
      $ytunnus = str_replace("-", "", $ostaja_asiakkaantiedot['ytunnus']);

      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                AND concat_ws(' ', nimi, nimitark) = '{$ostaja_asiakkaantiedot['nimi']}'
                AND osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                AND postino = '{$ostaja_asiakkaantiedot["postino"]}'
                AND postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                AND concat_ws(' ', toim_nimi, toim_nimitark) = '{$toim_asiakkaantiedot['nimi']}'
                AND toim_osoite = '{$toim_asiakkaantiedot["osoite"]}'
                AND toim_postino = '{$toim_asiakkaantiedot["postino"]}'
                AND toim_postitp = '{$toim_asiakkaantiedot["postitp"]}'
                AND laji != 'P'";
      $result = pupe_query($query);
      #echo "$query\n\n";
    }

    if (mysql_num_rows($result) != 1) {
      $ytunnus = str_replace("-", "", $ostaja_asiakkaantiedot['ytunnus']);

      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                AND concat_ws(' ', nimi, nimitark) = '{$ostaja_asiakkaantiedot['nimi']}'
                AND osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                AND postino = '{$ostaja_asiakkaantiedot["postino"]}'
                AND postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                AND laji != 'P'";
      $result = pupe_query($query);
      #echo "$query\n\n";
    }

    if (mysql_num_rows($result) != 1) {
      $ytunnus = str_replace("-", "", $ostaja_asiakkaantiedot['ytunnus']);

      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                AND concat_ws(' ', nimi, nimitark) = '{$ostaja_asiakkaantiedot['nimi']}'
                AND osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                AND postino = '{$ostaja_asiakkaantiedot["postino"]}'
                AND postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                AND toim_nimi = ''
                AND toim_osoite = ''
                AND toim_postino = ''
                AND toim_postitp = ''
                AND laji != 'P'";
      $result = pupe_query($query);
      #echo "$query\n\n";
    }

    if (mysql_num_rows($result) != 1) {
      # Haiskahtaako laskutusosoitteelta?
      $ytunnus = str_replace("-", "", $ostaja_asiakkaantiedot['ytunnus']);

      # Odoossa on t‰ss‰ tapauksessa ostajan nimen‰: "ostajan nimi, laskutusoositteen nimi", eli j‰tet‰‰n se pois ehdoista
      # ja toimitusositteessa joko toimitusosite tai ostajan osoite jos toimitusositetta ei ole

      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                AND laskutus_osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                AND laskutus_postino = '{$ostaja_asiakkaantiedot["postino"]}'
                AND laskutus_postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                AND concat_ws(' ', toim_nimi, toim_nimitark) = '{$toim_asiakkaantiedot['nimi']}'
                AND toim_osoite = '{$toim_asiakkaantiedot["osoite"]}'
                AND toim_postino = '{$toim_asiakkaantiedot["postino"]}'
                AND toim_postitp = '{$toim_asiakkaantiedot["postitp"]}'
                AND laji != 'P'";
      $result = pupe_query($query);
      #echo "$query\n\n";

      if (mysql_num_rows($result) != 1) {
        $query = "SELECT *
                  FROM asiakas
                  WHERE yhtio = '{$yhtiorow['yhtio']}'
                  AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                  AND laskutus_osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                  AND laskutus_postino = '{$ostaja_asiakkaantiedot["postino"]}'
                  AND laskutus_postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                  AND concat_ws(' ', nimi, nimitark) = '{$toim_asiakkaantiedot['nimi']}'
                  AND osoite = '{$toim_asiakkaantiedot["osoite"]}'
                  AND postino = '{$toim_asiakkaantiedot["postino"]}'
                  AND postitp = '{$toim_asiakkaantiedot["postitp"]}'
                  AND toim_nimi = ''
                  AND toim_osoite = ''
                  AND toim_postino = ''
                  AND toim_postitp = ''
                  AND laji != 'P'";
        $result = pupe_query($query);
        #echo "$query\n\n";
      }

      if (mysql_num_rows($result) != 1) {
        $query = "SELECT *
                  FROM asiakas
                  WHERE yhtio = '{$yhtiorow['yhtio']}'
                  AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                  AND laskutus_osoite = '{$ostaja_asiakkaantiedot["osoite"]}'
                  AND laskutus_postino = '{$ostaja_asiakkaantiedot["postino"]}'
                  AND laskutus_postitp = '{$ostaja_asiakkaantiedot["postitp"]}'
                  AND concat_ws(' ', nimi, nimitark) = '{$toim_asiakkaantiedot['nimi']}'
                  AND osoite = '{$toim_asiakkaantiedot["osoite"]}'
                  AND postino = '{$toim_asiakkaantiedot["postino"]}'
                  AND postitp = '{$toim_asiakkaantiedot["postitp"]}'
                  AND laji != 'P'";
        $result = pupe_query($query);
        #echo "$query\n\n";
      }
    }

    if (mysql_num_rows($result) != 1 and !empty($ostaja_asiakkaantiedot['ytunnus'])) {
      $ytunnus = str_replace("-", "", $ostaja_asiakkaantiedot['ytunnus']);

      $query = "SELECT *
                FROM asiakas
                WHERE yhtio = '{$yhtiorow['yhtio']}'
                AND REPLACE(ytunnus, '-', '') = '{$ytunnus}'
                AND laji != 'P'";
      $result = pupe_query($query);
      #echo "$query\n\n";
    }

    if (mysql_num_rows($result) == 1) {
      return mysql_fetch_assoc($result);
    }
    return False;
  }
}

if (!function_exists('toimita_kaikki_tarkistus')) {
  function toimita_kaikki_tarkistus($toimita_kaikki, $result, $laskurow, $asiakasrow, $muokkauslukko, $muokkauslukko_rivi) {
    global $kukarow, $yhtiorow;

    while ($row = mysql_fetch_assoc($result)) {
      # tilausrivi on lukossa jos
      # se on laskutettu
      # tilausrivi ei kuulu kyseiseen tilaukseen
      # tilaus on valmistus ja rivi on valmistettu / k‰ytetty valmistukseen
      if ($row["uusiotunnus"] > 0 or $laskurow["tunnus"] != $row["otunnus"] or ($laskurow["tila"] == "V" and $row["kpl"] != 0)) {
        $muokkauslukko_rivi = "LUKOSSA";
      }
      else {
        $muokkauslukko_rivi = "";
      }

      # tehd‰‰n loput tarkistukset riville jos
      # tilauksen muokkauslukko tai rivin muokkauslukko ei ole p‰‰ll‰
      if ($muokkauslukko == "" and $muokkauslukko_rivi == "") {
        require 'tarkistarivi.inc';

        $kpl_ruudulle = kpl_ruudulle($row, $laskurow, $asiakasrow);

        // Jos JT-rivit varaa saldoa, niin ei anneta t‰n kyseisen rivin syˆd‰ omaa saldoaan.
        if ($yhtiorow["varaako_jt_saldoa"] != "") {
          $_jt_tm_lisavarattu = $kpl_ruudulle;
        }
        else {
          $_jt_tm_lisavarattu = 0;
        }

        # laitetaan tilausrivin tunnus talteen "toimita kaikki"-nappia varten jos
        # tilausrivi on j‰lkitoimitus
        # tuote on saldoton
        # k‰ytt‰j‰ ei ole extranet-k‰ytt‰j‰
        # tuotepaikan myyt‰viss‰m‰‰r‰ + "varaako jt-rivi saldoa" >= tilausrivin varattum‰‰r‰
        if ($row["var"] == "J" and (($row["ei_saldoa"] != "" or ($selpaikkamyytavissa + $_jt_tm_lisavarattu) >= $kpl_ruudulle) and $kukarow['extranet'] == '')) {
          $toimita_kaikki[] = $row['tunnus'];
        }
      }
    }

    return $toimita_kaikki;
  }
}
