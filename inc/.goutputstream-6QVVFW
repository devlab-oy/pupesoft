<?php

if (! function_exists ( "pupe_query" )) {
	function pupe_query($query, $link = NULL) {
		
		if (isset ( $GLOBALS ["pupe_query_debug"] ) and $GLOBALS ["pupe_query_debug"] > 0) {
			$timeparts = explode ( " ", microtime () );
			$starttime = $timeparts [1] . substr ( $timeparts [0], 1 );
		}
		
		if (is_resource ( $link )) {
			$res = mysql_query ( $query, $link ) or pupe_error ( $query );
		} else {
			$res = mysql_query ( $query ) or pupe_error ( $query );
		}
		
		if (isset ( $GLOBALS ["pupe_query_debug"] ) and $GLOBALS ["pupe_query_debug"] > 0) {
			$timeparts = explode ( " ", microtime () );
			$endtime = $timeparts [1] . substr ( $timeparts [0], 1 );
			$aika = round ( $endtime - $starttime, 4 );
			$GLOBALS ["aika_debug_array"] [] = $aika;
			$GLOBALS ["quer_debug_array"] [] = $query;
		}
		
		return $res;
	}
}
// n‰in kuollaan mysql errorista...
if (! function_exists ( "pupe_error" )) {
	// otetaan parametriksi query
	function pupe_error($query) {
		// tarvitaan yhti‰rowta ja kukarowta
		global $yhtiorow, $kukarow, $toim;
		
		// trimmataan, tabit, rivinvaihdot ja tuplaspacet pois queryst‰..
		$query = trim ( $query );
		$query = str_replace ( "\t", " ", $query );
		$query = str_replace ( "\n", "", $query );
		$query = str_replace ( "\r", "", $query );
		$query = ereg_replace ( "  +", " ", $query );
		
		$debuggi = array_reverse ( debug_backtrace () );
		
		// tehd‰‰n errorimessage
		$puperror = "User:   $kukarow[nimi] ($kukarow[kuka]) @ $yhtiorow[nimi] ($yhtiorow[yhtio])\n\n";
		
		$nro = 1;
		foreach ( $debuggi as $debuggii ) {
			$puperror .= "File $nro:   $debuggii[file]\n";
			$puperror .= "Line $nro:   $debuggii[line]\n";
			$nro ++;
		}
		
		$puperror .= "\n";
		$puperror .= "Script: $_SERVER[PHP_SELF]\n";
		$puperror .= "Toim:   $toim\n\n";
		$puperror .= "Error:  " . mysql_error () . "\n\n";
		$puperror .= "$query\n\n";
		
		// l‰hetet‰‰n se meilitse adminille
		mail ( $yhtiorow ['admin_email'], mb_encode_mimeheader ( $yhtiorow ['nimi'] . " - SQL Error", "ISO-8859-1", "Q" ), $puperror, "From: " . mb_encode_mimeheader ( $yhtiorow ["nimi"], "ISO-8859-1", "Q" ) . " <$yhtiorow[postittaja_email]>\n", "-f $yhtiorow[postittaja_email]" );
		
		// kuollaan pois
		exit ( nl2br ( $puperror ) );
	}
}

// mysql queryn echotus kauniisti
if (! function_exists ( "query_dump" )) {
	// otetaan parametriksi query
	function query_dump($query) {
		
		// trimmataan, tabit, rivinvaihdot ja tuplaspacet pois queryst‰..
		$query = trim ( $query );
		$query = str_replace ( "\t", " ", $query );
		$query = str_replace ( "\n", "", $query );
		$query = str_replace ( "\r", "", $query );
		$query = ereg_replace ( "  +", " ", $query );
		
		echo "\n$query;\n<br><br>";
	}
}

if (! function_exists ( "tv1dateconv" )) {
	function tv1dateconv($date, $pitka = "", $lyhyt = "") {
		
		global $laskurow;
		
		//k‰‰nt‰‰ mysqln vvvv-kk-pp muodon muotoon pp.kk.vvvv
		//2007-05-09 12:18:18
		

		if (strlen ( $date ) > 10 and $pitka != "") {
			$jatko = substr ( $date, 10, 6 );
		} else {
			$jatko = "";
		}
		
		if ($date == "0000-00-00" or $date == "0000-00-00 00:00:00" or $date == "") {
			return "";
		} elseif ($laskurow ["maa"] == "SE") {
			if ($lyhyt == "LYHYT")
				return substr ( $date, 2, 2 ) . "-" . ( int ) substr ( $date, 5, 2 ) . "-" . ( int ) substr ( $date, 8, 2 ) . $jatko;
			else
				return substr ( $date, 0, 4 ) . "-" . substr ( $date, 5, 2 ) . "-" . substr ( $date, 8, 2 ) . $jatko;
		} else {
			if ($lyhyt == "LYHYT")
				return ( int ) substr ( $date, 8, 2 ) . "." . ( int ) substr ( $date, 5, 2 ) . "." . substr ( $date, 2, 2 ) . $jatko;
			else
				return substr ( $date, 8, 2 ) . "." . substr ( $date, 5, 2 ) . "." . substr ( $date, 0, 4 ) . $jatko;
		}
	}
}

if (! function_exists ( "lopetus" )) {
	function lopetus($lopetus, $meta = "", $palautavainurli = FALSE) {
		global $kukarow, $palvelin2;
		
		$lopetukset = explode ( "/SPLIT/", $lopetus );
		
		$lask = 0;
		$edlopetus = "";
		
		foreach ( $lopetukset as $lopetus ) {
			if ($lopetus != "") {
				
				// Jotta urlin parametrissa voisi p‰‰ss‰t‰ toisen urlin parametreineen
				$lopetus_clean = $lopetus;
				
				$lopetus = str_replace ( '////', '?', $lopetus );
				$lopetus = preg_replace ( '/([^:])\/\/\//', '\\1#', $lopetus );
				$lopetus = preg_replace ( '/([^:])\/\//', '\\1&', $lopetus );
				
				preg_match ( '/\/NIMILISA=(.*?)\//', $lopetus, $nimilisa );
				$lopetus = preg_replace ( '/\/NIMILISA=(.*?)\//', '', $lopetus );
				
				preg_match ( "/^([^\?&]*)\??/i", $lopetus, $nimi );
				preg_match ( "/toim=([^&]*)&?/i", $lopetus, $alanimi );
				
				$nimet = explode ( "/", str_replace ( $palvelin2, "", $nimi [1] ) );
				
				if (! isset ( $alanimi [1] ))
					$alanimi [1] = "";
				
				for($i = 0; $i < count ( $nimet ); $i ++) {
					
					$nimi = "";
					
					for($j = $i; $j < count ( $nimet ); $j ++) {
						$nimi .= $nimet [$j] . "/";
					}
					
					$nimi = substr ( $nimi, 0, - 1 );
					
					$query = "	SELECT nimitys
								FROM oikeu
								WHERE yhtio 	= '$kukarow[yhtio]'
								and kuka 		= ''
								and nimi		= '$nimi'
								and alanimi		= '$alanimi[1]'
								LIMIT 1";
					$res = mysql_query ( $query ) or pupe_error ( $query );
					
					if (mysql_num_rows ( $res ) > 0) {
						$row = mysql_fetch_assoc ( $res );
						break;
					}
				}
				
				if ($edlopetus != "") {
					if (strpos ( $lopetus, "?" ) === FALSE) {
						$lopetus .= "?";
					} else {
						$lopetus .= "&";
					}
					
					$lopetus .= "lopetus=$edlopetus";
				}
				
				if ($lask > 0) {
					if (strrpos ( $lopetus, "#" ) !== FALSE) {
						
						preg_match ( "/(#.*?)[&\?\/$]/", $lopetus, $ankkurimatchi );
						
						$lopetus = str_replace ( $ankkurimatchi [1], "", $lopetus ) . $ankkurimatchi [1];
					}
				}
				
				if (isset ( $nimilisa [1] ) and $nimilisa [1] != "") {
					$nlisa = " / " . $nimilisa [1];
				} else {
					$nlisa = "";
				}
				
				$row ["nimitys"] = trim ( str_ireplace ( "UUSI", "", $row ["nimitys"] ) );
				
				if ($meta == "") {
					if ($palautavainurli)
						return $lopetus;
					else if ($row ["nimitys"] != "")
						echo "<a href='$lopetus'>&laquo; " . t ( "Palaa ohjelmaan" ) . ": " . t ( "$row[nimitys]" ) . "$nlisa</a><br>";
					else
						echo "<a href='$lopetus'>&laquo; " . t ( "Palaa edelliseen n‰kym‰‰n" ) . "</a><br>";
				}
				
				$edlopetus = $lopetus_clean;
				$lask ++;
			}
		}
		
		if ($meta != "") {
			echo "<META HTTP-EQUIV='Refresh'CONTENT='0;URL=$lopetus'>";
			exit ();
		}
	}
}

if (! function_exists ( "tv2dateconv" )) {
	function tv2dateconv($date) {
		//k‰‰nt‰‰ mysqln vvvv-kk-pp muodon muotoon vvvvkkpp
		return substr ( $date, 0, 4 ) . substr ( $date, 5, 2 ) . substr ( $date, 8, 2 );
	}
}

if (! function_exists ( "dateconv" )) {
	function dateconv($date) {
		//k‰‰nt‰‰ vvkkmm muodon muotoon vv-kk-mm
		return substr ( $date, 0, 2 ) . "-" . substr ( $date, 2, 2 ) . "-" . substr ( $date, 4, 2 );
	}
}

if (! function_exists ( "date2mysql" )) {
	function date2mysql($date) {
		//k‰‰nt‰‰ pp.kk.vvvv muodon mysqk muotoon vvvv-kk-mm
		return substr ( $date, 6, 4 ) . "-" . substr ( $date, 3, 2 ) . "-" . substr ( $date, 0, 2 );
	}
}

if (! function_exists ( "avoin_kori" )) {
	function avoin_kori() {
		global $kukarow, $yhtiorow;
		
		// n‰ytt‰‰ ostoskori-linkin verkkokaupassa ja tuoteselaushaussa
		if ($kukarow ["kuka"] != "www" and $kukarow ["kesken"] > 0) {
			$query = "	SELECT *
						FROM lasku
						WHERE yhtio = '$kukarow[yhtio]' and tila = 'N' and tunnus = '$kukarow[kesken]'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $result ) == 1) {
				$laskurow = mysql_fetch_assoc ( $result );
				
				$query = "	SELECT round(sum(tilausrivi.hinta * if ('$yhtiorow[alv_kasittely]' = '' and tilausrivi.alv<500, (1+tilausrivi.alv/100), 1) * (tilausrivi.kpl+tilausrivi.varattu+tilausrivi.jt) * if (tilausrivi.netto='N', (1-tilausrivi.ale/100), (1-(tilausrivi.ale+$laskurow[erikoisale]-(tilausrivi.ale*$laskurow[erikoisale]/100))/100))),$yhtiorow[hintapyoristys]) summa
							FROM tilausrivi
							WHERE yhtio = '$kukarow[yhtio]' and otunnus = '$kukarow[kesken]' and tyyppi != 'D'";
				$result = mysql_query ( $query ) or pupe_error ( $query );
				$row = mysql_fetch_assoc ( $result );
				
				$linkki = "<a href='#' onclick=\"javascript:sndReq('selain', 'verkkokauppa.php?tee=tilatut&osasto=$osasto&try=$try')\"><strong>" . t ( "Ostoskori: Tilaus %s%s, yhteens‰ %s %s", $kieli, $laskurow ["tunnus"], " " . $laskurow ["viesti"], number_format ( $row ["summa"], 2, ',', ' ' ), $laskurow ["valkoodi"] ) . "</strong></a><br><br>";
				
				return "<center>$linkki</center>";
			}
		}
	}
}

if (! function_exists ( "maa" )) {
	function maa($code, $kieli = "") {
		// tarvitaan yhti‰rowta, kukarowta ja tieto slaven:n k‰yt‰st‰
		global $yhtiorow, $kukarow, $useslave, $link, $verkkokauppa;
		
		$query = sprintf ( "SELECT nimi FROM maat where koodi = '%s' LIMIT 1", mysql_real_escape_string ( substr ( $code, 0, 2 ) ) );
		$res = mysql_query ( $query ) or pupe_error ( $query );
		$maa = mysql_fetch_assoc ( $res );
		
		// otetaan pois maa koodi
		if ($kieli == "") {
			$kieli = $GLOBALS ["kieli"];
		}
		if (function_exists ( "mb_strtolower" )) {
			return ucfirst ( mb_strtolower ( substr ( t ( $maa ['nimi'], $kieli ), 5 ) ) );
		} else {
			return ucfirst ( strtolower ( substr ( t ( $maa ['nimi'], $kieli ), 5 ) ) );
		}
	}
}

if (! function_exists ( "alias" )) {
	function alias($stringi, $taulu, $setti = '') {
		
		// tarvitaan yhti‰rowta, kukarowta
		global $yhtiorow, $kukarow;
		
		$hakustringi = $taulu . "." . $stringi;
		
		$aliasquery = "SELECT selitetark FROM avainsana WHERE yhtio = '$kukarow[yhtio]' and selitetark_2 = '$setti' and selite = '$hakustringi'";
		$aliasresult = mysql_query ( $aliasquery ) or pupe_error ( $aliasquery );
		
		if (mysql_num_rows ( $aliasresult ) > 0) {
			$aliasrow = mysql_fetch_assoc ( $aliasresult );
			
			$stringi = $aliasrow ['selitetark'];
		}
		
		$stringi = t ( $stringi );
		
		return $stringi;
	}
}

if (! function_exists ( "kuuluukovarastoon" )) {
	function kuuluukovarastoon($hyllyalue, $hyllynro, $varasto = '', $yhtio = '') {
		global $kukarow, $yhtiorow;
		
		$varastolisa = "";
		
		// voidaan zekata onko varastoalue jossain tietyss‰ varastossa...
		if ($varasto != "") {
			$varastolisa = " and tunnus='$varasto'";
		}
		
		//Jos yhti‰ tulee parametrin‰ niin katsotaa, ettei se ole ihan mit‰ sattuu
		if ($yhtio != "") {
			$query = "	SELECT GROUP_CONCAT(distinct yhtio) yhtiot
						from yhtio
						where yhtio='$kukarow[yhtio]' or (konserni = '$yhtiorow[konserni]' and konserni != '')";
			$pres = mysql_query ( $query ) or pupe_error ( $query );
			$prow = mysql_fetch_assoc ( $pres );
			
			$yhtiot = explode ( ",", $prow ["yhtiot"] );
			
			if (in_array ( $yhtio, $yhtiot )) {
				$yhtiolisa = $yhtio;
			} else {
				$yhtiolisa = $kukarow ["yhtio"];
			}
		} else {
			$yhtiolisa = $kukarow ["yhtio"];
		}
		
		$query = "	SELECT tunnus
					FROM varastopaikat
					WHERE
					concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0')) and
					concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0')) and
					yhtio = '$yhtiolisa'
					$varastolisa";
		$varcheckres = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $varcheckres ) == 0) {
			return 0;
		} else {
			$varcheckrow = mysql_fetch_assoc ( $varcheckres );
			return $varcheckrow ['tunnus'];
		}
	}
}

if (! function_exists ( "onkotulostusalueita" )) {
	function onkotulostusalueita($hyllyalue, $hyllynro, $varasto, $yhtio = '') {
		global $kukarow, $yhtiorow;
		/*
		$varastolisa = "";

		// voidaan zekata onko varastoalue jossain tietyss‰ varastossa...
		if ($varasto != "") {
			$varastolisa = " and tunnus='$varasto'";
		}*/
		
		//Jos yhti‰ tulee parametrin‰ niin katsotaa, ettei se ole ihan mit‰ sattuu
		if ($yhtio != "") {
			$query = "	SELECT GROUP_CONCAT(distinct yhtio) yhtiot
						from yhtio
						where yhtio='$kukarow[yhtio]' or (konserni = '$yhtiorow[konserni]' and konserni != '')";
			$pres = mysql_query ( $query ) or pupe_error ( $query );
			$prow = mysql_fetch_assoc ( $pres );
			
			$yhtiot = explode ( ",", $prow ["yhtiot"] );
			
			if (in_array ( $yhtio, $yhtiot )) {
				$yhtiolisa = $yhtio;
			} else {
				$yhtiolisa = $kukarow ["yhtio"];
			}
		} else {
			$yhtiolisa = $kukarow ["yhtio"];
		}
		
		$query = "	SELECT nimi
					FROM varaston_tulostimet
					WHERE concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0'))
					and	concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper('$hyllyalue'), 5, '0'),lpad(upper('$hyllynro'), 5, '0'))
					and	yhtio = '$yhtiolisa'
					and varasto ='$varasto'";
		$varcheckres = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $varcheckres ) == 0) {
			return "";
		} else {
			$varcheckrow = mysql_fetch_assoc ( $varcheckres );
			return trim ( $varcheckrow ['nimi'] );
		}
	}
}

if (! function_exists ( "pdf_substr" )) {
	function pdf_substr($str, $len, $pdf, $param) {
		
		for($s = strlen ( $str ); $s > 0; $s --) {
			if ($pdf->strlen ( $str, $param ) > $len) {
				$str = substr ( $str, 0, $s );
			} else {
				break;
			}
		}
		
		return $str;
	}
}

if (! function_exists ( "pdf_fontfit" )) {
	function pdf_fontfit($str, $len, $pdf, $param) {
		
		$ffok = 0;
		
		if ($pdf->strlen ( $str, $param ) > $len) {
			
			for($fkoko = $param ["height"]; $fkoko >= 7; $fkoko --) {
				
				$param ["height"] = $fkoko;
				
				if ($pdf->strlen ( $str, $param ) <= $len) {
					$ffok = 1;
					break;
				}
			}
		}
		
		if (! $ffok) {
			$str = pdf_substr ( $str, $len, $pdf, $param );
		}
		
		return array ($str, $param );
	}
}

if (! function_exists ( "mm_pt" )) {
	function mm_pt($millimetreja) {
		$pointseja = round ( $millimetreja / 0.3527777778, 2 );
		return $pointseja;
	}
}

if (! function_exists ( "pt_mm" )) {
	function pt_mm($pointseja) {
		$millimetreja = round ( $pointseja * 0.3527777778, 2 );
		return $millimetreja;
	}
}

if (! function_exists ( "table_exists" )) {
	function table_exists($taulu) {
		global $dbkanta;
		
		//	Ei kaaduta errorista
		$query = "show tables where tables_in_$dbkanta = '$taulu';";
		$result = mysql_query ( $query );
		if (mysql_num_rows ( $result ) == 1) {
			return true;
		} else {
			return false;
		}
	}
}

if (! function_exists ( "vapauta_sarjanumerot" )) {
	function vapauta_sarjanumerot($toim, $tilausnumero, $lisa = "") {
		global $kukarow, $yhtiorow;
		
		$query = "	SELECT tilausrivi.tunnus, (tilausrivi.varattu+tilausrivi.jt) varattu, tilausrivi.tuoteno, tuote.sarjanumeroseuranta, tilausrivin_lisatiedot.tilausrivilinkki
					FROM tilausrivi use index (yhtio_otunnus)
					JOIN tuote ON tuote.yhtio=tilausrivi.yhtio and tuote.tuoteno=tilausrivi.tuoteno and tuote.sarjanumeroseuranta!=''
					LEFT JOIN tilausrivin_lisatiedot ON tilausrivi.yhtio = tilausrivin_lisatiedot.yhtio and tilausrivi.tunnus = tilausrivin_lisatiedot.tilausrivitunnus
					WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
					and tilausrivi.otunnus = '$kukarow[kesken]'
					$lisa ";
		$sres = mysql_query ( $query ) or pupe_error ( $query );
		
		while ( $srow = mysql_fetch_assoc ( $sres ) ) {
			
			if ($toim == "SIIRTOLISTA" or $toim == "SIIRTOTYOMAARAYS") {
				// merktaan siirtolistatunnus nollaks
				$query = "UPDATE sarjanumeroseuranta set siirtorivitunnus = 0 WHERE yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and siirtorivitunnus='$srow[tunnus]'";
				$sarjares = mysql_query ( $query ) or pupe_error ( $query );
			} elseif ($srow ["varattu"] < 0) {
				// dellataan koko rivi jos sit‰ ei ole viel‰ myyty
				$query = "DELETE from sarjanumeroseuranta where yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and ostorivitunnus='$srow[tunnus]' and myyntirivitunnus=0";
				$sarjares = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_affected_rows () == 0) {
					// merkataan osorivitunnus nollaksi
					$query = "UPDATE sarjanumeroseuranta set ostorivitunnus=0 WHERE yhtio='$kukarow[yhtio]' and tuoteno='$srow[tuoteno]' and ostorivitunnus='$srow[tunnus]'";
					$sarjares = mysql_query ( $query ) or pupe_error ( $query );
				}
			} else {
				// merkataan myyntirivitunnus nollaks
				if ($srow ["sarjanumeroseuranta"] == "E" or $srow ["sarjanumeroseuranta"] == "F" or $srow ["sarjanumeroseuranta"] == "G") {
					$query = "	DELETE FROM sarjanumeroseuranta
								WHERE yhtio = '$kukarow[yhtio]'
								and tuoteno = '$srow[tuoteno]'
								and myyntirivitunnus = '$srow[tunnus]'";
					$sarjares = mysql_query ( $query ) or pupe_error ( $query );
				} else {
					$query = "	UPDATE sarjanumeroseuranta
								SET myyntirivitunnus = 0
								WHERE yhtio = '$kukarow[yhtio]'
								and tuoteno = '$srow[tuoteno]'
								and myyntirivitunnus = '$srow[tunnus]'";
					$sarjares = mysql_query ( $query ) or pupe_error ( $query );
				}
			}
			
			// Onko t‰t‰ ostotilauksella?
			if ($srow ["tilausrivilinkki"] > 0) {
				$query = "	UPDATE tilausrivi
							SET tyyppi = 'D'
							WHERE yhtio 	= '$kukarow[yhtio]'
							and tunnus  	= '$srow[tilausrivilinkki]'
							and tyyppi 		= 'O'
							and uusiotunnus = 0";
				$siirtores = mysql_query ( $query ) or pupe_error ( $query );
			}
		}
	}
}

if (! function_exists ( "viikonpaiva" )) {
	function viikonpaiva($day = "", $now = "") {
		
		$now = $now ? $now : "now";
		$day = $day ? $day : "now";
		
		$rel = date ( "N", strtotime ( $day ) ) - date ( "N" );
		
		$time = strtotime ( "$rel days", strtotime ( $now ) );
		
		return date ( "Y-m-d", $time );
	
	}
}

if (! function_exists ( "tuoteperhe_myytavissa" )) {
	function tuoteperhe_myytavissa($tuoteno, $summaus, $tyyppi = '', $varasto = 0, $yhtio = '', $hyllyalue = '', $hyllynro = '', $hyllyvali = '', $hyllytaso = '', $maa = '', $pvm = '', $era = '') {
		global $kukarow, $yhtiorow;
		
		if ($yhtio == "") {
			$yhtio = $kukarow ["yhtio"];
		}
		
		if (is_array ( $varasto )) {
			$varasto_apu = '';
			foreach ( $varasto as $varasto_tunnus ) {
				$varasto_apu .= ( int ) $varasto_tunnus . ",";
			}
			$varasto = substr ( $varasto_apu, 0, - 1 );
		} else {
			$varasto = ( int ) $varasto;
		}
		
		$valinta1 = ""; // varaston tyyppi
		$valinta3 = "";
		
		// katotaan ollaanko annettu parametriksi joku tietty varastotyyppi
		if ($tyyppi == "E") {
			$valinta1 = " and varastopaikat.tyyppi = 'E' ";
			$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
		} elseif ($tyyppi == "V") {
			$valinta1 = " and varastopaikat.tyyppi = 'V' ";
			$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
		} elseif ($tyyppi == "KAIKKI") {
			$valinta1 = "";
			$valinta3 = "";
		} elseif ($tyyppi == "ORVOT") {
			$valinta1 = "";
			$valinta3 = " HAVING varastopaikat.tyyppi is null ";
		} else {
			$valinta1 = " and varastopaikat.tyyppi = '' ";
			$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
		}
		
		// Katotaan halutaanko saldo vaan jostain tietyst‰ varastosta (varastopaikat.tunnus), silloin unohdetaan edell‰ annettu tyyppi kokonaan
		if ($varasto != 0) {
			$valinta1 = " and varastopaikat.tunnus in ($varasto) ";
			$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
		}
		
		$query = " 	SELECT *
					from tuote
					where tuote.yhtio = '$yhtio'
					and tuote.tuoteno = '$tuoteno'";
		$asires = mysql_query ( $query ) or pupe_error ( $query );
		$asirow = mysql_fetch_assoc ( $asires );
		
		if (! function_exists ( "tuoteperhe_myytavissa_reku" )) {
			function tuoteperhe_myytavissa_reku($yhtio, $tuoteno, $tuotteet, $tuotteet_str, $isat_array, $kaikki_array, $kerroin_array) {
				if (in_array ( $tuoteno, $isat_array )) {
					//echo "FUULI! TEET IKUISEN LUUPIN!!!!!!!!<br>";
				} else {
					$isat_array [] = $tuoteno;
					
					$query = " 	SELECT distinct tuote.tuoteno, tuoteperhe.kerroin, tuote.ei_saldoa
								from tuoteperhe
								join tuote on tuoteperhe.yhtio = tuote.yhtio and tuoteperhe.tuoteno = tuote.tuoteno
								where tuoteperhe.yhtio = '$yhtio'
								and isatuoteno = '$tuoteno'
								and tyyppi in ('','P')";
					$isiresult = mysql_query ( $query ) or pupe_error ( $query );
					
					while ( $isirow = mysql_fetch_assoc ( $isiresult ) ) {
						
						$kaikki_array [] = $isirow ["tuoteno"];
						$kerroin_array [] = $tuoteno . "#!‰!#" . $isirow ["kerroin"];
						
						$mikaisa = $isirow ["tuoteno"];
						$tmp_kaikki_array = $kaikki_array;
						$tmp_kerroin_array = $kerroin_array;
						
						krsort ( $tmp_kaikki_array );
						krsort ( $tmp_kerroin_array );
						
						$isirow ["kerroin"] = 1;
						
						// Lasketaan kerroin rekursiivisesti taaksep‰in
						foreach ( $tmp_kerroin_array as $ke_ind => $ke_kerr ) {
							list ( $ker_isa, $ke_ker ) = explode ( "#!‰!#", $ke_kerr );
							
							if ($ke_ker <= 0) {
								$ke_ker = 1;
							}
							
							if ($mikaisa == $tmp_kaikki_array [$ke_ind]) {
								$mikaisa = $ker_isa;
								$isirow ["kerroin"] *= $ke_ker;
							}
						}
						
						if ($isirow ["ei_saldoa"] == "") {
							$tuotteet [$isirow ["tuoteno"]] = $isirow ["kerroin"];
							$tuotteet_str .= "'" . $isirow ["tuoteno"] . "',";
						}
					}
				}
				
				return array ($isat_array, $kaikki_array, $tuotteet, $tuotteet_str, $kerroin_array );
			}
		}
		
		$tuotteet = array ();
		
		if ($asirow ["ei_saldoa"] == "") {
			$tuotteet [$tuoteno] = 1;
			$tuotteet_str = "'" . $tuoteno . "',";
		} else {
			$tuotteet_str = "'',";
		}
		
		$riikoko = 1;
		$isat_array = array ();
		$kaikki_array = array ($tuoteno );
		$kerroin_array = array ($tuoteno . "#!‰!#1" );
		
		for($isa = 0; $isa < $riikoko; $isa ++) {
			list ( $isat_array, $kaikki_array, $tuotteet, $tuotteet_str, $kerroin_array ) = tuoteperhe_myytavissa_reku ( $yhtio, $kaikki_array [$isa], $tuotteet, $tuotteet_str, $isat_array, $kaikki_array, $kerroin_array );
			
			if ($yhtiorow ["rekursiiviset_tuoteperheet"] == "Y") {
				$riikoko = count ( $kaikki_array );
			}
		}
		
		$tuotteet_str = substr ( $tuotteet_str, 0, - 1 );
		
		$query = "	SELECT distinct varastopaikat.tunnus, varastopaikat.nimitys, varastopaikat.tyyppi
		 			FROM tuote
					JOIN tuotepaikat ON tuotepaikat.yhtio = tuote.yhtio and tuotepaikat.tuoteno = tuote.tuoteno
					JOIN varastopaikat ON varastopaikat.yhtio = tuotepaikat.yhtio
					and concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'))
					and concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'))
					$valinta1
					WHERE tuote.yhtio = '$yhtio'
					and tuote.tuoteno IN ($tuotteet_str)
					and tuote.tuoteno != ''
					$valinta3
					ORDER BY tuotepaikat.oletus DESC, varastopaikat.nimitys";
		$varresult = mysql_query ( $query ) or pupe_error ( $query );
		
		$varasto_myytavissa = array ();
		
		if ($summaus == "KAIKKI") {
			$perhe_myytavissa = array ();
		}
		
		while ( $saldorow = mysql_fetch_assoc ( $varresult ) ) {
			
			if ($summaus != "KAIKKI") {
				$perhe_myytavissa = array ();
			}
			
			foreach ( $tuotteet as $tuoteno => $kerroin ) {
				
				list ( , , $myytavissa ) = saldo_myytavissa ( $tuoteno, $tyyppi, $saldorow ["tunnus"], $yhtio, $hyllyalue, $hyllynro, $hyllyvali, $hyllytaso, $maa, $pvm, $era );
				$perhe_myytavissa [$tuoteno] += round ( $myytavissa / $kerroin, 2 );
			}
			
			if ($summaus != "KAIKKI") {
				arsort ( $perhe_myytavissa );
				$varasto_myytavissa [$saldorow ["nimitys"]] = array_pop ( $perhe_myytavissa );
			}
		}
		
		if ($summaus == "KAIKKI") {
			arsort ( $perhe_myytavissa );
			$varasto_myytavissa ["KAIKKI"] = array_pop ( $perhe_myytavissa );
		}
		
		return ($varasto_myytavissa);
	}
}

if (! function_exists ( "saldo_myytavissa" )) {
	function saldo_myytavissa($tuoteno, $tyyppi = '', $varasto = 0, $yhtio = '', $hyllyalue = '', $hyllynro = '', $hyllyvali = '', $hyllytaso = '', $maa = '', $pvm = '', $era = '') {
		
		// T‰m‰ funktio palauttaa myyt‰viss‰ olevan saldon sallituista varastoista (tyyppi='')
		// Laskuttamattomia hyvityksi‰ ei katsota myyt‰viksi vaan ne pit‰‰ laskuttaa ennenkuin n‰kyv‰t t‰‰ll‰ (varattu > 0)
		global $kukarow, $yhtiorow;
		
		//Speciaalitapaus jossa JT-rivit varaavat saldoa
		$varaako_jt_saldoa = "";
		
		if ($tyyppi == "JTSPEC" and $yhtiorow ["varaako_jt_saldoa"] != "") {
			$varaako_jt_saldoa = " and tilausrivi.var != 'J' ";
			$tyyppi = "";
		}
		
		if (is_array ( $varasto ) and count ( $varasto ) > 0) {
			$varasto_apu = '';
			foreach ( $varasto as $varasto_tunnus ) {
				$varasto_apu .= ( int ) $varasto_tunnus . ",";
			}
			$varasto = substr ( $varasto_apu, 0, - 1 );
		} else {
			$varasto = ( int ) $varasto;
		}
		
		$query = "SELECT * from tuote where yhtio='$kukarow[yhtio]' and tuoteno='$tuoteno'";
		$result = mysql_query ( $query ) or die ( $query . mysql_error () );
		$tuote = mysql_fetch_assoc ( $result );
		
		if (mysql_num_rows ( $result ) == 0) {
			$saldo = FALSE;
			$hyllyssa = FALSE;
			$myytavissa = FALSE;
		} elseif ($tuote ["ei_saldoa"] != "") {
			$saldo = 0;
			$hyllyssa = 0;
			$myytavissa = 0;
		} else {
			//Jos yhti‰ tulee parametrin‰ niin katsotaan, ettei se ole ihan mit‰ sattuu ja lasketaan sen yhti‰n saldo
			if ($yhtio != "") {
				$query = "	SELECT GROUP_CONCAT(distinct yhtio) yhtiot
							from yhtio
							where yhtio='$kukarow[yhtio]' or (konserni = '$yhtiorow[konserni]' and konserni != '')";
				$pres = mysql_query ( $query ) or pupe_error ( $query );
				$prow = mysql_fetch_assoc ( $pres );
				
				$yhtiot = explode ( ",", $prow ["yhtiot"] );
				
				if (in_array ( $yhtio, $yhtiot ) and $yhtio != $kukarow ["yhtio"]) {
					// Jos yhti‰ on joku konserniyhti‰ist‰ niin tutkitaan suoratoimitus juttuja
					$query = "	SELECT tyyppi_tieto, liitostunnus, toim_tuoteno
								from tuotteen_toimittajat, toimi
								where tuotteen_toimittajat.yhtio = '$kukarow[yhtio]'
								and tuotteen_toimittajat.tuoteno = '$tuoteno'
								and toimi.yhtio         = tuotteen_toimittajat.yhtio
								and toimi.tunnus        = tuotteen_toimittajat.liitostunnus
								and toimi.tyyppi        = 'S'
								and toimi.tyyppi_tieto  = '$yhtio'
								and toimi.edi_palvelin != ''
								and toimi.edi_kayttaja != ''
								and toimi.edi_salasana != ''
								and toimi.edi_polku    != ''
								and toimi.oletus_vienti in ('C','F','I')";
					$superjtres = mysql_query ( $query ) or pupe_error ( $query );
					
					if (mysql_num_rows ( $superjtres ) > 0) {
						$superrow = mysql_fetch_assoc ( $superjtres );
						
						$yhtiolisa = $yhtio;
						$tuoteno = $superrow ["toim_tuoteno"];
					} else {
						$yhtiolisa = $yhtio;
					}
				} elseif ($yhtio == $kukarow ["yhtio"]) {
					$yhtiolisa = $kukarow ["yhtio"];
				} else {
					return array (FALSE, FALSE, FALSE, FALSE );
				}
			} else {
				$yhtiolisa = $kukarow ["yhtio"];
			}
			
			$valinta1 = ""; // varaston tyyppi
			$valinta2 = ""; // tietty varastopaikka special case
			$valinta3 = ""; // p‰‰tet‰‰n joinin stricteys
			

			// katotaan ollaanko annettu parametriksi joku tietty varastotyyppi
			if ($tyyppi == "E") {
				$valinta1 = " varastopaikat.tyyppi = 'E' and ";
				$valinta2 = "";
				$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
			} elseif ($tyyppi == "V") {
				$valinta1 = " varastopaikat.tyyppi = 'V' and ";
				$valinta2 = "";
				$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
			} elseif ($tyyppi == "KAIKKI") {
				$valinta1 = "";
				$valinta2 = "";
				$valinta3 = "";
			} elseif ($tyyppi == "ORVOT") {
				$valinta1 = "";
				$valinta2 = "";
				$valinta3 = " HAVING varastopaikat.tyyppi is null ";
			} else {
				$valinta1 = " (varastopaikat.tyyppi = '' or (varastopaikat.tyyppi = 'E' and varastopaikat.erikoistoimitus_alarajasumma > 0 and '$tuote[myyntihinta]' >= varastopaikat.erikoistoimitus_alarajasumma)) and ";
				$valinta2 = "";
				$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
			}
			
			// Katotaan halutaanko saldo vaan jostain tietyst‰ varastosta (varastopaikat.tunnus), silloin unohdetaan edell‰ annettu tyyppi kokonaan
			if ((is_numeric ( $varasto ) and $varasto > 0) or (! is_numeric ( $varasto ) and $varasto != "")) {
				$valinta1 = " varastopaikat.tunnus in ($varasto) and ";
				$valinta2 = "";
				$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
			}
			
			// Katotaan halutaanko saldo vaan joltain tietylt‰ varasopaikalta, silloinkin unohdetaan edell‰ annettu tyyppi kokonaan
			if ($hyllyalue != "") {
				$valinta1 = "";
				$valinta2 = " 	and tuotepaikat.hyllyalue = '$hyllyalue'
								and tuotepaikat.hyllynro  = '$hyllynro'
								and tuotepaikat.hyllyvali = '$hyllyvali'
								and tuotepaikat.hyllytaso = '$hyllytaso' ";
				$valinta3 = " HAVING varastopaikat.tyyppi is not null ";
			}
			
			if ($maa != "") {
				$valinta1 .= " (varastopaikat.sallitut_maat like '%$maa%' or varastopaikat.sallitut_maat = '') and ";
			}
			
			$kerayslisa = "";
			if ($pvm != '') {
				$kerayslisa = " and tilausrivi.kerayspvm <= '$pvm' ";
			}
			
			// Saldo varastoista
			if (($tuote ["sarjanumeroseuranta"] == "E" or $tuote ["sarjanumeroseuranta"] == "F" or $tuote ["sarjanumeroseuranta"] == "G") and $era != '') {
				$query = "	SELECT sum(sarjanumeroseuranta.era_kpl) saldo, tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
							FROM tuotepaikat
							LEFT JOIN varastopaikat on varastopaikat.yhtio=tuotepaikat.yhtio
							and $valinta1
							concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0')) and
							concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0'))
							JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero)  ON sarjanumeroseuranta.yhtio = tuotepaikat.yhtio
							and sarjanumeroseuranta.tuoteno = tuotepaikat.tuoteno
							and sarjanumeroseuranta.hyllyalue = tuotepaikat.hyllyalue
							and sarjanumeroseuranta.hyllynro  = tuotepaikat.hyllynro
							and sarjanumeroseuranta.hyllyvali = tuotepaikat.hyllyvali
							and sarjanumeroseuranta.hyllytaso = tuotepaikat.hyllytaso
							and sarjanumeroseuranta.sarjanumero = '$era'
							and sarjanumeroseuranta.myyntirivitunnus = 0
							and sarjanumeroseuranta.era_kpl != 0
							JOIN tilausrivi tilausrivi_osto use index (PRIMARY) ON tilausrivi_osto.yhtio=sarjanumeroseuranta.yhtio and tilausrivi_osto.tunnus=sarjanumeroseuranta.ostorivitunnus and tilausrivi_osto.laskutettuaika != '0000-00-00'
							WHERE tuotepaikat.yhtio = '$yhtiolisa'
							and tuotepaikat.tuoteno = '$tuoteno'
							$valinta2
							GROUP BY tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
							$valinta3";
			} else {
				$query = "	SELECT tuotepaikat.saldo, tuotepaikat.saldo_varattu, tuotepaikat.hyllyalue, tuotepaikat.hyllynro, tuotepaikat.hyllyvali, tuotepaikat.hyllytaso, varastopaikat.tyyppi
							FROM tuotepaikat
							LEFT JOIN varastopaikat on varastopaikat.yhtio=tuotepaikat.yhtio
							and $valinta1
							concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0')) and
							concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0'))
							WHERE tuotepaikat.yhtio = '$yhtiolisa'
							and tuotepaikat.tuoteno = '$tuoteno'
							$valinta2
							$valinta3";
			}
			$result = mysql_query ( $query ) or die ( $query );
			
			if (mysql_num_rows ( $result ) == 0) {
				/*
				// tuotteella ei ole yht‰‰n paikkaa.. katotaan silti varatut
				// etsit‰‰n varatut kaikilta paikoilta
				$query = "	SELECT sum(varattu) varattu
							FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
							WHERE tilausrivi.yhtio = '$yhtiolisa' and
							tilausrivi.tyyppi in ('L','G','V') and
							tilausrivi.tuoteno = '$tuoteno' and
							tilausrivi.varattu > 0
							$varaako_jt_saldoa
							$kerayslisa ";
				$ennresult = mysql_query($query) or die($query);
				$ennrow = mysql_fetch_assoc($ennresult);

				$orposaldomyytavissa -= $ennrow["varattu"];

				return array(FALSE, FALSE, $orposaldomyytavissa, FALSE);
				*/
				
				return array (FALSE, FALSE, FALSE, FALSE );
			} else {
				$saldo = 0;
				$hyllyssa = 0;
				$myytavissa = 0;
				$ennakkopois = 0;
				
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					
					// Saldot
					$saldo += $row ["saldo"];
					
					// Myyntirivien, varastosiirtojen ja valmistusten ennakkopoistot ja ker‰tyt rivit
					if (($tuote ["sarjanumeroseuranta"] == "E" or $tuote ["sarjanumeroseuranta"] == "F" or $tuote ["sarjanumeroseuranta"] == "G") and $era != '') {
						$query = "	SELECT
									ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty,
									ifnull(sum(tilausrivi.varattu),0) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
									and sarjanumeroseuranta.tuoteno 			= tilausrivi.tuoteno
									and sarjanumeroseuranta.hyllyalue 			= tilausrivi.hyllyalue
									and sarjanumeroseuranta.hyllynro  			= tilausrivi.hyllynro
									and sarjanumeroseuranta.hyllyvali 			= tilausrivi.hyllyvali
									and sarjanumeroseuranta.hyllytaso 			= tilausrivi.hyllytaso
									and sarjanumeroseuranta.myyntirivitunnus 	= tilausrivi.tunnus
									and sarjanumeroseuranta.sarjanumero 		= '$era'
									WHERE tilausrivi.yhtio = '$yhtiolisa'
									and tilausrivi.tyyppi in ('L','G','V')
									and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
									and tilausrivi.tuoteno = '$tuoteno'
									and tilausrivi.varattu > 0
									$varaako_jt_saldoa
									and tilausrivi.hyllyalue = '$row[hyllyalue]'
									and tilausrivi.hyllynro  = '$row[hyllynro]'
									and tilausrivi.hyllyvali = '$row[hyllyvali]'
									and tilausrivi.hyllytaso = '$row[hyllytaso]'
									$kerayslisa";
					} else {
						$query = "	SELECT
									ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty,
									ifnull(sum(tilausrivi.varattu),0) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									WHERE tilausrivi.yhtio = '$yhtiolisa'
									and tilausrivi.tyyppi in ('L','G','V')
									and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
									and tilausrivi.tuoteno = '$tuoteno'
									and tilausrivi.varattu > 0
									$varaako_jt_saldoa
									and tilausrivi.hyllyalue = '$row[hyllyalue]'
									and tilausrivi.hyllynro  = '$row[hyllynro]'
									and tilausrivi.hyllyvali = '$row[hyllyvali]'
									and tilausrivi.hyllytaso = '$row[hyllytaso]'
									$kerayslisa";
					}
					
					$ennresult = mysql_query ( $query ) or die ( $query );
					$ennrow = mysql_fetch_assoc ( $ennresult );
					
					$myytavissa += $row ["saldo"] - $ennrow ["varattu"] - $row ["saldo_varattu"];
					$hyllyssa += $row ["saldo"] - $ennrow ["keratty"];
					
					if ($pvm != '') {
						// jos lasketaan tulevaisuuteen niin otetaan tietenkin huomioon jo ker‰tyt rivit
						if (($tuote ["sarjanumeroseuranta"] == "E" or $tuote ["sarjanumeroseuranta"] == "F" or $tuote ["sarjanumeroseuranta"] == "G") and $era != '') {
							$query = "	SELECT
										ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty
										FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
										JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
										and sarjanumeroseuranta.tuoteno 			= tilausrivi.tuoteno
										and sarjanumeroseuranta.hyllyalue 			= tilausrivi.hyllyalue
										and sarjanumeroseuranta.hyllynro  			= tilausrivi.hyllynro
										and sarjanumeroseuranta.hyllyvali 			= tilausrivi.hyllyvali
										and sarjanumeroseuranta.hyllytaso 			= tilausrivi.hyllytaso
										and sarjanumeroseuranta.myyntirivitunnus 	= tilausrivi.tunnus
										and sarjanumeroseuranta.sarjanumero 		= '$era'
										WHERE tilausrivi.yhtio = '$yhtiolisa'
										and tilausrivi.tyyppi in ('L','G','V')
										and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
										and tilausrivi.tuoteno = '$tuoteno'
										and tilausrivi.varattu > 0
										and tilausrivi.hyllyalue = '$row[hyllyalue]'
										and tilausrivi.hyllynro  = '$row[hyllynro]'
										and tilausrivi.hyllyvali = '$row[hyllyvali]'
										and tilausrivi.hyllytaso = '$row[hyllytaso]'
										and tilausrivi.kerayspvm > '$pvm'";
						} else {
							$query = "	SELECT
										ifnull(sum(if (tilausrivi.keratty!='', tilausrivi.varattu, 0)),0) keratty
										FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
										WHERE tilausrivi.yhtio = '$yhtiolisa'
										and tilausrivi.tyyppi in ('L','G','V')
										and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
										and tilausrivi.tuoteno = '$tuoteno'
										and tilausrivi.varattu > 0
										and tilausrivi.hyllyalue = '$row[hyllyalue]'
										and tilausrivi.hyllynro  = '$row[hyllynro]'
										and tilausrivi.hyllyvali = '$row[hyllyvali]'
										and tilausrivi.hyllytaso = '$row[hyllytaso]'
										and tilausrivi.kerayspvm > '$pvm'";
						}
						
						$keraresult = mysql_query ( $query ) or die ( $query );
						$kerarow = mysql_fetch_assoc ( $keraresult );
						
						$myytavissa -= $kerarow ["keratty"];
						$hyllyssa -= $kerarow ["keratty"];
						
						// jos lasketaan tulevaisuuteen niin otetaan varastoonvalmistukset huomioon
						if (($tuote ["sarjanumeroseuranta"] == "E" or $tuote ["sarjanumeroseuranta"] == "F" or $tuote ["sarjanumeroseuranta"] == "G") and $era != '') {
							$query = "	SELECT
										ifnull(sum(tilausrivi.varattu),0) varattu
										FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
										JOIN lasku use index (primary) ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus and lasku.tilaustyyppi = 'W'
										JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
										and sarjanumeroseuranta.tuoteno 			= tilausrivi.tuoteno
										and sarjanumeroseuranta.hyllyalue 			= tilausrivi.hyllyalue
										and sarjanumeroseuranta.hyllynro  			= tilausrivi.hyllynro
										and sarjanumeroseuranta.hyllyvali 			= tilausrivi.hyllyvali
										and sarjanumeroseuranta.hyllytaso 			= tilausrivi.hyllytaso
										and sarjanumeroseuranta.myyntirivitunnus 	= tilausrivi.tunnus
										and sarjanumeroseuranta.sarjanumero 		= '$era'
										WHERE tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
										and tilausrivi.yhtio = '$yhtiolisa'
										and tilausrivi.tyyppi = 'W'
										and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
										and tilausrivi.tuoteno = '$tuoteno'
										and tilausrivi.varattu 	 > 0
										and tilausrivi.hyllyalue = '$row[hyllyalue]'
										and tilausrivi.hyllynro  = '$row[hyllynro]'
										and tilausrivi.hyllyvali = '$row[hyllyvali]'
										and tilausrivi.hyllytaso = '$row[hyllytaso]'
										and tilausrivi.kerayspvm <= '$pvm'";
						} else {
							$query = "	SELECT
										ifnull(sum(tilausrivi.varattu),0) varattu
										FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
										JOIN lasku use index (primary) ON tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus and lasku.tilaustyyppi = 'W'
										WHERE tilausrivi.yhtio = lasku.yhtio and tilausrivi.otunnus = lasku.tunnus
										and tilausrivi.yhtio = '$yhtiolisa'
										and tilausrivi.tyyppi = 'W'
										and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
										and tilausrivi.tuoteno = '$tuoteno'
										and tilausrivi.varattu > 0
										and tilausrivi.hyllyalue = '$row[hyllyalue]'
										and tilausrivi.hyllynro  = '$row[hyllynro]'
										and tilausrivi.hyllyvali = '$row[hyllyvali]'
										and tilausrivi.hyllytaso = '$row[hyllytaso]'
										and tilausrivi.kerayspvm <= '$pvm'";
						}
						$valmresult = mysql_query ( $query ) or die ( $query );
						$valmrow = mysql_fetch_assoc ( $valmresult );
						
						$myytavissa += $valmrow ["varattu"];
					}
				}
				
				// jos lasketaan tulevaisuuteen niin otetaan ostorivit huomioon
				if ($pvm != '') {
					if (($tuote ["sarjanumeroseuranta"] == "E" or $tuote ["sarjanumeroseuranta"] == "F" or $tuote ["sarjanumeroseuranta"] == "G") and $era != '') {
						$query = "	SELECT
									ifnull(sum(tilausrivi.varattu),0) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									JOIN sarjanumeroseuranta  use index (yhtio_tuoteno_sarjanumero) ON sarjanumeroseuranta.yhtio = tilausrivi.yhtio
									and sarjanumeroseuranta.tuoteno 			= tilausrivi.tuoteno
									and sarjanumeroseuranta.hyllyalue 			= tilausrivi.hyllyalue
									and sarjanumeroseuranta.hyllynro  			= tilausrivi.hyllynro
									and sarjanumeroseuranta.hyllyvali 			= tilausrivi.hyllyvali
									and sarjanumeroseuranta.hyllytaso 			= tilausrivi.hyllytaso
									and sarjanumeroseuranta.myyntirivitunnus 	= tilausrivi.tunnus
									and sarjanumeroseuranta.sarjanumero 		= '$era'
									WHERE tilausrivi.yhtio 	= '$yhtiolisa'
									and tilausrivi.tyyppi  = 'O'
									and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
									and tilausrivi.tuoteno 	= '$tuoteno'
									and tilausrivi.varattu > 0
									and tilausrivi.toimaika <= '$pvm'";
					} else {
						// l‰ytyyk‰ ostorivej‰?
						$query = "	SELECT
									ifnull(sum(tilausrivi.varattu),0) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									WHERE tilausrivi.yhtio 	= '$yhtiolisa'
									and tilausrivi.tyyppi 	= 'O'
									and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
									and tilausrivi.tuoteno 	= '$tuoteno'
									and tilausrivi.varattu 	> 0
									and tilausrivi.toimaika <= '$pvm'";
						$osttarkres = mysql_query ( $query ) or die ( $query );
						$osttarkrow = mysql_fetch_assoc ( $osttarkres );
						
						if ($osttarkrow ['varattu'] != 0 and $hyllyalue != '') {
							// jos l‰ytyy, niin onko ne t‰lle paikalle tulossa
							$query = "	SELECT
										ifnull(sum(tilausrivi.varattu),0) varattu
										FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
										WHERE tilausrivi.yhtio 	= '$yhtiolisa'
										and tilausrivi.tyyppi 	= 'O'
										and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
										and tilausrivi.tuoteno 	= '$tuoteno'
										and tilausrivi.varattu 	> 0
										and tilausrivi.hyllyalue = '$hyllyalue'
										and tilausrivi.hyllynro  = '$hyllynro'
										and tilausrivi.hyllyvali = '$hyllyvali'
										and tilausrivi.hyllytaso = '$hyllytaso'
										and tilausrivi.toimaika <= '$pvm'";
							$osttarkres = mysql_query ( $query ) or die ( $query );
							$osttarkrow = mysql_fetch_assoc ( $osttarkres );
							
							if ($osttarkrow ['varattu'] == 0) {
								// jos ei ole, niin onko paikka olemassa jonne ne on tulossa
								$tarkquery = "	SELECT
											ifnull(sum(tilausrivi.varattu),0) varattu
											FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
											JOIN tuotepaikat ON tilausrivi.yhtio = tuotepaikat.yhtio and tilausrivi.tuoteno = tuotepaikat.tuoteno and tilausrivi.hyllyalue = tuotepaikat.hyllyalue and tilausrivi.hyllynro = tuotepaikat.hyllynro and tilausrivi.hyllyvali = tuotepaikat.hyllyvali and tilausrivi.hyllytaso = tuotepaikat.hyllytaso
											WHERE tilausrivi.yhtio 	= '$yhtiolisa'
											and tilausrivi.tyyppi 	= 'O'
											and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
											and tilausrivi.tuoteno 	= '$tuoteno'
											and tilausrivi.varattu 	> 0
											and tilausrivi.toimaika <= '$pvm'";
								$osttarkres = mysql_query ( $tarkquery ) or die ( $tarkquery );
								$osttarkrow = mysql_fetch_assoc ( $osttarkres );
								
								if ($osttarkrow ['varattu'] == 0) {
									// eli on joutumassa ns. orvolle paikalle, niin leikit‰‰ ett‰ ne tulee oletuspaikalle
									$query = "	SELECT
												ifnull(sum(tilausrivi.varattu),0) varattu
												FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
												JOIN tuotepaikat ON tilausrivi.yhtio = tuotepaikat.yhtio and tilausrivi.tuoteno = tuotepaikat.tuoteno
												and tuotepaikat.hyllyalue = '$hyllyalue'
												and tuotepaikat.hyllynro = '$hyllynro'
												and tuotepaikat.hyllyvali = '$hyllyvali'
												and tuotepaikat.hyllytaso = '$hyllytaso'
												and tuotepaikat.oletus != ''
												WHERE tilausrivi.yhtio 	= '$yhtiolisa'
												and tilausrivi.tyyppi 	= 'O'
												and (tilausrivi.perheid2 = 0 or tilausrivi.perheid2=tilausrivi.tunnus)
												and tilausrivi.tuoteno 	= '$tuoteno'
												and tilausrivi.varattu 	> 0
												and tilausrivi.toimaika <= '$pvm'";
									$osttarkres = mysql_query ( $query ) or die ( $query );
									$osttarkrow = mysql_fetch_assoc ( $osttarkres );
								}
							}
						}
					}
					
					$ostresult = mysql_query ( $query ) or die ( $query );
					$ostrow = mysql_fetch_assoc ( $ostresult );
					
					$myytavissa += $ostrow ["varattu"];
				}
				
				// katsotaan l‰ytyyk‰ tuotetta varattuna joltain muulta paikalta, jota ei ole en‰‰ olemassa tuotepaikoissa
				// ekaks haetaan ihan kaikki nykyiset paikat suoraan mysql muotoon
				$query = "	SELECT group_concat(\"'\",rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'),lpad(upper(hyllyvali), 5, '0'),lpad(upper(hyllytaso), 5, '0'),\"'\") paikat
							FROM tuotepaikat
							WHERE yhtio='$yhtiolisa' and tuoteno='$tuoteno'";
				$ennresult = mysql_query ( $query ) or die ( $query );
				$ennrow = mysql_fetch_assoc ( $ennresult );
				
				if (is_numeric ( $varasto ) and $varasto == 0 and $hyllyalue == "" and $hyllynro == "") {
					
					$orposaldomyytavissa = 0;
					
					// jos paikkoja l‰ytyi
					if ($ennrow ["paikat"] != "") {
						
						if ($tyyppi != "KAIKKI" and $tyyppi != "ORVOT") {
							$query = "	SELECT sum(saldo) saldo, varastopaikat.tyyppi
										FROM tuotepaikat
										LEFT JOIN varastopaikat on varastopaikat.yhtio=tuotepaikat.yhtio and
										concat(rpad(upper(alkuhyllyalue),  5, '0'),lpad(upper(alkuhyllynro),  5, '0')) <= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0')) and
										concat(rpad(upper(loppuhyllyalue), 5, '0'),lpad(upper(loppuhyllynro), 5, '0')) >= concat(rpad(upper(tuotepaikat.hyllyalue), 5, '0'),lpad(upper(tuotepaikat.hyllynro), 5, '0'))
										WHERE tuotepaikat.yhtio = '$yhtiolisa'
										and tuotepaikat.tuoteno = '$tuoteno'
										GROUP BY varastopaikat.tyyppi
										HAVING varastopaikat.tyyppi is null";
							$ennsaldoresult = mysql_query ( $query ) or die ( $query );
							
							$ennsaldorow = mysql_fetch_assoc ( $ennsaldoresult );
							$orposaldomyytavissa = $ennsaldorow ["saldo"];
						}
						
						// etsit‰‰n varatut kaikilta paikoilla jolla on joku muu varastopaikka (NOT IN)
						$query = "	SELECT sum(varattu) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									WHERE tilausrivi.yhtio = '$yhtiolisa' and
									tilausrivi.tyyppi in ('L','G','V') and
									tilausrivi.tuoteno = '$tuoteno' and
									tilausrivi.varattu > 0 and
									concat(rpad(upper(hyllyalue), 5, '0'),lpad(upper(hyllynro), 5, '0'),lpad(upper(hyllyvali), 5, '0'),lpad(upper(hyllytaso), 5, '0')) NOT IN ($ennrow[paikat])
									$kerayslisa ";
						$ennresult = mysql_query ( $query ) or die ( $query );
						$ennrow = mysql_fetch_assoc ( $ennresult );
						
						$orposaldomyytavissa -= $ennrow ["varattu"];
					} else {
						// tuotteella ei ole yht‰‰n paikkaa.. katotaan silti varatut
						// etsit‰‰n varatut kaikilta paikoilta joilla on joku muu varastopaikka (NOT IN)
						$query = "	SELECT sum(varattu) varattu
									FROM tilausrivi use index (yhtio_tyyppi_tuoteno_varattu)
									WHERE tilausrivi.yhtio = '$yhtiolisa' and
									tilausrivi.tyyppi in ('L','G','V') and
									tilausrivi.tuoteno = '$tuoteno' and
									tilausrivi.varattu > 0
									$varaako_jt_saldoa
									$kerayslisa ";
						$ennresult = mysql_query ( $query ) or die ( $query );
						$ennrow = mysql_fetch_assoc ( $ennresult );
						
						$orposaldomyytavissa -= $ennrow ["varattu"];
					}
					
					$myytavissa += $orposaldomyytavissa;
				
				}
			}
		}
		return array ($saldo, $hyllyssa, $myytavissa, TRUE );
	}
}

if (! function_exists ( "lpr" )) {
	function lpr($str, $prn, $prnkomento = "") {
		global $kukarow;
		
		if ($prnkomento != "") {
			$kirjoitin ["komento"] = $prnkomento;
		} else {
			$query = "	SELECT *
						FROM kirjoittimet
						WHERE
						yhtio = '$kukarow[yhtio]' and
						tunnus = '$prn'
						ORDER by kirjoitin";
			$kirre = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $kirre ) != 1) {
				echo "printer not found";
				return;
			}
			
			$kirjoitin = mysql_fetch_assoc ( $kirre );
		}
		
		$pipe = popen ( $kirjoitin ["komento"], 'w' );
		
		if (! $pipe) {
			echo "pipe failed";
			return;
		}
		
		// sallitut merkit listattu, kaikki muut menee spaceks...
		$str = ereg_replace ( "[^A-Za-z0-9‰‰‰‰‰‰ .,-/!|+()%#\n\r]", " ", $str );
		
		// merkist‰konversio
		$from = array ('‰', '‰', '‰', '‰', '‰', '‰', '|' );
		
		if ($kirjoitin ["merkisto"] == 1) {
			$to = array ('{', '}', '|', '[', ']', '\\', chr ( 179 ) ); // 7 bittiset
			$str = str_replace ( $from, $to, $str );
		} elseif ($kirjoitin ["merkisto"] == 2) {
			$to = array (chr ( 132 ), chr ( 134 ), chr ( 148 ), chr ( 142 ), chr ( 143 ), chr ( 153 ), chr ( 179 ) ); // DOS charset
			$str = str_replace ( $from, $to, $str );
		} elseif ($kirjoitin ["merkisto"] == 3) {
			$to = array (chr ( 228 ), chr ( 229 ), chr ( 246 ), chr ( 196 ), chr ( 197 ), chr ( 214 ), chr ( 124 ) ); // ANSI charset
			$str = str_replace ( $from, $to, $str );
		} elseif ($kirjoitin ["merkisto"] == 4) {
			$str = utf8_encode ( $str ); // UTF8 charset k‰‰nn‰s suoraan yhell‰ rivill‰
		} elseif ($kirjoitin ["merkisto"] == 5) {
			$to = array ('a', 'a', 'o', 'A', 'A', 'O', ' ' ); // ‰‰kk‰set kokonaan pois
			$str = str_replace ( $from, $to, $str );
		}
		
		fputs ( $pipe, $str );
		pclose ( $pipe );
	}
}

// tehd‰‰n vertailukelponen stringi varastopaikasta
if (! function_exists ( "varastopaikka" )) {
	function varastopaikka($str) {
		$str = strtoupper ( trim ( $str ) );
		
		if (is_numeric ( $str )) {
			$str = sprintf ( "%5.5s", $str ); // numerot lpaddataan 5 merkki‰
		} else {
			$str = sprintf ( "%-5.5s", $str ); // stringit rpaddataan 5 merkki‰
		}
		
		return $str;
	}
}

// Tehd‰‰n valuuttamuunnos laskun valuutasta yhti‰n valuuttaan.
if (! function_exists ( "yhtioval" )) {
	function yhtioval($summa, $kurssi) {
		if ($kurssi <= 0 or ! is_numeric ( $kurssi )) {
			$kurssi = 1;
		}
		
		$sum = $summa * $kurssi;
		return $sum;
	}
}

// Tehd‰‰n valuuttamuunnos yhti‰n valuutasta laskun valuuttaan.
if (! function_exists ( "laskuval" )) {
	function laskuval($summa, $kurssi) {
		if ($kurssi <= 0 or ! is_numeric ( $kurssi )) {
			$kurssi = 1;
		}
		
		$sum = $summa / $kurssi;
		return $sum;
	}
}

// Tehd‰‰n valuuttamuunnos yhti‰n valuutasta laskun valuuttaan.
if (! function_exists ( "kehahin" )) {
	function kehahin($tuoteno) {
		
		global $kukarow, $yhtiorow;
		
		$query = "SELECT round(if (epakurantti100pvm='0000-00-00', if (epakurantti75pvm='0000-00-00', if (epakurantti50pvm='0000-00-00', if (epakurantti25pvm='0000-00-00', kehahin, kehahin*0.75), kehahin*0.5), kehahin*0.25), 0),6) kehahin
				  FROM tuote
				  WHERE yhtio = '$kukarow[yhtio]' and tuoteno = '$tuoteno'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		if (mysql_num_rows ( $result ) > 0) {
			$row = mysql_fetch_assoc ( $result );
			return $row ["kehahin"];
		} else {
			return 0;
		}
	}
}

if (! function_exists ( "desim" )) {
	function desim($summa) {
		global $kukarow, $yhtiorow;
		
		$monta = '';
		
		//echo "1 JOTAIN... $summa | $monta<br>";
		

		$summa = str_replace ( ',', '.', $summa );
		
		//echo "2 JOTAIN... $summa | $monta<br>";
		

		if ($yhtiorow ['hintapyoristys'] > '2') {
			
			if (strpos ( $summa, '.' )) {
				
				list ( $koko, $desi ) = explode ( ".", trim ( $summa ) );
				
				//echo "3 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
				

				if (strlen ( $desi ) > 2 and substr ( $desi, - 1 ) == '0') {
					
					while ( strlen ( $desi ) > 2 and substr ( $desi, - 1 ) == '0' ) {
						$desi = substr ( $desi, 0, - 1 );
					}
					
					$monta = strlen ( $desi );
				
		//echo "4 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
				} elseif (strlen ( $desi ) > 2) {
					$monta = strlen ( $desi );
				}
			}
		}
		
		if ($monta == '') {
			$monta = '2';
		} elseif ($monta > '4') {
			$monta = '4';
		}
		
		//echo "5 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
		

		return $monta;
	}
}

if (! function_exists ( "desis" )) {
	function desis($summa) {
		global $kukarow, $yhtiorow;
		
		$monta = '';
		
		//echo "1 JOTAIN... $summa | $monta<br>";
		

		$summa = str_replace ( ',', '.', $summa );
		
		//echo "2 JOTAIN... $summa | $monta<br>";
		

		if ($yhtiorow ['hintapyoristys'] > '2') {
			
			if (strpos ( $summa, '.' )) {
				
				list ( $koko, $desi ) = explode ( ".", trim ( $summa ) );
				
				//echo "3 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
				

				if (strlen ( $desi ) > 2 and substr ( $desi, - 1 ) == '0') {
					
					while ( strlen ( $desi ) > 2 and substr ( $desi, - 1 ) == '0' ) {
						$desi = substr ( $desi, 0, - 1 );
					}
					
					$monta = strlen ( $desi );
				
		//echo "4 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
				} elseif (strlen ( $desi ) > 2) {
					$monta = strlen ( $desi );
				}
			}
		}
		
		if ($monta == '') {
			$monta = '2';
		} elseif ($monta > '4') {
			$monta = '4';
		}
		
		$summa = sprintf ( "%." . $monta . "f", $summa );
		
		//echo "5 JOTAIN... $summa | $monta |< $koko @ $desi ><br>";
		

		return $summa;
	}
}

// Tehd‰‰n l‰hetteen ja laskun sorttauskent‰t
if (! function_exists ( "generoi_sorttauskentta" )) {
	
	function generoi_sorttauskentta($jarjestys = "", $toimittaja = 0) {
		
		global $kukarow, $yhtiorow;
		
		if ($jarjestys == "") {
			$jarjestys = $yhtiorow ["lahetteen_jarjestys"];
		}
		
		$sorttauskentta = "";
		
		// varastopaikkaj‰rjestys, tuoteperheet pidet‰‰n yhdess‰, erikoistuotteet loppuun
		if ($jarjestys == "0") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
									if (tilausrivi.perheid > 0, ifnull((select concat(rpad(upper(t2.hyllyalue), 5, '0'),lpad(upper(t2.hyllynro), 5, '0'),lpad(upper(t2.hyllyvali), 5, '0'),lpad(upper(t2.hyllytaso), 5, '0'), t2.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))),
								   		if (tilausrivi.perheid2 > 0, ifnull((select concat(rpad(upper(t3.hyllyalue), 5, '0'),lpad(upper(t3.hyllynro), 5, '0'),lpad(upper(t3.hyllyvali), 5, '0'),lpad(upper(t3.hyllytaso), 5, '0'), t3.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno))),
											tilausrivi.tuoteno))) as sorttauskentta";
		} 

		// varastopaikkaj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
		elseif ($jarjestys == "1") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno),
									if (tilausrivi.perheid > 0, ifnull((select concat(rpad(upper(t2.hyllyalue), 5, '0'),lpad(upper(t2.hyllynro), 5, '0'),lpad(upper(t2.hyllyvali), 5, '0'),lpad(upper(t2.hyllytaso), 5, '0'), t2.tuoteno, rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
								   		if (tilausrivi.perheid2 > 0, ifnull((select concat(rpad(upper(t3.hyllyalue), 5, '0'),lpad(upper(t3.hyllynro), 5, '0'),lpad(upper(t3.hyllyvali), 5, '0'),lpad(upper(t3.hyllytaso), 5, '0'), t3.tuoteno, rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus), concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)),
											tilausrivi.tuoteno))) as sorttauskentta";
		} 

		// varastopaikkaj‰rjestys, erikoistuotteet loppuun
		elseif ($jarjestys == "2") {
			$sorttauskentta = "if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno),
									concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno)) as sorttauskentta";
		} 

		// varastopaikkaj‰rjestys
		elseif ($jarjestys == "3") {
			$sorttauskentta = "concat(rpad(upper(tilausrivi.hyllyalue), 5, '0'),lpad(upper(tilausrivi.hyllynro), 5, '0'),lpad(upper(tilausrivi.hyllyvali), 5, '0'),lpad(upper(tilausrivi.hyllytaso), 5, '0'), tilausrivi.tuoteno) as sorttauskentta";
		} 

		// tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰, erikoistuotteet loppuun
		elseif ($jarjestys == "4") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), tilausrivi.tuoteno),
									if (tilausrivi.perheid > 0, ifnull((select concat(t2.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), tilausrivi.tuoteno)) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), tilausrivi.tuoteno)),
										if (tilausrivi.perheid2 > 0, ifnull((select concat(t3.tuoteno, if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), tilausrivi.tuoteno)) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus), if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno), tilausrivi.tuoteno)),
											tilausrivi.tuoteno))) as sorttauskentta";
		} 

		// tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
		elseif ($jarjestys == "5") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, tilausrivi.osasto,
									if (tilausrivi.perheid > 0, ifnull((select concat(t2.tuoteno, tilausrivi.tuoteno) from tilausrivi as t2 where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus), tilausrivi.tuoteno),
										if (tilausrivi.perheid2 > 0, ifnull((select concat(t3.tuoteno, tilausrivi.tuoteno) from tilausrivi as t3 where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus), tilausrivi.tuoteno),
											tilausrivi.tuoteno))) as sorttauskentta";
		} 

		// tuotenumeroj‰rjestys, erikoistuotteet loppuun
		elseif ($jarjestys == "6") {
			$sorttauskentta = "if (tilausrivi.hyllyalue = '' and tilausrivi.hyllynro = '' and tilausrivi.hyllyvali = '' and tilausrivi.hyllytaso = '', concat('‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰‰', tilausrivi.tuoteno),
									tilausrivi.tuoteno) as sorttauskentta";
		} 

		// tuotenumeroj‰rjestys
		elseif ($jarjestys == "7") {
			$sorttauskentta = "tilausrivi.tuoteno as sorttauskentta";
		} 

		// tilausj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
		elseif ($jarjestys == "8") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, tilausrivi.tunnus,
									if (tilausrivi.perheid > 0, tilausrivi.perheid,
										if (tilausrivi.perheid2 > 0, tilausrivi.perheid2,
											tilausrivi.tunnus))) as sorttauskentta";
		} 

		// tilausj‰rjestys
		elseif ($jarjestys == "9") {
			$sorttauskentta = "tilausrivi.tunnus as sorttauskentta";
		} 

		// toimittajan tuotenumeroj‰rjestys, tuoteperheet pidet‰‰n yhdess‰
		elseif ($jarjestys == "10") {
			$sorttauskentta = "if (tilausrivi.perheid = 0 and tilausrivi.perheid2 = 0, if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno),
									if (tilausrivi.perheid > 0, ifnull((select concat(if (tt2.toim_tuoteno!='', concat(tt2.toim_tuoteno,tilausrivi.perheid), concat(t2.tuoteno,tilausrivi.perheid)), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)) from tilausrivi as t2 JOIN tuotteen_toimittajat tt2 ON t2.yhtio = tt2.yhtio and t2.tuoteno = tt2.tuoteno and tt2.liitostunnus = '$toimittaja' where t2.yhtio = tilausrivi.yhtio and t2.tunnus = tilausrivi.perheid and t2.otunnus=tilausrivi.otunnus), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)),
										if (tilausrivi.perheid2 > 0, ifnull((select concat(if (tt3.toim_tuoteno!='', concat(tt3.toim_tuoteno,tilausrivi.perheid2), concat(t3.tuoteno,tilausrivi.perheid2)), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)) from tilausrivi as t3 JOIN tuotteen_toimittajat tt3 ON t3.yhtio = tt3.yhtio and t3.tuoteno = tt3.tuoteno and tt3.liitostunnus = '$toimittaja' where t3.yhtio = tilausrivi.yhtio and t3.tunnus = tilausrivi.perheid2 and t3.otunnus=tilausrivi.otunnus), if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)),
											if (tuotteen_toimittajat.toim_tuoteno!='', tuotteen_toimittajat.toim_tuoteno, tilausrivi.tuoteno)))) as sorttauskentta";
		} elseif ($jarjestys == "M") {
			$sorttauskentta = " if ((tilausrivi.perheid=0 or tilausrivi.perheid=tilausrivi.tunnus),
									ifnull((SELECT tlt2.jarjestys FROM tilausrivin_lisatiedot tlt2 WHERE tlt2.yhtio=tilausrivi.yhtio and tlt2.tilausrivitunnus=tilausrivi.tunnus LIMIT 1), tilausrivi.tunnus),
									if (tilausrivi.perheid >0 ,
										ifnull((SELECT tlt3.jarjestys FROM tilausrivin_lisatiedot tlt3 WHERE tlt3.yhtio=tilausrivi.yhtio and tlt3.tilausrivitunnus=tilausrivi.perheid LIMIT 1), tilausrivi.perheid),
										tilausrivi.tunnus
										)
									) as sorttauskentta";
		} 

		elseif ($jarjestys == "X") {
			$sorttauskentta = " concat(tilausrivi.osasto, tilausrivi.nimitys) as sorttauskentta";
		} 

		// joku default heikki maisematukku
		else {
			$sorttauskentta = " tilausrivi.osasto, tilausrivi.nimitys as sorttauskentta";
		}
		
		return $sorttauskentta;
	}
}

// Konserniyhti‰iden tietueiden synkronointi
if (! function_exists ( "synkronoi" )) {
	function synkronoi($yhtio, $table, $tunnus, $orig = "", $force = "") {
		global $yhtiorow, $kukarow;
		
		if (! function_exists ( "synclog" )) {
			function synclog($yhtio, $table, $viesti, $tunnus) {
				global $yhtiorow, $kukarow;
				
				if ($kohde == $yhtio) {
					$tapa = "MASTER";
				} else {
					$tapa = "TARGET";
				}
				
				$query = "	INSERT INTO synclog SET
							yhtio		= '$yhtio',
							taulu		= '$table',
							tauluntunnus= '$tunnus',
							tapa		= '$tapa',
							viesti		= '" . addslashes ( $viesti ) . "',
							laatija		= '$kukarow[kuka]',
							luontiaika	= now()";
				$insres = mysql_query ( $query ) or pupe_error ( $query );
			}
		}
		
		//	Onko mahdollista synkronoida?
		if (strpos ( $yhtiorow ["synkronoi"], $table ) === false) {
			return false;
		}
		
		$muutokset = array ();
		
		//	N‰ill‰ tarttetaan v‰h‰n lis‰tietoo
		if ($table == "avainsana") {
			$abulisa = ereg ( ",(avainsana\|*([\|a-zA-Z_\-]*)),*", $yhtiorow ["synkronoi"], $regs );
			
			$lajit = explode ( "|", strtolower ( $regs [2] ) );
			
			//	saadaanko juuri t‰t‰ lajia synkronoida?
			if (is_array ( $orig ) and count ( $orig ) > 0) {
				if (! in_array ( strtolower ( $orig ["laji"] ), $lajit )) {
					return false;
				}
			}
		}
		
		$synclog = "\nAktivoidaan synkronointi konserniyrityksiin\n";
		
		if (! is_numeric ( $tunnus )) {
			$synclog .= "VIRHE: Sy‰tetty tunnus ei kelpaa!\n";
			
			synclog ( $yhtio, $table, $synclog, $tunnus );
			return false;
		}
		
		//	Haetaan master
		$query = "	SELECT *
					FROM $table
					WHERE yhtio	= '$yhtio'
					and tunnus	= $tunnus";
		$masterres = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $masterres ) == 1) {
			$masterrow = mysql_fetch_array ( $masterres ) or pupe_error ( $query );
			
			//	N‰ill‰ tarttetaan v‰h‰n lis‰tietoo
			if ($table == "asiakasalennus" and $masterrow ["alennus"] < 0) {
				synclog ( $yhtio, $table, "Negatiivisia alennuksia ei synkata!", $tunnus );
				return false;
			}
			
			$synclog .= "Masteri on tunnus ($tunnus)\n";
			
			//	Tarkastetaan ett‰ originaali on varmasti samasta taulusta!
			if (is_array ( $orig ) and count ( $orig ) > 0) {
				
				$diff = array_diff_key ( $orig, $masterrow );
				
				if (count ( $diff ) == 0) {
					
					//	Tarkastetaan oliko muutoksia?
					$diff = array_diff_assoc ( $orig, $masterrow );
					
					if (count ( $diff ) > 0) {
						
						foreach ( $diff as $key => $value ) {
							if (is_string ( $key ) and ! in_array ( $key, array ("tunnus", "muuttaja", "muutospvm", "laatija", "luontiaika" ) )) {
								$muutokset [$key] .= $value;
							}
						}
					}
					
					//	Jos mit‰‰n ei muuteta mit‰‰n ei kanssa tehd‰!
					if (count ( $muutokset ) > 0 or $force == "F") {
						$muutos = "Tapahtuneet muutokset mastertaulussa:\n";
						
						foreach ( $muutokset as $key => $value ) {
							$muutos .= "$key: " . $value . " => " . $masterrow [$key] . "\n";
						}
						$synclog .= $muutos . "\n";
					} else {
						$synclog .= "Mit‰‰n ei muutettu, synkronointia ei suoritettu!\n";
						
						synclog ( $yhtio, $table, $synclog, $tunnus );
						return true;
					}
				} else {
					$synclog .= "\nVIRHE: Originaali ei t‰sm‰‰ masteriin!!!\n";
					
					synclog ( $yhtio, $table, $synclog, $tunnus );
					return false;
				}
			}
		} elseif (! is_array ( $orig )) {
			$synclog .= "Master tietuetta tai originaalia ei l‰ytynyt yhti‰st‰ tunnuksella ($tunnus)\n";
			
			synclog ( $yhtio, $table, $synclog, $tunnus );
			return false;
		} else {
			$synclog .= "Master tietue ($tunnus) on poistettu, koitetaan poistaa tietue my‰s konserniyrityksilt‰..\n\n";
			unset ( $masterrow );
		}
		
		require_once ("inc/pakolliset_sarakkeet.inc");
		
		list ( $pakolliset, $kielletyt, $wherelliset, , ) = pakolliset_sarakkeet ( $table );
		
		if (count ( $wherelliset ) == 0 and count ( $pakolliset ) == 0) {
			$synclog .= "VIRHE: Pyydetty‰ taulua $table ei voida synkronoida, sit‰ ei ole m‰‰ritelty!\n";
			
			synclog ( $yhtio, $table, $synclog, $tunnus );
			return false;
		} else {
			//	Tehd‰‰n kysely
			$where = "";
			
			if (is_array ( $wherelliset )) {
				$indeksi = array_merge ( $wherelliset, $pakolliset );
				$indeksi = array_unique ( $indeksi );
			} else {
				$indeksi = &$pakolliset;
			}
			
			foreach ( $indeksi as $pakollinen ) {
				//	Jos meill‰ on viel‰ se originaali tallessa vertailu sit‰ vastaan
				if (is_array ( $orig ) and count ( $orig ) > 0) {
					$where .= " and " . strtolower ( $pakollinen ) . "='" . $orig [strtolower ( $pakollinen )] . "'";
				} else {
					$where .= " and " . strtolower ( $pakollinen ) . "='" . $masterrow [strtolower ( $pakollinen )] . "'";
				}
			}
		}
		
		/*
			Aloitetaan itse synkronointii
		*/
		
		//	haetaan konserniyhti‰t joita voidaan synkronoida
		$query = "	SELECT yhtio.yhtio
					from yhtio
					JOIN yhtion_parametrit ON yhtion_parametrit.yhtio=yhtio.yhtio
					where yhtio.konserni	 		= '$yhtiorow[konserni]'
					and (yhtion_parametrit.synkronoi = '$table' or yhtion_parametrit.synkronoi like '$table,%' or yhtion_parametrit.synkronoi like '%,$table,%' or yhtion_parametrit.synkronoi like '%,$table')
					and yhtio.yhtio					!= '$yhtio'";
		$kohderes = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $kohderes ) > 0) {
			while ( $kohderow = mysql_fetch_assoc ( $kohderes ) ) {
				
				$vanhatunnus = $utunnus = "";
				$override = array ();
				
				//	Jos master on poistettu haetaan tiedot siit‰ vanhasta!
				if (! isset ( $masterrow )) {
					$abuhaku = $orig;
				} else {
					$abuhaku = $masterrow;
				}
				
				//	Osa tauluista vaatii v‰h‰n k‰pistely‰!
				if ($table == "yhteyshenkilo") {
					if ($abuhaku ["tyyppi"] == "A") {
						$query = "select * from asiakas where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						$aburow = mysql_fetch_assoc ( $abures );
						
						//	Etsit‰‰n oikea asiakas, jotta saadaan oikea liitostunnus
						$tarkquery = "select tunnus from asiakas where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]' and toim_ovttunnus='$aburow[toim_ovttunnus]'";
					} else {
						$query = "select * from toimi where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						$aburow = mysql_fetch_assoc ( $abures );
						
						//	Etsit‰‰n oikea toimittaja, jotta saadaan oikea liitostunnus
						$tarkquery = "select tunnus from toimi where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]'";
					}
					$tarkres = mysql_query ( $tarkquery ) or pupe_error ( $tarkquery );
					
					if (mysql_num_rows ( $tarkres ) == 1) {
						//	Ylikirjoitetaan liitostunnus
						$tarkrow = mysql_fetch_assoc ( $tarkres );
						$override ["liitostunnus"] = $tarkrow ["tunnus"];
						
						//	Meid‰n pit‰‰korvata se vanha liitostunnus my‰s where haarasta..
						$where = str_replace ( " and liitostunnus='$abuhaku[liitostunnus]'", " and liitostunnus='$override[liitostunnus]'", $where );
					} else {
						$synclog .= "Yhti‰lle '$kohderow[yhtio]' ei l‰ydy asiakasta/toimittajaa $masterrow[ytunnus] joten yhteyshenkil‰‰ ei voida synkronoida!\n";
						$ok = 0;
					}
				} elseif ($table == "tuotteen_toimittajat") {
					
					$query = "select * from tuote where yhtio='$yhtio' and tuoteno='$abuhaku[tuoteno]'";
					$abures = mysql_query ( $query ) or pupe_error ( $query );
					
					if (mysql_num_rows ( $abures ) == 1) {
						
						$query = "select * from toimi where yhtio='$yhtio' and tunnus='$abuhaku[liitostunnus]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						$aburow = mysql_fetch_assoc ( $abures );
						
						//	Etsit‰‰n oikea toimittaja jotta saadaan oikea liitostunnus
						$tarkquery = "select tunnus from toimi where yhtio='$kohderow[yhtio]' and ytunnus='$aburow[ytunnus]' and ovttunnus='$aburow[ovttunnus]'";
						$tarkres = mysql_query ( $tarkquery ) or pupe_error ( $tarkquery );
						
						if (mysql_num_rows ( $tarkres ) == 1) {
							//	Ylikirjoitetaan liitostunnus
							$tarkrow = mysql_fetch_assoc ( $tarkres );
							$override ["liitostunnus"] = $tarkrow ["tunnus"];
							
							//	Meid‰n pit‰‰korvata se vanha liitostunnus my‰s where haarasta..
							$where = str_replace ( " and liitostunnus='$abuhaku[liitostunnus]'", " and liitostunnus='$override[liitostunnus]'", $where );
						
						} else {
							$synclog .= "Yhti‰lle '$kohderow[yhtio]' ei l‰ydy toimittajaa $masterrow[toimittaja] joten tuotteen toimittajaa ei voida sycronisoida\n";
							$ok = 0;
						}
					} else {
						$synclog .= "Yhti‰lle '$kohderow[yhtio]' ei l‰ydy tuotetta $masterrow[tuoteno] joten tuotteen toimittajaa ei voida sycronisoida\n";
						$ok = 0;
					}
				}
				
				//	Poistetaan tietue jos masteria ei l‰ydetty mutta originaali on tallessa.. olisiko t‰ss‰ selvempi tapa?
				if (! isset ( $masterrow ) and is_array ( $orig ) and count ( $orig ) > 0) {
					
					//	Tarkastetaan ettei t‰ll‰ kriteerill‰ l‰ydy useita poistettavia..
					$query = "	SELECT tunnus
								FROM $table
								WHERE yhtio = '$kohderow[yhtio]'
								$where";
					$abures = mysql_query ( $query );
					
					if (mysql_num_rows ( $abures ) == 1) {
						$aburow = mysql_fetch_assoc ( $abures );
						$vanhatunnus = $aburow ["tunnus"];
						
						$query = "	DELETE
									FROM $table
									WHERE yhtio = '$kohderow[yhtio]'
									and tunnus = $vanhatunnus";
						$delres = mysql_query ( $query );
						
						$synclog .= "Yhti‰lt‰ '$kohderow[yhtio]' poistettiin tietue ($vanhatunnus)\n";
						synclog ( $kohderow ["yhtio"], $table, "Poistettiin $table ($vanhatunnus)", $vanhatunnus );
					} elseif (mysql_num_rows ( $abures ) > 0) {
						$synclog .= "Yhti‰ll‰ '$kohderow[yhtio]' oli liian monta tietuetta haussa, tietuetta ei voitu poistaa.\n";
						synclog ( $kohderow ["yhtio"], $table, "Koitettiin poistaa $table, mutta haulla l‰ytyi enemm‰n kuin yski tietue, mit‰‰n ei poistettu!", $utunnus );
					} else {
						$synclog .= "Yhti‰ll‰ '$kohderow[yhtio]' ei ollut poistettaavaa tietuetta.\n";
					}
				} else {
					
					if ($table == "toimi") {
						
						//	Hyv‰ksyji‰, kustannuspaikkoja ja tili‰ ei synkata
						foreach ( array ("oletus_hyvak1", "oletus_hyvak2", "oletus_hyvak3", "oletus_hyvak4", "oletus_hyvak5", "tilino", "kustp", "kohde", "projekti" ) as $value ) {
							$override [$value] = "";
						}
					}
					
					if ($table == "tuote") {
						//	Oletetaan, ett‰ meill‰ on avainsanat sycronoituna (osasto/try)
						foreach ( array ("myyjanro", "ostajanro", "tilino", "tilino_eu", "tilino_ei_eu", "kustp", "kohde", "projekti", "kehahin", "vihahin", "vihapvm", "epakurantti25pvm", "epakurantti50pvm", "epakurantti75pvm", "epakurantti100pvm" ) as $value ) {
							$override [$value] = "";
						}
						
						// Tarkastetaan ett‰ hinnat eiv‰t mene aivan p‰in mets‰‰..
						$query = "select tunnus from yhtion_parametrit where yhtio='$kohderow[yhtio]' and alv_kasittely!='$yhtion_parametrit[alv_kasittely]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						
						if (mysql_num_rows ( $abures ) != 0 and $masterrow ["alv"] > 0) {
							
							// yhtiolla on verolliset hinnat kohteella verottomat
							if ($yhtiorow ["alv_kasittely"] == "") {
								$override ["myyntihinta"] = round ( ($masterrow ["myyntihinta"] * (1 + $masterrow ["alv"] / 100)), 2 );
								$override ["nettohinta"] = round ( ($masterrow ["nettohinta"] * (1 + $masterrow ["alv"] / 100)), 2 );
							} else {
								$override ["myyntihinta"] = round ( ($masterrow ["myyntihinta"] / (1 + $masterrow ["alv"] / 100)), 2 );
								$override ["nettohinta"] = round ( ($masterrow ["nettohinta"] / (1 + $masterrow ["alv"] / 100)), 2 );
							}
						}
					}
					
					if ($table == "asiakas") {
						foreach ( array ("myyjanro", "tilino", "kustp", "kohde", "projekti" ) as $value ) {
							$override [$value] = "";
						}
						
						//	koitetaan hakea oikean maksuehdon tunnus..
						$query = "SELECT * from maksuehto where yhtio='$yhtio' and tunnus='$masterrow[maksuehto]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						$aburow = mysql_fetch_assoc ( $abures );
						
						//	Melkein kaikki tiedot pit‰‰ stemmata!
						$query = "	SELECT tunnus
									from maksuehto
									where yhtio				= '$kohderow[yhtio]'
									and abs_pvm				= '$aburow[abs_pvm]'
									and erapvmkasin			= '$aburow[erapvmkasin]'
									and factoring			= '$aburow[factoring]'
									and jaksotettu			= '$aburow[jaksotettu]'
									and jv					= '$aburow[jv]'
									and kassa_abspvm		= '$aburow[kassa_abspvm]'
									and kassa_alepros		= '$aburow[kassa_alepros]'
									and kassa_relpvm		= '$aburow[kassa_relpvm]'
									and kateinen			= '$aburow[kateinen]'
									and osamaksuehto1		= '$aburow[osamaksuehto1]'
									and osamaksuehto2		= '$aburow[osamaksuehto2]'
									and rel_pvm				= '$aburow[rel_pvm]'
									and sallitut_maat		= '$aburow[sallitut_maat]'
									and summanjakoprososa2	= '$aburow[summanjakoprososa2]'
									and suoraveloitus		= '$aburow[suoraveloitus]'
									LIMIT 1";
						$tarkres = mysql_query ( $query ) or pupe_error ( $query );
						
						if (mysql_num_rows ( $tarkres ) == 1) {
							$tarkrow = mysql_fetch_assoc ( $tarkres );
							$override ["maksuehto"] = $tarkrow ["tunnus"];
						} else {
							$override ["maksuehto"] = "";
						}
						
						//	koitetaan hakea oikean toimitustavan tunnus..
						$query = "SELECT * from toimitustapa where yhtio='$yhtio' and tunnus='$masterrow[toimitustapa]'";
						$abures = mysql_query ( $query ) or pupe_error ( $query );
						$aburow = mysql_fetch_assoc ( $abures );
						
						//	Melkein kaikki tiedot pit‰‰ stemmata!
						$query = "	SELECT tunnus from toimitustapa where yhtio='$kohderow[yhtio]'
									and selite			= '$aburow[selite]'
									and jvkulu			= '$aburow[jvkulu]'
									and lauantai		= '$aburow[lauantai]'
									and maa_maara		= '$aburow[maa_maara]'
									and merahti			= '$aburow[merahti]'
									and multi_jv		= '$aburow[multi_jv]'
									and nouto			= '$aburow[nouto]'
									and sallitut_maat	= '$aburow[sallitut_maat]'
									";
						$tarkres = mysql_query ( $query ) or pupe_error ( $query );
						if (mysql_num_rows ( $tarkres ) == 1) {
							$tarkrow = mysql_fetch_assoc ( $tarkres );
							$override ["toimitustapa"] = $tarkrow ["tunnus"];
						} else {
							$override ["toimitustapa"] = "";
						}
					}
					
					//	P‰ivitet‰‰n vai tehd‰‰n uutta?
					$query = "	SELECT tunnus
								FROM $table
								WHERE yhtio ='$kohderow[yhtio]' $where";
					$abures = mysql_query ( $query );
					
					$ok = 1;
					
					if (mysql_num_rows ( $abures ) == 0) {
						$query = "INSERT into $table SET yhtio='$kohderow[yhtio]', laatija='$yhtio', luontiaika=now() ";
						$query2 = "";
					} elseif (mysql_num_rows ( $abures ) == 1) {
						$aburow = mysql_fetch_assoc ( $abures );
						$vanhatunnus = $aburow ["tunnus"];
						
						$query = "UPDATE $table SET yhtio='$kohderow[yhtio]'";
						$query2 = " WHERE yhtio='$kohderow[yhtio]' and tunnus=$vanhatunnus";
					} else {
						$ok = 0;
					}
					
					if ($ok == 1) {
						//	Duunataan itse p‰ivitys/insert kysely!!!
						for($i = 1; $i < mysql_num_fields ( $masterres ); $i ++) {
							if (isset ( $masterrow [mysql_field_name ( $masterres, $i )] ) and ! in_array ( mysql_field_name ( $masterres, $i ), array ("yhtio", "tunnus", "muuttaja", "muutospvm", "laatija", "luontiaika" ) )) {
								if (isset ( $override [mysql_field_name ( $masterres, $i )] )) {
									if ($override [mysql_field_name ( $masterres, $i )] != "") {
										$query .= ", " . mysql_field_name ( $masterres, $i ) . "='" . $override [mysql_field_name ( $masterres, $i )] . "' ";
									}
								} else {
									$query .= ", " . mysql_field_name ( $masterres, $i ) . "='" . $masterrow [mysql_field_name ( $masterres, $i )] . "' ";
								}
							}
						}
						
						$query = $query . " " . $query2;
						$updres = mysql_query ( $query ) or pupe_error ( $query );
						
						if (mysql_affected_rows () > 0) {
							
							$erot = "";
							
							if (count ( $override ) > 0) {
								$erot = "\n\nPoikkeukset synkronoinnissa:\n";
								
								foreach ( $override as $key => $value ) {
									$erot .= "$key: " . $masterrow [$key] . " => " . $value . "\n";
								}
							}
							
							if (mysql_num_rows ( $abures ) == 0) {
								$utunnus = mysql_insert_id ();
								$synclog .= "Yhti‰lle '$kohderow[yhtio]' lis‰ttiin tietue ($utunnus)\n";
								
								synclog ( $kohderow ["yhtio"], $table, "Uusi $table lis‰tty.$erot", $utunnus );
							} else {
								//	Annetaan aikaleima t‰ss‰, koska muuten affected row ei koskaan toimi oikein!
								$query = "UPDATE $table SET yhtio='$kohderow[yhtio]', muuttaja='$yhtio', muutospvm=now() WHERE yhtio='$kohderow[yhtio]' and tunnus=$vanhatunnus";
								$updres = mysql_query ( $query ) or pupe_error ( $query );
								
								synclog ( $kohderow ["yhtio"], $table, "Tietue ($vanhatunnus) p‰ivitetty." . $muutos . $erot, $utunnus );
								$synclog .= "Yhti‰lle '$kohderow[yhtio]' p‰ivitettiin tietue ($vanhatunnus)\n";
							}
						} else {
							$synclog .= "Yhti‰lle '$kohderow[yhtio]' ei ollut mit‰‰n p‰ivitett‰v‰‰\n";
						}
					} else {
						$synclog .= "VIRHE: Yhti‰n '$kohderow[yhtio]' tietoa ei voitu p‰ivitt‰‰!!!\n";
					}
				}
			}
		} else {
			$synclog .= "Yht‰‰n synkronoitavaa yhti‰t‰ ei l‰ytynyt!!!\n";
			synclog ( $yhtio, $table, $synclog, $tunnus );
			return false;
		}
		
		$synclog .= "\nsynkronointi valmis!!";
		synclog ( $yhtio, $table, $synclog, $tunnus );
		return true;
	}
}

if (! function_exists ( "jalkilaskentafunktiolle_ostohinta" )) {
	function jalkilaskentafunktiolle_ostohinta($otunnus, $rivitunnus) {
		global $yhtiorow, $kukarow;
		
		// haetaan keikan otsikko laskurowhun
		$query = "	SELECT *
					from lasku
					where tunnus = '$otunnus'
					and yhtio	 = '$kukarow[yhtio]'
					and ((tila='K' and alatila = 'X') or (tila='U' and alatila = 'X') or (tila='K' and alatila = 'I'))";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $result ) == 1) {
			$laskurow = mysql_fetch_assoc ( $result );
			
			if ($laskurow ["tila"] == "U") {
				// Tavara on ostettu sis‰‰n myyntilaskulla
				$query = "	SELECT round(tilausrivi.rivihinta/tilausrivi.kpl, 2) ohinta
							FROM tilausrivi
							WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
							and tilausrivi.tunnus = $rivitunnus";
				$presult = mysql_query ( $query ) or pupe_error ( $query );
				$tilrivirow = mysql_fetch_assoc ( $presult );
				
				return $tilrivirow ["ohinta"];
			} elseif ($laskurow ["tila"] == "K" and $laskurow ["alatila"] == "I") {
				// Tavara on ostettu sis‰‰n myyntilaskulla
				$query = "	SELECT round(tilausrivi.rivihinta/tilausrivi.kpl, 2) ohinta
							FROM tilausrivi
							WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
							and tilausrivi.tunnus = $rivitunnus";
				$presult = mysql_query ( $query ) or pupe_error ( $query );
				$tilrivirow = mysql_fetch_assoc ( $presult );
				
				return $tilrivirow ["ohinta"];
			} else {
				// Tavara on ostettu sis‰‰n keikalla
				

				// Virallinen laskenta, haetaan ihan kaikki rivit uudestaan (varattu=0) kaikki pit‰‰ olla viety varastoon jo ennen t‰t‰..
				$query = "	SELECT tilausrivi.*, tilausrivi.kpl varattu
							FROM tilausrivi
							JOIN lasku ON (lasku.yhtio = tilausrivi.yhtio and lasku.tunnus = tilausrivi.uusiotunnus)
							LEFT JOIN tuotteen_toimittajat ON (tilausrivi.yhtio = tuotteen_toimittajat.yhtio and tilausrivi.tuoteno = tuotteen_toimittajat.tuoteno and tuotteen_toimittajat.liitostunnus = lasku.liitostunnus)
							WHERE tilausrivi.uusiotunnus = '$laskurow[tunnus]'
							and tilausrivi.varattu = 0
							and tilausrivi.yhtio = '$kukarow[yhtio]'
							and	tilausrivi.tyyppi = 'O'
							and tilausrivi.tunnus = $rivitunnus";
				$presult = mysql_query ( $query ) or pupe_error ( $query );
				
				// Tsekataan viel‰ laskun valuttakurssi
				if ($laskurow ["vienti_kurssi"] == 0) { //t‰m‰ olisi huonompi juttu, mut ei mik‰‰n stopperi
					$laskurow ["vienti_kurssi"] = 1;
				}
				
				// jos erikoisale niin otetaan sit‰ kanssa huomioon
				if ($laskurow ['erikoisale'] != 0) {
					$erikoisale = 1 - ($laskurow ['erikoisale'] / 100);
				} else {
					$erikoisale = 1;
				}
				
				// Jos lasketaan virallista varastonarvoa, otetaan keikan summa huomioon (kululaskujen yhteenlaskettu summa OLETUSVALUUTASSA on laskurow.saldo_maksettu)
				$rahtikulut = $laskurow ['saldo_maksettu'] + round ( $laskurow ['rahti_etu'] * $laskurow ['vienti_kurssi'], 6 );
				
				while ( $tilrivirow = mysql_fetch_assoc ( $presult ) ) {
					
					$query = "	SELECT *
								from tuote
								LEFT JOIN tuotteen_toimittajat ON (tuotteen_toimittajat.liitostunnus = '$laskurow[liitostunnus]' and tuote.yhtio = tuotteen_toimittajat.yhtio and tuote.tuoteno = tuotteen_toimittajat.tuoteno)
								where tuote.yhtio	= '$kukarow[yhtio]'
								and tuote.tuoteno	= '$tilrivirow[tuoteno]'";
					$tuores = mysql_query ( $query ) or pupe_error ( $query );
					$tuorow = mysql_fetch_assoc ( $tuores );
					
					if ($tuorow ['tuotekerroin'] <= 0)
						$tuorow ['tuotekerroin'] = 1;
					
		// jos kysess‰ on kotimainen vaihto-omaisuuslasku, pit‰‰ lis‰t‰ tuotteen hintaan alvi
					if ($laskurow ['vienti'] == 'C' or $laskurow ['vienti'] == 'J') {
						$alvit = 1 + $tuorow ["alv"] / 100;
					} else {
						$alvit = 1;
					}
					
					if ($laskurow ['summa'] != 0) {
						$osuus = round ( $erikoisale * $tilrivirow ['hinta'] * $alvit * abs ( $tilrivirow ['varattu'] ) * (1 - ($tilrivirow ['ale'] / 100)) * $tuorow ['tuotekerroin'], 2 ) / $laskurow ['summa']; // kuinka paljon t‰m‰ rivi on koko tilauksesta
						$rahtios = $osuus * $rahtikulut; // lasketaan sama osuus rahtikuluista t‰lle riville
					} else {
						$rahtios = 0;
					}
					
					if ($tilrivirow ['varattu'] < 0) {
						$rahtios = $rahtios * - 1;
					}
					
					$ohinta = round ( $erikoisale * $tilrivirow ['hinta'] * (1 - ($tilrivirow ['ale'] / 100)) * $tuorow ['tuotekerroin'] * $laskurow ['vienti_kurssi'] * $tilrivirow ['varattu'] + $rahtios, 6 ); // tuotteen rivihinta rahteineen OLETUSVALUUTASSA
					

					$tulliprossa = "";
					
					if ($tilrivirow ["var"] == "" and $laskurow ["maa"] != $yhtiorow ["maa"]) {
						// lis‰t‰‰n tulli
						require ("tilauskasittely/taric_veroperusteet.inc");
						
						$ohinta = $ohinta * (1 + ($tulliprossa / 100));
					}
					
					// lis‰t‰‰n riville extra kulu, jos sellanen oli annettu
					if ($tilrivirow ["kate"] != 0) {
						$ohinta = $ohinta + $tilrivirow ['kate'];
					}
					
					$rivihin = round ( $ohinta, $yhtiorow ['hintapyoristys'] ); // tilausrivin rivihinta talteen
					$ohinta = round ( $ohinta / $tilrivirow ['varattu'], 2 ); // yhden tuotteen hinta kaikkine kuluineen
					

					return $ohinta;
				}
			}
		} else {
			return FALSE;
		}
	}
}

if (! function_exists ( "jalkilaskentafunktio" )) {
	function jalkilaskentafunktio($tuoteno, $pvm, $uusihinta, $rivitunnus, $tapahtumatunnus = 0, $kaantopisteen_saldomuutos = 0) {
		global $yhtiorow, $kukarow, $jalkilaskenta_debug_text, $korjattavat_valmistukset, $korjattavat_valmistukset_ind;
		
		/*
		$tuoteno 	= korjattava tuote
		$pvm 		= mihin p‰iv‰‰n asti korjataan
		$uusihinta 	= mik‰ on tuon pvm:n oikea ostohinta
		$rivitunnus = mik‰ on tapahtuman tehneen rivin tunnus (ostorivitunnus)
		*/
		
		require ("tilauskasittely/jalkilaskenta.inc");
		
		return $uusikehahin;
	}
}

if (! function_exists ( "jalkilaske_valmistus" )) {
	function jalkilaske_valmistus($valmistettava_tilaus) {
		global $kukarow, $yhtiorow, $korjattavat_valmistukset, $korjattavat_valmistukset_ind;
		
		$toim = "KORJAA";
		$from_kaikkikorj = "KORJAAKAIKKI";
		$tee = "VALMISTA";
		
		$query = "	SELECT lasku.tunnus,
					sum(if (tilausrivi.tyyppi in ('V','W'), 1, 0)) valmistusriveja,
					GROUP_CONCAT(DISTINCT tilausrivi.tunnus SEPARATOR ',') valmistettavat
					from tilausrivi, lasku
					where tilausrivi.yhtio = '$kukarow[yhtio]'
					and lasku.yhtio = tilausrivi.yhtio
					and lasku.tunnus = tilausrivi.otunnus
					and lasku.tila 	in ('V', 'L')
					and lasku.alatila  in ('V', 'K', 'X')
					and (tilausrivi.toimitettu != '' or tilausrivi.tyyppi='D') and lasku.tilaustyyppi in ('V','W','N')
					and lasku.tunnus = '$valmistettava_tilaus'
					GROUP BY lasku.tunnus
					HAVING valmistusriveja > 0";
		$tilre = mysql_query ( $query ) or pupe_error ( $query );
		$tilrow = mysql_fetch_assoc ( $tilre );
		
		$valmistettavat = $tilrow ["valmistettavat"];
		
		if ($tee == "VALMISTA" and $valmistettavat != "") {
			//Haetaan otsikoiden tiedot
			$query = "	SELECT
						GROUP_CONCAT(DISTINCT lasku.tunnus SEPARATOR ', ') 'Tilaus',
						GROUP_CONCAT(DISTINCT lasku.nimi SEPARATOR ', ') 'Asiakas/Nimi',
						GROUP_CONCAT(DISTINCT lasku.ytunnus SEPARATOR ', ') 'Ytunnus',
						GROUP_CONCAT(DISTINCT lasku.tilaustyyppi SEPARATOR ', ') 'Tilaustyyppi'
						FROM tilausrivi, lasku
						WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
						and	tilausrivi.tunnus in ($valmistettavat)
						and lasku.tunnus=tilausrivi.otunnus
						and lasku.yhtio=tilausrivi.yhtio";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $result ) == 0) {
				echo "<font class='error'>" . t ( "Yht‰‰n tilausta ei l‰ytynyt" ) . "</font><br>";
				$tee = "";
			}
		} else {
			echo "<tr>";
			echo "<th>$valmistettava_tilaus</th>";
			echo "<td colspan='5'><font class='error'>" . t ( "Yht‰‰n valmistusrivi‰ ei l‰ytynyt" ) . "!</font></td>";
			echo "</tr>";
		}
		
		if ($tee == "VALMISTA" and $valmistettavat != "") {
			$row = mysql_fetch_assoc ( $result );
			
			//P‰ivitet‰‰n lasku niin, ett‰ se on tilassa korjataan
			$query = "	UPDATE lasku
						SET alatila	= 'K'
						WHERE yhtio = '$kukarow[yhtio]'
						and tunnus  in ($row[Tilaus])
						and tila	in ('V','L')
						and alatila in ('V','X')";
			$chkresult4 = mysql_query ( $query ) or pupe_error ( $query );
			
			$korjataan = " and (tilausrivi.toimitettu != '' or tilausrivi.tyyppi='D') ";
			
			//Haetaan valmistettavat valmisteet ja k‰ytett‰v‰t raaka-aineet
			$query = "	SELECT tilausrivi.nimitys,
						tilausrivi.tuoteno,
						tilkpl tilattu,
						if (tyyppi!='L', varattu, 0) valmistetaan,
						if (tyyppi='L' or tyyppi='D', varattu, 0) valmistettu,
						if (toimitettu!='', if (varattu!=0, varattu, kpl), 0) korjataan,
						if (toimitettu!='', kpl, 0) valmistettu_valmiiksi,
						if (tyyppi!='L', kpl, 0) kaytetty,
						toimaika,
						kerayspvm,
						tilausrivi.tunnus tunnus,
						tilausrivi.perheid,
						tilausrivi.tyyppi,
						tilausrivi.toimitettuaika,
						tilausrivi.otunnus otunnus,
						tilausrivi.uusiotunnus laskutettu,
						tilausrivi.kommentti,
						tuote.ei_saldoa,
						tilausrivi.kommentti,
						tuote.sarjanumeroseuranta,
						tuote.yksikko,
						tilausrivi.varattu,
						tilausrivi.var,
						tilausrivi.hyllyalue,
						tilausrivi.hyllyvali,
						tilausrivi.hyllytaso,
						tilausrivi.hyllynro
						FROM tilausrivi, tuote
						WHERE
						tilausrivi.otunnus in ($row[Tilaus])
						and tilausrivi.tunnus in ($valmistettavat)
						and tilausrivi.yhtio = '$kukarow[yhtio]'
						and tuote.yhtio = tilausrivi.yhtio
						and tuote.tuoteno = tilausrivi.tuoteno
						and tyyppi in ('V','W','M','L','D')
						$korjataan
						ORDER BY perheid desc, tyyppi in ('W','M','L','D','V'), tunnus";
			$presult = mysql_query ( $query ) or pupe_error ( $query );
			$riveja = mysql_num_rows ( $presult );
			
			$rivkpl = mysql_num_rows ( $presult );
			$voikokorjata = 0;
			
			$tee = 'TEEVALMISTUS';
			$valmisteet_chk = array ();
			$tuotenumerot = array ();
			$edtilkpllat = array ();
			$tilkpllat = array ();
			$valmkpllat = array ();
			$rekru = array ();
			$virhe = array ();
			$perutamakorj = array ();
			$era_new_paikka = "";
			unset ( $osatoimitus );
			
			while ( $prow = mysql_fetch_assoc ( $presult ) ) {
				
				if ($prow ["tyyppi"] == 'W' or $prow ["tyyppi"] == 'M') {
					// N‰m‰ ovat valmisteita
					$valmisteet_chk [$prow ["tunnus"]] = $prow ["tuoteno"];
					$tuotenumerot [$prow ["tunnus"]] = $prow ["tuoteno"];
				} elseif ($prow ["tyyppi"] == 'D') {
					// N‰m‰ ovat jo valmistettu
				} else {
					// T‰ss‰ tulevat kaikki raaka-aineet
					

					// tehd‰‰n salditsekki vain saldollisille raaka-aineille
					if ($prow ["ei_saldoa"] == "") {
						$tuotenumerot [$prow ["tunnus"]] = $prow ["tuoteno"];
					}
				}
				
				if ($toim == "KORJAA" and $prow ["tyyppi"] == 'V') {
					$edtilkpllat [$prow ["tunnus"]] = $prow ["korjataan"];
					$tilkpllat [$prow ["tunnus"]] = $prow ["korjataan"];
				} elseif ($toim == "KORJAA" and $prow ["tyyppi"] == 'W') {
					$edtilkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
					$tilkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
				} elseif ($prow ["toimitettuaika"] == "0000-00-00 00:00:00") {
					$edtilkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
					$tilkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
				}
				
				if (($prow ["tyyppi"] == "W" or $prow ["tyyppi"] == "M") and $prow ["toimitettuaika"] != "0000-00-00 00:00:00" and $toim == "KORJAA") {
					
					//tutkitaan kuinka paljon t‰t‰ nyt oli valmistettu
					$query = "	SELECT sum(kpl) valmistetut
								FROM tilausrivi
								WHERE yhtio	= '$kukarow[yhtio]'
								and otunnus = '$prow[otunnus]'
								and perheid = '$prow[perheid]'
								and tuoteno = '$prow[tuoteno]'
								and tyyppi	= 'D'
								and toimitettuaika = '0000-00-00 00:00:00'";
					$sumres = mysql_query ( $query ) or pupe_error ( $query );
					$sumrow = mysql_fetch_array ( $sumres );
					
					$query = "	SELECT count(*) laskuja
								FROM lasku
								WHERE yhtio	= '$kukarow[yhtio]'
								and tunnus 	= '$prow[laskutettu]'
								and tila 	= 'U'
								and alatila	= 'X'";
					$slres = mysql_query ( $query ) or pupe_error ( $query );
					$slrow = mysql_fetch_array ( $slres );
					
					if ($prow ["tunnus"] == $prow ["perheid"]) {
						if ($sumrow ["valmistetut"] != 0 and $slrow ["laskuja"] == 0) {
							
							if (( float ) $prow ["valmistetaan"] > 0) {
								$valmkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
							} else {
								$valmkpllat [$prow ["tunnus"]] = $sumrow ["valmistetut"];
							}
							
							$voikokorjata ++;
						} elseif ($sumrow ["valmistetut"] != 0 and $slrow ["laskuja"] > 0) {
							
							if (( float ) $prow ["valmistetaan"] > 0) {
								$valmkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
							} else {
								$valmkpllat [$prow ["tunnus"]] = $sumrow ["valmistetut"];
							}
							
							$voikokorjata ++;
						}
					} else {
						if (($sumrow ["valmistetut"] != 0 and $slrow ["laskuja"] == 0) or ($sumrow ["valmistetut"] != 0 and $slrow ["laskuja"] > 0)) {
							
							if (( float ) $prow ["valmistetaan"] > 0) {
								$valmkpllat [$prow ["tunnus"]] = $prow ["valmistetaan"];
							} else {
								$valmkpllat [$prow ["tunnus"]] = $sumrow ["valmistetut"];
							}
						}
					}
				}
			
		#echo "<tr>";
			#echo "<th>$valmistettava_tilaus</th>";
			#echo "<td>".$valmisteet_chk[$prow["tunnus"]]."</td>";
			#echo "<td>".$tuotenumerot[$prow["tunnus"]]."</td>";
			#echo "<td>".$edtilkpllat[$prow["tunnus"]]."</td>";
			#echo "<td>".$tilkpllat[$prow["tunnus"]]."</td>";
			#echo "<td>".$valmkpllat[$prow["tunnus"]]."</td>";
			#echo "</tr>";
			}
			
			ob_start ();
			require ("tilauskasittely/valmista_tilaus.php");
			$retval = ob_get_contents ();
			ob_end_clean ();
			
			if (count ( $virhe ) > 0) {
				echo "<tr>";
				echo "<th>$valmistettava_tilaus</th>";
				echo "<td colspan='5'><font class='error'>", var_dump ( $virhe ), "</font></td>";
				echo "</tr>";
			} else {
				echo "<tr>";
				echo "<th>$valmistettava_tilaus</th>";
				echo "<td colspan='5'><font class='ok'>$retval</font></td>";
				echo "</tr>";
			}
		}
	}
}

if (! function_exists ( "tuotteen_myyntihinta" )) {
	function tuotteen_myyntihinta($laskurow, $trow, $kpl, $naytetaanko_netto = "") {
		global $yhtiorow, $kukarow;
		
		// palautetaan tuotteen SVH laskun valuutassa
		// t‰m‰ funktion on kopsattu alehinta-funktiosta sopivilta osilta
		$hinta = 0;
		$netto = "";
		$valuutta = "";
		
		// 5. hinnasto.hinta tuotteen nettohinta hinnastosta laskun valuutassa
		if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE yhtio  = '$kukarow[yhtio]'
						and tuoteno  = '$trow[tuoteno]'
						and tuoteno != ''
						and laji in ('N', 'E')
						and valkoodi = '$laskurow[valkoodi]'
						and maa in ('$laskurow[maa]','')
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		}
		
		// 6. hinnasto.hinta tuotteen nettohinta hinnastosta yhti‰n valuutassa
		if ($hinta == 0) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE yhtio  = '$kukarow[yhtio]'
						and tuoteno  = '$trow[tuoteno]'
						and tuoteno != ''
						and laji in ('N', 'E')
						and valkoodi in ('$yhtiorow[valkoodi]','')
						and maa in ('$laskurow[maa]','')
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		}
		
		// 15. tuote.nettohinta (tuotteen nettohinta)
		if ($hinta == 0 and $trow ['nettohinta'] > 0 and $naytetaanko_netto == "") {
			$hinta = $trow ['nettohinta'];
			$netto = 'N';
			$valuutta = $yhtiorow ["valkoodi"];
		}
		
		// 16. hinnasto.hinta tuotteen bruttohinta hinnastosta laskun valuutassa
		if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE yhtio  = '$kukarow[yhtio]'
						and tuoteno  = '$trow[tuoteno]'
						and tuoteno != ''
						and laji     = ''
						and valkoodi = '$laskurow[valkoodi]'
						and maa in ('$laskurow[maa]','')
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						
ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		}
		
		// 17. hinnasto.hinta tuotteen bruttohinta hinnastosta yhtion valuutassa
		if ($hinta == 0) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE yhtio  = '$kukarow[yhtio]'
						and tuoteno  = '$trow[tuoteno]'
						and tuoteno != ''
						and laji     = ''
						and valkoodi in ('$yhtiorow[valkoodi]','')
						and maa in ('$laskurow[maa]','')
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						



ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		}
		
		// 18. tuote.myyntihinta (tuotteen bruttohinta)
		if ($hinta == 0) {
			
			$hinta = $trow ['myyntihinta'];
			$netto = '';
			$valuutta = $yhtiorow ["valkoodi"];
		}
		
		if ($valuutta == "")
			$valuutta = $yhtiorow ["valkoodi"];
		
		if ($laskurow ["valkoodi"] != $valuutta) {
			$hinta = laskuval ( $hinta, $laskurow ["vienti_kurssi"] );
		}
		
		return $hinta;
	
	}

}

if (! function_exists ( "tuotteen_ostohinta" )) { // jamppa s‰‰t‰‰
	function tuotteen_ostohinta($laskurow, $trow, $kpl, $naytetaanko_netto = "") {
		global $yhtiorow, $kukarow;
		
		/**
		Kohta 1. Haetaan TUOTTEEN_TOIMITTAJAN omalla tuotekoodilla laskun valuutalla.
		Kohta 2. Haetaan TUOTTEEN_TOIMITTAJAN omalla tuotekoodilla yhtion valuutalla.
		Kohta 3. Haetaan PUPEN omalla tuotekoodilla laskun valuutalla.
		Kohta 4. Haetaan PUPEN omalla tuotekoodilla yhtion valuutalla.
		Kohta 5. Haetaan TUOTTEEN_TOIMITTAJAN ostohinnalla, mik‰li hinnastosta ei l‰ydy.
		 **/
		
		// palautetaan tuotteen SVH laskun valuutassa
		// t‰m‰ funktion on kopsattu tuotteen_myyntihinta-funktiosta sopivilta osilta
		$hinta = 0;
		$netto = "";
		$valuutta = "";
		$lisahaku = "";
		$toim_tuoteno = "";
		
		$prequery = "	SELECT toim_tuoteno
						FROM tuotteen_toimittajat
						WHERE tuoteno = '$trow[tuoteno]'
						AND tuotteen_toimittajat.liitostunnus = '$laskurow[liitostunnus]'
						LIMIT 1";
		$preres = mysql_query ( $prequery ) or pupe_error ( $prequery );
		
		if (mysql_num_rows ( $preres ) > 0) {
			$prerow = mysql_fetch_assoc ( $preres );
			$toim_tuoteno = trim ( $prerow ['toim_tuoteno'] );
		}
		
		// 1. Laskun valuutalla, toimittajan tuoteno:lla,
		if ($toim_tuoteno != "" and $hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE hinnasto.yhtio  = '$kukarow[yhtio]'
						and hinnasto.tuoteno  = '$toim_tuoteno'
						and hinnasto.tuoteno != ''
						and hinnasto.laji = 'O'
						and hinnasto.valkoodi = '$laskurow[valkoodi]'
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) != 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		
		}
		
		// 2. yhtion valuutalla, toimittajan tuoteno
		if ($toim_tuoteno != "" and $hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) == trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE hinnasto.yhtio  = '$kukarow[yhtio]'
						and hinnasto.tuoteno  = '$toim_tuoteno'
						and hinnasto.tuoteno != ''
						and hinnasto.laji = 'O'
						and hinnasto.valkoodi in ('$yhtiorow[valkoodi]','')
						and ((hinnasto.alkupvm <= current_date and if (hinnasto.loppupvm = '0000-00-00','9999-12-31',hinnasto.loppupvm) >= current_date) or (hinnasto.alkupvm='0000-00-00' and hinnasto.loppupvm='0000-00-00'))
						and ((hinnasto.minkpl <= '$kpl' and hinnasto.maxkpl >= '$kpl') or (hinnasto.minkpl = 0 and hinnasto.maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(hinnasto.alkupvm),9999999999999), hinnasto.valkoodi DESC
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) != 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		
		}
		
		// 3. laskun valuutalla, omalla tuoteno
		if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE hinnasto.yhtio  = '$kukarow[yhtio]'
						and hinnasto.tuoteno  = '$trow[tuoteno]'
						and hinnasto.tuoteno != ''
						and hinnasto.laji = 'O'
						and hinnasto.valkoodi = '$laskurow[valkoodi]'
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) != 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		
		}
		
		// 4. yhti‰n valuutalla, omalla tuoteno
		if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) == trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
			
			$query = "	SELECT *
						FROM hinnasto
						WHERE hinnasto.yhtio  = '$kukarow[yhtio]'
						and hinnasto.tuoteno  = '$trow[tuoteno]'
						and hinnasto.tuoteno != ''
						and hinnasto.laji = 'O'
						and hinnasto.valkoodi in ('$yhtiorow[valkoodi]','')
						and ((hinnasto.alkupvm <= current_date and if (hinnasto.loppupvm = '0000-00-00','9999-12-31',hinnasto.loppupvm) >= current_date) or (hinnasto.alkupvm='0000-00-00' and hinnasto.loppupvm='0000-00-00'))
						and ((hinnasto.minkpl <= '$kpl' and hinnasto.maxkpl >= '$kpl') or (hinnasto.minkpl = 0 and hinnasto.maxkpl = 0))
						ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(hinnasto.alkupvm),9999999999999), hinnasto.valkoodi DESC
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) != 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["hinta"];
				$netto = $hrow ["laji"];
				$valuutta = $hrow ["valkoodi"];
			}
		}
		
		// 5. tuotteen toimittajan ostohinta
		if ($hinta == 0) {
			$query = "	SELECT *
						FROM tuotteen_toimittajat
						WHERE yhtio = '$kukarow[yhtio]'
						and tuoteno = '$trow[tuoteno]'
						and liitostunnus = '$laskurow[liitostunnus]'";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$hrow = mysql_fetch_assoc ( $hresult );
				$hinta = $hrow ["ostohinta"];
				$netto = "";
				$valuutta = $hrow ["valuutta"];
			}
		}
		
		if ($valuutta == "")
			$valuutta = $yhtiorow ["valkoodi"];
		
		if ($laskurow ["valkoodi"] != $valuutta) {
			$hinta = laskuval ( $hinta, $laskurow ["vienti_kurssi"] );
		}
		
		return $hinta;
	
	}
}

if (! function_exists ( "alv" )) {
	function alv($laskurow, $trow, $hinta, $alv, $alehinta_alv) {
		global $yhtiorow, $kukarow;
		
		///* Sis‰‰n *///
		// $alv                			--> K‰ytt‰j‰n sy‰tt‰m‰ ALV
		// $hinta						--> alehinta-funktion laskema hinta
		// $trow[alv]           		--> Tuotteen ALV
		// $laskurow[vienti]   		 	--> Laskun tyyppi (kotimaa '', vientieu 'E' , vienti eieu 'K')
		// $laskurow[ytunnus]   		--> Laskunsaajan y-tunnus
		// $laskurow[tila]      		--> Laskun tila O=osto, muut tilat on myynti‰
		// $laskurow[alv]       		--> Laskun otsikolla oleva alv
		// $laskurow["valkoodi"]		--> Laskun valuutta
		

		///* Ulos *///
		// $alv                			--> Uusi lakettu ALV
		// $hinta           			--> Uusi lakettu kappalehinta
		

		//yhti‰n oletusalvi!
		$wquery = "SELECT selite from avainsana where yhtio='$kukarow[yhtio]' and laji='alv' and selitetark!=''";
		$wtres = mysql_query ( $wquery ) or pupe_error ( $wquery );
		$wtrow = mysql_fetch_assoc ( $wtres );
		
		// jos meill‰ on tuotteelta tuleva poikkeava tuotteen alv, k‰ytet‰‰n sit‰
		if ($alehinta_alv != 0) {
			$trow ["alv"] = $alehinta_alv;
			$wtrow ["selite"] = $laskurow ["alv"]; // otetaan "yhti‰n oletus" laskulta, koska t‰ss‰ keisiss‰ siell‰ pit‰s olla yhti‰n oletus aina
		}
		
		if ($laskurow ["tila"] == "O") {
			//Jos k‰ytt‰j‰ on valinnut drop-downista jonkun nollasta poikkeavan alvin, niin lasketaan sen verran alvia pois hinnasta
			// Oletuksena ostohinnat ovat t‰ll‰ hetkell‰ ilman alvia
			if ($alv != 0) {
				$hinta = round ( $hinta / (1 + $alv / 100), $yhtiorow ['hintapyoristys'] );
			}
			
			$alv = 0; //ostotilaus --> ei alvia riveille
		} elseif ($alv >= 500) {
			//T‰ss‰ keississ‰ on marginaalimyynti‰
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] == 0)
				$alv = 500; // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] != 0)
				$alv = $trow ["alv"] + 500; // Otsikolla on valittu verollinen kotimaan myynti
			if ($laskurow ["vienti"] == "E" and $laskurow ["ytunnus"] != "")
				$alv = 500; // EU-vienti ytunnuksella --> alviton
			if ($laskurow ["vienti"] == "K")
				$alv = 500; // Vienti eu:n ulkopuolelle on aina verotonta
			

			$alv = ( float ) $alv;
		} elseif ($yhtiorow ["alv_kasittely"] != "") {
			//T‰ss‰ keississ‰ kaikki hinnat ovat aina verottomia ja vero lis‰t‰‰n vasta laskutuksessa
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] == 0)
				$alv = 0; // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] != 0 and $alv == "")
				$alv = $trow ["alv"]; // Otsikolla on valittu verollinen kotimaan myynti
			if ($laskurow ["vienti"] == "E" and $laskurow ["ytunnus"] != "")
				$alv = 0; // EU-vienti ytunnuksella --> alviton
			if ($laskurow ["vienti"] == "K")
				$alv = 0; // Vienti eu:n ulkopuolelle on aina verotonta
			

			$alv = ( float ) $alv;
		} else {
			//T‰ss‰ keississ‰ kaikki hinnat sis‰lt‰v‰t arvonlis‰veron
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] == 0)
				$alv = 0; // Otsikolla on valittu veroton myynti, esim Ahvenanmaan mynti‰
			if ($laskurow ["vienti"] == "" and $laskurow ["alv"] != 0 and $alv == "")
				$alv = $trow ["alv"]; // Otsikolla on valittu verollinen kotimaan myynti
			if ($laskurow ["vienti"] == "E" and $laskurow ["ytunnus"] != "")
				$alv = 0; // EU-vienti ytunnuksella --> alviton
			if ($laskurow ["vienti"] == "K")
				$alv = 0; // Vienti eu:n ulkopuolelle on aina verotonta
			

			$alv = ( float ) $alv;
			$trow ['alv'] = ( float ) $trow ['alv'];
			
			// Jos alvit t‰sm‰‰v‰t, ei tarvitse tehd‰ mit‰‰n. Muuten lasketaan uuden alvin sis‰lt‰v‰ myyntihinta.
			if ($alv != $trow ['alv']) {
				if ($laskurow ["valkoodi"] != '' and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
					$hinta = round ( $hinta / (1 + $trow ['alv'] / 100) * (1 + $alv / 100), 6 );
				} else {
					$hinta = round ( $hinta / (1 + $trow ['alv'] / 100) * (1 + $alv / 100), $yhtiorow ['hintapyoristys'] );
				}
			}
		}
		
		//echo "$trow[tuoteno], vienti '$laskurow[vienti]', otsikon alv '$laskurow[alv]', annettava alv '$alv', tuotteen alv '$trow[alv]', oikea kappalehinta '$hinta'<br>";
		

		return array ($hinta, $alv );
	}
}

if (! function_exists ( "alehinta" )) {
	function alehinta($laskurow, $trow, $kpl, $netto, $hinta, $ale, $palautus = "", $yhtio = "") {
		global $yhtiorow, $kukarow;
		
		// T‰m‰ rutiini m‰‰rittelee riville hinnan ja alennuksen
		// siihen tarvitaan:
		// $laskurow[] (laskun tiedot)
		// $trow[] (select * from tuote)
		// $kpl tilatava m‰‰r‰
		// $netto = N jos halutaan nettohinta
		// $hinta k‰ytt‰j‰n sy‰tt‰m‰ hinta
		// $ale k‰ytt‰j‰n sy‰tt‰m‰ ale
		// $debug (jos 1 niin n‰ytet‰‰n tulos)
		// if ($yhtiorow["asiakashinta_netto"] == "") jos kentt‰ on tyhj‰ niin asiakashinnat ovat nettohintoja, muuten ovat ei-nettohintoja
		

		// Tulokset on:
		// $hinta (hinta)
		// $netto onko hinta nettohinta vai ei
		// $ale (aleprosentti)
		// $aperuste (selkokielinen teksti mihin p‰‰dyttiin)
		// $alehinta_alv jos on joku erikoialv t‰lle hinnaston tuotteelle
		// $alehinta_val hinnan valuutta
		// $hintaperuste hinnan peruste koodina
		// $aleperuste  alennuksen peruste koodina
		

		$aperuste = "";
		$alehinta_alv = 0;
		$hintaperuste = false;
		$aleperuste = false;
		$vanha_yhtio = "";
		$vanha_liitostunnus = 0;
		
		if ($yhtio != '') {
			$vanha_yhtio = $kukarow ['yhtio'];
			$yhtiorow = hae_yhtion_parametrit ( $yhtio );
			$kukarow ['yhtio'] = $yhtio;
			
			$query = "	SELECT tunnus
						FROM asiakas
						WHERE yhtio = '{$kukarow['yhtio']}'
						AND ytunnus = '{$laskurow['ytunnus']}'
						AND toim_ovttunnus = '{$laskurow['toim_ovttunnus']}'";
			$asiakas_tunnus_res = mysql_query ( $query ) or pupe_error ( $query );
			$asiakas_tunnus_row = mysql_fetch_assoc ( $asiakas_tunnus_res );
			
			$vanha_liitostunnus = $laskurow ['liitostunnus'];
			$laskurow ['liitostunnus'] = $asiakas_tunnus_row ['tunnus'];
		}
		
		// oletetaan yhti‰n valuutta jos sit‰ ei tiedet‰
		if ($laskurow ["valkoodi"] == "")
			$laskurow ["valkoodi"] = $yhtiorow ["valkoodi"];
		
		// oletetaan tuotteen alvi ja valuutta
		$alehinta_val = $yhtiorow ["valkoodi"];
		
		// jos meill‰ on lasku menossa ulkomaille
		if ($laskurow ["maa"] != "" and $laskurow ["maa"] != $yhtiorow ["maa"]) {
			
			// tutkitaan ollaanko siell‰ alv-rekister‰ity
			$query = "select * from yhtion_toimipaikat where yhtio='$kukarow[yhtio]' and maa='$laskurow[maa]' and vat_numero != ''";
			$alhire = mysql_query ( $query ) or pupe_error ( $query );
			
			// ollaan alv-rekister‰ity, haetaan tuotteelle oikea ALV
			if (mysql_num_rows ( $alhire ) == 1) {
				$query = "select * from tuotteen_alv where yhtio='$kukarow[yhtio]' and maa='$laskurow[maa]' and tuoteno='$trow[tuoteno]' limit 1";
				$alhire = mysql_query ( $query ) or pupe_error ( $query );
				
				// ei l‰ytynyt alvia, se on pakko l‰yty‰
				if (mysql_num_rows ( $alhire ) == 0) {
					$alehinta_alv = - 999.99; // t‰‰ on n‰in ett‰ tiedet‰‰n ett‰ k‰vi huonosti ja ei anneta lis‰t‰ tuotetta
					$alv = - 999.99;
					$netto = "";
					$hinta = "0";
				} else {
					$alehi_alrow = mysql_fetch_assoc ( $alhire );
					$alehinta_alv = $alehi_alrow ["alv"];
				}
			}
		}
		
		// haetaan asiakkaan tiedot
		$query = "SELECT * from asiakas where yhtio='$kukarow[yhtio]' and tunnus='$laskurow[liitostunnus]'";
		$alhire = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $alhire ) == 1) {
			$alehi_asrow = mysql_fetch_assoc ( $alhire );
		} else {
			$alehi_asrow = array ();
			$aperuste .= t ( "Asiakasta ei l‰ytynyt" ) . ". ";
		}
		
		// haetaan asiakkaan segmentit
		$query = "	SELECT group_concat(parent.tunnus) tunnukset
	   				FROM dynaaminen_puu AS node
	   				JOIN dynaaminen_puu AS parent ON (node.lft BETWEEN parent.lft AND parent.rgt)
	   				JOIN puun_alkio on (puun_alkio.yhtio = node.yhtio and puun_alkio.puun_tunnus = node.tunnus)
	   				JOIN asiakas on (asiakas.yhtio = node.yhtio and asiakas.tunnus = puun_alkio.liitos)
	   				WHERE asiakas.tunnus ='$laskurow[liitostunnus]'
					AND asiakas.yhtio = '$kukarow[yhtio]'
	   				AND node.laji = parent.laji =  puun_alkio.laji = 'asiakas'
	   				AND parent.lft > 1
	   				HAVING tunnukset IS NOT NULL";
		$almight = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $almight ) == 1) {
			$alehi_assegmenttirow = mysql_fetch_assoc ( $almight );
		} else {
			$alehi_assegmenttirow = array ();
		}
		
		// 1. k‰ytt‰j‰n sy‰tt‰m‰ hinta/nettohinta
		if ($hinta != '') {
			$hintaperuste = 1;
			
			// nettohinta jos netto-kent‰ss‰ tulee N tai E
			if ($netto == 'N' or $netto == 'E') {
				$aperuste .= "K‰ytt‰j‰n antama nettohinta ";
				
				$ale = 0;
			} else {
				$aperuste .= "K‰ytt‰j‰n antama hinta ";
			}
			
			$alehinta_val = $laskurow ["valkoodi"];
			
			if (trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				$hinta = round ( yhtioval ( $hinta, $laskurow ["vienti_kurssi"] ), 6 );
				$alehinta_val = $yhtiorow ["valkoodi"];
			}
		} elseif ($hinta == '') {
			
			$hinta = 0;
			
			// 2. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakashinta USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and tuoteno  = '$trow[tuoteno]'
							and tuoteno != ''
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							UNION

							(SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakashinta USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							







ORDER BY prio, minkpl desc, aika, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakkaan tuotteen nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 2;
				}
			}
			
			// 3. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero nettohinta (asiakkaan tuotteen hinta) yhti‰n valuutassa
			if ($hinta == 0) {
				
				$query = "	(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
							FROM asiakashinta USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							UNION

							(SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
							FROM asiakashinta USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = $hrow ["hinta"];
					$aperuste .= "Asiakkaan tuotteen nettohinta." . $hrow ['laji'];
					$hintaperuste = 3;
				}
			}
			
			// 4. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakashinta USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							UNION

							(SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakashinta USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							ORDER BY prio, minkpl desc, aika, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakkaan tuotealeryhm‰n nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 4;
				}
			}
			
			// 5. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ nettohinta (asiakkaan tuotealeryhm‰n hinta) yhti‰n valuutassa
			if ($hinta == 0) {
				
				$query = "	(SELECT '1' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
							FROM asiakashinta USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							UNION

							(SELECT '2' prio, hinta, laji, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, valkoodi, tunnus
							FROM asiakashinta USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00')))

							ORDER BY prio, minkpl desc, aika, valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = $hrow ["hinta"];
					$aperuste .= "Asiakkaan tuotealeryhm‰n nettohinta. ";
					$hintaperuste = 5;
				}
			}
			
			//**** asiakas.segmentti tuote.tuoteno nettohinta (asiakassegmentin tuotteen hinta) laskun valuutassa
			if ($hinta == 0 and isset ( $alehi_assegmenttirow ["tunnukset"] ) and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
						    and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakassegmentin tuotteen nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 6;
				}
			}
			
			//**** asiakas.segmentti tuote.tuoteno nettohinta (asiakassegmentin tuotteen hinta)
			if ($hinta == 0 and isset ( $alehi_assegmenttirow ["tunnukset"] )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti !=''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$yhtiorow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakassegmentin tuotteen nettohinta ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 6;
				}
			}
			
			// 6. asiakas.ryhm‰ tuote.tuoteno nettohinta (asiakasaleryhm‰n tuotteen hinta) laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakasaleryhm‰n tuotteen nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 6;
				}
			}
			
			// 7. asiakas.ryhm‰ tuote.tuoteno nettohinta (asiakasaleryhm‰n tuotteen hinta)
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = $hrow ["hinta"];
					$aperuste .= "Asiakasaleryhm‰n tuotteen nettohinta. ";
					$hintaperuste = 7;
				}
			}
			
			// **** asiakas.piiri tuote.tuoteno nettohinta (asiakaspiirin tuotteen hinta) laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakaspiirin tuotteen nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 6;
				}
			}
			
			// **** asiakas.piiri tuote.tuoteno nettohinta (asiakaspiirin tuotteen hinta)
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$yhtiorow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),hinta asc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakaspiirin tuotteen nettohinta. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 6;
				}
			}
			
			// **** asiakas.segmentti tuote.aleryhma nettohinta (asiakassegmentin tuotealeryhm‰n hinta)
			if ($hinta == 0 and isset ( $alehi_assegmenttirow ["tunnukset"] )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$yhtiorow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakassegmentin tuotealeryhm‰n nettohinta.";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 8;
				}
			}
			
			// 8. asiakas.ryhm‰ tuote.aleryhm‰ nettohinta (asiakasaleryhm‰n tuotealeryhm‰n hinta)
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$laskurow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakasaleryhm‰n tuotealeryhm‰n nettohinta laskun valuutassa. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 8;
				}
			}
			
			// 9. asiakas.ryhm‰ tuote.aleryhm‰ nettohinta (asiakasaleryhm‰n tuotealeryhm‰n hinta)
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = $hrow ["hinta"];
					$aperuste .= "Asiakasaleryhm‰n tuotealeryhm‰n nettohinta. ";
					$hintaperuste = 9;
				}
			}
			
			// **** asiakas.piiri tuote.aleryhma nettohinta (asiakaspiirin tuotealeryhm‰n hinta)
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM asiakashinta
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and valkoodi = '$yhtiorow[valkoodi]'
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), hinta asc,tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					
					if ($hrow ["laji"] == "N" or $hrow ["laji"] == "E") {
						$netto = $hrow ["laji"];
						$ale = 0;
					} elseif ($hrow ["laji"] == "B") {
						$netto = '';
						$ale = '';
					} else {
						//Asiakashinnat ovat nettohintoja, mutta niille annetaan erikoisalennus, ei normaalia alennusta
						if ($yhtiorow ["asiakashinta_netto"] == "E") {
							$netto = 'E';
							$ale = 0;
						} //Asiakashinnat ovat bruttohintoja, alennuslaskentaa k‰ytet‰‰n
						elseif ($yhtiorow ["asiakashinta_netto"] == "B") {
							$netto = '';
							$ale = '';
						} //Asiakashinnat ovat nettohintoja, ei alennuksia ollenkaan
else {
							$netto = 'N';
							$ale = 0;
						}
					}
					
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$aperuste .= "Asiakaspiirin tuotealeryhm‰n nettohinta. ";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 8;
				}
			}
			
			// 10. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ negatiivinen-aleprosentti (asiakkaan katemyyntihinta netto)
			if ($hinta == 0) {
				
				$query = "	(SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and asiakas_ryhma = ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and (alennus < 0 or left(alennus,1) = '-'))

							UNION

							(SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and asiakas_ryhma = ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and (alennus < 0 or left(alennus,1) = '-'))

							ORDER BY prio, minkpl desc, aika, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					
					$hrow = mysql_fetch_assoc ( $hresult );
					
					//T‰ss‰ katotaan onko ep‰kuranttiutta
					$kokoepakurantti = "";
					
					if ($trow ["epakurantti100pvm"] != "0000-00-00") {
						$trow ["kehahin"] = 0;
						$kokoepakurantti = "ON";
					} elseif ($trow ["epakurantti75pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.25, 6 );
					} elseif ($trow ["epakurantti50pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.5, 6 );
					} elseif ($trow ["epakurantti25pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.75, 6 );
					}
					
					// Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
					if ($trow ['kehahin'] == 0 and $kokoepakurantti == "ON") {
						$hinta = 0.01;
						$ale = 0;
						$netto = "";
						$aperuste .= "Katemyyntihinta (kokoep‰kurantti). ";
						$hintaperuste = 10;
					} elseif ($trow ['kehahin'] > 0) {
						if ($yhtiorow ['alv_kasittely'] == '')
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))) * (1 + ($trow ['alv'] / 100)), $yhtiorow ['hintapyoristys'] );
						else
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))), $yhtiorow ['hintapyoristys'] );
						
						$ale = 0;
						$netto = "";
						$aperuste .= "Katemyyntihinta. ";
						$hintaperuste = 10;
					}
				}
			}
			
			//**** asiakas.segmentti tuote.aleryhm‰ negatiivinen-aleprosentti (asiakassegmentin katemyyntihinta netto)
			if ($hinta == 0 and isset ( $alehi_assegmenttirow ["tunnukset"] )) {
				
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and (alennus < 0 or left(alennus,1) = '-')
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					
					$hrow = mysql_fetch_assoc ( $hresult );
					
					//T‰ss‰ katotaan onko ep‰kuranttiutta
					$kokoepakurantti = "";
					
					if ($trow ["epakurantti100pvm"] != "0000-00-00") {
						$trow ["kehahin"] = 0;
						$kokoepakurantti = "ON";
					} elseif ($trow ["epakurantti75pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.25, 6 );
					} elseif ($trow ["epakurantti50pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.5, 6 );
					} elseif ($trow ["epakurantti25pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.75, 6 );
					}
					
					// Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
					if ($trow ['kehahin'] == 0 and $kokoepakurantti == "ON") {
						$hinta = 0.01;
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakasryhm‰ Katemyyntihinta (kokoep‰kurantti). ";
						$hintaperuste = 11;
					} elseif ($trow ['kehahin'] > 0) {
						if ($yhtiorow ['alv_kasittely'] == '')
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))) * (1 + ($trow ['alv'] / 100)), $yhtiorow ['hintapyoristys'] );
						
		// bug ?
						else
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))), $yhtiorow ['hintapyoristys'] );
						
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakassegmentin Katemyynnin nettohinta. ";
						$hintaperuste = 11;
					}
				}
			
			}
			
			// 11. asiakas.ryhm‰ tuote.aleryhm‰ negatiivinen-aleprosentti (asiakkaan katemyyntihinta netto)
			if ($hinta == 0) {
				
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and (alennus < 0 or left(alennus,1) = '-')
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					
					$hrow = mysql_fetch_assoc ( $hresult );
					
					//T‰ss‰ katotaan onko ep‰kuranttiutta
					$kokoepakurantti = "";
					
					if ($trow ["epakurantti100pvm"] != "0000-00-00") {
						$trow ["kehahin"] = 0;
						$kokoepakurantti = "ON";
					} elseif ($trow ["epakurantti75pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.25, 6 );
					} elseif ($trow ["epakurantti50pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.5, 6 );
					} elseif ($trow ["epakurantti25pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.75, 6 );
					}
					
					// Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
					if ($trow ['kehahin'] == 0 and $kokoepakurantti == "ON") {
						$hinta = 0.01;
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakasryhm‰ Katemyyntihinta (kokoep‰kurantti). ";
						$hintaperuste = 11;
					} elseif ($trow ['kehahin'] > 0) {
						if ($yhtiorow ['alv_kasittely'] == '')
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))) * (1 + ($trow ['alv'] / 100)), $yhtiorow ['hintapyoristys'] );
						else
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))), $yhtiorow ['hintapyoristys'] );
						
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakasryhm‰ Katemyyntihinta. ";
						$hintaperuste = 11;
					}
				}
			
			}
			
			//**** asiakas.piiri tuote.aleryhm‰ negatiivinen-aleprosentti (asiakaspiirin katemyyntihinta netto)
			if ($hinta == 0) {
				
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and (alennus < 0 or left(alennus,1) = '-')
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					
					$hrow = mysql_fetch_assoc ( $hresult );
					
					//T‰ss‰ katotaan onko ep‰kuranttiutta
					$kokoepakurantti = "";
					
					if ($trow ["epakurantti100pvm"] != "0000-00-00") {
						$trow ["kehahin"] = 0;
						$kokoepakurantti = "ON";
					} elseif ($trow ["epakurantti75pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.25, 6 );
					} elseif ($trow ["epakurantti50pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.5, 6 );
					} elseif ($trow ["epakurantti25pvm"] != "0000-00-00") {
						$trow ["kehahin"] = round ( $trow ["kehahin"] * 0.75, 6 );
					}
					
					// Kehahinta saa olla nolla vain jos tuote on kokoep‰kurantti, muuten katemyynti ei onnaa
					if ($trow ['kehahin'] == 0 and $kokoepakurantti == "ON") {
						$hinta = 0.01;
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakasryhm‰ Katemyyntihinta (kokoep‰kurantti). ";
						$hintaperuste = 11;
					} elseif ($trow ['kehahin'] > 0) {
						if ($yhtiorow ['alv_kasittely'] == '')
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))) * (1 + ($trow ['alv'] / 100)), $yhtiorow ['hintapyoristys'] );
						else
							$hinta = round ( ($trow ['kehahin'] / (1 - (abs ( $hrow ["alennus"] ) / 100))), $yhtiorow ['hintapyoristys'] );
						
						$ale = 0;
						$netto = "";
						$aperuste .= "Asiakaspiirin Katemyyntihinta. ";
						$hintaperuste = 11;
					}
				}
			
			}
			
			// 12. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ aleprosentti == 999.99 (asiakkaan myym‰l‰hinta)
			if ($hinta == 0) {
				$query = "	(SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus = 999.99)

							UNION

							(SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus = 999.99)

							ORDER BY prio, minkpl desc, aika, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					
					$hrow = mysql_fetch_assoc ( $hresult );
					
					//Jos aleprossa  = 999.99 haetaan tuotteen myym‰l‰hinta myyntihinnan tilalle
					$query = "SELECT myymalahinta, alv FROM tuote WHERE yhtio = '$kukarow[yhtio]' and tuoteno = '$trow[tuoteno]'";
					$myymresult = mysql_query ( $query ) or pupe_error ( $query );
					$myymrow = mysql_fetch_assoc ( $myymresult );
					
					if ($alehinta_alv != "")
						$myymrow ["alv"] = $alehinta_alv;
					
					if ($myymrow ["myymalahinta"] > 0) {
						if ($yhtiorow ["alv_kasittely"] != '') {
							$hinta = $myymrow ["myymalahinta"] / ($myymrow ["alv"] / 100 + 1);
						} else {
							$hinta = $myymrow ["myymalahinta"];
						}
					}
					$ale = 0;
					$netto = "";
					$aperuste .= "Myym‰l‰hinta. ";
					$hintaperuste = 12;
				}
			}
			
			// 13. hinnasto.hinta tuotteen nettohinta hinnastosta laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM hinnasto
							WHERE yhtio  = '$kukarow[yhtio]'
							and tuoteno  = '$trow[tuoteno]'
							and tuoteno != ''
							and laji in ('N', 'E')
							and valkoodi = '$laskurow[valkoodi]'
							and maa in ('$laskurow[maa]','')
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
							ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$netto = $hrow ["laji"];
					$aperuste .= "Tuotteen hinnastohinta laskun valuutassa";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 13;
				}
			}
			
			// 14. hinnasto.hinta tuotteen nettohinta hinnastosta yhti‰n valuutassa
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM hinnasto
							WHERE yhtio  = '$kukarow[yhtio]'
							and tuoteno  = '$trow[tuoteno]'
							and tuoteno != ''
							and laji in ('N', 'E')
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and maa in ('$laskurow[maa]','')
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
							ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					$hinta = $hrow ["hinta"];
					$netto = $hrow ["laji"];
					$aperuste .= "Tuotteen hinnastohinta yhti‰n valuutassa";
					$hintaperuste = 14;
				}
			}
			
			// 15. tuote.nettohinta (tuotteen nettohinta)
			if ($hinta == 0 and $netto != 'E' and $trow ['nettohinta'] > 0) {
				
				$hinta = $trow ['nettohinta'];
				$aperuste .= "Tuotteen nettohinta. ";
				$netto = 'N';
				$ale = 0;
				$hintaperuste = 15;
			}
			
			// 16. hinnasto.hinta tuotteen bruttohinta hinnastosta laskun valuutassa
			if ($hinta == 0 and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				
				$query = "	SELECT hinta, laji
							FROM hinnasto
							WHERE yhtio  = '$kukarow[yhtio]'
							and tuoteno  = '$trow[tuoteno]'
							and tuoteno != ''
							and laji     = ''
							and valkoodi = '$laskurow[valkoodi]'
							and maa in ('$laskurow[maa]','')
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
							ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), maa desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					$hinta = round ( yhtioval ( $hrow ["hinta"], $laskurow ["vienti_kurssi"] ), 6 );
					$netto = $hrow ["laji"];
					$aperuste .= "Tuotteen hinnastohinta laskun valuutassa";
					$alehinta_val = $laskurow ["valkoodi"];
					$hintaperuste = 16;
				}
			}
			
			// 17. hinnasto.hinta tuotteen bruttohinta hinnastosta yhtion valuutassa
			if ($hinta == 0) {
				
				$query = "	SELECT hinta, laji
							FROM hinnasto
							WHERE yhtio  = '$kukarow[yhtio]'
							and tuoteno  = '$trow[tuoteno]'
							and tuoteno != ''
							and laji     = ''
							and valkoodi in ('$yhtiorow[valkoodi]','')
							and maa in ('$laskurow[maa]','')
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and ((minkpl <= '$kpl' and maxkpl >= '$kpl') or (minkpl = 0 and maxkpl = 0))
							ORDER BY IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), valkoodi DESC, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$hrow = mysql_fetch_assoc ( $hresult );
					$hinta = $hrow ["hinta"];
					$netto = $hrow ["laji"];
					$aperuste .= "Tuotteen hinnastohinta yhti‰n valuutassa";
					$hintaperuste = 17;
				}
			}
			
			// 18. tuote.myyntihinta (tuotteen bruttohinta)
			if ($hinta == 0) {
				$hinta = $trow ['myyntihinta'];
				$aperuste .= "Tuotteen myyntihinta. ";
				$hintaperuste = 18;
			}
		}
		
		if (substr ( $ale, - 1 ) == "+") {
			$aleperuste = 1;
			
			// 1. k‰ytt‰j‰n sy‰tt‰m‰ EURO-m‰‰r‰inen alennus
			$hinta_xxx = $hinta + substr ( $ale, 0, - 1 );
			$ale = (1 - ($hinta / $hinta_xxx)) * 100;
			$hinta = $hinta_xxx;
		} elseif (substr ( $ale, - 1 ) == "-") {
			$aleperuste = 2;
			
			// 2. k‰ytt‰j‰n sy‰tt‰m‰ EURO-m‰‰r‰inen alennus
			$hinta_xxx = $hinta - substr ( $ale, 0, - 1 );
			$ale = (1 - ($hinta_xxx / $hinta)) * 100;
		} elseif ($ale > 0) {
			$aleperuste = 3;
			
			// 3. k‰ytt‰j‰n sy‰tt‰m‰ alennus
			$aperuste .= " K‰ytt‰j‰n sy‰tt‰m‰ ale";
		} elseif (is_numeric ( $ale ) and $ale == 0) {
			$aleperuste = 4;
			
			// 4. k‰ytt‰j‰n sy‰tt‰m‰ alennus
			$aperuste .= " Ei alennusta";
		} elseif ($ale == "" and $netto != 'N' and $netto != 'E') {
			
			unset ( $ale );
			
			// 5. asiakas.tunnus/asiakas.ytunnus tuote.tuotenumero aleprosentti (asiakkaan tuotteen alennus)
			$query = "	(SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
						FROM asiakasalennus USE INDEX (yhtio_asiakas_tuoteno)
						WHERE yhtio = '$kukarow[yhtio]'
						and asiakas = '$laskurow[liitostunnus]'
						and asiakas > 0
						and tuoteno = '$trow[tuoteno]'
						and tuoteno != ''
						and (minkpl <= '$kpl' or minkpl = 0)
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and alennus >= 0
						and alennus <= 100)

						UNION

						(SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
						FROM asiakasalennus USE INDEX (yhtio_ytunnus_tuoteno)
						WHERE yhtio = '$kukarow[yhtio]'
						and ytunnus = '$laskurow[ytunnus]'
						and ytunnus != ''
						and tuoteno = '$trow[tuoteno]'
						and tuoteno != ''
						and (minkpl <= '$kpl' or minkpl = 0)
						and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
						and alennus >= 0
						and alennus <= 100)

						ORDER BY prio, minkpl desc, aika, tunnus desc
						LIMIT 1";
			$hresult = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $hresult ) > 0) {
				$aleperuste = 5;
				
				$hrow = mysql_fetch_assoc ( $hresult );
				$ale = $hrow ["alennus"];
				$aperuste .= " Asiakkaan tuotteen alennus";
			}
			
			// 6. asiakas.tunnus/asiakas.ytunnus tuote.aleryhm‰ aleprosentti (asiakkaan tuotealeryhm‰n alennus)
			if (! isset ( $ale )) {
				
				$query = "	(SELECT '1' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_asiakas_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas = '$laskurow[liitostunnus]'
							and asiakas > 0
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100)

							UNION

							(SELECT '2' prio, alennus, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999) aika, minkpl, tunnus
							FROM asiakasalennus USE INDEX (yhtio_ytunnus_tuoteno)
							WHERE yhtio = '$kukarow[yhtio]'
							and ytunnus = '$laskurow[ytunnus]'
							and ytunnus != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100)

							ORDER BY prio, minkpl desc, aika, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 6;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakkaan tuotealeryhm‰n alennus";
				}
			}
			
			// *** asiakas.segmentti tuote.tuoteno aleprosentti (asiakassegmentin tuotteen alennus)
			if (! isset ( $ale ) and isset ( $alehi_assegmenttirow ["tunnukset"] )) {
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 7;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakassegmentin tuotealeryhm‰n alennus";
				}
			}
			
			// 7. asiakas.ryhm‰ tuote.tuoteno aleprosentti (asiakasaleryhm‰n tuotteen alennus)
			if (! isset ( $ale )) {
				
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_ryhma = '$alehi_asrow[ryhma]'
							and asiakas_ryhma != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 7;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakasaleryhm‰n tuotteen alennus";
				}
			}
			
			//*** asiakas.piiri tuote.tuoteno aleprosentti (asiakaspiirin tuotteen alennus)
			if (! isset ( $ale )) {
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and tuoteno = '$trow[tuoteno]'
							and tuoteno != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 7;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakaspiirin tuotteen alennus";
				}
			}
			
			//*** asiakas.segmentti tuote.aleryhm‰ aleprosentti (asiakassegmentin tuotealeryhm‰n alennus)
			if (! isset ( $ale ) and isset ( $alehi_assegmenttirow ["tunnukset"] )) {
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and asiakas_segmentti in ($alehi_assegmenttirow[tunnukset])
							and asiakas_segmentti != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 7;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakassegmentin tuotealeryhm‰n alennus";
				}
			}
			
			// 8. asiakas.ryhm‰ tuote.aleryhm‰ aleprosentti (asiakasaleryhm‰n tuotealeryhm‰n alennus)
			if (! isset ( $ale )) {
				
				for($aasi = strlen ( $trow ["aleryhma"] ); $aasi > 0; $aasi --) {
					
					if ($aasi == strlen ( $trow ["aleryhma"] )) {
						$hakuavain_hae = "and ryhma  = '$trow[aleryhma]'";
					} else {
						$hakuavain_hae = "	and right(ryhma,1) = '*'
											and substring(ryhma, 1, char_length(ryhma)-1) = '" . substr ( $trow ["aleryhma"], 0, $aasi ) . "' ";
					}
					
					$query = "	SELECT alennus
								FROM asiakasalennus
								WHERE yhtio = '$kukarow[yhtio]'
								and asiakas_ryhma = '$alehi_asrow[ryhma]'
								and asiakas_ryhma != ''
								$hakuavain_hae
								and ryhma != ''
								and ytunnus = ''
								and asiakas = 0
								and (minkpl <= '$kpl' or minkpl = 0)
								and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
								and alennus >= 0
								and alennus <= 100
								ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999), tunnus desc
								LIMIT 1";
					$hresult = mysql_query ( $query ) or pupe_error ( $query );
					
					if (mysql_num_rows ( $hresult ) > 0) {
						$aleperuste = 8;
						
						$hrow = mysql_fetch_assoc ( $hresult );
						$ale = $hrow ["alennus"];
						$aperuste .= " Asiakasaleryhm‰n tuotealeryhm‰n alennus";
						break;
					}
				}
			}
			
			//*** asiakas.piiri tuote.aleryhm‰ aleprosentti (asiakaspiirin tuotealeryhm‰n alennus)
			if (! isset ( $ale )) {
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and piiri = '$alehi_asrow[piiri]'
							and piiri != ''
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and ytunnus = ''
							and asiakas = 0
							and (minkpl <= '$kpl' or minkpl = 0)
							and ((alkupvm <= current_date and if (loppupvm = '0000-00-00','9999-12-31',loppupvm) >= current_date) or (alkupvm='0000-00-00' and loppupvm='0000-00-00'))
							and alennus >= 0
							and alennus <= 100
							ORDER BY minkpl desc, IFNULL(TO_DAYS(current_date)-TO_DAYS(alkupvm),9999999999999),alennus desc, tunnus desc
							LIMIT 1";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 7;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Asiakassegmentin tuotealeryhm‰n alennus";
				}
			}
			
			// 9. tuote.aleryhm‰ aleprosentti (tuotealeryhm‰n perusalennus)
			if (! isset ( $ale )) {
				
				$query = "	SELECT alennus
							FROM perusalennus
							WHERE yhtio = '$kukarow[yhtio]'
							and ryhma = '$trow[aleryhma]'
							and ryhma != ''
							and alennus >= 0
							and alennus <= 100";
				$hresult = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $hresult ) > 0) {
					$aleperuste = 9;
					
					$hrow = mysql_fetch_assoc ( $hresult );
					$ale = $hrow ["alennus"];
					$aperuste .= " Tuotealeryhm‰n perusalennus";
				}
			}
		}
		
		if (! isset ( $ale )) {
			$ale = 0;
		}
		if ($ale > 100) {
			$ale = 100;
		}
		if ($ale < 0) {
			$ale = 0;
		}
		
		$debug = 0;
		
		if ($debug == 1)
			echo t ( "Tulin tulokseen" ) . ": $aperuste.  ALE: $ale " . t ( "% HINTA" ) . " $hinta $yhtiorow[valkoodi] KPL:$kpl<br><br>";
		
		if ($yhtio != '') {
			$yhtiorow = hae_yhtion_parametrit ( $vanha_yhtio );
			$kukarow ['yhtio'] = $vanha_yhtio;
			$laskurow ['liitostunnus'] = $vanha_liitostunnus;
		}
		
		if ($palautus != "") {
			$ret = array ();
			
			$a = explode ( ",", $palautus );
			if (is_array ( $a )) {
				foreach ( $a as $palauta ) {
					if (isset ( ${$palauta} )) {
						$ret [$palauta] = ${$palauta};
					} else {
						echo "<font class='error'>Muuttujaa '$palauta' ei voida palauttaa!</font><br>";
						$ret [$palauta] = false;
					}
				}
			} else {
				if (isset ( ${$palautus} )) {
					$ret [$palautus] = ${$palautus};
				} else {
					echo "<font class='error'>Muuttujaa '$palauta' ei voida palauttaa!</font><br>";
					$ret [$palautus] = false;
				}
			}
			
			return $ret;
		} else {
			return array ($hinta, $netto, $ale, $alehinta_alv, $alehinta_val );
		}
	}
}

if (! function_exists ( "kalenteritapahtuma" )) {
	function kalenteritapahtuma($tyyppi, $tapa, $viesti, $liitostunnus, $kuittaus = "", $henkilo = "", $otunnus = "", $pvmalku = 'now()', $pvmloppu = 'now()', $asentaja = '') {
		global $yhtiorow, $kukarow;
		
		if (trim ( $asentaja ) == '') {
			$query = "SELECT * from asiakas where yhtio='$kukarow[yhtio]' and tunnus='$liitostunnus'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			$asrow = mysql_fetch_assoc ( $result );
		} else {
			$asrow ['ytunnus'] = '';
		}
		
		//Tehd‰‰n asiakasmemotapahtuma jos se on tarpeellinen
		$kysely = "	INSERT INTO kalenteri
					SET tapa 		= '$tapa',
					asiakas  	 	= '$asrow[ytunnus]',
					liitostunnus	= '$liitostunnus',
					henkilo  		= '$henkilo',
					kuka     		= '$kukarow[kuka]',
					yhtio    		= '$kukarow[yhtio]',
					tyyppi   		= '$tyyppi',
					pvmalku  		= $pvmalku,
					otunnus  		= '$otunnus',
					kuittaus  		= '$kuittaus',
					kentta01 		= '$viesti'";
		
		if (trim ( $asentaja ) != '') {
			$kysely .= ", kentta02 = '$liitostunnus', pvmloppu = $pvmloppu ";
		}
		
		$result = mysql_query ( $kysely ) or pupe_error ( $kysely );
	}
}

if (! function_exists ( 'ebid' )) {
	function ebid($lasku_tunnus, $url_only = false) {
		global $kukarow, $yhtiorow, $palvelin2;
		
		$query = "SELECT * from lasku where tunnus=" . ( int ) $lasku_tunnus . " and yhtio='$kukarow[yhtio]'";
		$res = mysql_query ( $query ) or pupe_error ( $query );
		$laskurow = mysql_fetch_assoc ( $res );
		
		if ($laskurow ['ebid'] != "" and $laskurow ['ebid'] != "FINVOICEXML") {
			$ebid = $laskurow ['ebid'];
			
			$verkkolaskutunnus = $yhtiorow ['verkkotunnus_vas'];
			$salasana = $yhtiorow ['verkkosala_vas'];
			
			$timestamppi = gmdate ( "YmdHis" ) . "Z";
			
			$urlhead = "http://www.verkkolasku.net";
			$urlmain = "/view/ebs-2.0/$verkkolaskutunnus/visual?DIGEST-ALG=MD5&DIGEST-KEY-VERSION=1&EBID=$ebid&TIMESTAMP=$timestamppi&VERSION=ebs-2.0";
			
			$digest = md5 ( $urlmain . "&" . $salasana );
			$url = $urlhead . $urlmain . "&DIGEST=$digest";
			
			if ($url_only) {
				return array ($url );
			}
			
			$out = "<a href='$url' target='Attachment'>" . t ( 'N‰yt‰ lasku' ) . "</a> ";
			
			// Ei n‰ytet‰ INVOIC.D.96A xml-linkki‰
			$query = "	SELECT tunnus
						from liitetiedostot
						where liitostunnus = '$laskurow[tunnus]'
						and liitos = 'lasku'
						and kayttotarkoitus != 'INVOIC.D.96A'
						and yhtio='$kukarow[yhtio]'";
			$res = mysql_query ( $query ) or pupe_error ( $query );
			
			while ( $row = mysql_fetch_assoc ( $res ) ) {
				$out .= " <a $target href='" . $palvelin2 . "view.php?id=$row[tunnus]' target='Attachment'>" . t ( 'N‰yt‰ liite' ) . "</a> ";
			}
			
			return $out;
		} elseif ($laskurow ['tila'] == 'U') {
			
			$out = "";
			
			if ($laskurow ['chn'] == '100')
				$out = t ( "Paperilasku" );
			elseif ($laskurow ['chn'] == '010')
				$out = t ( "eInvoice" ) . "-" . t ( "lasku" );
			elseif ($laskurow ['chn'] == '020')
				$out = t ( "Vienti eInvoice" ) . "-" . t ( "lasku" );
			elseif ($laskurow ['chn'] == '111')
				$out = t ( "Elma EDI-inhouse" ) . "-" . t ( "lasku" );
			elseif ($laskurow ['chn'] == '666')
				$out = t ( "S‰hk‰posti" ) . "-" . t ( "lasku" );
			elseif ($laskurow ['chn'] == '667')
				$out = t ( "Sis‰inen" ) . "-" . t ( "lasku" );
			
			$query = "	SELECT tunnus
						from liitetiedostot
						where liitostunnus = '$laskurow[tunnus]'
						and liitos = 'lasku'
						and yhtio = '$kukarow[yhtio]'";
			$res = mysql_query ( $query ) or pupe_error ( $query );
			
			while ( $row = mysql_fetch_assoc ( $res ) ) {
				$out .= " <a $target href='" . $palvelin2 . "view.php?id=$row[tunnus]' target='Attachment'>" . t ( 'N‰yt‰ liite' ) . "</a> ";
			}
			
			return $out;
		} else {
			
			$query = "	SELECT tunnus
						from liitetiedostot
						where liitostunnus = '$laskurow[tunnus]'
						and liitos = 'lasku'
						and yhtio = '$kukarow[yhtio]'";
			$res = mysql_query ( $query ) or pupe_error ( $query );
			
			if ($url_only) {
				$out = array ();
			} else {
				$out = '';
			}
			
			while ( $row = mysql_fetch_assoc ( $res ) ) {
				if ($url_only) {
					$out [] = $palvelin2 . "view.php?id=$row[tunnus]";
				} else {
					$out .= "<a $target href='" . $palvelin2 . "view.php?id=$row[tunnus]' target='Attachment'>" . t ( 'N‰yt‰ lasku' ) . "</a> ";
				}
			
			}
			
			if ($out != '') {
				return $out;
			}
			
			return t ( 'Paperilasku' );
		}
	}
}

if (! function_exists ( "size_readable" )) {
	function size_readable($size) {
		
		$units = array ('B', 'kB', 'MB', 'GB', 'TB', 'PB' );
		
		$i = 0;
		while ( $size >= 1024 ) {
			$size /= 1024;
			$i ++;
		}
		
		return round ( $size, 2 ) . $units [$i];
	}
}

if (! function_exists ( "sarjanumeron_ostohinta" )) {
	function sarjanumeron_ostohinta($kentta, $arvo, $eikululaskuja = "") {
		global $kukarow, $yhtiorow;
		
		// Funktio laskee yhden kappaleen ostohinnan
		$ostohinta = 0;
		
		// Tuotteen ostohinta
		$query = "	SELECT group_concat(distinct tilausrivi.tunnus) tunnukset, count(distinct tilausrivi.tunnus) tunnukset_kpl
					FROM sarjanumeroseuranta
					JOIN tilausrivi use index (PRIMARY) ON tilausrivi.yhtio=sarjanumeroseuranta.yhtio and tilausrivi.tunnus=sarjanumeroseuranta.ostorivitunnus
					WHERE sarjanumeroseuranta.yhtio = '$kukarow[yhtio]'
					and sarjanumeroseuranta.$kentta = '$arvo'";
		$otsores = mysql_query ( $query ) or pupe_error ( $query );
		$ostorow = mysql_fetch_assoc ( $otsores );
		
		if ($ostorow ["tunnukset"] != '') {
			$query = "	SELECT
						sum(tilausrivi.rivihinta/tilausrivi.kpl) ostosumma,
						sum(tilausrivi.hinta * (1-(tilausrivi.ale/100))) ostosumma_eiloppulaskettu
						FROM tilausrivi
						WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
						and tilausrivi.tunnus  IN ($ostorow[tunnukset])";
			$sarjares = mysql_query ( $query ) or pupe_error ( $query );
			$sarjarow = mysql_fetch_assoc ( $sarjares );
			
			$ostohinta = ( float ) $sarjarow ["ostosumma"] / $ostorow ["tunnukset_kpl"];
			
			if ($ostohinta == 0 and $sarjarow ["ostosumma_eiloppulaskettu"] != 0) {
				$ostohinta = ( float ) $sarjarow ["ostosumma_eiloppulaskettu"] / $ostorow ["tunnukset_kpl"];
			}
			
			if ($eikululaskuja != "EIKULULASKUJA") {
				
				// Katsotaan onko sarjanumerolle liitetty kulukeikka
				$query = "	SELECT lasku.laskunro
							FROM sarjanumeroseuranta
							JOIN lasku ON lasku.yhtio=sarjanumeroseuranta.yhtio and lasku.liitostunnus=sarjanumeroseuranta.tunnus and lasku.ytunnus=sarjanumeroseuranta.tunnus and lasku.tila = 'K' and lasku.alatila = 'S'
							WHERE sarjanumeroseuranta.yhtio = '$kukarow[yhtio]'
							and sarjanumeroseuranta.$kentta = '$arvo'";
				$keikkares = mysql_query ( $query ) or pupe_error ( $query );
				
				while ( $kulukeikkarow = mysql_fetch_assoc ( $keikkares ) ) {
					// Haetaan kaikki keikkaan liitettyjen laskujen summa
					$query = "	SELECT sum(arvo*vienti_kurssi) kulusumma
								FROM lasku
								WHERE yhtio		= '$kukarow[yhtio]'
								and tila 		IN ('K','X')
								and laskunro 	= '$kulukeikkarow[laskunro]'
								and vanhatunnus <> 0
								and vienti in ('B','E','H')";
					$result = mysql_query ( $query ) or pupe_error ( $query );
					$kulukulurow = mysql_fetch_assoc ( $result );
					
					$ostohinta += $kulukulurow ["kulusumma"];
				}
			}
		}
		
		return round ( $ostohinta, 6 );
	}
}

if (! function_exists ( "liitettyjen_kululaskujen_summa" )) {
	function liitettyjen_kululaskujen_summa($otunnus) {
		global $kukarow, $yhtiorow;
		
		// Katsotaan onko tilaukselle liitetty kulukeikka ja palatetaan laskujen summat yhti‰n valuutassa
		$query = "	SELECT laskunro
					FROM lasku
					WHERE yhtio 		= '$kukarow[yhtio]'
					and liitostunnus	= '$otunnus'
					and ytunnus			= '$otunnus'
					and tila 			= 'K'
					and alatila 		= 'T'";
		$keikkares = mysql_query ( $query ) or pupe_error ( $query );
		
		while ( $kulukeikkarow = mysql_fetch_assoc ( $keikkares ) ) {
			// Haetaan kaikki keikkaan liitettyjen laskujen summa
			$query = "	SELECT sum(arvo*vienti_kurssi) kulusumma
						FROM lasku
						WHERE yhtio		= '$kukarow[yhtio]'
						and tila 		IN ('K','X')
						and laskunro 	= '$kulukeikkarow[laskunro]'
						and vanhatunnus <> 0";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			$kulukulurow = mysql_fetch_assoc ( $result );
			
			$ostohinta += $kulukulurow ["kulusumma"];
		}
		
		return round ( $ostohinta, 6 );
	}
}

if (! function_exists ( "remove_duplicates" )) {
	function remove_duplicates($table, $yhtio) {
		
		$query = "describe $table";
		$fieldresult = mysql_query ( $query ) or pupe_error ( $query );
		
		$group = "";
		
		while ( $fields = mysql_fetch_assoc ( $fieldresult ) ) {
			if ($fields [0] != "tunnus" and $fields [0] != "laatija" and $fields [0] != "luontiaika" and $fields [0] != "muutospvm" and $fields [0] != "muuttaja") {
				
				$group .= $fields [0] . ",";
			}
		}
		
		$group = substr ( $group, 0, - 1 );
		
		$query = "	SELECT $group, count(*) countkpltahti, group_concat(tunnus) tunnukset
					FROM $table
					WHERE yhtio = '$yhtio'
					GROUP BY $group
					HAVING countkpltahti > 1";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		while ( $row = mysql_fetch_assoc ( $result ) ) {
			$query = "DELETE FROM $table WHERE yhtio = '$yhtio' and tunnus in ($row[tunnukset]) LIMIT " . ($row ["countkpltahti"] - 1);
			$delresult = mysql_query ( $query ) or pupe_error ( $query );
		}
	}
}

if (! function_exists ( "ostolaskun_vienti" )) {
	function ostolaskun_vienti($vienti) {
		switch ($vienti) {
			case 'A' :
				$cVal = t ( "Kotimaa" );
				break;
			case 'B' :
				$cVal = t ( "Kotimaa huolinta/rahti" );
				break;
			case 'C' :
				$cVal = t ( "Kotimaa vaihto-omaisuus" );
				break;
			case 'J' :
				$cVal = t ( "Kotimaa raaka-aine" );
				break;
			case 'D' :
				$cVal = t ( "EU" );
				break;
			case 'E' :
				$cVal = t ( "EU huolinta/rahti" );
				break;
			case 'F' :
				$cVal = t ( "EU vaihto-omaisuus" );
				break;
			case 'K' :
				$cVal = t ( "EU raaka-aine" );
				break;
			case 'G' :
				$cVal = t ( "ei-EU" );
				break;
			case 'H' :
				$cVal = t ( "ei-EU huolinta/rahti" );
				break;
			case 'I' :
				$cVal = t ( "ei-EU vaihto-omaisuus" );
				break;
			case 'L' :
				$cVal = t ( "ei-EU raaka-aine" );
				break;
			
			default :
				$cVal = "";
		}
		
		return $cVal;
	}
}

if (! function_exists ( "verkkolasku_luo_keikkafile" )) {
	function verkkolasku_luo_keikkafile($tunnus, $trow, $rtuoteno) {
		global $yhtiorow, $kukarow;
		
		// Tarvitaan $tunnus jossa on ostoreskontralaskun tunnus
		// Tarvitaan $trow jossa on toimittajan tiedot
		// Tarvitaan $rtuoteno jossa on array kaikista ostoreskontralaskun tuotteista
		

		require ("inc/verkkolasku-in-luo-keikkafile.inc");
	}
}

if (! function_exists ( "verkkolasku_luo_liitosotsikko" )) {
	function verkkolasku_luo_liitosotsikko($laskutunnus, $otunnus) {
		global $yhtiorow, $kukarow;
		
		// Tarvitaan $laskutunnus jossa on ostoreskontralaskun tunnus
		// Tarvitaan $otunnus jossa on keikan tunnus
		

		$tee_kululaskut = "liita";
		$silent = "SILENT";
		$keikanalatila = "";
		
		require ("tilauskasittely/kululaskut.inc");
	}
}

if (! function_exists ( "paivita_toimitukset" )) {
	function paivita_toimitukset($otunnus, $originaali) {
		global $kukarow, $yhtiorow;
		
		/*
			Functio jolla voidaan syncronoida toimitusten sis‰lt‰j‰
		*/
		
		foreach ( array ("lasku", "laskun_lisatiedot" ) as $taulu ) {
			
			if (! is_array ( $originaali [$taulu] ) or ( int ) $otunnus == 0) {
				//echo "<font class='error'>".t("Toimitusten p‰ivitt‰minen EP‰ONNISTUI")."!</font><br>";
				return false;
			}
			
			if ($taulu == "lasku") {
				$where = " and tunnus = '$otunnus' and tunnusnippu > 0";
			} else {
				$where = " and otunnus = '$otunnus'";
			}
			
			$query = "	SELECT *
						FROM $taulu
						WHERE yhtio = '$kukarow[yhtio]' $where";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			if (mysql_num_rows ( $result ) == 1) {
				$uusirow = mysql_fetch_assoc ( $result );
				
				$diffi = array_diff_assoc ( $uusirow, $originaali [$taulu] );
				
				if (count ( $diffi ) > 0 and is_array ( $diffi )) {
					
					//	Poistetaan numeeriset avaimet
					$diff = array ();
					foreach ( $diffi as $key => $value ) {
						if (! is_numeric ( $key ) and ! in_array ( $key, array ("tila", "alatila", "muutospvm" ) )) {
							$diff [$key] = $value;
						}
					}
					
					//	Haetaan tunnukset jotka voidaan p‰ivitt‰‰
					if ($taulu == "lasku") {
						$query = "	SELECT *
									FROM lasku
									WHERE yhtio = '$kukarow[yhtio]' and tunnusnippu = '$uusirow[tunnusnippu]' and tila IN ('L','N') and alatila != 'X' and tunnus != '$otunnus' and tunnusnippu > 0";
					} else {
						$query = "	SELECT laskun_lisatiedot.*
									FROM lasku
									JOIN laskun_lisatiedot ON laskun_lisatiedot.yhtio=lasku.yhtio and laskun_lisatiedot.otunnus=lasku.tunnus
									WHERE lasku.yhtio = '$kukarow[yhtio]' and tunnusnippu = '$otunnus' and tila IN ('L','N') and alatila != 'X' and tunnusnippu > 0";
					}
					$result = mysql_query ( $query ) or pupe_error ( $query );
					
					if (mysql_num_rows ( $result ) > 0) {
						
						//	Rullataan kaikki toimitukset l‰pi
						while ( $row = mysql_fetch_assoc ( $result ) ) {
							
							//	Rullataan kaikki muutokset l‰pi..
							$updquery = "";
							foreach ( $diff as $col => $value ) {
								
								//	Luodaan p‰ivitett‰vist‰ sarakkeista kysely..
								if ($row [$col] == $originaali [$taulu] [$col]) {
									if ($updquery != "") {
										$updquery .= ", ";
									}
									$updquery .= " $col = '$value'";
									
									//	Poikkeus joka vahvistaa s‰‰nn‰n..
									if (in_array ( $col, array ("kerayspvm", "toimaika" ) ) and $taulu == "lasku") {
										$query = "	UPDATE tilausrivi
													SET $col = '$value'
													WHERE yhtio = '$kukarow[yhtio]' and otunnus = '$row[tunnus]' and $col = '" . $originaali [$taulu] [$col] . "'";
										$res = mysql_query ( $query ) or pupe_error ( $query );
									}
								}
							}
							
							if ($updquery != "") {
								$query = "UPDATE $taulu SET $updquery WHERE yhtio = '$kukarow[yhtio]' and tunnus = '$row[tunnus]'";
								$updres = mysql_query ( $query ) or pupe_error ( $query );
							}
						}
					}
				}
			}
		}
		
		return true;
	}
}

if (! function_exists ( "tulosta_ytunnus" )) {
	function tulosta_ytunnus($ytunnus, $maa = "", $vienti = "") {
		global $yhtiorow, $kukarow;
		
		if ($maa == "") {
			$maa = $yhtiorow ["maa"];
		}
		
		//jos on suomalainen yritys tehd‰‰n ytunnus n‰tiks
		if (strtoupper ( $maa ) == 'FI') {
			
			$ytunnus = preg_replace ( "/[^0-9]/", "", $ytunnus ); // poistetaan kaikki paitsi numerot
			

			//muutetaan ytunnus takas oikean n‰k‰seks
			$ytunpit = 8 - strlen ( $ytunnus );
			
			if ($ytunpit > 0) {
				$uytunnus = $ytunnus;
				
				while ( $ytunpit > 0 ) {
					$uytunnus = "0" . $uytunnus;
					$ytunpit --;
				}
			} else {
				$uytunnus = $ytunnus;
			}
			
			$uytunnus = substr ( $uytunnus, 0, 7 ) . "-" . substr ( $uytunnus, 7, 1 );
			
			if ($vienti != "") {
				$uytunnus = strtoupper ( $maa ) . $uytunnus;
			}
		} else {
			if (substr ( trim ( strtoupper ( $ytunnus ) ), 0, 2 ) != strtoupper ( $maa ) and trim ( strtoupper ( $maa ) ) != trim ( strtoupper ( $yhtiorow ["maa"] ) ) and trim ( strtoupper ( $maa ) ) != "") {
				$ytunnus = strtoupper ( $maa ) . "-" . $ytunnus;
			}
			
			$uytunnus = $ytunnus;
		}
		
		return $uytunnus;
	}
}

if (! function_exists ( "enable_ajax" )) {
	function enable_ajax() {
		global $palvelin2, $kukarow;
		
		if ($kukarow ["extranet"] != "") {
			$imgUrl = $palvelin2 . "loading_blue_small.gif";
		} else {
			$imgUrl = $palvelin2 . "pics/loading_blue_small.gif";
		}
		
		?>

<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">

	var toggled = Array();
	function AJAXInteraction(urli, id, data, href) {

		var http = createRequestObject();
		http.onreadystatechange = handleResponse;

		function createRequestObject() {
			var xmlHttp;
			try {
				// Firefox, Opera 8.0+, Safari
				xmlHttp=new XMLHttpRequest();
			}
			catch (e) {
				// Internet Explorer
				try {
					xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");
				}
				catch (e) {
					try {
						xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
					}
					catch (e) {
						alert("Your browser does not support AJAX!");
						return false;
					}
				}
			}
			return xmlHttp;
		}

		function handleResponse() {
			if (http.readyState == 4) {
				var response = http.responseText;

				document.getElementById(id).innerHTML = response;

				<?php
		if (stripos ( $_SERVER ['HTTP_USER_AGENT'], "MSIE" ) === FALSE and stripos ( $_SERVER ['HTTP_USER_AGENT'], "EXPLORER" ) === FALSE) {
			?>
					var container = document.getElementById(id);
					var allNewScripts = container.getElementsByTagName('script');
					c = allNewScripts.length;

					if (c>0) {
						for (x=0;x<=c;x++) {
							if (allNewScripts[x]) {
								eval(allNewScripts[x].innerHTML);
							}
						}
					}
				<?php
		}
		?>

				//	Jos p‰ivitet‰‰n togglegrouppaus
				if (href) {
					document.getElementById(href).href = 'javascript:toggleGroup("' + id + '");';
					toggled.push(id);
				}

				//	Varmistetaan n‰kyvyys
				document.getElementById(id).style.display = '';

			}
		}

		this.doPost = function() {
			http.open('post', urli + '&ohje=off&no_css=yes&no_head=yes', true);
			http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
			http.send(data);
		}

		this.doGet = function() {
			http.open('get', urli + '&' + data + '&ohje=off&no_css=yes&no_head=yes');
			http.send(null);
		}

		this.unToggle = function() {
			unToggle(id);
			document.getElementById(href).href = document.getElementById(href).href+' unToggle("' + id + '");';
		}

		this.showLoader = function() {
			document.getElementById(id).innerHTML = "<div style='filter:alpha(opacity=30); -moz-opacity:0.3; opacity: 0.3; position: absolute; width: 100%; height: 100%; top: 0; left: 0; background-color: #0c0c0c;' z-index: 100><img style='position: absolute; top: 50%; left: 50%;' src='<?php
		echo $imgUrl;
		?>'></div>";
		}

	}

	function sndReq(div, urli, href, load, unToggle, method, data) {

		//	Luodaan uudi instanssi
		var ai = new AJAXInteraction(urli, div, data, href);

		//	N‰ytet‰‰n latausanimaatio
		if (load) {
			ai.showLoader();
		}

		if (unToggle) {
			ai.unToggle();
		}

		//	Otetaan yhteydet
		if (method == 'post') {
			ai.doPost();
		}
		else {
			ai.doGet();
		}

	}

	function unToggle(id) {
		for (x in toggled) {
			if (toggled[x] != id) {
				if (document.getElementById(toggled[x])) {
					document.getElementById(toggled[x]).style.display = 'none';
				}
				delete toggled[x];
			}
		}
	}

	function toggleGroup(id) {

		if (document.getElementById(id).style.display != 'none') {
			document.getElementById(id).style.display = 'none';
		}
		else {
			document.getElementById(id).style.display = '';
		}
	}

	function ajaxPost(formID, urli , minne, href, load, unToggle, method) {

		obj = document.getElementById(formID);
		getstr = "sourceCharset=UTF-8&";

 		for (i=0; i<obj.length; i++) {
			if (obj.elements[i].tagName == "INPUT" && obj.elements[i].value != "") {
				if (obj.elements[i].type == "text" || obj.elements[i].type == "hidden") {
					getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
				}
				else if (obj.elements[i].type == "checkbox") {
					if (obj.elements[i].checked) {
						getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
					}
					else {
						getstr += obj.elements[i].name + "=&";
					}
				}
				else if (obj.elements[i].type == "radio") {
					if (obj.elements[i].checked) {
						getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
					}
				}
			}
			else if (obj.elements[i].tagName == "SELECT") {
				var sel = obj.elements[i];
				if (sel.multiple) {
					for (var x = 0; x < sel.options.length; x++) {
						if (sel.options[x].selected) {
							getstr += sel.name + "=" + sel.options[x].value + "&";
						}
					}
				}
				else {
					getstr += sel.name + "=" + sel.options[sel.selectedIndex].value + "&";
				}
			}
			else if (obj.elements[i].tagName == "TEXTAREA") {
				getstr += obj.elements[i].name + "=" + encodeURIComponent(obj.elements[i].value) + "&";
			}
		}

		if (method==undefined) {
			method="post";
		}

		sndReq(minne, urli, href, load, unToggle, method, getstr);
	}

	var keyStrokeIndex=-1;

	function livesearch_keyhandler(event, haku_id, haku_formi, dont_submit_after) {

		var selectOptions = document.getElementsByName('selectOptions'+haku_id);

		for (var iEl = 0; iEl < selectOptions.length; iEl++) {
			document.getElementById(selectOptions[iEl].id).className='';
		}

		if (event.keyCode == 40 || event.keyCode == 38) {
			if (event.keyCode  == 40) {
				previousKeyStrokeIndex=keyStrokeIndex;
				keyStrokeIndex++;
			}
			else if (event.keyCode == 38){
				previousKeyStrokeIndex=keyStrokeIndex;
				keyStrokeIndex--;
			}

			if (keyStrokeIndex > selectOptions.length-1) {
				keyStrokeIndex = selectOptions.length-1;
			}
			else if (keyStrokeIndex < 0) {
				keyStrokeIndex = -1;
				selectOptions[previousKeyStrokeIndex].className='';
			}
			else {
				if (previousKeyStrokeIndex < 0) {
					previousKeyStrokeIndex = 0;
				}

				if (previousKeyStrokeIndex != keyStrokeIndex) {
					selectOptions[previousKeyStrokeIndex].className='';
				}

				selectOptions[keyStrokeIndex].className='liveSearchSelectedItem';
			}
		}
		else if (event.keyCode == 13) {
			if (keyStrokeIndex >= 0 && keyStrokeIndex <= selectOptions.length-1) {
				var selectValues = document.getElementsByName('selectValues'+haku_id);
				document.getElementById(haku_id).value=selectValues[keyStrokeIndex].id;
				if (dont_submit_after) {
					document.getElementById('livesearch_'+haku_id).style.visibility = 'hidden';
				}
				else {
					document.haku_formi.submit();
				}
				keyStrokeIndex=-1;
			}
			else {
				document.haku_formi.submit();
			}

			return false;
		}
		else if (event.keyCode == 27) {
			selectOptions[keyStrokeIndex].className='';
			KeyStrokeIndex = -1;
		}
		else if (event.keyCode == 9) {
			document.getElementById('livesearch_'+haku_id).style.visibility = 'hidden';
			KeyStrokeIndex = -1;
		}

		if (keyStrokeIndex >= 0 && keyStrokeIndex <= selectOptions.length-1) {
			selectOptions[keyStrokeIndex].className='liveSearchSelectedItem';
		}
	}

</script>

<?php
	}
}

if (! function_exists ( "js_selectAllCheckboxesByName" )) {
	function js_selectAllCheckboxesByName() {
		?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
			function selectAllCheckboxesByName(suunta, name) {
				list=document.getElementsByTagName("input")
				if (list.length > 0) {

					for(i=0;i<=list.length;i++){
						if (list[i].type == "checkbox") {
							if (list[i].name.substr(0, name.length) == name) {
								list[i].checked=suunta;
							}
						}
					}
				}
			}
		</SCRIPT>
<?php
	}
}

if (! function_exists ( "js_openFormInNewWindow" )) {
	function js_openFormInNewWindow() {
		?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
			function js_openFormInNewWindow(formID, name) {

				if (!name) {
					name='Pupesoft'+Math.floor(Math.random()*1001);
				}

				formi = document.getElementById(formID);

				if (name == "samewindow") {
					formi.target='';

					formi.submit();
				}
				else {
					thistee = formi.elements["tee"].value;
					formi.elements["tee"].value = "NAYTATILAUS";

					window.open('', name, 'top=100,left=100,resizable=yes');

					formi.target=name;

					formi.submit();

					formi.elements["tee"].value = thistee;
				}
			}
		</SCRIPT>
<?php
	}
}

if (! function_exists ( "js_open_yllapito" )) {
	function js_open_yllapito() {
		global $palvelin2;
		
		?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">
			function js_open_yllapito(tdid, parametrit){

				var posX, posY;
				var offsetX=30, offsetY=30;

				if (typeof window.screenLeft != "undefined"){ //IE
					posX = window.screenLeft + offsetX;
					posY = window.screenTop + offsetY;
				}
				else if (typeof window.screenX != "undefined"){ //NS/Moz
					posX = window.screenX + offsetX;
					posY = window.screenY + offsetY;
				}
				else { //default - center of screen
					posX = screen.availWidth/2 - w/2;
					posY = screen.availHeight/2 - h/2;
				}

				newwindow=window.open('<?php
		echo $palvelin2;
		?>yllapito.php?'+parametrit+'&js_open_yp='+tdid+'&uusi=1&ohje=off', 'Pupesoft_popup', 'width=800, height=600, top='+posY+', left='+posX+', scrollbars=no, resizable=yes');
			}
		</SCRIPT>
<?php
	}
}

if (! function_exists ( "js_showhide" )) {
	// scripti balloonien tekemiseen
	function js_showhide() {
		
		?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">

function showhide(layer_ref, type) {


	if (type=='byName') {
		var e = document.getElementsByName(layer_ref);

		for(i=0;i<=e.length-1;i++) {
			if (e[i].style.display != 'none') {
				e[i].style.display = 'none';
			}
			else {
				e[i].style.display = '';
			}
		}
	}
	else {

		var state = document.getElementById(layer_ref).style.display;
		if (state != 'none') {
			state = 'none';
		}
		else {
			state = '';
		}

		if (document.all) { //IS IE 4 or 5 (or 6 beta)
			eval( "document.all." + layer_ref + ".style.display = state");
		}
		if (document.layers) { //IS NETSCAPE 4 or below
			document.layers[layer_ref].display = state;
		}
		if (document.getElementById &&!document.all) {
			hza = document.getElementById(layer_ref);
			hza.style.display = state;
		}
	}
}

function show(layer_ref, type) {


	if (type=='byName') {
		var e = document.getElementsByName(layer_ref);

		for(i=0;i<=e.length-1;i++) {
			e[i].style.display = '';
		}
	}
	else {

		var state = document.getElementById(layer_ref).style.display;
		state = '';

		if (document.all) { //IS IE 4 or 5 (or 6 beta)
			eval( "document.all." + layer_ref + ".style.display = state");
		}
		if (document.layers) { //IS NETSCAPE 4 or below
			document.layers[layer_ref].display = state;
		}
		if (document.getElementById &&!document.all) {
			hza = document.getElementById(layer_ref);
			hza.style.display = state;
		}
	}
}

</script>
<?php
	
	}
}

if (! function_exists ( "js_alasvetoMaxWidth" )) {
	function js_alasvetoMaxWidth($id, $leveys) {
		return "id = \"$id\" style=\"max-width: {$leveys}px; width: expression(if (parseInt(document.getElementById('$id').clientWidth) > $leveys) { {$leveys}px });\" onmousedown=\"var browser = navigator.appName.toUpperCase(); var loytyyko = browser.indexOf('EXPLORER'); if (loytyyko >= 0) {document.getElementById('$id').style.width = 'auto';}\" onblur=\"var browser = navigator.appName.toUpperCase(); var loytyyko = browser.indexOf('EXPLORER'); if (loytyyko >= 0 && $leveys > 0) {cwidth = document.getElementById('$id').clientWidth; if (cwidth > $leveys) { document.getElementById('$id').style.width = '$leveys'+'px';} else {document.getElementById('$id').style.width = 'auto';}}\"";
	}
}

if (! function_exists ( "js_toimehtoTarkenne" )) {
	function js_toimehtoTarkenne() {
		?>
<SCRIPT TYPE="text/javascript" LANGUAGE="JavaScript">

function toimehtoTarkenne(toimehto) {
	tehto=document.getElementById(toimehto);
	tehtoLisa=document.getElementById(toimehto+'Lisa');

	teksti=tehto.options[tehto.selectedIndex].text;
	arvo=tehto.options[tehto.selectedIndex].value;

	i=teksti.indexOf("-");
	if (i>0) {
		tarkenne=teksti.substr((i+2));
		tehtoLisa.value=tarkenne;
	}
	else {
		tehtoLisa.value='';
	}
}

</script>
<?php
	}
}

if (! function_exists ( "js_popup" )) {
	// scripti balloonien tekemiseen
	function js_popup() {
		
		echo "<script type='text/javascript' language='javascript'>";
		
		if (file_exists ( "inc/jquery.min.js" )) {
			require_once ("inc/jquery.min.js");
		} else {
			require_once ("jquery.min.js");
		}
		
		?>

	jQuery.fn.tooltip = function(allowHtml, className){
		jQuery.fn.tooltip.created.id = 'toolTip';
		$('body').append(jQuery.fn.tooltip.created);

		var toolTip = $(jQuery.fn.tooltip.created);

	    toolTip.css({'position':'absolute','display':'none'});

	    //functions
		function getMouseX(e) {
			var x = null;

			if (e.pageX) 	{
				x = e.pageX;
			}
			else if (e.clientX) {
				x = e.clientX + document.body.scrollLeft
					+ document.documentElement.scrollLeft;
			}
			return x;
		}
		function getMouseY(e) {
			var y = null;

			if (e.pageY) 	{
				y = e.pageY;
			}
			else if (e.clientY) {
				y = e.clientY + document.body.scrollTop
					+ document.documentElement.scrollTop;
			}

			return y;
		}

	    function toolTipShow(e, x, y) {
	        toolTip.css({'top':y, 'left':x}).delay(1000).show('fast');
	    }

	    function toolTipHide() {
			toolTip.hide().clearQueue();
	    }

	    //events for each element
	    this.each(function() {

	        $(this).mousemove(function(e){
				var x = getMouseX(e) + 20;
				var y = getMouseY(e) + 20;

				// get content id from element and fetch text from the div
				var content_id = $(this).attr('id');
				var content = $('#div_'+content_id).html();

				var div_height = $('#div_'+content_id).height();
				var div_width = $('#div_'+content_id).width();

				var window_width = $(window).width();
				var window_height = $(window).height();

				var scrollY = document.body.scrollTop + document.documentElement.scrollTop;
				var scrollX = document.body.scrollLeft + document.documentElement.scrollLeft;

				//	Jos saimme riitt‰v‰sti tietoa voimme kalkuloida oikean position
				if (div_height != null && div_width != null && x != null && y != null) {
					//	Riitt‰‰k‰ leveys
					if (((x - scrollX) + div_width + 30) > window_width) {
						//	Siirret‰‰n t‰m‰ ihan oikeaan laitaan..
						x = window_width - div_width - 30 + scrollX;
					}

					if ((y - scrollY) + div_height > window_height) {
						y -= (div_height);
					}

					//	Oikea laita on kuitenkin aina t‰rkein!
					if (x < 10) {
						x = 10;
					}
					if (y < 10) {
						y = 10;
					}
				}

				toolTipShow(e, x, y);

	            //update the content
	            if (allowHtml) {
	                toolTip.html(content);
				}
	            else {
	                toolTip.text(content);
				}

	            //remove all classes for the tipBox before add a new one and to avoid the 'append class'
	            toolTip.removeClass();

	            //set class if specified
	            if (className) {
					toolTip.addClass(className);
				}
			});

	        $(this).mouseout(function(){
	            toolTipHide();
	        });
	    });
	};

	$(function(){
		//create the element (avoiding create multiple divisions for the tooltip)
		jQuery.fn.tooltip.created = document.createElement('div');

		$('.tooltip').tooltip('yes', 'popup');
	});

	<?php
		
		echo "</script>";
	
	}
}

if (! function_exists ( "encodeURI" )) {
	function encodeURI($string) {
		/*
		PHP URL encoding/decoding functions for Javascript interaction V3.0
		(C) 2006 www.captain.at - all rights reserved
		License: GPL
		*/
		
		//	Apufunktio
		if (! function_exists ( "encodeURIbycharacter" )) {
			function encodeURIbycharacter($char) {
				if ($char == "+") {
					return "%20";
				}
				if ($char == "%21") {
					return "!";
				}
				if ($char == "%23") {
					return "#";
				}
				if ($char == "%24") {
					return "$";
				}
				if ($char == "%26") {
					return "&";
				}
				if ($char == "%27") {
					return "\"";
				}
				if ($char == "%28") {
					return "(";
				}
				if ($char == "%29") {
					return ")";
				}
				if ($char == "%2A") {
					return "*";
				}
				if ($char == "%2B") {
					return "+";
				}
				if ($char == "%2C") {
					return ",";
				}
				if ($char == "%2F") {
					return "/";
				}
				if ($char == "%3A") {
					return ":";
				}
				if ($char == "%3B") {
					return ";";
				}
				if ($char == "%3D") {
					return "=";
				}
				if ($char == "%3F") {
					return "?";
				}
				if ($char == "%40") {
					return "@";
				}
				if ($char == "%7E") {
					return "~";
				}
				if ($char == "%80") {
					return "%E2%82%AC";
				}
				if ($char == "%81") {
					return "%C2%81";
				}
				if ($char == "%82") {
					return "%E2%80%9A";
				}
				if ($char == "%83") {
					return "%C6%92";
				}
				if ($char == "%84") {
					return "%E2%80%9E";
				}
				if ($char == "%85") {
					return "%E2%80%A6";
				}
				if ($char == "%86") {
					return "%E2%80%A0";
				}
				if ($char == "%87") {
					return "%E2%80%A1";
				}
				if ($char == "%88") {
					return "%CB%86";
				}
				if ($char == "%89") {
					return "%E2%80%B0";
				}
				if ($char == "%8A") {
					return "%C5%A0";
				}
				if ($char == "%8B") {
					return "%E2%80%B9";
				}
				if ($char == "%8C") {
					return "%C5%92";
				}
				if ($char == "%8D") {
					return "%C2%8D";
				}
				if ($char == "%8E") {
					return "%C5%BD";
				}
				if ($char == "%8F") {
					return "%C2%8F";
				}
				if ($char == "%90") {
					return "%C2%90";
				}
				if ($char == "%91") {
					return "%E2%80%98";
				}
				if ($char == "%92") {
					return "%E2%80%99";
				}
				if ($char == "%93") {
					return "%E2%80%9C";
				}
				if ($char == "%94") {
					return "%E2%80%9D";
				}
				if ($char == "%95") {
					return "%E2%80%A2";
				}
				if ($char == "%96") {
					return "%E2%80%93";
				}
				if ($char == "%97") {
					return "%E2%80%94";
				}
				if ($char == "%98") {
					return "%CB%9C";
				}
				if ($char == "%99") {
					return "%E2%84%A2";
				}
				if ($char == "%9A") {
					return "%C5%A1";
				}
				if ($char == "%9B") {
					return "%E2%80%BA";
				}
				if ($char == "%9C") {
					return "%C5%93";
				}
				if ($char == "%9D") {
					return "%C2%9D";
				}
				if ($char == "%9E") {
					return "%C5%BE";
				}
				if ($char == "%9F") {
					return "%C5%B8";
				}
				if ($char == "%A0") {
					return "%C2%A0";
				}
				if ($char == "%A1") {
					return "%C2%A1";
				}
				if ($char == "%A2") {
					return "%C2%A2";
				}
				if ($char == "%A3") {
					return "%C2%A3";
				}
				if ($char == "%A4") {
					return "%C2%A4";
				}
				if ($char == "%A5") {
					return "%C2%A5";
				}
				if ($char == "%A6") {
					return "%C2%A6";
				}
				if ($char == "%A7") {
					return "%C2%A7";
				}
				if ($char == "%A8") {
					return "%C2%A8";
				}
				if ($char == "%A9") {
					return "%C2%A9";
				}
				if ($char == "%AA") {
					return "%C2%AA";
				}
				if ($char == "%AB") {
					return "%C2%AB";
				}
				if ($char == "%AC") {
					return "%C2%AC";
				}
				if ($char == "%AD") {
					return "%C2%AD";
				}
				if ($char == "%AE") {
					return "%C2%AE";
				}
				if ($char == "%AF") {
					return "%C2%AF";
				}
				if ($char == "%B0") {
					return "%C2%B0";
				}
				if ($char == "%B1") {
					return "%C2%B1";
				}
				if ($char == "%B2") {
					return "%C2%B2";
				}
				if ($char == "%B3") {
					return "%C2%B3";
				}
				if ($char == "%B4") {
					return "%C2%B4";
				}
				if ($char == "%B5") {
					return "%C2%B5";
				}
				if ($char == "%B6") {
					return "%C2%B6";
				}
				if ($char == "%B7") {
					return "%C2%B7";
				}
				if ($char == "%B8") {
					return "%C2%B8";
				}
				if ($char == "%B9") {
					return "%C2%B9";
				}
				if ($char == "%BA") {
					return "%C2%BA";
				}
				if ($char == "%BB") {
					return "%C2%BB";
				}
				if ($char == "%BC") {
					return "%C2%BC";
				}
				if ($char == "%BD") {
					return "%C2%BD";
				}
				if ($char == "%BE") {
					return "%C2%BE";
				}
				if ($char == "%BF") {
					return "%C2%BF";
				}
				if ($char == "%C0") {
					return "%C3%80";
				}
				if ($char == "%C1") {
					return "%C3%81";
				}
				if ($char == "%C2") {
					return "%C3%82";
				}
				if ($char == "%C3") {
					return "%C3%83";
				}
				if ($char == "%C4") {
					return "%C3%84";
				}
				if ($char == "%C5") {
					return "%C3%85";
				}
				if ($char == "%C6") {
					return "%C3%86";
				}
				if ($char == "%C7") {
					return "%C3%87";
				}
				if ($char == "%C8") {
					return "%C3%88";
				}
				if ($char == "%C9") {
					return "%C3%89";
				}
				if ($char == "%CA") {
					return "%C3%8A";
				}
				if ($char == "%CB") {
					return "%C3%8B";
				}
				if ($char == "%CC") {
					return "%C3%8C";
				}
				if ($char == "%CD") {
					return "%C3%8D";
				}
				if ($char == "%CE") {
					return "%C3%8E";
				}
				if ($char == "%CF") {
					return "%C3%8F";
				}
				if ($char == "%D0") {
					return "%C3%90";
				}
				if ($char == "%D1") {
					return "%C3%91";
				}
				if ($char == "%D2") {
					return "%C3%92";
				}
				if ($char == "%D3") {
					return "%C3%93";
				}
				if ($char == "%D4") {
					return "%C3%94";
				}
				if ($char == "%D5") {
					return "%C3%95";
				}
				if ($char == "%D6") {
					return "%C3%96";
				}
				if ($char == "%D7") {
					return "%C3%97";
				}
				if ($char == "%D8") {
					return "%C3%98";
				}
				if ($char == "%D9") {
					return "%C3%99";
				}
				if ($char == "%DA") {
					return "%C3%9A";
				}
				if ($char == "%DB") {
					return "%C3%9B";
				}
				if ($char == "%DC") {
					return "%C3%9C";
				}
				if ($char == "%DD") {
					return "%C3%9D";
				}
				if ($char == "%DE") {
					return "%C3%9E";
				}
				if ($char == "%DF") {
					return "%C3%9F";
				}
				if ($char == "%E0") {
					return "%C3%A0";
				}
				if ($char == "%E1") {
					return "%C3%A1";
				}
				if ($char == "%E2") {
					return "%C3%A2";
				}
				if ($char == "%E3") {
					return "%C3%A3";
				}
				if ($char == "%E4") {
					return "%C3%A4";
				}
				if ($char == "%E5") {
					return "%C3%A5";
				}
				if ($char == "%E6") {
					return "%C3%A6";
				}
				if ($char == "%E7") {
					return "%C3%A7";
				}
				if ($char == "%E8") {
					return "%C3%A8";
				}
				if ($char == "%E9") {
					return "%C3%A9";
				}
				if ($char == "%EA") {
					return "%C3%AA";
				}
				if ($char == "%EB") {
					return "%C3%AB";
				}
				if ($char == "%EC") {
					return "%C3%AC";
				}
				if ($char == "%ED") {
					return "%C3%AD";
				}
				if ($char == "%EE") {
					return "%C3%AE";
				}
				if ($char == "%EF") {
					return "%C3%AF";
				}
				if ($char == "%F0") {
					return "%C3%B0";
				}
				if ($char == "%F1") {
					return "%C3%B1";
				}
				if ($char == "%F2") {
					return "%C3%B2";
				}
				if ($char == "%F3") {
					return "%C3%B3";
				}
				if ($char == "%F4") {
					return "%C3%B4";
				}
				if ($char == "%F5") {
					return "%C3%B5";
				}
				if ($char == "%F6") {
					return "%C3%B6";
				}
				if ($char == "%F7") {
					return "%C3%B7";
				}
				if ($char == "%F8") {
					return "%C3%B8";
				}
				if ($char == "%F9") {
					return "%C3%B9";
				}
				if ($char == "%FA") {
					return "%C3%BA";
				}
				if ($char == "%FB") {
					return "%C3%BB";
				}
				if ($char == "%FC") {
					return "%C3%BC";
				}
				if ($char == "%FD") {
					return "%C3%BD";
				}
				if ($char == "%FE") {
					return "%C3%BE";
				}
				if ($char == "%FF") {
					return "%C3%BF";
				}
				return $char;
			}
		}
		
		$result = "";
		for($i = 0; $i < strlen ( $string ); $i ++) {
			$result .= encodeURIbycharacter ( urlencode ( $string [$i] ) );
		}
		return $result;
	}
}

if (! function_exists ( "decodeURI" )) {
	function decodeURI($string) {
		/*
		PHP URL encoding/decoding functions for Javascript interaction V3.0
		(C) 2006 www.captain.at - all rights reserved
		License: GPL
		*/
		
		//	Apufunktio
		if (! function_exists ( "decodeURIbycharacter" )) {
			function decodeURIbycharacter($str) {
				
				$char = $str;
				
				if ($char == "%E2%82%AC") {
					return array ("%80", 8 );
				}
				if ($char == "%E2%80%9A") {
					return array ("%82", 8 );
				}
				if ($char == "%E2%80%9E") {
					return array ("%84", 8 );
				}
				if ($char == "%E2%80%A6") {
					return array ("%85", 8 );
				}
				if ($char == "%E2%80%A0") {
					return array ("%86", 8 );
				}
				if ($char == "%E2%80%A1") {
					return array ("%87", 8 );
				}
				if ($char == "%E2%80%B0") {
					return array ("%89", 8 );
				}
				if ($char == "%E2%80%B9") {
					return array ("%8B", 8 );
				}
				if ($char == "%E2%80%98") {
					return array ("%91", 8 );
				}
				if ($char == "%E2%80%99") {
					return array ("%92", 8 );
				}
				if ($char == "%E2%80%9C") {
					return array ("%93", 8 );
				}
				if ($char == "%E2%80%9D") {
					return array ("%94", 8 );
				}
				if ($char == "%E2%80%A2") {
					return array ("%95", 8 );
				}
				if ($char == "%E2%80%93") {
					return array ("%96", 8 );
				}
				if ($char == "%E2%80%94") {
					return array ("%97", 8 );
				}
				if ($char == "%E2%84%A2") {
					return array ("%99", 8 );
				}
				if ($char == "%E2%80%BA") {
					return array ("%9B", 8 );
				}
				
				$char = substr ( $str, 0, 6 );
				
				if ($char == "%C2%81") {
					return array ("%81", 5 );
				}
				if ($char == "%C6%92") {
					return array ("%83", 5 );
				}
				if ($char == "%CB%86") {
					return array ("%88", 5 );
				}
				if ($char == "%C5%A0") {
					return array ("%8A", 5 );
				}
				if ($char == "%C5%92") {
					return array ("%8C", 5 );
				}
				if ($char == "%C2%8D") {
					return array ("%8D", 5 );
				}
				if ($char == "%C5%BD") {
					return array ("%8E", 5 );
				}
				if ($char == "%C2%8F") {
					return array ("%8F", 5 );
				}
				if ($char == "%C2%90") {
					return array ("%90", 5 );
				}
				if ($char == "%CB%9C") {
					return array ("%98", 5 );
				}
				if ($char == "%C5%A1") {
					return array ("%9A", 5 );
				}
				if ($char == "%C5%93") {
					return array ("%9C", 5 );
				}
				if ($char == "%C2%9D") {
					return array ("%9D", 5 );
				}
				if ($char == "%C5%BE") {
					return array ("%9E", 5 );
				}
				if ($char == "%C5%B8") {
					return array ("%9F", 5 );
				}
				if ($char == "%C2%A0") {
					return array ("%A0", 5 );
				}
				if ($char == "%C2%A1") {
					return array ("%A1", 5 );
				}
				if ($char == "%C2%A2") {
					return array ("%A2", 5 );
				}
				if ($char == "%C2%A3") {
					return array ("%A3", 5 );
				}
				if ($char == "%C2%A4") {
					return array ("%A4", 5 );
				}
				if ($char == "%C2%A5") {
					return array ("%A5", 5 );
				}
				if ($char == "%C2%A6") {
					return array ("%A6", 5 );
				}
				if ($char == "%C2%A7") {
					return array ("%A7", 5 );
				}
				if ($char == "%C2%A8") {
					return array ("%A8", 5 );
				}
				if ($char == "%C2%A9") {
					return array ("%A9", 5 );
				}
				if ($char == "%C2%AA") {
					return array ("%AA", 5 );
				}
				if ($char == "%C2%AB") {
					return array ("%AB", 5 );
				}
				if ($char == "%C2%AC") {
					return array ("%AC", 5 );
				}
				if ($char == "%C2%AD") {
					return array ("%AD", 5 );
				}
				if ($char == "%C2%AE") {
					return array ("%AE", 5 );
				}
				if ($char == "%C2%AF") {
					return array ("%AF", 5 );
				}
				if ($char == "%C2%B0") {
					return array ("%B0", 5 );
				}
				if ($char == "%C2%B1") {
					return array ("%B1", 5 );
				}
				if ($char == "%C2%B2") {
					return array ("%B2", 5 );
				}
				if ($char == "%C2%B3") {
					return array ("%B3", 5 );
				}
				if ($char == "%C2%B4") {
					return array ("%B4", 5 );
				}
				if ($char == "%C2%B5") {
					return array ("%B5", 5 );
				}
				if ($char == "%C2%B6") {
					return array ("%B6", 5 );
				}
				if ($char == "%C2%B7") {
					return array ("%B7", 5 );
				}
				if ($char == "%C2%B8") {
					return array ("%B8", 5 );
				}
				if ($char == "%C2%B9") {
					return array ("%B9", 5 );
				}
				if ($char == "%C2%BA") {
					return array ("%BA", 5 );
				}
				if ($char == "%C2%BB") {
					return array ("%BB", 5 );
				}
				if ($char == "%C2%BC") {
					return array ("%BC", 5 );
				}
				if ($char == "%C2%BD") {
					return array ("%BD", 5 );
				}
				if ($char == "%C2%BE") {
					return array ("%BE", 5 );
				}
				if ($char == "%C2%BF") {
					return array ("%BF", 5 );
				}
				if ($char == "%C3%80") {
					return array ("%C0", 5 );
				}
				if ($char == "%C3%81") {
					return array ("%C1", 5 );
				}
				if ($char == "%C3%82") {
					return array ("%C2", 5 );
				}
				if ($char == "%C3%83") {
					return array ("%C3", 5 );
				}
				if ($char == "%C3%84") {
					return array ("%C4", 5 );
				}
				if ($char == "%C3%85") {
					return array ("%C5", 5 );
				}
				if ($char == "%C3%86") {
					return array ("%C6", 5 );
				}
				if ($char == "%C3%87") {
					return array ("%C7", 5 );
				}
				if ($char == "%C3%88") {
					return array ("%C8", 5 );
				}
				if ($char == "%C3%89") {
					return array ("%C9", 5 );
				}
				if ($char == "%C3%8A") {
					return array ("%CA", 5 );
				}
				if ($char == "%C3%8B") {
					return array ("%CB", 5 );
				}
				if ($char == "%C3%8C") {
					return array ("%CC", 5 );
				}
				if ($char == "%C3%8D") {
					return array ("%CD", 5 );
				}
				if ($char == "%C3%8E") {
					return array ("%CE", 5 );
				}
				if ($char == "%C3%8F") {
					return array ("%CF", 5 );
				}
				if ($char == "%C3%90") {
					return array ("%D0", 5 );
				}
				if ($char == "%C3%91") {
					return array ("%D1", 5 );
				}
				if ($char == "%C3%92") {
					return array ("%D2", 5 );
				}
				if ($char == "%C3%93") {
					return array ("%D3", 5 );
				}
				if ($char == "%C3%94") {
					return array ("%D4", 5 );
				}
				if ($char == "%C3%95") {
					return array ("%D5", 5 );
				}
				if ($char == "%C3%96") {
					return array ("%D6", 5 );
				}
				if ($char == "%C3%97") {
					return array ("%D7", 5 );
				}
				if ($char == "%C3%98") {
					return array ("%D8", 5 );
				}
				if ($char == "%C3%99") {
					return array ("%D9", 5 );
				}
				if ($char == "%C3%9A") {
					return array ("%DA", 5 );
				}
				if ($char == "%C3%9B") {
					return array ("%DB", 5 );
				}
				if ($char == "%C3%9C") {
					return array ("%DC", 5 );
				}
				if ($char == "%C3%9D") {
					return array ("%DD", 5 );
				}
				if ($char == "%C3%9E") {
					return array ("%DE", 5 );
				}
				if ($char == "%C3%9F") {
					return array ("%DF", 5 );
				}
				if ($char == "%C3%A0") {
					return array ("%E0", 5 );
				}
				if ($char == "%C3%A1") {
					return array ("%E1", 5 );
				}
				if ($char == "%C3%A2") {
					return array ("%E2", 5 );
				}
				if ($char == "%C3%A3") {
					return array ("%E3", 5 );
				}
				if ($char == "%C3%A4") {
					return array ("%E4", 5 );
				}
				if ($char == "%C3%A5") {
					return array ("%E5", 5 );
				}
				if ($char == "%C3%A6") {
					return array ("%E6", 5 );
				}
				if ($char == "%C3%A7") {
					return array ("%E7", 5 );
				}
				if ($char == "%C3%A8") {
					return array ("%E8", 5 );
				}
				if ($char == "%C3%A9") {
					return array ("%E9", 5 );
				}
				if ($char == "%C3%AA") {
					return array ("%EA", 5 );
				}
				if ($char == "%C3%AB") {
					return array ("%EB", 5 );
				}
				if ($char == "%C3%AC") {
					return array ("%EC", 5 );
				}
				if ($char == "%C3%AD") {
					return array ("%ED", 5 );
				}
				if ($char == "%C3%AE") {
					return array ("%EE", 5 );
				}
				if ($char == "%C3%AF") {
					return array ("%EF", 5 );
				}
				if ($char == "%C3%B0") {
					return array ("%F0", 5 );
				}
				if ($char == "%C3%B1") {
					return array ("%F1", 5 );
				}
				if ($char == "%C3%B2") {
					return array ("%F2", 5 );
				}
				if ($char == "%C3%B3") {
					return array ("%F3", 5 );
				}
				if ($char == "%C3%B4") {
					return array ("%F4", 5 );
				}
				if ($char == "%C3%B5") {
					return array ("%F5", 5 );
				}
				if ($char == "%C3%B6") {
					return array ("%F6", 5 );
				}
				if ($char == "%C3%B7") {
					return array ("%F7", 5 );
				}
				if ($char == "%C3%B8") {
					return array ("%F8", 5 );
				}
				if ($char == "%C3%B9") {
					return array ("%F9", 5 );
				}
				if ($char == "%C3%BA") {
					return array ("%FA", 5 );
				}
				if ($char == "%C3%BB") {
					return array ("%FB", 5 );
				}
				if ($char == "%C3%BC") {
					return array ("%FC", 5 );
				}
				if ($char == "%C3%BD") {
					return array ("%FD", 5 );
				}
				if ($char == "%C3%BE") {
					return array ("%FE", 5 );
				}
				if ($char == "%C3%BF") {
					return array ("%FF", 5 );
				}
				
				$char = substr ( $str, 0, 3 );
				if ($char == "%20") {
					return array ("+", 2 );
				}
				
				$char = substr ( $str, 0, 1 );
				
				if ($char == "!") {
					return array ("%21", 0 );
				}
				if ($char == "#") {
					return array ("%23", 0 );
				}
				if ($char == "$") {
					return array ("%24", 0 );
				}
				if ($char == "&") {
					return array ("%26", 0 );
				}
				if ($char == "\"") {
					return array ("%27", 0 );
				}
				if ($char == "(") {
					return array ("%28", 0 );
				}
				if ($char == ")") {
					return array ("%29", 0 );
				}
				if ($char == "*") {
					return array ("%2A", 0 );
				}
				if ($char == "+") {
					return array ("%2B", 0 );
				}
				if ($char == ",") {
					return array ("%2C", 0 );
				}
				if ($char == "/") {
					return array ("%2F", 0 );
				}
				if ($char == ":") {
					return array ("%3A", 0 );
				}
				if ($char == ";") {
					return array ("%3B", 0 );
				}
				if ($char == "=") {
					return array ("%3D", 0 );
				}
				if ($char == "?") {
					return array ("%3F", 0 );
				}
				if ($char == "@") {
					return array ("%40", 0 );
				}
				if ($char == "~") {
					return array ("%7E", 0 );
				}
				
				if ($char == "%") {
					return array (substr ( $str, 0, 3 ), 2 );
				} else {
					return array ($char, 0 );
				}
			}
		}
		
		$result = "";
		for($i = 0; $i < strlen ( $string ); $i ++) {
			$decstr = "";
			for($p = 0; $p <= 8; $p ++) {
				$decstr .= $string [$i + $p];
			}
			list ( $decodedstr, $num ) = decodeURIbycharacter ( $decstr );
			$result .= urldecode ( $decodedstr );
			$i += $num;
		}
		return $result;
	}
}

if (! function_exists ( "tallenna_muisti" )) {
	function tallenna_muisti($nimitys, $exclude = "", $kuka = "") {
		global $kukarow;
		
		if ($nimitys == "") {
			return false;
		}
		
		$data = $_REQUEST;
		
		if (is_array ( $exclude )) {
			foreach ( $exclude as $kentta ) {
				unset ( $data [$kentta] );
			}
		}
		
		$nimitys = mysql_real_escape_string ( $nimitys );
		$data = mysql_real_escape_string ( serialize ( $data ) );
		
		$kuka = trim ( $kuka ) != '' ? mysql_real_escape_string ( $kuka ) : $kukarow ['kuka'];
		
		$query = "	REPLACE INTO tallennetut_parametrit SET
					yhtio		= '$kukarow[yhtio]',
					kuka		= '$kuka',
					nimitys		= '$nimitys',
					sovellus	= '$_SERVER[SCRIPT_NAME]',
					data		= '$data',
					laatija		= '$kukarow[kuka]',
					luontiaika  = now()";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		return true;
	}
}

if (! function_exists ( "hae_muisti" )) {
	function hae_muisti($nimitys, $kuka = '') {
		global $kukarow;
		
		if ($kuka == "") {
			$kuka = $kukarow ["kuka"];
		}
		
		$query = "	SELECT *
					FROM tallennetut_parametrit
					WHERE yhtio = '$kukarow[yhtio]'
					and nimitys = '$nimitys'
					and kuka = '$kuka'
					and sovellus = '$_SERVER[SCRIPT_NAME]'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $result ) == 1) {
			$row = mysql_fetch_assoc ( $result );
			$data = unserialize ( $row ["data"] );
			
			foreach ( $data as $nimi => $arvo ) {
				global ${$nimi};
				${$nimi} = $arvo;
			}
		} else {
			return false;
		}
	}
}

if (! function_exists ( "muistiin" )) {
	function muistiin($muisti, $nimi, $muistettava, $exclude = "") {
		global $kukarow;
		
		if ($muisti == "" or $nimi == "" or ! is_array ( $muistettava )) {
			return false;
		}
		
		if (! is_array ( $exclude )) {
			$exclude = array ();
		}
		
		// Poistetaan vanha kysely sek‰ tmpquery
		$query = "	DELETE
					FROM muisti
					WHERE yhtio = '$kukarow[yhtio]'
					and haku = '$muisti'
					and kuka = '$kukarow[kuka]'
					and nimi = '$nimi'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		foreach ( $muistettava as $key => $value ) {
			
			if (! in_array ( $key, $exclude )) {
				
				// Katsotaan onko kyseess‰ array
				$array = "";
				if (is_array ( $value )) {
					$value = serialize ( $value );
					$array = "X";
				}
				
				$value = mysql_real_escape_string ( $value );
				
				$query = "	INSERT INTO muisti SET
							yhtio		= '$kukarow[yhtio]',
							kuka		= '$kukarow[kuka]',
							haku		= '$muisti',
							nimi		= '$nimi',
							var			= '$key',
							value		= '$value',
							array 		= '$array',
							luontiaika	= now(),
							laatija		= '$kukarow[kuka]',
							muokattu	= now(),
							muokannut	= '$kukarow[kuka]'";
				$result = mysql_query ( $query ) or pupe_error ( $query );
			}
		}
		
		return true;
	}
}

if (! function_exists ( "muistista" )) {
	function muistista($muisti, $nimi) {
		global $kukarow;
		
		$query = "	SELECT *
					FROM muisti
					WHERE yhtio = '$kukarow[yhtio]'
					and haku = '$muisti'
					and kuka = '$kukarow[kuka]'
					and nimi = '$nimi'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $result ) == 0) {
			return false;
		}
		
		$retval = array ();
		
		while ( $row = mysql_fetch_assoc ( $result ) ) {
			if ($row ["array"] != "") {
				$retval [$row ["var"]] = unserialize ( $row ["value"] );
			} else {
				$retval [$row ["var"]] = stripslashes ( $row ["value"] );
			}
		}
		
		return $retval;
	}
}

if (! function_exists ( "aja_kysely" )) {
	function aja_kysely() {
		global $kukarow, $hakukysely, $aja_kysely, $uusi_kysely, $tallenna_muutokset, $poista_kysely, $_POST;
		
		if (! table_exists ( "muisti" ) or $hakukysely == "") {
			return true;
		}
		
		//	Tallennetaan viimeisin kysely aina muistiin jotta voimme kutsua sit‰ helposti uudestaan
		if ($aja_kysely == "" and $uusi_kysely == "") {
			$tallenna_muutokset = "X";
			$aja_kysely = "tmpquery";
		}
		
		if ($tallenna_muutokset != "") {
			if ($aja_kysely != "") {
				$uusi_kysely = $aja_kysely;
			} else {
				echo "<font class='error'>" . t ( "Valitse kysely jonka muutokset tallennetaan" ) . "</font>";
				return false;
			}
		}
		
		if ($poista_kysely != "" and $aja_kysely == "") {
			echo "<font class='error'>" . t ( "Valitse kysely jonka haluat poistaa" ) . "</font>";
			return false;
		}
		
		//	Tallennetaan uusi kysely
		if ($uusi_kysely != "") {
			if (is_array ( $_POST ) and count ( $_POST ) > 0) {
				
				if ($exclude != "") {
					$exclude = implode ( ",", $exclude );
				} else {
					$exclude = array ();
				}
				
				//	Poistetaan vanha kysely sek‰ tmpquery
				$query = "	DELETE
							FROM muisti
							WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and (nimi = '$uusi_kysely' or nimi = 'tmpquery')";
				$result = mysql_query ( $query ) or pupe_error ( $query );
				
				//	T‰ll‰iset arvot skipataan aina
				$exclude [] = "uusi_kysely";
				$exclude [] = "aja_kysely";
				$exclude [] = "hakukysely";
				$exclude [] = "tallenna_muutokset";
				
				$exclude [] = "ppa";
				$exclude [] = "kka";
				$exclude [] = "vva";
				$exclude [] = "ppl";
				$exclude [] = "kkl";
				$exclude [] = "vvl";
				
				$exclude [] = "tee";
				$exclude [] = "toim";
				
				foreach ( $_POST as $key => $value ) {
					
					if (! in_array ( $key, $exclude )) {
						
						//	Koitetaan arpoa pari speciaalia datatyyppi‰
						$array = "";
						if (is_array ( $value )) {
							$value = serialize ( $value );
							$array = "X";
						}
						
						$query = "	INSERT INTO muisti SET
										yhtio		= '$kukarow[yhtio]',
										kuka		= '$kukarow[kuka]',
										haku		= '$hakukysely',
										nimi		= '$uusi_kysely',
										var			= '$key',
										value		= '$value',
										array 		= '$array',
										luontiaika	= now(),
										laatija		= '$kukarow[kuka]',
										muokattu	= now(),
										muokannut	= '$kukarow[kuka]'";
						$result = mysql_query ( $query ) or pupe_error ( $query );
						
						//	Tallennetaan viimeisin haku
						if ($aja_kysely != "tmpquery") {
							$query = "	INSERT INTO muisti SET
											yhtio		= '$kukarow[yhtio]',
											kuka		= '$kukarow[kuka]',
											haku		= '$hakukysely',
											nimi		= 'tmpquery',
											var			= '$key',
											value		= '$value',
											array 		= '$array',
											luontiaika	= now(),
											laatija		= '$kukarow[kuka]',
											muokattu	= now(),
											muokannut	= '$kukarow[kuka]'";
							$result = mysql_query ( $query ) or pupe_error ( $query );
						}
					}
				}
			}
			
			$aja_kysely = $uusi_kysely;
			
			if ($aja_kysely != "tmpquery") {
				echo "<font class='message'>" . t ( "Tallennettiin kysely" ) . " $aja_kysely</font>";
			}
			return true;
		} //	Poistetaan kysely
		elseif ($poista_kysely != "" and $aja_kysely != "") {
			$query = "	DELETE
						FROM muisti
						WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and nimi = '$aja_kysely'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			echo "<font class='message'>" . t ( "Poistettiin kysely" ) . " $aja_kysely</font>";
			
			return false;
		} //	Ajetaan kysely muistista
		elseif ($aja_kysely != "") {
			//	Onko t‰m‰ arvo jo tallennettu?
			$query = "	SELECT *
						FROM muisti
						WHERE yhtio='$kukarow[yhtio]' and haku = '$hakukysely' and kuka = '$kukarow[kuka]' and nimi = '$aja_kysely'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			if (mysql_num_rows ( $result ) > 0) {
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					global ${$row ["var"]};
					if ($row ["array"] != "") {
						$row ["value"] = unserialize ( $row ["value"] );
					}
					
					${$row ["var"]} = $row ["value"];
				}
			}
			
			if ($aja_kysely != "tmpquery") {
				echo "<font class='message'>" . t ( "Suoritetaan kysely" ) . " $aja_kysely</font>";
			}
			return true;
		}
		
		return false;
	}
}

if (! function_exists ( "nayta_kyselyt" )) {
	function nayta_kyselyt($haku) {
		global $kukarow, $aja_kysely;
		
		if (! table_exists ( "muisti" ) or $haku == "") {
			return false;
		}
		
		$ulos = "<table>";
		$ulos .= "<tr>
				<th>" . t ( "Tallenna kysely nimell‰" ) . "</th>
				<td><input type='text' name='uusi_kysely' value='' size='30'><input type='hidden' name='hakukysely' value='$haku'></td>
			</tr>
			<tr>
				<th>" . t ( "Aja tallennettu kysely" ) . "</th>
				<td>
					<select name='aja_kysely'>
					<option value=''>" . t ( "Valitse kysely" ) . "</option>";
		
		$lisa = "";
		$query = "	SELECT distinct nimi
					FROM muisti
					WHERE yhtio='$kukarow[yhtio]' and haku = '$haku' and kuka = '$kukarow[kuka]' and nimi != 'tmpquery'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		if (mysql_num_rows ( $result ) > 0) {
			while ( $row = mysql_fetch_assoc ( $result ) ) {
				$ulos .= "<option value='$row[nimi]'>$row[nimi]</option>\n";
			}
		}
		
		$ulos .= "	</select>
				</td>
			</tr>\n";
		
		$ulos .= "<tr>
				<th>" . t ( "Tallenna kyselyn muutokset" ) . "</th>
			 	<td><input type='checkbox' name='tallenna_muutokset' value='X'></td>
			</tr>";
		
		$ulos .= "<tr>
				<th>" . t ( "Poista kysely" ) . "</th>
			 	<td><input type='checkbox' name='poista_kysely' value='X'></td>
			</tr>";
		
		$ulos .= "</table>";
		
		return $ulos;
	}
}

if (! function_exists ( 'muuta_kuvan_koko' )) {
	function muuta_kuvan_koko($ykoko, $xkoko, $type, $taulu, $upfile1) {
		global $kukarow, $yhtiorow, $_FILES;
		
		if ($yhtiorow ['kuvapankki_polku'] != "")
			$dirri = $yhtiorow ['kuvapankki_polku'] . "/" . $kukarow ['yhtio'] . "/" . $taulu . "/" . $type . "/";
		else
			$dirri = "/tmp/";
		
		list ( $usec, $sec ) = explode ( " ", microtime () );
		
		$nimi = $usec + $sec; // uniikki nimi
		$resize = ""; // resize komento
		$crop = ""; // crop komento
		$upfileall = ""; // palautus
		

		$filetsu = $_FILES [$upfile1];
		
		$path_parts = pathinfo ( $filetsu ["name"] );
		$ext = strtolower ( $path_parts ['extension'] );
		
		$image = getimagesize ( $filetsu ["tmp_name"], $imageinfo ); // l‰hetetty kuva
		$leve = $image [0];
		$kork = $image [1];
		
		// eih‰n molemmat (y ja x) ole nollia?!
		if ($ykoko > 0 or $xkoko > 0) {
			/* skaaltaanko x:n vai y:n mukaan, jos xkoko tai ykoko == 0, skaalataan != 0 mukaan */
			if ($ykoko > 0 and $kork > $ykoko) {
				$upfilesgh = strtolower ( "/tmp/$nimi" . "1." . $ext );
				
				// skaalataan kuva oikenakokoiseksi y:n mukaan
				exec ( "nice -n 20 convert -resize x$ykoko -quality 80 $filetsu[tmp_name] $upfilesgh", $output );
			} elseif ($xkoko > 0 and $leve > $xkoko) {
				$upfilesgh = strtolower ( "/tmp/$nimi" . "1." . $ext );
				
				// skaalataan kuva oikenakokoiseksi x:n mukaan
				exec ( "nice -n 20 convert -resize $xkoko -quality 80 $filetsu[tmp_name] $upfilesgh", $output );
			} else {
				return $upfile1;
			}
			
			$uusnimi = $dirri . $filetsu ["name"];
			
			if (! copy ( $upfilesgh, $uusnimi )) {
				echo "Kopiointi ep‰onnistui $upfilesgh -> $uusnimi<br>";
				
				$upfileall = "";
			} else {
				$upfileall = $uusnimi;
			}
			
			$a = getimagesize ( $uusnimi );
			
			$file ["name"] = basename ( $uusnimi );
			$file ["type"] = $a ["mime"];
			$file ["tmp_name"] = $uusnimi;
			$file ["error"] = 0;
			$file ["size"] = filesize ( $uusnimi );
			
			$_FILES [$upfile1] = $file;
			
			// poistetaan file
			system ( "rm -f $upfilesgh" );
		} else {
			$upfileall = "";
		}
		
		return $upfileall;
	}
}

if (! function_exists ( 'tallenna_liite' )) {
	function tallenna_liite($userfile, $liitos, $liitostunnus, $selite, $kayttotarkoitus = "", $tunnus = 0, $jarjestys = 0, $kieli = "") {
		global $kukarow, $yhtiorow, $_FILES;
		
		$file = array ();
		
		if ($kieli == "") {
			$kieli = $yhtiorow ["kieli"];
		}
		
		if (is_array ( $_FILES [$userfile] )) {
			$file = $_FILES [$userfile];
		} elseif (file_exists ( $userfile )) {
			$a = getimagesize ( $userfile );
			
			$file ["name"] = basename ( $userfile );
			$file ["type"] = $a ["mime"];
			$file ["tmp_name"] = $userfile;
			$file ["error"] = 0;
			$file ["size"] = filesize ( $userfile );
			
			$_FILES [$userfile] = $file;
		}
		
		$tark = tarkasta_liite ( $userfile );
		
		if ($tark !== true or $file ["error"] == 4) {
			return false;
		}
		
		$data = mysql_real_escape_string ( file_get_contents ( $file ["tmp_name"] ) );
		$filename = mysql_real_escape_string ( $file ["name"] );
		$filetype = mysql_real_escape_string ( $file ["type"] );
		$filesize = mysql_real_escape_string ( $file ["size"] );
		$selite = mysql_real_escape_string ( $selite );
		
		//	Tarkastetaan, ett‰ kuvatunnus on oikea..
		if ($tunnus > 0) {
			$query = "	SELECT tunnus FROM liitetiedostot WHERE yhtio = '$kukarow[yhtio]' and tunnus = '$tunnus'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $result ) == 0) {
				$tunnus = 0;
			}
		}
		
		//	Onko meill‰ jokin kuvatyyppi?
		list ( $type, $crap ) = explode ( "/", $filetype );
		
		if ($type == "image") {
			$size = getimagesize ( $file ["tmp_name"], $imageinfo );
			$image_width = $size [0];
			$image_height = $size [1];
			$image_bits = $size ["bits"];
			$image_channels = $size ["channels"];
			
			unset ( $size );
		} else {
			$image_width = "";
			$image_height = "";
			$image_bits = "";
			$image_channels = "";
		}
		
		// Jos ei olla saatu filetyyppi‰ niin arvotaan se vaikka filen nimest‰
		if ($filetype == "") {
			if ($filename != "") {
				$path_parts = pathinfo ( $filename );
				$extensio = strtolower ( $path_parts ['extension'] );
				
				if ($extensio == "jpg" or $extensio == "jpeg") {
					$filetype = "image/jpeg";
				} elseif ($extensio == "pdf") {
					$filetype = "application/pdf";
				} elseif (substr ( $extensio, 0, 3 ) == "xls") {
					$filetype = "application/vnd.ms-excel";
				} elseif (substr ( $extensio, 0, 3 ) == "doc") {
					$filetype = "application/msword";
				} else {
					$filetype = "application/octet-stream";
				}
			} else {
				$filetype = "application/octet-stream";
			}
		}
		
		// lis‰t‰‰n kuva
		if ($tunnus > 0) {
			$query = "	UPDATE liitetiedostot SET
						data     		= '$data',
						selite   		= trim('$selite'),
						filename 		= '$filename',
						filesize 		= '$filesize',
						filetype 		= '$filetype',
						image_width		= '$image_width',
						image_height	= '$image_height',
						image_bits		= '$image_bits',
						image_channels	= '$image_channels',
						kayttotarkoitus	= '$teetyyppi',
						jarjestys		= '$jarjestys',
						laatija			= '$kukarow[kuka]',
						luontiaika		= now()
						WHERE yhtio = '$kukarow[yhtio]' and tunnus = '$tunnus'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			$id = $tunnus;
		} else {
			if (( int ) $jarjestys == 0) {
				$query = "	SELECT max(jarjestys) jarjestys
							FROM liitetiedostot
							WHERE yhtio 		= '$kukarow[yhtio]'
							and liitos   		= '$liitos'
							and liitostunnus 	= '$liitostunnus'";
				$result = mysql_query ( $query ) or pupe_error ( $query );
				$row = mysql_fetch_assoc ( $result );
				
				$jarjestys = $row ["jarjestys"] + 1;
			}
			
			$query = "	INSERT INTO liitetiedostot SET
					  	yhtio    		= '$kukarow[yhtio]',
					  	liitos   		= '$liitos',
					  	liitostunnus 	= '$liitostunnus',
					  	data     		= '$data',
					  	selite   		= trim('$selite'),
						kieli			= '$kieli',
					  	filename 		= '$filename',
					  	filesize 		= '$filesize',
					  	filetype 		= '$filetype',
					  	image_width		= '$image_width',
					  	image_height	= '$image_height',
					  	image_bits		= '$image_bits',
					  	image_channels	= '$image_channels',
					  	kayttotarkoitus	= '$kayttotarkoitus',
					  	jarjestys		= '$jarjestys',
					  	laatija			= '$kukarow[kuka]',
					  	luontiaika		= now()";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			$id = mysql_insert_id ();
		}
		
		return $id;
	}
}

if (! function_exists ( 'tarkasta_liite' )) {
	function tarkasta_liite($userfile, $sallitut_tiedostot = "") {
		global $kukarow, $yhtiorow, $_FILES, $kieli;
		
		if (! is_array ( $_FILES [$userfile] )) {
			return false;
		}
		
		$file = $_FILES [$userfile];
		
		// otetaan file extensio
		$path_parts = pathinfo ( $file ['name'] );
		$ext = strtoupper ( $path_parts ['extension'] );
		if ($ext == "JPEG")
			$ext = "jpg";
		
		//	Sallitut tiedostot on aina upper
		if (is_array ( $sallitut_tiedostot )) {
			foreach ( $sallitut_tiedostot as &$s ) {
				$s = strtoupper ( $s );
			}
		}
		
		//	Ei saatu erroreita. jatketaan..
		if ($file ["size"] == 0) {
			return "<font class='error'>" . t ( "VIRHE! Tiedosto on tyhj‰" ) . "</font><br><br>";
		} elseif ($file ["error"] == 0) {
			
			//	Paketti riitt‰v‰n pieni mysql:lle
			$query = "SHOW variables like 'max_allowed_packet'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			$varirow = mysql_fetch_row ( $result );
			
			if ($file ["size"] < $varirow [1]) {
				//	T‰m‰ on ainoa haara jossa voimme jatkaa!
				if (! is_array ( $sallitut_tiedostot ) and $sallitut_tiedostot == "") {
					return true;
				} elseif (in_array ( strtoupper ( $ext ), $sallitut_tiedostot )) {
					return true;
				} else {
					if (count ( $sallitut_tiedostot ) > 1) {
						//	Kaunistellaan..
						return "<font class='error'>" . t ( "VIRHE! Tiedostomuoto '$ext' ei kelpaa, sallitut tiedostomuodot on %s ja %s", $kieli, implode ( ", ", array_slice ( $sallitut_tiedostot, 0, - 1 ) ), end ( $sallitut_tiedostot ) ) . ".</font><br><br>";
					
					} else {
						return "<font class='error'>" . t ( "VIRHE! Tiedostomuoto '$ext' ei kelpaa, sallittu tiedostomuoto on %s", $kieli, $sallitut_tiedostot [0] ) . ".</font><br><br>";
					}
				}
			} else {
				return "<font class='error'>" . t ( "VIRHE! Ladattu tiedosto oli liian suuri! Suurin sallittu tiedostokoko on %s", $kieli, size_readable ( $file ["size"] ) ) . "!</font><br><br>";
			}
		} elseif ($file ["error"] == 1 or $file ["error"] == 2) {
			return "<font class='error'>" . t ( "VIRHE! Tiedosto on liian suuri!" ) . "!</font><br><br>";
		} elseif ($file ["error"] == 3) {
			return "<font class='error'>" . t ( "VIRHE! Tiedoston lataus ep‰onnistui!" ) . "!</font><br><br>";
		} elseif ($file ["error"] == 4) {
			return true;
		} elseif ($file ["error"] == 7) {
			return "<font class='error'>" . t ( "VIRHE! Palvelinasetuksissa on virhe!" ) . "!</font><br><br>";
		} else {
			return "<font class='error'>" . t ( "VIRHE! Tapahtui virhe tallennettaessa tiedostoa!" ) . "!</font><br><br>";
		}
	}
}

if (! function_exists ( 'hae_liite' )) {
	function hae_liite($tunnus, $liitos, $palautus = "") {
		global $kukarow, $yhtiorow;
		
		$query = "select * from liitetiedostot where tunnus='$tunnus' and liitos = '$liitos'";
		$liiteres = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $liiteres ) > 0) {
			$liiterow = mysql_fetch_assoc ( $liiteres );
			
			if ($palautus != "") {
				return $liiterow;
			}
			return $liiterow ["data"];
		}
		
		return false;
	}
}

if (! function_exists ( "tarvitaanko_intrastat" )) {
	function tarvitaanko_intrastat($maa_lahetys, $maa_maara) {
		
		// otetaan sis‰‰n l‰hetysmaan ja m‰‰r‰maan maakoodi
		

		// palautetaan:
		// tyhj‰‰ = ei tarvita intrastatata
		// -1 = kuuluu vienti-ilmoitukseen
		// -2 = kuuluu tuonti-ilmoitukseen
		

		global $yhtiorow;
		
		$maa_lahetys = strtoupper ( trim ( $maa_lahetys ) );
		$maa_maara = strtoupper ( trim ( $maa_maara ) );
		$yhtiorow_maa = strtoupper ( $yhtiorow ["maa"] );
		$ultilno = "";
		
		// kokeillaan arpoa intrastat k‰sittely‰, molemmat maat pit‰‰ olla EU maita
		if ($maa_lahetys != "" and $maa_maara != "") {
			$query = "SELECT DISTINCT koodi FROM maat WHERE koodi in ('$maa_lahetys','$maa_maara') AND eu = 'ON'";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			if (mysql_num_rows ( $result ) == 2) {
				if ($maa_lahetys == $yhtiorow_maa and $maa_maara != $yhtiorow_maa) {
					$ultilno = "-1"; // miinus yks tarkoittaa, ett‰ lis‰tiedot pit‰‰ sy‰tt‰‰ ja VIENTI-intrastat pit‰‰ l‰hett‰‰
				} elseif ($maa_maara == $yhtiorow_maa and $maa_lahetys != $yhtiorow_maa) {
					$ultilno = "-2"; // miinus kaks tarkoittaa, ett‰ lis‰tiedot pit‰‰ sy‰tt‰‰ ja TUONTI-intrastat pit‰‰ l‰hett‰‰
				}
			}
		}
		
		return $ultilno;
	}
}

if (! function_exists ( "livesearch_tilihaku" )) {
	function livesearch_tilihaku() {
		global $yhtiorow, $kukarow, $palvelin2;
		
		$tee = $_REQUEST ["livesearch_tee"];
		$nimi = $_REQUEST ["livesearch_nimi"];
		$formi = $_REQUEST ["livesearch_form"];
		$hakuid = $_REQUEST ["livesearch_hakuid"];
		$submit = $_REQUEST ["livesearch_submit"];
		$haku = trim ( $_REQUEST ["livesearch_haku"] );
		
		if (strlen ( $haku ) > 2) {
			
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
			</script>";
			
			$haku_array = explode ( " ", $haku );
			$haku_query = "";
			
			foreach ( $haku_array as $haku ) {
				$haku = mysql_real_escape_string ( $haku );
				$haku_query .= " and (tili.tilino like ('%$haku%') or tili.nimi like ('%$haku%')) ";
			}
			
			$query = "	SELECT tili.tilino, tili.nimi, tili.tunnus
						FROM tili
						WHERE tili.yhtio = '$kukarow[yhtio]'
						$haku_query";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			$limit = 0;
			if (mysql_num_rows ( $result ) > 0) {
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					echo "	<div id='tuote_valinta_$hakuid$row[tunnus]'
								name='selectOptions$hakuid'
								onmouseover=\"this.className='liveSearchSelectedItem';
									keyStrokeIndex = -1;
									var aEls = document.getElementsByName('selectOptions$hakuid');
									for (var iEl = 0; iEl < aEls.length; iEl++) {
										if (aEls[iEl].id.substring(0,14) == 'tuote_valinta_$hakuid' && aEls[iEl].id != 'tuote_valinta_$hakuid$row[tunnus]') {
											document.getElementById(aEls[iEl].id).className='';
										}
									} \"
								onmouseout=\"this.className='';\"
								onclick=\"document.getElementById('$hakuid').value='$row[tilino]';";
					if ($submit == "") {
						echo "document.$formi.submit();";
					} else {
						echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
					}
					echo "\"
								style='padding:2px;'>
								<font style='font-weight:bold'>$row[tilino]</font> &raquo; $row[nimi]
							</div><div name='selectValues$hakuid' id='$row[tilino]'></div>";
					$limit ++;
					if ($limit > 14) {
						break;
					}
				}
				
				echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>Haulla l‰ytyi " . mysql_num_rows ( $result ) . " tili‰.</font></div>";
			} else {
				echo "<div style='padding:2px'><font class='message'>" . t ( "Ei tilej‰." ) . "</font></div>";
			}
		} else {
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
				document.getElementById('livesearch_$hakuid').style.innerHTML = '';
			</script>";
		}
	}
}

if (! function_exists ( "livesearch_tuotehaku" )) {
	function livesearch_tuotehaku() {
		global $yhtiorow, $kukarow, $palvelin2, $verkkokauppa;
		
		$tee = $_REQUEST ["livesearch_tee"];
		$nimi = $_REQUEST ["livesearch_nimi"];
		$formi = $_REQUEST ["livesearch_form"];
		$hakuid = $_REQUEST ["livesearch_hakuid"];
		$submit = $_REQUEST ["livesearch_submit"];
		$haku = trim ( $_REQUEST ["livesearch_haku"] );
		
		if (mb_detect_encoding ( $haku, mb_detect_order (), TRUE ) == "UTF-8") {
			$haku = iconv ( "UTF-8", "latin1//TRANSLIT", $haku );
		}
		
		if (strlen ( $haku ) > 2 and $haku {0} != "*" and substr ( $haku, - 1 ) != '*' and $haku {0} != "?" and $haku {0} != "#") {
			
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
			</script>";
			
			$haku_array = explode ( " ", $haku );
			$haku_query = "";
			//heikki20101202
			foreach ( $haku_array as $haku ) {
				$haku = mysql_real_escape_string ( $haku );
				$haku_query .= " and ((tuote.tuoteno like ('%$haku%') and tuotteen_avainsanat.kieli = 'fi') or (tuote.nimitys like ('%$haku%')and tuotteen_avainsanat.kieli = 'fi') or tuotteen_avainsanat.selite like ('%$haku%')) ";
			}
			
			// vientikieltok‰sittely:
			// +maa tarkoittaa ett‰ myynti on kielletty t‰h‰n maahan ja sallittu kaikkiin muihin
			// -maa tarkoittaa ett‰ ainoastaan t‰h‰n maahan saa myyd‰
			// eli n‰ytet‰‰n vaan tuotteet jossa vienti kent‰ss‰ on tyhj‰‰ tai -maa.. ja se ei saa olla +maa
			$kieltolisa = "";
			unset ( $vierow );
			
			if ($kukarow ["kesken"] > 0) {
				$query = "	SELECT if (toim_maa != '', toim_maa, maa) maa
							FROM lasku
							WHERE yhtio	= '$kukarow[yhtio]'
							and tunnus  = '$kukarow[kesken]'";
				$vieres = mysql_query ( $query ) or pupe_error ( $query );
				$vierow = mysql_fetch_array ( $vieres );
			} elseif ($verkkokauppa != "") {
				$vierow = array ();
				
				if ($maa != "") {
					$vierow ["maa"] = $maa;
				} else {
					$vierow ["maa"] = $yhtiorow ["maa"];
				}
			}
			
			if (isset ( $vierow ) and $vierow ["maa"] != "") {
				$kieltolisa .= " and (tuote.vienti = '' or tuote.vienti like '%-$vierow[maa]%' or tuote.vienti like '%+%') and tuote.vienti not like '%+$vierow[maa]%' ";
			}
			
			if ($kukarow ["extranet"] != "" or $verkkokauppa != "") {
				if ($verkkokauppa != "") {
					if ($kukarow ["kuka"] == "www") {
						$kieltolisa .= " and tuote.hinnastoon = 'W' ";
					} else {
						$kieltolisa .= " and tuote.hinnastoon in ('W','V') ";
					}
				} else {
					$kieltolisa .= " and tuote.hinnastoon != 'E' ";
				}
			}
			
			$query = "	SELECT tuote.tunnus, tuote.tuoteno, tuote.nimitys, tuote.kuvaus, tuote.osasto, tuote.try, tuotteen_avainsanat.selite
						FROM tuote LEFT JOIN tuotteen_avainsanat
						ON tuote.tuoteno=tuotteen_avainsanat.tuoteno
						WHERE tuote.yhtio = '$kukarow[yhtio]'
						and tuote.status != 'P'
						$kieltolisa
						$haku_query";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			$limit = 0;
			if (mysql_num_rows ( $result ) > 0) {
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					echo "	<div id='tuote_valinta_$row[tunnus]'
								name='selectOptions$hakuid'
								onmouseover=\"this.className='liveSearchSelectedItem';
									keyStrokeIndex = -1;
									var aEls = document.getElementsByName('selectOptions$hakuid');
									for (var iEl = 0; iEl < aEls.length; iEl++) {
										if (aEls[iEl].id.substring(0,14) == 'tuote_valinta_' && aEls[iEl].id != 'tuote_valinta_$row[tunnus]') {
											document.getElementById(aEls[iEl].id).className='';
										}
									} \"
								onmouseout=\"this.className='';\"
								onclick=\"document.getElementById('$hakuid').value='$row[tuoteno]';";
					if ($submit == "") {
						echo "document.$formi.submit();";
					} else {
						echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
					}
					
					/*heikki 20101202 alkuper‰nen						echo "\"
								style='padding:2px;'>
								<font style='font-weight:bold'>$row[tuoteno]</font> &raquo; $row[nimitys]
							</div><div name='selectValues$hakuid' id='$row[tuoteno]'></div>";
*/					echo "\"
								style='padding:2px;'>
								<font style='font-weight:bold'>$row[tuoteno]</font> &raquo; $row[nimitys] &raquo; $row[selite]
							</div><div name='selectValues$hakuid' id='$row[tuoteno]'></div>";
					$limit ++;
					if ($limit > 14) {
						break;
					}
				}
				
				echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>Haulla l‰ytyi " . mysql_num_rows ( $result ) . " tuotetta, n‰ytet‰‰n 15 tarkinta osumaa.</font></div>";
			} else {
				echo "<div style='padding:2px'><font class='message'>" . t ( "Ei tuotteita." ) . "</font></div>";
			}
		} else {
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
			</script>";
		}
	}
}

if (! function_exists ( "livesearch_kayttajahaku" )) {
	function livesearch_kayttajahaku($toim = '') {
		global $yhtiorow, $kukarow, $palvelin2;
		
		$tee = $_REQUEST ["livesearch_tee"];
		$nimi = $_REQUEST ["livesearch_nimi"];
		$formi = $_REQUEST ["livesearch_form"];
		$hakuid = $_REQUEST ["livesearch_hakuid"];
		$submit = $_REQUEST ["livesearch_submit"];
		$haku = trim ( $_REQUEST ["livesearch_haku"] );
		
		if (strlen ( $haku ) > 2 and $haku {0} != "*" and substr ( $haku, - 1 ) != '*' and $haku {0} != "?" and $haku {0} != "#") {
			
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
			</script>";
			
			$haku_array = explode ( " ", $haku );
			$haku_query = "";
			$haku_join = '';
			
			if ($toim == 'extranet') {
				$haku_query .= " and kuka.extranet != '' ";
			} else {
				$haku_query .= " and kuka.extranet = '' ";
			}
			
			foreach ( $haku_array as $haku ) {
				$haku = mysql_real_escape_string ( $haku );
				if ($toim == 'extranet') {
					$haku_query .= " and (asiakas.asiakasnro like ('%$haku%') or asiakas.ytunnus like ('%$haku%') or kuka.nimi like ('%$haku%') or kuka.kuka like ('%$haku%')) ";
				} else {
					$haku_query .= " and (kuka.nimi like ('%$haku%') or kuka.kuka like ('%$haku%')) ";
				}
			}
			
			if ($toim == 'extranet') {
				$haku_join = " LEFT JOIN asiakas ON (asiakas.yhtio = kuka.yhtio AND asiakas.tunnus = kuka.oletus_asiakas) ";
			}
			
			$query = "	SELECT kuka.tunnus, kuka.nimi, kuka.kuka
						FROM kuka
						$haku_join
						WHERE kuka.yhtio = '$kukarow[yhtio]'
						$haku_query";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			$limit = 0;
			if (mysql_num_rows ( $result ) > 0) {
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					echo "	<div id='kayttaja_valinta_$row[tunnus]'
								name='selectOptions$hakuid'
								onmouseover=\"this.className='liveSearchSelectedItem';
									keyStrokeIndex = -1;
									var aEls = document.getElementsByName('selectOptions$hakuid');
									for (var iEl = 0; iEl < aEls.length; iEl++) {
										if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
											document.getElementById(aEls[iEl].id).className='';
										}
									} \"
								onmouseout=\"this.className='';\"
								onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
					if ($submit == "") {
						echo "document.$formi.submit();";
					} else {
						echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
					}
					echo "\"
								style='padding:2px;'>
								<font style='font-weight:bold'>$row[nimi]</font> &raquo; ($row[kuka])
							</div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
					$limit ++;
					if ($limit > 14) {
						break;
					}
				}
				
				echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t ( "Haulla l‰ytyi" ), " " . mysql_num_rows ( $result ) . " ", t ( "k‰ytt‰j‰‰" ), ".</font></div>";
			} else {
				echo "<div style='padding:2px'><font class='message'>" . t ( "Ei k‰ytt‰ji‰." ) . "</font></div>";
			}
		} else {
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
			</script>";
		}
	}
}

if (! function_exists ( "livesearch_asiakashaku" )) {
	function livesearch_asiakashaku() {
		global $yhtiorow, $kukarow, $palvelin2;
		
		$tee = $_REQUEST ["livesearch_tee"];
		$nimi = $_REQUEST ["livesearch_nimi"];
		$formi = $_REQUEST ["livesearch_form"];
		$hakuid = $_REQUEST ["livesearch_hakuid"];
		$submit = $_REQUEST ["livesearch_submit"];
		$haku = trim ( $_REQUEST ["livesearch_haku"] );
		
		if (strlen ( $haku ) > 2 and $haku {0} != "*" and substr ( $haku, - 1 ) != '*' and $haku {0} != "?" and $haku {0} != "#") {
			
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'visible';
			</script>";
			
			$haku_array = explode ( " ", $haku );
			$haku_query = "";
			$haku_join = '';
			
			foreach ( $haku_array as $haku ) {
				$haku = mysql_real_escape_string ( $haku );
				$haku_query .= " and (asiakas.ytunnus like ('%$haku%') or asiakas.asiakasnro like ('%$haku%') ";
				$haku_query .= " or asiakas.ovttunnus like ('%$haku%%') or asiakas.nimi like ('%$haku%') or asiakas.nimitark like ('%$haku%') or asiakas.postitp like ('%$haku%') ";
				$haku_query .= " or asiakas.toim_ovttunnus like ('%$haku%%') or asiakas.toim_nimi like ('%$haku%') or asiakas.toim_nimitark like ('%$haku%') or asiakas.toim_postitp like ('%$haku%') ";
				$haku_query .= " or asiakas.kolm_ovttunnus like ('%$haku%%') or asiakas.kolm_nimi like ('%$haku%') or asiakas.kolm_nimitark like ('%$haku%') or asiakas.kolm_postitp like ('%$haku%') ";
				$haku_query .= " or asiakas.laskutus_nimi like ('%$haku%') or asiakas.laskutus_nimitark like ('%$haku%') or asiakas.laskutus_postitp like ('%$haku%')) ";
			}
			
			$query = "	SELECT *, if (toim_nimi != nimi and toim_nimi != '', concat(nimi, ' ', nimitark, ' / ', toim_nimi, ' ', toim_nimitark), concat(nimi, ' ', nimitark)) asiakkaan_tieto
						FROM asiakas
						WHERE asiakas.yhtio = '$kukarow[yhtio]'
						$haku_query";
			$result = mysql_query ( $query ) or pupe_error ( $query );
			
			$limit = 0;
			if (mysql_num_rows ( $result ) > 0) {
				while ( $row = mysql_fetch_assoc ( $result ) ) {
					echo "	<div id='kayttaja_valinta_$row[tunnus]'
								name='selectOptions$hakuid'
								onmouseover=\"this.className='liveSearchSelectedItem';
									keyStrokeIndex = -1;
									var aEls = document.getElementsByName('selectOptions$hakuid');
									for (var iEl = 0; iEl < aEls.length; iEl++) {
										if (aEls[iEl].id.substring(0,14) == 'kayttaja_valinta_' && aEls[iEl].id != 'kayttaja_valinta_$row[tunnus]') {
											document.getElementById(aEls[iEl].id).className='';
										}
									} \"
								onmouseout=\"this.className='';\"
								onclick=\"document.getElementById('$hakuid').value='$row[tunnus]';";
					if ($submit == "") {
						echo "document.$formi.submit();";
					} else {
						echo "document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';";
					}
					echo "\"
								style='padding:2px;'>
								<font style='font-weight:bold'>$row[ytunnus] &raquo; $row[asiakkaan_tieto]</font>
							</div><div name='selectValues$hakuid' id='$row[tunnus]'></div>";
					$limit ++;
					if ($limit > 14) {
						break;
					}
				}
				
				echo "<div style='padding-left:2px;padding-bottom:5px;padding-top:5px;'><font class='info'>", t ( "Haulla l‰ytyi" ), " " . mysql_num_rows ( $result ) . " ", t ( "asiakasta" ), ".</font></div>";
			} else {
				echo "<div style='padding:2px'><font class='message'>" . t ( "Ei asiakkaita." ) . "</font></div>";
			}
		} else {
			echo "
			<script TYPE='text/javascript' LANGUAGE='JavaScript'>
				document.getElementById('livesearch_$hakuid').style.visibility = 'hidden';
			</script>";
		}
	}
}

if (! function_exists ( "livesearch_kentta" )) {
	function livesearch_kentta($formi, $tee = 'TUOTEHAKU', $nimi = 'liveseach_hakukentta', $width = '300', $value = '', $submit = '') {
		global $kukarow, $toim;
		
		if (stripos ( $_SERVER ['HTTP_USER_AGENT'], "MSIE" ) !== FALSE or stripos ( $_SERVER ['HTTP_USER_AGENT'], "EXPLORER" ) !== FALSE) {
			return "<input type='text' id='$hakuID' name='$nimi' autocomplete='off' style='width:" . $width . "px;' value='$value'>";
		}
		
		$hakuID = "haku" . uniqid ();
		
		return "<input type='text' id='$hakuID' name='$nimi' autocomplete='off' style='width:" . $width . "px;' value='$value'
					onkeydown=\"return livesearch_keyhandler(event, '$hakuID', '$formi', '$submit');\"
					onkeyup=\"if ((event.keyCode < 37 || event.keyCode > 40) && event.keyCode != 13) {
							sndReq('livesearch_$hakuID', '$_SERVER[SCRIPT_NAME]?livesearch_tee=$tee&livesearch_form=$formi&livesearch_hakuid=$hakuID&livesearch_nimi=$nimi&livesearch_submit=$submit&ohje=off&toim=$toim&livesearch_haku='+this.value);
							keyStrokeIndex = -1;
					}\"
					onblur=\"var selectOptions = document.getElementsByName('selectOptions$hakuID');
					for (var iEl = 0; iEl < selectOptions.length; iEl++) {
						if (document.getElementById(selectOptions[iEl].id).className != '') {
							return false;
						}
					}
					document.getElementById('livesearch_$hakuID').style.visibility = 'hidden';\">
				<div style='break:all'></div>
				<div id='livesearch_$hakuID' class='liveSearch' name='livesearch_$hakuID' style='width:" . ($width * 2) . "px;'></div>";
	}
}

if (! function_exists ( "sendSMS" )) {
	function sendSMS($smsnumero, $smsviesti, $animi = "") {
		global $sms_palvelin, $sms_user, $sms_pass;
		
		if ($sms_palvelin != "" and $sms_user != "" and $sms_pass != "" and $smsnumero != "" and $smsviesti != "") {
			$smsviesti = urlencode ( $smsviesti );
			
			$retval = file_get_contents ( "$sms_palvelin?user=$sms_user&pass=$sms_pass&numero=$smsnumero&viesti=$smsviesti" );
			$smsviesti = urldecode ( $smsviesti );
			
			if (trim ( $retval ) == "0") {
				if ($animi != "") {
					$animi = "($animi)";
				}
				echo "<font class='info'>SMS-viesti l‰hetetty numeroon $smsnumero $animi</font><br>";
			}
		}
	}
}

if (! function_exists ( "on_puhelinnumero" )) {
	function on_puhelinnumero($numero) {
		
		//	Stripataan v‰h‰n turhia merkkej‰
		$checkno = preg_replace ( "/[\r\n\s\t\(\)\{\}\-]/", "", $numero );
		
		//	Jos meille j‰i vain numeroita se on varmaan aika oikein
		if (preg_replace ( "/[+0-9]/", "", $checkno ) == "" and strlen ( $checkno ) > 0) {
			return $checkno;
		} else {
			return false;
		}
	}
}

if (! function_exists ( "hae_rahtisopimusnumero" )) {
	function hae_rahtisopimusnumero($toimitustapa, $ytunnus, $asiakastunnus = "") {
		global $kukarow;
		
		//etsit‰‰n l‰ytyyk‰ rahtisopimusta
		$query = "	(SELECT *, '1' prio
					FROM rahtisopimukset
					WHERE toimitustapa = '$toimitustapa'
					AND asiakas = '$asiakastunnus'
					AND asiakas != ''
					AND yhtio = '$kukarow[yhtio]')

					UNION

					(SELECT *, '2' prio
					FROM rahtisopimukset as rahtisopimukset2
					WHERE toimitustapa = '$toimitustapa'
					AND ytunnus = '$ytunnus'
					AND ytunnus != ''
					AND yhtio = '$kukarow[yhtio]')

					ORDER BY prio
					LIMIT 1";
		$rares = mysql_query ( $query ) or pupe_error ( $query );
		$rarow = mysql_fetch_assoc ( $rares );
		
		return $rarow;
	}
}

if (! function_exists ( "hae_rahtimaksu" )) {
	// otetaan sis‰‰n halutut otsikot mysql muodossa (1,2,3,4)
	function hae_rahtimaksu($otsikot) {
		
		global $kukarow, $yhtiorow;
		
		$otsikot = mysql_real_escape_string ( trim ( $otsikot ) );
		
		if ($otsikot == "") {
			return 0;
		}
		
		// haetaan ensimm‰isen otsikon tiedot
		$query = "	SELECT *
					FROM lasku
					WHERE yhtio = '$kukarow[yhtio]'
					AND tunnus IN ($otsikot)
					ORDER BY tunnus
					LIMIT 1";
		$otsre = mysql_query ( $query ) or pupe_error ( $query );
		$laskurow = mysql_fetch_assoc ( $otsre );
		
		$kyht = 0;
		
		// jos JT-tilaukset annetaan aina rahtivapaasti
		if ($laskurow ["clearing"] == "JT-TILAUS" and $yhtiorow ["jt_rahti"] == "B") {
			return 0;
		}
		
		// jos laskulla on rahtivapaa t‰pp‰ niin annetaan ilmaseks (paitsi jos kyseess‰ on JT ja niille halutaan v‰kisin rahti optiot C tai D)
		if ($laskurow ["rahtivapaa"] != "" and ($laskurow ["clearing"] != "JT-TILAUS" or $yhtiorow ["jt_rahti"] != "C") and ($laskurow ["clearing"] != "JT-TILAUS" or $yhtiorow ["jt_rahti"] != "D")) {
			return 0;
		}
		
		// jos meill‰ on automaattinen tuoteella tallennettuihin painoihin perustuva hinnoittelu
		// rahtimaksujen hinnoitteluun otetaan vain tuotteet joita ei myyd‰ erikoisvarastoista (et‰varastot joista ei myyd‰ automaattisesti eli tyyppi = E). T‰ll‰in on t‰p‰tty erikoistoimitus_myynti on 0 eli false.
		// erikoisvarastoista myydyt tuotteet ovat aina rahtivapaita ja l‰hett‰j‰ maksaa rahdin.
		if ($yhtiorow ["rahti_hinnoittelu"] == 'P') {
			// Jos hyvitysrivi ja tuotteen paino on nolla niin laitetaan tuotteen painoksi yksi gramma, muuten hyv‰rillekin saattaa tulla rahtia jos kaikkien tuotteiden painot on nolla.
			$query = "	SELECT sum(if ((varattu + kpl + jt) < 0 and tuotemassa = 0, 0.001, tuotemassa) * (varattu + kpl + jt)) massa
						FROM tilausrivi
						JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
						JOIN tuote ON (tuote.yhtio = tilausrivi.yhtio AND tuote.tuoteno = tilausrivi.tuoteno AND tuote.ei_saldoa = '')
						WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
						AND tilausrivi.tyyppi in ('L', 'E')
						AND tilausrivi.otunnus in ($otsikot)";
			$painoresult = mysql_query ( $query ) or pupe_error ( $query );
			$painorow = mysql_fetch_assoc ( $painoresult );
			$kyht = $painorow ['massa'];
		} // meill‰ on tilauksen hintaan perustuva hinnoittelu
		elseif ($yhtiorow ["rahti_hinnoittelu"] == "o") {
			// alvittomat hinnat
			if ($yhtiorow ["alv_kasittely"] == '') {
				$query = "	SELECT round(((tilausrivi.varattu + tilausrivi.kpl + tilausrivi.jt) * tilausrivi.hinta * (1 - (tilausrivi.ale / 100))) / (1 + tilausrivi.alv / 100), '$yhtiorow[hintapyoristys]') rivihinta, tilausrivi.netto
							FROM tilausrivi
							JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
							WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
							AND tilausrivi.tyyppi in ('L', 'E')
							AND tilausrivi.otunnus in ($otsikot)";
			} else {
				$query = "	SELECT round(((tilausrivi.varattu + tilausrivi.kpl + tilausrivi.jt) * tilausrivi.hinta * (1 - (tilausrivi.ale / 100))), '$yhtiorow[hintapyoristys]') rivihinta, tilausrivi.netto
							FROM tilausrivi
							JOIN tilausrivin_lisatiedot ON (tilausrivin_lisatiedot.yhtio = tilausrivi.yhtio AND tilausrivin_lisatiedot.tilausrivitunnus = tilausrivi.tunnus AND tilausrivin_lisatiedot.erikoistoimitus_myynti = 0)
							WHERE tilausrivi.yhtio = '$kukarow[yhtio]'
							AND tilausrivi.tyyppi in ('L', 'E')
							AND tilausrivi.otunnus in ($otsikot)";
			}
			$presult = mysql_query ( $query ) or pupe_error ( $query );
			
			$nyht = 0;
			$myht = 0;
			$kyht = 0;
			
			while ( $prow = mysql_fetch_assoc ( $presult ) ) {
				if ($prow ["netto"] != 'N') {
					$myht += $prow ["rivihinta"]; // lasketaan tilauksen loppusummaa MUUT RIVIT..
				} else {
					$nyht += $prow ["rivihinta"]; // lasketaan tilauksen loppusummaa NETTORIVIT..
				}
			}
			
			//erikoisalennus lasketaan vain riveille joilla EI ole NETTOHINTAA
			if ($laskurow ['erikoisale'] != 0) {
				$apu1 = round ( $laskurow ['erikoisale'] / 100, 2 ); // erikoisale prosentti
				$apu2 = round ( $myht * $apu1, 2 ); // erikoisalen m‰‰r‰
				$apu3 = round ( (1 - $apu1) * $myht, 2 ); // loppusumma
				

				//Kaikki yhteens‰
				$kyht = $apu3 + $nyht;
			} else {
				//Kaikki yhteens‰
				$kyht = $myht + $nyht;
			}
			
			// $kyht on KOTIVALUUTASSA, k‰‰nnet‰‰n laskun valuuttaan
			if ($laskurow ["valkoodi"] != '' and trim ( strtoupper ( $laskurow ["valkoodi"] ) ) != trim ( strtoupper ( $yhtiorow ["valkoodi"] ) )) {
				$kyht = round ( laskuval ( $kyht, $laskurow ["vienti_kurssi"] ), 2 );
			}
		} // meill‰ on rahtikirjan sy‰t‰ss‰ sy‰tettyihin painoihin perustuva hinnoittelu
else {
			//summataan kaikki rahtikirjojen painot yhteen
			$query = "	SELECT sum(kilot) kilot
						FROM rahtikirjat
						WHERE yhtio = '$kukarow[yhtio]'
						AND otsikkonro in ($otsikot)";
			$pakre = mysql_query ( $query ) or pupe_error ( $query );
			$pakka = mysql_fetch_assoc ( $pakre );
			$kyht = $pakka ["kilot"];
		}
		
		// haetaan ensimm‰inen (pienimm‰ll‰ postinumerolla) et‰isyys
		$query = "	SELECT
					etaisyydet.km, etaisyydet.postino
					FROM etaisyydet
					JOIN varastopaikat ON (varastopaikat.yhtio = etaisyydet.yhtio AND varastopaikat.tunnus = '$laskurow[varasto]' AND varastopaikat.postino = etaisyydet.varasto_postino)
					WHERE etaisyydet.yhtio='$kukarow[yhtio]'
					AND etaisyydet.postino <= '$laskurow[toim_postino]'
					ORDER BY postino DESC
					LIMIT 1";
		$varastoresult = mysql_query ( $query ) or pupe_error ( $query );
		
		// jos saadaan joku kilometrim‰‰r‰ niin laitetaan se muuttujaan talteen
		if (mysql_num_rows ( $varastoresult ) == 1) {
			$varastorow = mysql_fetch_assoc ( $varastoresult );
			$km = $varastorow ['km'];
		} else {
			$km = 0;
		}
		
		//haetaan t‰ll‰ rahtimaksu hinnan/painon ja/tai et‰isyyden mukaan
		$query = "	SELECT *
					FROM rahtimaksut
					WHERE toimitustapa = '$laskurow[toimitustapa]'
					AND toimitustapa != ''
					AND kilotalku <= '$kyht'
					AND kilotloppu >= '$kyht'
					AND yhtio = '$kukarow[yhtio]'
					AND ((kmalku <= '$km' and kmloppu >= '$km') or (kmalku = 0 and kmloppu = 0))
					ORDER BY kmloppu DESC, kmalku DESC
					LIMIT 1";
		$rares = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $rares ) == 1) {
			$hirow = mysql_fetch_assoc ( $rares );
			
			// katsotaan onko toimitustavan taakse sy‰tetty vaihtoehtoinen rahdin tuotenumero, jolle on annettu asiakasalennus
			$query = "	SELECT rahti_tuotenumero
						FROM toimitustapa
						WHERE yhtio = '$kukarow[yhtio]'
						AND selite = '$laskurow[toimitustapa]'
						AND rahti_tuotenumero != ''";
			$rahti_tuoteno_result = mysql_query ( $query ) or pupe_error ( $query );
			
			$ale = 0;
			
			if (mysql_num_rows ( $rahti_tuoteno_result ) > 0) {
				$rahti_tuoteno_row = mysql_fetch_assoc ( $rahti_tuoteno_result );
				
				$query = "	SELECT alennus
							FROM asiakasalennus
							WHERE yhtio = '$kukarow[yhtio]'
							AND asiakas = '$laskurow[liitostunnus]'
							AND tuoteno = '$rahti_tuoteno_row[rahti_tuotenumero]'";
				$rahti_alennus_result = mysql_query ( $query ) or pupe_error ( $query );
				
				if (mysql_num_rows ( $rahti_alennus_result ) > 0) {
					$rahti_alennus_row = mysql_fetch_assoc ( $rahti_alennus_result );
					$ale = $rahti_alennus_row ['alennus'];
				}
			}
			
			return array ('rahtihinta' => $hirow ["rahtihinta"], 'alennus' => $ale );
		} else {
			return 0;
		}
	}
}

if (! function_exists ( "pakkaamo" )) {
	function pakkaamo($tilausnumero, $update = '', $ei_pakkaamoa = '') {
		global $kukarow, $yhtiorow, $konsernivarasto_yhtiot;
		
		// Pupen varaston hierarkia:
		//
		// 1) varastopaikat aka "YRITYKSEN VARASTOT"
		// 2) varaston_tulostimet aka "VARASTON TULOSTUSALUEET" (varastopaikat.tunnus = varaston_tulostimet.varasto)
		// 3) pakkaamo aka "PAKKAAMOLOKEROT" (pakkaamo.nimi = varaston_tulostimet.pakkaamo)
		//
		// tiedot tallennetaan laskulle:
		// lasku.varasto = varasto.tunnus
		// lasku.tulostusalue = varaston_tulostimet.nimi
		// lasku.pakkaamo = pakkaamo.tunnus
		

		if ($yhtiorow ['pakkaamolokerot'] == '') {
			return 0;
		}
		
		// T‰ss‰ nollataan tilausten pakkaamolokerot
		if ($ei_pakkaamoa != '') {
			$query = "	UPDATE lasku SET pakkaamo = 0
						WHERE yhtio = '$kukarow[yhtio]'
						AND ((tila in ('N','L') and alatila = 'A') or (tila = 'L' and alatila = 'C') or (tila = 'G' and alatila in ('J','A','C')))
						AND tunnus in ($tilausnumero)";
			$ei_pakkaamoa_res = mysql_query ( $query ) or pupe_error ( $query );
			return 0;
		}
		
		if ($yhtiorow ['konsernivarasto'] != '' and $konsernivarasto_yhtiot != '') {
			$logistiikka_yhtio = $konsernivarasto_yhtiot;
			$logistiikka_yhtiolisa = "yhtio in ($logistiikka_yhtio)";
		} else {
			$logistiikka_yhtiolisa = "yhtio = '$kukarow[yhtio]'";
		}
		
		// T‰ss‰ haetaan ekan tilauksen tiedot
		$query = "	SELECT *
					FROM lasku
					WHERE $logistiikka_yhtiolisa
					AND ((tila in ('N', 'L') and alatila = 'A') or (tila = 'L' and alatila = 'C') or (tila = 'G' and alatila in ('J','A','C')))
					AND lasku.tunnus in ($tilausnumero)
					ORDER BY osasto
					LIMIT 1";
		$varastotark_res = mysql_query ( $query ) or pupe_error ( $query );
		$varastotark_row = mysql_fetch_assoc ( $varastotark_res );
		
		//katsotaan onko jo annettu pakkaamolokero vastaavalle SIIRTOLISTALLE, niit‰ saa/pit‰‰ yhdist‰‰
		$query = " 	SELECT lasku.pakkaamo
					FROM lasku
					JOIN pakkaamo ON (pakkaamo.yhtio = lasku.yhtio and pakkaamo.tunnus = lasku.pakkaamo)
					WHERE lasku.$logistiikka_yhtiolisa
					AND lasku.ytunnus = '$varastotark_row[ytunnus]'
					AND lasku.toim_ovttunnus = '$varastotark_row[toim_ovttunnus]'
					AND lasku.toim_nimi = '$varastotark_row[toim_nimi]'
					AND lasku.toim_nimitark = '$varastotark_row[toim_nimitark]'
					AND lasku.nimi = '$varastotark_row[nimi]'
					AND lasku.nimitark = '$varastotark_row[nimitark]'
					AND lasku.toim_osoite = '$varastotark_row[toim_osoite]'
					AND lasku.toim_postitp = '$varastotark_row[toim_postitp]'
					AND lasku.toim_maa = '$varastotark_row[toim_maa]'
					AND lasku.toimitustapa = '$varastotark_row[toimitustapa]'
					AND lasku.varasto = '$varastotark_row[varasto]'
					AND lasku.pakkaamo > 0
					AND lasku.tila in ('G')
					AND lasku.alatila in ('A','C')
					ORDER BY pakkaamo.pakkaamon_prio, pakkaamo.prio
					LIMIT 1";
		$vanhat_res = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $vanhat_res ) > 0) {
			$split_pakkaamo_row = mysql_fetch_assoc ( $vanhat_res );
			
			if (isset ( $update ) and $update != '') {
				$query = "	UPDATE lasku SET
							pakkaamo = '$split_pakkaamo_row[pakkaamo]'
							WHERE yhtio = '$kukarow[yhtio]'
							AND tunnus in ($tilausnumero)";
				$pakkaamo_insert_res = mysql_query ( $query ) or pupe_error ( $query );
			}
			
			return $split_pakkaamo_row ['pakkaamo'];
		}
		
		$pakkaamotark_wherelisa = '';
		
		if ($yhtiorow ['pakkaamolokerot'] == 'K') {
			$pakkaamotark_wherelisa = ' AND varaston_tulostimet.pakkaamo = vanha_varaston_tulostimet.pakkaamo ';
		}
		
		// Katsotaan onko n‰it‰ tilauksia laitettu jo joku osa jonnekin lokeroon samassa pakkaamossa ja valitaan paras lokero
		$query = "	SELECT pakkaamo.tunnus
					FROM lasku
					JOIN varaston_tulostimet ON (varaston_tulostimet.yhtio = lasku.yhtio and varaston_tulostimet.nimi = lasku.tulostusalue)
					JOIN lasku vanha_lasku ON (vanha_lasku.yhtio = lasku.yhtio and vanha_lasku.vanhatunnus = lasku.vanhatunnus and vanha_lasku.tunnus not in ($tilausnumero))
					JOIN varaston_tulostimet vanha_varaston_tulostimet ON (vanha_varaston_tulostimet.yhtio = vanha_lasku.yhtio and vanha_varaston_tulostimet.nimi = vanha_lasku.tulostusalue)
					JOIN pakkaamo ON (pakkaamo.yhtio = vanha_lasku.yhtio and pakkaamo.tunnus = vanha_lasku.pakkaamo)
					WHERE lasku.$logistiikka_yhtiolisa
					AND ((lasku.tila in ('N','L') and lasku.alatila = 'A') or (lasku.tila = 'L' and lasku.alatila = 'C') or (lasku.tila = 'G' and lasku.alatila in ('J','A','C')))
					AND lasku.vanhatunnus != 0
					AND lasku.tunnus in ($tilausnumero)
					$pakkaamotark_wherelisa
					ORDER BY pakkaamo.pakkaamon_prio, pakkaamo.prio
					LIMIT 1";
		$pakkaamotark_res = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $pakkaamotark_res ) == 1) {
			$split_pakkaamo_row = mysql_fetch_assoc ( $pakkaamotark_res );
			
			if (isset ( $update ) and $update != '') {
				$query = "	UPDATE lasku SET
							pakkaamo = '$split_pakkaamo_row[tunnus]'
							WHERE yhtio = '$kukarow[yhtio]'
							AND tunnus in ($tilausnumero)";
				$pakkaamo_insert_res = mysql_query ( $query ) or pupe_error ( $query );
			}
			
			return $split_pakkaamo_row ['tunnus'];
		} else {
			
			// listataan kaikki pakkaamot tilauksen tulostusalueelta
			$query = "	SELECT pakkaamo.lokero, pakkaamo.nimi, group_concat(distinct pakkaamo.tunnus) tunnus, group_concat(distinct pakkaamo.varasto) varasto
						FROM pakkaamo
						JOIN varaston_tulostimet ON (varaston_tulostimet.yhtio = pakkaamo.yhtio and varaston_tulostimet.nimi = '$varastotark_row[tulostusalue]')
						WHERE pakkaamo.$logistiikka_yhtiolisa
						AND pakkaamo.nimi = varaston_tulostimet.pakkaamo
						GROUP BY lokero, nimi
						ORDER BY pakkaamon_prio ASC, prio ASC";
			$etsitaan_pakkaamo_res = mysql_query ( $query ) or pupe_error ( $query );
			
			$pienin_maara = 99999;
			$pienin_maara_tunnus = '';
			
			while ( $etsitaan_pakkaamo_row = mysql_fetch_assoc ( $etsitaan_pakkaamo_res ) ) {
				$loytyyko_varasto = '';
				
				foreach ( explode ( ',', $etsitaan_pakkaamo_row ['varasto'] ) as $varasto ) {
					// katsotaan l‰ytyyk‰ tilauksella oleva varasto loopattavista varastoista
					if ($varastotark_row ['varasto'] == $varasto) {
						$loytyyko_varasto = 'l‰ytyi!';
						break;
					}
				}
				
				if ($loytyyko_varasto != '') {
					
					// lasketaan montako tilausta on lokerossa
					$query = "	SELECT count(*) kpl
								FROM lasku
								WHERE lasku.$logistiikka_yhtiolisa
								AND ((lasku.tila in ('N','L') and lasku.alatila = 'A') or (lasku.tila = 'L' and lasku.alatila = 'C') or (lasku.tila = 'G' and lasku.alatila in ('J','A','C')))
								AND lasku.pakkaamo in ($etsitaan_pakkaamo_row[tunnus])";
					$paljon_laskuja_lokerossa_res = mysql_query ( $query ) or pupe_error ( $query );
					$paljon_laskuja_lokerossa_row = mysql_fetch_assoc ( $paljon_laskuja_lokerossa_res );
					
					// otetaan talteen pienin kpl m‰‰r‰ll‰ oleva lokero
					if ($paljon_laskuja_lokerossa_row ['kpl'] < $pienin_maara) {
						$pienin_maara = ( int ) $paljon_laskuja_lokerossa_row ['kpl'];
						$pienin_maara_tunnus = $etsitaan_pakkaamo_row ['tunnus'];
					}
					
					// lopetetaan looppi jos l‰ydet‰‰n tyhj‰ lokero
					if ($pienin_maara == 0) {
						break;
					}
				}
			}
			
			if ($pienin_maara < 99999) {
				
				// katsotaan mik‰ lokerotunnuksista oli k‰ytt‰j‰n yrityksen oma
				$query = "	SELECT tunnus
							FROM pakkaamo
							WHERE yhtio = '$kukarow[yhtio]'
							AND tunnus in ($pienin_maara_tunnus)";
				$pakkaamo_insert_res = mysql_query ( $query ) or pupe_error ( $query );
				$pakkaamo_insert_row = mysql_fetch_assoc ( $pakkaamo_insert_res );
				
				if (isset ( $update ) and $update != '') {
					// p‰ivitet‰‰n pakkaamotunnus tilauksille
					$query = "	UPDATE lasku SET
								pakkaamo = '$pakkaamo_insert_row[tunnus]'
								WHERE yhtio = '$kukarow[yhtio]'
								AND tunnus in ($tilausnumero)";
					$pakkaamo_insert_res = mysql_query ( $query ) or pupe_error ( $query );
				}
				
				return $pakkaamo_insert_row ['tunnus'];
			}
			
			return 0;
		}
	}
}

if (! function_exists ( "laheta_tilausvahvistus" )) {
	function laheta_tilausvahvistus($laskurow) {
		
		// globaaliin pit‰‰ laittaa kaikki mit‰ tulosta_lahete.inciss‰kin.. :(
		global $asrow, $boldi, $iso, $jtid, $kala, $kala, $kateinen, $kateistyyppi, $kieli, $kukarow, $kukarow, $lahetetyyppi, $laskurow, $norm, $p, $page, $page, $pdf, $perheid, $pieni, $pieni_boldi, $rectparam, $returnvalue, $rivinkorkeus, $rivinkorkeus, $rivinumerot, $row, $sivu, $summa, $tee, $toim, $useita, $viite, $yhtiorow, $yhtiorow, $futurtilvahhost, $futurtilvahuser, $futurtilvahpass, $tilvahhost, $tilvahuser, $tilvahpass, $tilvahpath, $faxhost, $faxuser, $faxpass, $faxpath;
		
		// L‰HETET‰‰N TILAUSVAHVISTUS
		if (strpos ( $laskurow ['tilausvahvistus'], '6' ) !== FALSE) {
			$naytatvale = 6; // jos meill‰ on tilausvahvistuksessa kutonen, niin tehd‰‰n customoitu tilausvahvistus
		} elseif (strpos ( $laskurow ['tilausvahvistus'], '5' ) !== FALSE) {
			$naytatvale = 5; // jos mell‰ on tilausvahvistuksessa vitonen, niin haetaan hinnat toisesta pupesta
		} elseif (strpos ( $laskurow ['tilausvahvistus'], '4' ) !== FALSE) {
			$naytatvale = 4; // jos mell‰ on tilausvahvistuksessa nelonen, ei haluta n‰hd‰ alennuksia, n‰ytet‰‰n tilausrivin hinta ja rivihinta
		} elseif (strpos ( $laskurow ['tilausvahvistus'], '3' ) !== FALSE) {
			$naytatvale = 3; // jos mell‰ on tilausvahvistuksessa kolmonen, ei haluta n‰hd‰ hintoja, pelk‰st‰‰n kpl-m‰‰r‰t
		} elseif (strpos ( $laskurow ['tilausvahvistus'], '2' ) !== FALSE) {
			$naytatvale = 2; // jos mell‰ on tilausvahvistuksessa kakkonen, ei haluta n‰h‰ aleja
		} elseif (strpos ( $laskurow ['tilausvahvistus'], '1' ) !== FALSE) {
			$naytatvale = 1; // jos mell‰ on tilausvahvistuksessa ykk‰nen, halutaan n‰h‰ alet
		} elseif (strpos ( $yhtiorow ['tilausvahvistustyyppi'], '6' ) !== FALSE) {
			$naytatvale = 6; // jos meill‰ on tilausvahvistuksessa kutonen, niin tehd‰‰n customoitu tilausvahvistus
		} elseif (strpos ( $yhtiorow ['tilausvahvistustyyppi'], '5' ) !== FALSE) {
			$naytatvale = 5; // jos mell‰ on tilausvahvistuksessa vitonen, niin haetaan hinnat toisesta pupesta
		} elseif (strpos ( $yhtiorow ['tilausvahvistustyyppi'], '4' ) !== FALSE) {
			$naytatvale = 4; // jos mell‰ on tilausvahvistuksessa nelonen, ei haluta n‰hd‰ alennuksia, n‰ytet‰‰n tilausrivin hinta ja rivihinta
		} elseif (strpos ( $yhtiorow ['tilausvahvistustyyppi'], '3' ) !== FALSE) {
			$naytatvale = 3; // jos mell‰ on tilausvahvistuksessa kolmonen, ei haluta n‰hd‰ hintoja, pelk‰st‰‰n kpl-m‰‰r‰t
		} elseif (strpos ( $yhtiorow ['tilausvahvistustyyppi'], '2' ) !== FALSE) {
			$naytatvale = 2; // jos mell‰ on tilausvahvistuksessa kakkonen, ei haluta n‰h‰ aleja
		} else {
			$naytatvale = 1; // halutaan n‰h‰ alet
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'E' ) !== FALSE) {
			require ("tilausvahvistus-edi.inc");
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'S' ) !== FALSE) {
			require ("tilausvahvistus-email.inc");
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'F' ) !== FALSE) {
			require ("tilausvahvistus-fax.inc");
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'O' ) !== FALSE) {
			require ("tilausvahvistus-email.inc");
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'U' ) !== FALSE) {
			require ("tilausvahvistus-futursoft.inc");
		}
		
		if (strpos ( $laskurow ['tilausvahvistus'], 'K' ) !== FALSE) {
			$query = "	SELECT komento
						FROM kirjoittimet
						WHERE yhtio = '$kukarow[yhtio]' and
						tunnus = '$kukarow[kirjoitin]'";
			$tilvares = mysql_query ( $query ) or pupe_error ( $query );
			
			if ($tilvakir = mysql_fetch_assoc ( $tilvares )) {
				$komento ["Tilausvahvistus"] = $tilvakir ["komento"];
				
				$toim_save = $toim;
				if ($toim != "YLLAPITOSOPIMUS")
					$toim = "TILAUSVAHVISTUS";
				
				require ("tulosta_tilausvahvistus_pdf.inc");
				$toim = $toim_save;
			}
		}
		
		if ($yhtiorow ['tilausvahvistus_tallenna'] == 'K' and $tilausvahvistus_tallenna != '') {
			if (stristr ( basename ( $tilausvahvistus_tallenna ), ".pdf" )) {
				$liite_tyyppi = "application/pdf";
			} else {
				$liite_tyyppi = "text/plain";
			}
			
			$file ["name"] = basename ( $tilausvahvistus_tallenna );
			$file ["type"] = $liite_tyyppi;
			$file ["tmp_name"] = $tilausvahvistus_tallenna;
			$file ["error"] = 0;
			$file ["size"] = filesize ( $tilausvahvistus_tallenna );
			
			$_FILES ['tilvah_liite'] = $file;
			
			$liitetied_id = tallenna_liite ( 'tilvah_liite', 'lasku', $laskurow ['tunnus'], t ( 'Myyntilaskun tilausvahvistus' ) );
			
			//poistetaan tmp file samantien kuleksimasta...
			system ( "rm -f " . basename ( $tilausvahvistus_tallenna ) );
		}
	}
}

// T‰m‰ funktio k‰‰nt‰‰ sanoja sanakirjasta
if (! function_exists ( "t" )) {
	function t($stringi, $kieli = "") {
		// tarvitaan yhti‰rowta, kukarowta ja tieto slaven:n k‰yt‰st‰
		global $yhtiorow, $kukarow, $useslave, $link, $verkkokauppa, $kaannetyt_sanat;
		
		require ("salasanat.php");
		
		$useslave = ( int ) $useslave;
		
		if (isset ( $slavedb )) {
			if ($slavedb [$useslave] == '')
				$useslave = 0;
		} else {
			$useslave = 0;
		}
		
		if (trim ( $kieli ) != '') {
			$indeksi = trim ( strtolower ( $kieli ) );
		} elseif (isset ( $kukarow ["kieli"] ) and trim ( $kukarow ["kieli"] ) != '') {
			$indeksi = trim ( strtolower ( $kukarow ["kieli"] ) );
		} else {
			$indeksi = "fi";
		}
		
		// Voi olla, ett‰ k‰yt‰mme slavea ja INSERT ei siis onnistu (insert vain jos ei fi)
		if ($useslave > 0 and $indeksi != 'fi') {
			unset ( $link );
			$link = mysql_connect ( $dbhost, $dbuser, $dbpass ) or die ( "Ongelma tietokantapalvelimessa $dbhost" );
			mysql_select_db ( $dbkanta, $link ) or die ( "Tietokantaa $dbkanta l‰ydy palvelimelta (functions.inc 1)!" );
		}
		
		if ($indeksi != 'fi') {
			$sanakirjaquery = "SELECT fi, $indeksi, tunnus FROM sanakirja WHERE fi = BINARY '$stringi'";
			$sanakirjaresult = mysql_query ( $sanakirjaquery, $link ) or pupe_error ( $sanakirjaquery );
			
			if (isset ( $kaannetyt_sanat ) and ! in_array ( $stringi, $kaannetyt_sanat ))
				$kaannetyt_sanat [] = $stringi;
			
			if (mysql_num_rows ( $sanakirjaresult ) > 0) {
				$sanakirjarow = mysql_fetch_assoc ( $sanakirjaresult );
				
				if (isset ( $sanakirjarow [$indeksi] ) and trim ( $sanakirjarow [$indeksi] ) != '') {
					$stringi = $sanakirjarow [$indeksi];
				} else {
					if ($indeksi == 'ru') {
						$stringi = t ( $stringi, "EN" );
					} else {
						$stringi = $sanakirjarow ["fi"];
					}
				}
				
				//P‰ivitet‰‰n aikaleima
				if ($verkkokauppa == "") {
					$sanakirjaqueryupd = "UPDATE sanakirja SET aikaleima=now(), kysytty=kysytty+1 WHERE tunnus='$sanakirjarow[tunnus]'";
					$sanakirjaresultupd = mysql_query ( $sanakirjaqueryupd, $link ) or pupe_error ( $sanakirjaqueryupd );
				}
			} elseif ($verkkokauppa == "") {
				$sanakirjaquery = "INSERT INTO sanakirja SET fi = '$stringi', aikaleima=now(), kysytty=1, laatija='$kukarow[kuka]', luontiaika=now()";
				$sanakirjaresult = mysql_query ( $sanakirjaquery, $link ) or pupe_error ( $sanakirjaquery );
			}
		} elseif (isset ( $kaannetyt_sanat ) and ! in_array ( $stringi, $kaannetyt_sanat )) {
			$kaannetyt_sanat [] = $stringi;
		}
		
		if ($useslave > 0) { //Palautetaan slave k‰ytt‰‰n
			unset ( $link );
			$link = mysql_connect ( $slavedb [$useslave], $slaveuser [$useslave], $slavepass [$useslave] ) or die ( "Ongelma tietokantapalvelimessa: '$slavedb[$useslave]'" );
			mysql_select_db ( $dbkanta ) or die ( "Tietokantaa $dbkanta l‰ydy palvelimelta (functions.inc 2)!" );
		}
		
		//	Palautetaan muotoiltu stringi!!!
		if (func_num_args () > 2) {
			$arg = func_get_args ();
			return sprintf ( $stringi, $arg [2], $arg [3], $arg [4], $arg [5], $arg [6] );
		} else {
			return $stringi;
		}
	}
}

// T‰m‰ funktio hakee ja k‰‰nt‰‰ avainsanoja
if (! function_exists ( "t_avainsana" )) {
	function t_avainsana($laji, $kieli = '', $where = '', $yhtio = '', $eivielakaytossa = '', $return = "") {
		global $kukarow, $yhtiorow, $link;
		
		$laji = mysql_real_escape_string ( $laji );
		
		if ($kieli == "") {
			$kieli = $kukarow ["kieli"];
		} else {
			$kieli = mysql_real_escape_string ( $kieli );
		}
		
		if ($where != "") {
			$wherelisa = $where;
		} else {
			$wherelisa = "";
		}
		
		if ($yhtio != "") {
			$yhtiolisa = " avainsana.yhtio in ($yhtio) ";
		} else {
			$yhtiolisa = " avainsana.yhtio = '$kukarow[yhtio]' ";
		}
		
		if ($return != "") {
			$kielilisa = $return;
			
			if ($return != "selite") {
				$fallback = "";
			}
		} else {
			$kielilisa = "selitetark";
		}
		
		if (stripos ( $wherelisa, "ORDER BY" ) === FALSE) {
			$query = "	SELECT distinct selite
						from avainsana
						where $yhtiolisa
						and laji = '$laji'
						and kieli = '$yhtiorow[kieli]'";
			$result = mysql_query ( $query, $link ) or pupe_error ( $query );
			
			$onko_numero = $onko_alpha = 0;
			
			while ( $row = mysql_fetch_assoc ( $result ) ) {
				if (is_numeric ( $row ["selite"] )) {
					$onko_numero ++;
				} else {
					$onko_alpha ++;
				}
			}
			
			if ($onko_numero > $onko_alpha) {
				$orderlisa = " ORDER BY avainsana.jarjestys, avainsana.selite+0 ";
			} else {
				$orderlisa = " ORDER BY avainsana.jarjestys, avainsana.selite ";
			}
		} else {
			$orderlisa = "";
		}
		
		$query = "	SELECT DISTINCT avainsana.*,
					IFNULL((SELECT if (avainsana_kieli.$kielilisa = '', NULL, avainsana_kieli.$kielilisa)
					FROM avainsana as avainsana_kieli
					WHERE avainsana_kieli.yhtio = avainsana.yhtio
					and avainsana_kieli.laji = avainsana.laji
					and avainsana_kieli.perhe = avainsana.perhe
					and avainsana_kieli.perhe > 0
					and avainsana_kieli.kieli = '$kieli' LIMIT 1), avainsana.$kielilisa) $kielilisa
					FROM avainsana
					WHERE $yhtiolisa
					and avainsana.laji = '$laji'
					and avainsana.kieli in ('$yhtiorow[kieli]', '')
					$wherelisa
					$orderlisa";
		$result = mysql_query ( $query, $link ) or pupe_error ( $query );
		
		if ($return != "") {
			$row = mysql_fetch_assoc ( $result );
			return $row [$return];
		}
		
		return $result;
	}
}

// T‰m‰ funktio k‰‰nt‰‰ tuotteen_avainsanoja.
if (! function_exists ( 't_tunnus_avainsanat' )) {
	function t_tunnus_avainsanat($row, $laji, $avainsanalaji, $kieli = '') {
		
		global $kukarow, $yhtiorow;
		
		$laji = mysql_real_escape_string ( trim ( $laji ) );
		$kieli = mysql_real_escape_string ( trim ( $kieli ) );
		
		// Jos tyhj‰‰ niin unohdetaan koko juttu
		if (! isset ( $row ["tunnus"] ) or $laji == "") {
			return;
		}
		
		if ($kieli == "")
			$kieli = $kukarow ["kieli"];
		if ($kieli == "")
			$kieli = $yhtiorow ["kieli"];
		
		//	Jos kielet matchaa niin palautetaan suoraan vastaus
		if (strtoupper ( $kieli ) == strtoupper ( $yhtiorow ["kieli"] )) {
			return $row [$laji];
		}
		
		// Tutkitaan onko meill‰ k‰‰nn‰s
		$query = "	SELECT *
					FROM avainsana
					WHERE yhtio = '$kukarow[yhtio]'
					and kieli = '$kieli'
					and laji = '$avainsanalaji'
					and selite = '$row[tunnus]'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $result ) == 1) {
			$row = mysql_fetch_assoc ( $result );
			// jos l‰ydettiin k‰‰nn‰s palautetaan se
			return $row ["selitetark"];
		}
		
		// muuten palautetaan se mit‰ kysyttiin
		return $row [$laji];
	}
}

// T‰m‰ funktio k‰‰nt‰‰ tuotteen_avainsanoja.
if (! function_exists ( 't_tuotteen_avainsanat' )) {
	function t_tuotteen_avainsanat($tuoterow, $laji, $kieli = '') {
		
		global $kukarow, $yhtiorow;
		
		$laji = mysql_real_escape_string ( trim ( $laji ) );
		$kieli = mysql_real_escape_string ( trim ( $kieli ) );
		
		// Jos tyhj‰‰ niin unohdetaan koko juttu
		if (! isset ( $tuoterow ["tuoteno"] ) or $laji == "") {
			return;
		}
		
		if ($kieli == "")
			$kieli = $kukarow ["kieli"];
		if ($kieli == "")
			$kieli = $yhtiorow ["kieli"];
		
		//	Jos kielet matchaa niin palautetaan suoraan vastaus
		if (strtoupper ( $kieli ) == strtoupper ( $yhtiorow ["kieli"] )) {
			return $tuoterow [$laji];
		}
		
		// Tutkitaan onko meill‰ k‰‰nn‰s
		$query = "	SELECT *
					FROM tuotteen_avainsanat USE INDEX (yhtio_kieli_laji_tuoteno)
					WHERE yhtio = '$kukarow[yhtio]'
					and kieli = '$kieli'
					and laji = '$laji'
					and tuoteno = '$tuoterow[tuoteno]'";
		$result = mysql_query ( $query ) or pupe_error ( $query );
		
		if (mysql_num_rows ( $result ) == 1) {
			$row = mysql_fetch_assoc ( $result );
			// jos l‰ydettiin k‰‰nn‰s palautetaan se
			return $row ["selite"];
		}
		
		// muuten palautetaan se mit‰ kysyttiin
		return $tuoterow [$laji];
	}
}

// T√